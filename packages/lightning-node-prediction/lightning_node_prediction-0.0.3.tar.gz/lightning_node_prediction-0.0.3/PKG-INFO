Metadata-Version: 2.1
Name: lightning_node_prediction
Version: 0.0.3
Summary: predictive analysis
Home-page: https://github.com/Podproza/lightning_node_prediction
Author: owuracoder
Author-email: richagyen20@yahoo.com
License: Apache Software License 2.0
Keywords: nbdev jupyter notebook python
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: License :: OSI Approved :: Apache Software License
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Provides-Extra: dev
License-File: LICENSE

Lightning Node Prediction Analysis
================

<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->

This package contains useful functionalities to aid in analyzing
lightning transactions.

## Install

``` sh
pip install lightning_node_prediction
```

## How to use

Provide a path to the lightning transactions. Kindly note that the file
should be in a `CSV` format

``` python
light = LnPreds('~/Documents/crypto-projects/data_sets/elenPay_data.csv')
```

Plot a chart showing the number of merchants you want to analyze the
trendlines by using the `num_merch` parameter. You can also specify the
number of columns you want to display the merchants by using the `cols`
parameter. Merchants are sorted based on their overall transactions
amounts with the merchant with the hightest transactions in the first
place.

``` python
light.plt_yrs_trnd(num_merch=4,cols=2)
```

You can also zoom-in on a particular merchant by specifying a merchant
and a year using the `merch_id` and `yr` parameters. Moreover, you can
also specify the number of months and the columns for the display using
the `num_mnths` and `cols` parameters.

``` python
merchant_id=10
yr='2019'
```

``` python
light.plt_wks_trnd(merch_id=merchant_id,yr=yr,num_mnths=4,cols=2)
```

You can also determine the number of outputs and inputs for each day
based on the merchant,year,number of months and the column display. Use
the `merch_id` parameter for the merchant id. `yr` for the year of
interest and `num_mnths` for the number of months needed. `cols` is used
for the display output of your charts

``` python
light.plt_wks_stack(merch_id=merchant_id,yr=yr,num_mnths=4,cols=2)
```

The `plt_dy_mnth` method takes as input the start year:`strt_yr`, Number
of years:`numb_yrs`, start month:`strt_mnth` and number of
months:`numb_mnths`. This methods plots a comparative balance for each
year based on the selected months

``` python
light.plt_dy_mnth(strt_yr=1,numb_yrs=3,strt_mnth=1,numb_mnths=3)
```
