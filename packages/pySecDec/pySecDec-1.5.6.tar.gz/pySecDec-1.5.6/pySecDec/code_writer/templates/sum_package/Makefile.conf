# Defines variables needed to build the library.
# ----------------------------------------------

# enables debugging flags
# export DEBUG = 1

# set name of the integral
NAME = %(name)s

# list of integrals to sum
INTEGRALS = %(integral_names)s

# common .PHONY variables
.PHONY : libs pylink source clean very-clean

# set global default goal
.DEFAULT_GOAL = pylink

# get path to the top level directory
TOPDIR = $(dir $(abspath $(lastword $(MAKEFILE_LIST))))

# pySecDecContrib
SECDEC_CONTRIB = %(contrib_dirname)s

# c++ compiler
CXX ?= g++

# Maintain old behaviour of SECDEC_WITH_CUDA if SECDEC_WITH_CUDA is defined and SECDEC_WITH_CUDA_FLAGS is not defined
ifdef SECDEC_WITH_CUDA
SECDEC_WITH_CUDA_FLAGS ?= -arch=${SECDEC_WITH_CUDA}
endif

# c++ compiler flags
ifeq ($(DEBUG),1)
ifdef SECDEC_WITH_CUDA_FLAGS
CXXFLAGS = -Xcompiler "-O0 -ggdb3 -fsanitize=address -fno-omit-frame-pointer" -std=c++14 -I. -I$(TOPDIR)
else
CXXFLAGS = -O0 -ggdb3 -fsanitize=address -fno-omit-frame-pointer -std=c++14 -I. -I$(TOPDIR)
endif
else
CXXFLAGS = -std=c++14 -O2 -I. -I$(TOPDIR)
endif
CXXFLAGS += -I"$(SECDEC_CONTRIB)/include"
ifdef SECDEC_WITH_CUDA_FLAGS
CXXFLAGS += -x cu $(SECDEC_WITH_CUDA_FLAGS) -DSECDEC_WITH_CUDA
endif

# linker flags
ifeq ($(DEBUG),1)
LDFLAGS = -g -fsanitize=address -L"$(SECDEC_CONTRIB)/lib"
else
LDFLAGS = -L"$(SECDEC_CONTRIB)/lib"
endif
ifdef SECDEC_WITH_CUDA_FLAGS
LDFLAGS += $(SECDEC_WITH_CUDA_FLAGS)
else
LDFLAGS += -pthread
endif
LDFLAGS += -lgsl -lgslcblas -lcuba -lm
SUM_LDFLAGS = $(LDFLAGS) -lginac -lcln -lm

# implicit rule to build object files
ifdef SECDEC_WITH_CUDA_FLAGS
%%.o : %%.cpp
	$(CXX) -dc $(CXXFLAGS) -Xcompiler -fPIC $< -o $@
else
%%.o : %%.cpp
	$(CXX) -c $(CXXFLAGS) -fPIC $< -o $@
endif
