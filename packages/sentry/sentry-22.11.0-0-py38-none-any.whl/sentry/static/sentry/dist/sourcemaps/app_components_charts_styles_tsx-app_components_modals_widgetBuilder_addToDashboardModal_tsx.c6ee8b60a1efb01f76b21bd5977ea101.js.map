{"version":3,"file":"chunks/app_components_charts_styles_tsx-app_components_modals_widgetBuilder_addToDashboardModal_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/charts/styles.tsx","webpack:///./app/components/modals/widgetBuilder/addToDashboardModal.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\n\nexport const SubHeading = styled('h3')`\n  font-size: ${p => p.theme.fontSizeLarge};\n  font-weight: normal;\n  color: ${p => p.theme.textColor};\n  margin: 0;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nexport const SectionHeading = styled('h4')`\n  display: inline-grid;\n  grid-auto-flow: column;\n  gap: ${space(1)};\n  align-items: center;\n  color: ${p => p.theme.subText};\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin: ${space(1)} 0;\n`;\n\nexport const SectionValue = styled('span')`\n  color: ${p => p.theme.subText};\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin-right: ${space(1)};\n`;\n\nexport const InlineContainer = styled('div')`\n  display: grid;\n  align-items: center;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-auto-flow: column;\n    grid-column-gap: ${space(1)};\n  }\n`;\n\nexport const ChartControls = styled('div')`\n  padding: ${space(1)} ${space(1)} ${space(1)} ${space(3)};\n  border-top: 1px solid ${p => p.theme.border};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: flex;\n    justify-content: space-between;\n    flex-wrap: wrap;\n  }\n`;\n\n// Header element for charts within panels.\nexport const HeaderTitle = styled('div')`\n  display: inline-grid;\n  grid-auto-flow: column;\n  gap: ${space(1)};\n  ${p => p.theme.text.cardTitle};\n  color: ${p => p.theme.headingColor};\n  align-items: center;\n`;\n\n// Header element for charts within panels\n// This header can be rendered while the chart is still loading\nexport const HeaderTitleLegend = styled(HeaderTitle)`\n  background-color: ${p => p.theme.background};\n  border-bottom-right-radius: ${p => p.theme.borderRadius};\n  position: absolute;\n  z-index: 1;\n`;\n\n// Used for rendering total value of a chart right below the HeaderTitleLegend\nexport const HeaderValue = styled('div')`\n  display: inline-grid;\n  grid-auto-flow: column;\n  gap: ${space(1)};\n  align-items: baseline;\n  background-color: ${p => p.theme.background};\n  position: absolute;\n  top: 40px;\n  z-index: 1;\n  font-size: ${p => p.theme.headerFontSize};\n`;\n\nexport const ChartContainer = styled('div')`\n  padding: ${space(2)} ${space(3)};\n`;\n","import {useEffect, useState} from 'react';\nimport {InjectedRouter} from 'react-router';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {Location, Query} from 'history';\n\nimport {\n  fetchDashboard,\n  fetchDashboards,\n  updateDashboard,\n} from 'sentry/actionCreators/dashboards';\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport SelectControl from 'sentry/components/forms/controls/selectControl';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {DateString, Organization, PageFilters, SelectValue} from 'sentry/types';\nimport handleXhrErrorResponse from 'sentry/utils/handleXhrErrorResponse';\nimport {MetricsCardinalityProvider} from 'sentry/utils/performance/contexts/metricsCardinality';\nimport {MEPSettingProvider} from 'sentry/utils/performance/contexts/metricsEnhancedSetting';\nimport useApi from 'sentry/utils/useApi';\nimport {\n  DashboardDetails,\n  DashboardListItem,\n  DisplayType,\n  MAX_WIDGETS,\n  Widget,\n} from 'sentry/views/dashboardsV2/types';\nimport {\n  eventViewFromWidget,\n  getDashboardFiltersFromURL,\n  getSavedFiltersAsPageFilters,\n  getSavedPageFilters,\n} from 'sentry/views/dashboardsV2/utils';\nimport {NEW_DASHBOARD_ID} from 'sentry/views/dashboardsV2/widgetBuilder/utils';\nimport WidgetCard from 'sentry/views/dashboardsV2/widgetCard';\nimport {OrganizationContext} from 'sentry/views/organizationContext';\nimport {MetricsDataSwitcher} from 'sentry/views/performance/landing/metricsDataSwitcher';\n\ntype WidgetAsQueryParams = Query & {\n  defaultTableColumns: string[];\n  defaultTitle: string;\n  defaultWidgetQuery: string;\n  displayType: DisplayType;\n  environment: string[];\n  project: number[];\n  source: string;\n  end?: DateString;\n  start?: DateString;\n  statsPeriod?: string | null;\n};\n\nexport type AddToDashboardModalProps = {\n  location: Location;\n  organization: Organization;\n  router: InjectedRouter;\n  selection: PageFilters;\n  widget: Widget;\n  widgetAsQueryParams: WidgetAsQueryParams;\n};\n\ntype Props = ModalRenderProps & AddToDashboardModalProps;\n\nconst SELECT_DASHBOARD_MESSAGE = t('Select a dashboard');\n\nfunction AddToDashboardModal({\n  Header,\n  Body,\n  Footer,\n  closeModal,\n  location,\n  organization,\n  router,\n  selection,\n  widget,\n  widgetAsQueryParams,\n}: Props) {\n  const api = useApi();\n  const [dashboards, setDashboards] = useState<DashboardListItem[] | null>(null);\n  const [selectedDashboard, setSelectedDashboard] = useState<DashboardDetails | null>(\n    null\n  );\n  const [selectedDashboardId, setSelectedDashboardId] = useState<string | null>(null);\n\n  useEffect(() => {\n    // Track mounted state so we dont call setState on unmounted components\n    let unmounted = false;\n\n    fetchDashboards(api, organization.slug).then(response => {\n      // If component has unmounted, dont set state\n      if (unmounted) {\n        return;\n      }\n\n      setDashboards(response);\n    });\n\n    return () => {\n      unmounted = true;\n    };\n  }, [api, organization.slug]);\n\n  useEffect(() => {\n    // Track mounted state so we dont call setState on unmounted components\n    let unmounted = false;\n\n    if (selectedDashboardId === NEW_DASHBOARD_ID || selectedDashboardId === null) {\n      setSelectedDashboard(null);\n    } else {\n      fetchDashboard(api, organization.slug, selectedDashboardId).then(response => {\n        // If component has unmounted, dont set state\n        if (unmounted) {\n          return;\n        }\n\n        setSelectedDashboard(response);\n      });\n    }\n\n    return () => {\n      unmounted = true;\n    };\n  }, [api, organization.slug, selectedDashboardId]);\n\n  function handleGoToBuilder() {\n    const pathname =\n      selectedDashboardId === NEW_DASHBOARD_ID\n        ? `/organizations/${organization.slug}/dashboards/new/widget/new/`\n        : `/organizations/${organization.slug}/dashboard/${selectedDashboardId}/widget/new/`;\n\n    router.push({\n      pathname,\n      query: {\n        ...widgetAsQueryParams,\n        ...(organization.features.includes('dashboards-top-level-filter') &&\n        selectedDashboard\n          ? getSavedPageFilters(selectedDashboard)\n          : {}),\n      },\n    });\n    closeModal();\n  }\n\n  async function handleAddAndStayInDiscover() {\n    if (selectedDashboard === null) {\n      return;\n    }\n\n    let orderby = widget.queries[0].orderby;\n    if (!(DisplayType.AREA && widget.queries[0].columns.length)) {\n      orderby = ''; // Clear orderby if its not a top n visualization.\n    }\n    const query = widget.queries[0];\n\n    const newWidget = {\n      ...widget,\n      title: widget.title === '' ? t('All Events') : widget.title,\n      queries: [{...query, orderby}],\n    };\n\n    try {\n      const newDashboard = {\n        ...selectedDashboard,\n        widgets: [...selectedDashboard.widgets, newWidget],\n      };\n\n      await updateDashboard(api, organization.slug, newDashboard);\n\n      closeModal();\n      addSuccessMessage(t('Successfully added widget to dashboard'));\n    } catch (e) {\n      const errorMessage = t('Unable to add widget to dashboard');\n      handleXhrErrorResponse(errorMessage)(e);\n      addErrorMessage(errorMessage);\n    }\n  }\n\n  const canSubmit = selectedDashboardId !== null;\n\n  return (\n    <OrganizationContext.Provider value={organization}>\n      <Header closeButton>\n        <h4>{t('Add to Dashboard')}</h4>\n      </Header>\n      <Body>\n        <Wrapper>\n          <SelectControl\n            disabled={dashboards === null}\n            menuPlacement=\"auto\"\n            name=\"dashboard\"\n            placeholder={t('Select Dashboard')}\n            value={selectedDashboardId}\n            options={\n              dashboards && [\n                {label: t('+ Create New Dashboard'), value: 'new'},\n                ...dashboards.map(({title, id, widgetDisplay}) => ({\n                  label: title,\n                  value: id,\n                  disabled: widgetDisplay.length >= MAX_WIDGETS,\n                  tooltip:\n                    widgetDisplay.length >= MAX_WIDGETS &&\n                    tct('Max widgets ([maxWidgets]) per dashboard reached.', {\n                      maxWidgets: MAX_WIDGETS,\n                    }),\n                  tooltipOptions: {position: 'right'},\n                })),\n              ]\n            }\n            onChange={(option: SelectValue<string>) => {\n              if (option.disabled) {\n                return;\n              }\n              setSelectedDashboardId(option.value);\n            }}\n          />\n        </Wrapper>\n        <Wrapper>\n          {organization.features.includes('dashboards-top-level-filter')\n            ? t(\n                'Any conflicting filters from this query will be overridden by Dashboard filters. This is a preview of how the widget will appear in your dashboard.'\n              )\n            : t('This is a preview of how the widget will appear in your dashboard.')}\n        </Wrapper>\n        <MetricsCardinalityProvider organization={organization} location={location}>\n          <MetricsDataSwitcher\n            organization={organization}\n            eventView={eventViewFromWidget(\n              widget.title,\n              widget.queries[0],\n              selection,\n              widget.displayType\n            )}\n            location={location}\n            hideLoadingIndicator\n          >\n            {metricsDataSide => (\n              <MEPSettingProvider\n                location={location}\n                forceTransactions={metricsDataSide.forceTransactionsOnly}\n              >\n                <WidgetCard\n                  organization={organization}\n                  isEditing={false}\n                  widgetLimitReached={false}\n                  selection={\n                    organization.features.includes('dashboards-top-level-filter') &&\n                    selectedDashboard\n                      ? getSavedFiltersAsPageFilters(selectedDashboard)\n                      : selection\n                  }\n                  dashboardFilters={\n                    organization.features.includes('dashboards-top-level-filter')\n                      ? getDashboardFiltersFromURL(location) ?? selectedDashboard?.filters\n                      : {}\n                  }\n                  widget={widget}\n                  showStoredAlert\n                />\n              </MEPSettingProvider>\n            )}\n          </MetricsDataSwitcher>\n        </MetricsCardinalityProvider>\n      </Body>\n\n      <Footer>\n        <StyledButtonBar gap={1.5}>\n          <Button\n            onClick={handleAddAndStayInDiscover}\n            disabled={!canSubmit || selectedDashboardId === NEW_DASHBOARD_ID}\n            title={canSubmit ? undefined : SELECT_DASHBOARD_MESSAGE}\n          >\n            {t('Add + Stay in Discover')}\n          </Button>\n          <Button\n            priority=\"primary\"\n            onClick={handleGoToBuilder}\n            disabled={!canSubmit}\n            title={canSubmit ? undefined : SELECT_DASHBOARD_MESSAGE}\n          >\n            {t('Open in Widget Builder')}\n          </Button>\n        </StyledButtonBar>\n      </Footer>\n    </OrganizationContext.Provider>\n  );\n}\n\nexport default AddToDashboardModal;\n\nconst Wrapper = styled('div')`\n  margin-bottom: ${space(2)};\n`;\n\nconst StyledButtonBar = styled(ButtonBar)`\n  @media (max-width: ${props => props.theme.breakpoints.small}) {\n    grid-template-rows: repeat(2, 1fr);\n    gap: ${space(1.5)};\n    width: 100%;\n\n    > button {\n      width: 100%;\n    }\n  }\n`;\n\nexport const modalCss = css`\n  max-width: 700px;\n  margin: 70px auto;\n`;\n"],"names":["SectionHeading","space","p","theme","subText","fontSizeMedium","SectionValue","InlineContainer","breakpoints","small","ChartControls","border","HeaderTitle","text","cardTitle","headingColor","HeaderTitleLegend","background","borderRadius","HeaderValue","headerFontSize","ChartContainer","SELECT_DASHBOARD_MESSAGE","t","AddToDashboardModal","Header","Body","Footer","closeModal","location","organization","router","selection","widget","widgetAsQueryParams","api","useApi","dashboards","setDashboards","useState","selectedDashboard","setSelectedDashboard","selectedDashboardId","setSelectedDashboardId","useEffect","unmounted","fetchDashboards","slug","then","response","NEW_DASHBOARD_ID","fetchDashboard","canSubmit","value","closeButton","Wrapper","disabled","menuPlacement","name","placeholder","options","label","map","title","id","widgetDisplay","length","MAX_WIDGETS","tooltip","tct","maxWidgets","tooltipOptions","position","onChange","option","features","includes","eventView","eventViewFromWidget","queries","displayType","hideLoadingIndicator","metricsDataSide","forceTransactions","forceTransactionsOnly","isEditing","widgetLimitReached","getSavedFiltersAsPageFilters","dashboardFilters","getDashboardFiltersFromURL","filters","showStoredAlert","StyledButtonBar","gap","onClick","async","orderby","DisplayType","columns","query","newWidget","newDashboard","widgets","updateDashboard","addSuccessMessage","e","errorMessage","handleXhrErrorResponse","addErrorMessage","undefined","priority","pathname","push","getSavedPageFilters","ButtonBar","props","modalCss"],"sourceRoot":""}