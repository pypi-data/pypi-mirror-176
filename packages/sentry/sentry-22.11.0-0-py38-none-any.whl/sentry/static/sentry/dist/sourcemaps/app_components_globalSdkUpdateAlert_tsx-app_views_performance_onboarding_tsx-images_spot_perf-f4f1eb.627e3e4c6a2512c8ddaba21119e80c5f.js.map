{"version":3,"file":"chunks/app_components_globalSdkUpdateAlert_tsx-app_views_performance_onboarding_tsx-images_spot_perf-f4f1eb.xxxxxxxxxxxxxxxxxxxx.js","mappings":"23BAuBA,SAASA,EACPC,GAEA,MAAMC,GAAMC,EAAAA,EAAAA,KACNC,GAAeC,EAAAA,EAAAA,MACf,UAACC,IAAaC,EAAAA,EAAAA,MAEbC,EAAiBC,IAAsBC,EAAAA,EAAAA,WAAkB,GAE1DC,GAAqBC,EAAAA,EAAAA,cAAY,MACrCC,EAAAA,EAAAA,IAAcX,EAAK,CACjBY,eAAgBV,EAAaW,GAC7BC,QAAS,cACTC,OAAQ,aAGVC,EAAAA,EAAAA,GAA4B,sBAAuB,CAACd,iBACpDK,GAAmB,EAAM,GACxB,CAACP,EAAKE,IAEHe,GAA2BP,EAAAA,EAAAA,cAAY,KAC3CQ,EAAAA,EAAAA,cAAgCC,EAAAA,EAAAA,aAChCH,EAAAA,EAAAA,GAA4B,sBAAuB,CAACd,gBAAc,GACjE,CAACA,IAuBJ,OArBAkB,EAAAA,EAAAA,YAAU,MACRJ,EAAAA,EAAAA,GAA4B,mBAAoB,CAACd,iBAEjD,IAAImB,GAAc,EAalB,OAXAC,EAAAA,EAAAA,IAAatB,EAAK,CAChBY,eAAgBV,EAAaW,GAC7BC,QAAS,gBACRS,MAAKC,IACFH,GAIJd,IAAoBkB,EAAAA,EAAAA,IAAkBD,GAAQ,IAGzC,KACLH,GAAc,CAAI,CACnB,GACA,CAACrB,EAAKE,IAEJI,GAAoBP,EAAM2B,YAAYC,QAQT,IAAhCvB,GAAWwB,UAAUD,QAAgBvB,GAAWwB,SAAS,KAAOC,EAAAA,GAC5D9B,EAAM2B,WACN3B,EAAM2B,WAAWI,QAAOC,GACtB3B,GAAWwB,UAAUI,SAASC,SAASF,EAAOG,UAAW,QAItCC,OAAMC,GAA8B,IAAzBA,EAAEC,YAAYV,SAC3C,MAIP,QAAC,IAAK,CACJW,KAAK,OACLC,UAAQ,EACRC,UAAWzC,EAAMyC,UACjBC,eACE,QAAC,EAAAC,SAAQ,YACP,QAAC,KAAM,CACLC,SAAS,OACTC,KAAK,OACLC,OAAOC,EAAAA,EAAAA,GAAE,kCACTC,QAAStC,EAAmB,UAE3BqC,EAAAA,EAAAA,GAAE,sBAEL,gCACA,QAAC,KAAM,CAACH,SAAS,OAAOC,KAAK,OAAOG,QAAS9B,EAAyB,UACnE6B,EAAAA,EAAAA,GAAE,uBAGR,UAEAA,EAAAA,EAAAA,GACE,4FAzCE,IA6CX,CA5FShD,EAAyB,wCA8FlC,MAAMkD,GAAqCC,EAAAA,EAAAA,GAAenD,E,mUC3G1D,SAASoD,EAAgB,GAAoC,IAApC,MAACC,EAAK,SAAEC,KAAarD,GAAa,EACzD,OACE,QAAC,KAAK,IAAKA,EAAK,UACd,QAACsD,EAAS,WACPF,GAAQ,QAACG,EAAO,UAAEH,IAAmB,MACtC,QAACI,EAAS,CAACC,UAAWL,EAAM,SAAEC,QAItC,CATSF,EAAe,8BAWxB,MAAMG,GAAY,OAAO,MAAK,qBAAZ,CAAa,YAClBI,EAAAA,EAAAA,GAAM,GAAE,0CAGEC,GAAKA,EAAEC,MAAMC,YAAYC,OAAK,mKAW9BH,GAAKA,EAAEC,MAAMC,YAAYE,QAAM,wBAKhDP,GAAY,OAAO,MAAK,qBAAZ,CAAa,cAG3BG,GAAMA,EAAEF,SAAW,sBAAwB,IAAG,KAC9CE,GAAMA,EAAEF,SAAW,oBAAsB,IAAG,uBAEzBE,GAAKA,EAAEC,MAAMC,YAAYC,OAAK,cAK/CP,GAAU,OAAOC,EAAS,qBAAhB,CAAiB,8DAIrBE,EAAAA,EAAAA,GAAM,GAAE,6BAEGC,GAAKA,EAAEC,MAAMC,YAAYC,OAAK,oBAEvCJ,EAAAA,EAAAA,GAAM,GAAE,qBAKtB,G,sqCC9BA,MAAMM,EACJ,iEAEIC,GACJ,QAAC,KAAM,CAACC,UAAQ,EAACC,KAAMH,EAAoB,UACxCjB,EAAAA,EAAAA,GAAE,WAIMqB,EAAqC,CAChD,CACEtB,OAAOC,EAAAA,EAAAA,GAAE,6BACTK,OAAO,QAAC,KAAS,CAACiB,IAAKC,IACvBC,MACE,QAAC,KAAQ,WACNxB,EAAAA,EAAAA,GACC,2FAINyB,QAASP,GAEX,CACEnB,OAAOC,EAAAA,EAAAA,GAAE,oCACTK,OAAO,QAAC,KAAS,CAACiB,I,2oPAClBE,MACE,QAAC,KAAQ,WACNxB,EAAAA,EAAAA,GACC,mFAINyB,QAASP,GAEX,CACEnB,OAAOC,EAAAA,EAAAA,GAAE,mBACTK,OAAO,QAAC,KAAS,CAACiB,I,2hJAClBE,MACE,QAAC,KAAQ,WACNxB,EAAAA,EAAAA,GACC,4GAINyB,QAASP,GAEX,CACEnB,OAAOC,EAAAA,EAAAA,GAAE,wBACTK,OAAO,QAAC,KAAS,CAACiB,I,2/LAClBE,MACE,QAAC,KAAQ,WACNxB,EAAAA,EAAAA,GACC,mGAYV,SAAS0B,EAAW,GAAgC,IAAhC,aAACtE,EAAY,QAAEuE,GAAe,EAChD,MAAMzE,GAAMC,EAAAA,EAAAA,MAEN,SAAC2B,IAAY8C,EAAAA,EAAAA,MACb,SAACC,IAAYC,EAAAA,EAAAA,MAEb,sBAACC,IAAyBC,EAAAA,EAAAA,IAAelD,GAEzCmD,EAA0B7E,EAAa8E,UAAUhD,SACrD,qCAGFZ,EAAAA,EAAAA,YAAU,KAEN2D,GACkB,2BAAlBJ,EAASM,MACTJ,EAAsBK,MAAKxB,GAAKA,EAAE7C,KAAO4D,EAAQ5D,MAEjDK,EAAAA,EAAAA,cAAgCC,EAAAA,EAAAA,sBAClC,GACC,CAACwD,EAASM,KAAMJ,EAAuBJ,EAAQ5D,GAAIkE,IAkBtD,MAAMI,EAAkBV,EAAQW,SAC1BC,IAA2BF,GAC7BG,EAAAA,GAAAA,IAA8BH,GAGlC,IAAII,GACF,QAAC,KAAM,CACL5C,SAAS,UACTuB,KAAK,iEACLD,UAAQ,YAEPnB,EAAAA,EAAAA,GAAE,iBAmBP,OAfIuC,GAA4BN,IAC9BQ,GACE,QAAC,KAAM,CACL5C,SAAS,UACTI,QAASyC,IACPA,EAAMC,iBACNC,OAAOf,SAASM,KAAO,wBACvB/D,EAAAA,EAAAA,cAAgCC,EAAAA,EAAAA,sBAAsC,EACtE,UAED2B,EAAAA,EAAAA,GAAE,uBAMP,QAAC,IAAe,CAACK,OAAO,QAACwC,EAAS,CAACvB,IAAKwB,IAAkB,WACxD,wBAAK9C,EAAAA,EAAAA,GAAE,wBACP,uBACGA,EAAAA,EAAAA,GACC,4JAGJ,QAAC+C,EAAU,CAACC,IAAK,EAAE,UAChBP,GACD,QAAC,KAAM,CACL,eAAa,gCACbxC,QAASgD,WACP/E,EAAAA,EAAAA,GAA4B,8CAA+C,CACzEoE,SAAUX,EAAQW,SAClBlF,kBAEF8F,EAAAA,EAAAA,KAAkBlD,EAAAA,EAAAA,GAAE,8BAA+B,CACjDmD,SAAU,OAEZ,MAAMC,EAAO,aAAYhG,EAAaiG,QAAQ1B,EAAQ0B,kCACtD,IACE,MAAMC,QAAkBpG,EAAIqG,eAAeH,EAAK,CAACI,OAAQ,SACzDC,EAAAA,eAAAA,KACG,kBAAiBrG,EAAaiG,oBAAoB1B,EAAQ0B,QAAQC,EAAUI,aAE/EC,EAAAA,EAAAA,KASF,CARE,MAAOC,GAOP,OANAC,EAAAA,IAAiBC,IACfA,EAAMC,SAAS,QAASH,GACxBC,EAAAA,GAAwB,IAAIG,MAAM,iCAAiC,KAErEL,EAAAA,EAAAA,WACAM,EAAAA,EAAAA,KAAgBjE,EAAAA,EAAAA,GAAE,uCAEpB,GACA,UAEDA,EAAAA,EAAAA,GAAE,iCAGP,QAAC,KAAgB,CACfkE,MAAO7C,EACP8C,UAzFN,SAAuBC,EAAcjB,IACnCjF,EAAAA,EAAAA,GAA4B,iCAAkC,CAC5DkG,OACAjB,WACA/F,gBAEJ,EAoFMiH,aAlFN,SAAqBD,EAAcjB,IACjCjF,EAAAA,EAAAA,GAA4B,+BAAgC,CAC1DkG,OACAjB,WACA/F,gBAEJ,EA6EMkH,QAASrD,EACTsD,UAAUvE,EAAAA,EAAAA,GAAE,eAAe,SAE1B,QAAC,UAACwE,GAAU,SACX,QAAC,KAAM,CACL3E,SAAS,OACTI,QAAS,MACP/B,EAAAA,EAAAA,GAA4B,+BAAgC,CAACd,iBAC7DoH,GAAW,EACX,UAEDxE,EAAAA,EAAAA,GAAE,gBACI,MAKnB,CAlIS0B,EAAU,yBAoInB,MAAMmB,GAAY,OAAO,MAAK,oBAAZ,CAAa,uBACRjC,GAAKA,EAAEC,MAAMC,YAAYC,OAAK,8IAW9BH,GAAKA,EAAEC,MAAMC,YAAYE,QAAM,sCAI/BJ,GAAKA,EAAEC,MAAMC,YAAY2D,OAAK,mBAK/C1B,GAAa,OAAO2B,EAAAA,GAAS,oBAAhB,CAAiB,gHAKpC,G","sources":["webpack:///./app/components/globalSdkUpdateAlert.tsx","webpack:///./app/components/onboardingPanel.tsx","webpack:///./app/views/performance/onboarding.tsx"],"sourcesContent":["import {Fragment, useCallback, useEffect, useState} from 'react';\n\nimport {promptsCheck, promptsUpdate} from 'sentry/actionCreators/prompts';\nimport Alert, {AlertProps} from 'sentry/components/alert';\nimport {ALL_ACCESS_PROJECTS} from 'sentry/constants/pageFilters';\nimport {t} from 'sentry/locale';\nimport SidebarPanelStore from 'sentry/stores/sidebarPanelStore';\nimport {ProjectSdkUpdates} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {promptIsDismissed} from 'sentry/utils/promptIsDismissed';\nimport useApi from 'sentry/utils/useApi';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport withSdkUpdates from 'sentry/utils/withSdkUpdates';\n\nimport {SidebarPanelKey} from './sidebar/types';\nimport Button from './button';\n\ninterface InnerGlobalSdkSuggestionsProps extends AlertProps {\n  className?: string;\n  sdkUpdates?: ProjectSdkUpdates[] | null;\n}\n\nfunction InnerGlobalSdkUpdateAlert(\n  props: InnerGlobalSdkSuggestionsProps\n): React.ReactElement | null {\n  const api = useApi();\n  const organization = useOrganization();\n  const {selection} = usePageFilters();\n\n  const [showUpdateAlert, setShowUpdateAlert] = useState<boolean>(false);\n\n  const handleSnoozePrompt = useCallback(() => {\n    promptsUpdate(api, {\n      organizationId: organization.id,\n      feature: 'sdk_updates',\n      status: 'snoozed',\n    });\n\n    trackAdvancedAnalyticsEvent('sdk_updates.snoozed', {organization});\n    setShowUpdateAlert(false);\n  }, [api, organization]);\n\n  const handleReviewUpdatesClick = useCallback(() => {\n    SidebarPanelStore.activatePanel(SidebarPanelKey.Broadcasts);\n    trackAdvancedAnalyticsEvent('sdk_updates.clicked', {organization});\n  }, [organization]);\n\n  useEffect(() => {\n    trackAdvancedAnalyticsEvent('sdk_updates.seen', {organization});\n\n    let isUnmounted = false;\n\n    promptsCheck(api, {\n      organizationId: organization.id,\n      feature: 'sdk_updates',\n    }).then(prompt => {\n      if (isUnmounted) {\n        return;\n      }\n\n      setShowUpdateAlert(!promptIsDismissed(prompt));\n    });\n\n    return () => {\n      isUnmounted = true;\n    };\n  }, [api, organization]);\n\n  if (!showUpdateAlert || !props.sdkUpdates?.length) {\n    return null;\n  }\n\n  // withSdkUpdates explicitly only queries My Projects. This means that when\n  // looking at any projects outside of My Projects (like All Projects), this\n  // will only show the updates relevant to the to user.\n  const projectSpecificUpdates =\n    selection?.projects?.length === 0 || selection?.projects[0] === ALL_ACCESS_PROJECTS\n      ? props.sdkUpdates\n      : props.sdkUpdates.filter(update =>\n          selection?.projects?.includes(parseInt(update.projectId, 10))\n        );\n\n  // Check if we have at least one suggestion out of the list of updates\n  if (projectSpecificUpdates.every(v => v.suggestions.length === 0)) {\n    return null;\n  }\n\n  return (\n    <Alert\n      type=\"info\"\n      showIcon\n      className={props.className}\n      trailingItems={\n        <Fragment>\n          <Button\n            priority=\"link\"\n            size=\"zero\"\n            title={t('Dismiss for the next two weeks')}\n            onClick={handleSnoozePrompt}\n          >\n            {t('Remind me later')}\n          </Button>\n          <span>|</span>\n          <Button priority=\"link\" size=\"zero\" onClick={handleReviewUpdatesClick}>\n            {t('Review updates')}\n          </Button>\n        </Fragment>\n      }\n    >\n      {t(\n        `You have outdated SDKs in your projects. Update them for important fixes and features.`\n      )}\n    </Alert>\n  );\n}\n\nconst WithSdkUpdatesGlobalSdkUpdateAlert = withSdkUpdates(InnerGlobalSdkUpdateAlert);\n\nexport {\n  WithSdkUpdatesGlobalSdkUpdateAlert as GlobalSdkUpdateAlert,\n  InnerGlobalSdkUpdateAlert,\n};\n","import styled from '@emotion/styled';\n\nimport {Panel} from 'sentry/components/panels';\nimport space from 'sentry/styles/space';\n\ninterface Props extends React.ComponentProps<typeof Panel> {\n  children: React.ReactNode;\n  image?: React.ReactNode;\n}\n\nfunction OnboardingPanel({image, children, ...props}: Props) {\n  return (\n    <Panel {...props}>\n      <Container>\n        {image ? <IlloBox>{image}</IlloBox> : null}\n        <StyledBox centered={!image}>{children}</StyledBox>\n      </Container>\n    </Panel>\n  );\n}\n\nconst Container = styled('div')`\n  padding: ${space(3)};\n  position: relative;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n    min-height: 300px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    min-height: 350px;\n  }\n`;\n\nconst StyledBox = styled('div')<{centered?: boolean}>`\n  z-index: 1;\n\n  ${p => (p.centered ? 'text-align: center;' : '')}\n  ${p => (p.centered ? 'max-width: 600px;' : '')}\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 2;\n  }\n`;\n\nconst IlloBox = styled(StyledBox)`\n  position: relative;\n  min-height: 100px;\n  max-width: 300px;\n  margin: ${space(2)} auto;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 1;\n    margin: ${space(3)};\n    max-width: auto;\n  }\n`;\n\nexport default OnboardingPanel;\n","import {useEffect} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\n\nimport emptyStateImg from 'sentry-images/spot/performance-empty-state.svg';\nimport tourAlert from 'sentry-images/spot/performance-tour-alert.svg';\nimport tourCorrelate from 'sentry-images/spot/performance-tour-correlate.svg';\nimport tourMetrics from 'sentry-images/spot/performance-tour-metrics.svg';\nimport tourTrace from 'sentry-images/spot/performance-tour-trace.svg';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'sentry/actionCreators/indicator';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport FeatureTourModal, {\n  TourImage,\n  TourStep,\n  TourText,\n} from 'sentry/components/modals/featureTourModal';\nimport OnboardingPanel from 'sentry/components/onboardingPanel';\nimport {filterProjects} from 'sentry/components/performanceOnboarding/utils';\nimport {SidebarPanelKey} from 'sentry/components/sidebar/types';\nimport {withPerformanceOnboarding} from 'sentry/data/platformCategories';\nimport {t} from 'sentry/locale';\nimport SidebarPanelStore from 'sentry/stores/sidebarPanelStore';\nimport {Organization, Project} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport useApi from 'sentry/utils/useApi';\nimport useProjects from 'sentry/utils/useProjects';\nimport {useRouteContext} from 'sentry/utils/useRouteContext';\n\nconst performanceSetupUrl =\n  'https://docs.sentry.io/performance-monitoring/getting-started/';\n\nconst docsLink = (\n  <Button external href={performanceSetupUrl}>\n    {t('Setup')}\n  </Button>\n);\n\nexport const PERFORMANCE_TOUR_STEPS: TourStep[] = [\n  {\n    title: t('Track Application Metrics'),\n    image: <TourImage src={tourMetrics} />,\n    body: (\n      <TourText>\n        {t(\n          'Monitor your slowest pageloads and APIs to see which users are having the worst time.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Correlate Errors and Performance'),\n    image: <TourImage src={tourCorrelate} />,\n    body: (\n      <TourText>\n        {t(\n          'See what errors occurred within a transaction and the impact of those errors.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Watch and Alert'),\n    image: <TourImage src={tourAlert} />,\n    body: (\n      <TourText>\n        {t(\n          'Highlight mission-critical pages and APIs and set latency alerts to notify you before things go wrong.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Trace Across Systems'),\n    image: <TourImage src={tourTrace} />,\n    body: (\n      <TourText>\n        {t(\n          \"Follow a trace from a user's session and drill down to identify any bottlenecks that occur.\"\n        )}\n      </TourText>\n    ),\n  },\n];\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n};\n\nfunction Onboarding({organization, project}: Props) {\n  const api = useApi();\n\n  const {projects} = useProjects();\n  const {location} = useRouteContext();\n\n  const {projectsForOnboarding} = filterProjects(projects);\n\n  const showOnboardingChecklist = organization.features?.includes(\n    'performance-onboarding-checklist'\n  );\n\n  useEffect(() => {\n    if (\n      showOnboardingChecklist &&\n      location.hash === '#performance-sidequest' &&\n      projectsForOnboarding.some(p => p.id === project.id)\n    ) {\n      SidebarPanelStore.activatePanel(SidebarPanelKey.PerformanceOnboarding);\n    }\n  }, [location.hash, projectsForOnboarding, project.id, showOnboardingChecklist]);\n\n  function handleAdvance(step: number, duration: number) {\n    trackAdvancedAnalyticsEvent('performance_views.tour.advance', {\n      step,\n      duration,\n      organization,\n    });\n  }\n\n  function handleClose(step: number, duration: number) {\n    trackAdvancedAnalyticsEvent('performance_views.tour.close', {\n      step,\n      duration,\n      organization,\n    });\n  }\n\n  const currentPlatform = project.platform;\n  const hasPerformanceOnboarding = currentPlatform\n    ? withPerformanceOnboarding.has(currentPlatform)\n    : false;\n\n  let setupButton = (\n    <Button\n      priority=\"primary\"\n      href=\"https://docs.sentry.io/performance-monitoring/getting-started/\"\n      external\n    >\n      {t('Start Setup')}\n    </Button>\n  );\n\n  if (hasPerformanceOnboarding && showOnboardingChecklist) {\n    setupButton = (\n      <Button\n        priority=\"primary\"\n        onClick={event => {\n          event.preventDefault();\n          window.location.hash = 'performance-sidequest';\n          SidebarPanelStore.activatePanel(SidebarPanelKey.PerformanceOnboarding);\n        }}\n      >\n        {t('Start Checklist')}\n      </Button>\n    );\n  }\n\n  return (\n    <OnboardingPanel image={<PerfImage src={emptyStateImg} />}>\n      <h3>{t('Pinpoint problems')}</h3>\n      <p>\n        {t(\n          'Something seem slow? Track down transactions to connect the dots between 10-second page loads and poor-performing API calls or slow database queries.'\n        )}\n      </p>\n      <ButtonList gap={1}>\n        {setupButton}\n        <Button\n          data-test-id=\"create-sample-transaction-btn\"\n          onClick={async () => {\n            trackAdvancedAnalyticsEvent('performance_views.create_sample_transaction', {\n              platform: project.platform,\n              organization,\n            });\n            addLoadingMessage(t('Processing sample event...'), {\n              duration: 15000,\n            });\n            const url = `/projects/${organization.slug}/${project.slug}/create-sample-transaction/`;\n            try {\n              const eventData = await api.requestPromise(url, {method: 'POST'});\n              browserHistory.push(\n                `/organizations/${organization.slug}/performance/${project.slug}:${eventData.eventID}/`\n              );\n              clearIndicators();\n            } catch (error) {\n              Sentry.withScope(scope => {\n                scope.setExtra('error', error);\n                Sentry.captureException(new Error('Failed to create sample event'));\n              });\n              clearIndicators();\n              addErrorMessage(t('Failed to create a new sample event'));\n              return;\n            }\n          }}\n        >\n          {t('View Sample Transaction')}\n        </Button>\n      </ButtonList>\n      <FeatureTourModal\n        steps={PERFORMANCE_TOUR_STEPS}\n        onAdvance={handleAdvance}\n        onCloseModal={handleClose}\n        doneUrl={performanceSetupUrl}\n        doneText={t('Start Setup')}\n      >\n        {({showModal}) => (\n          <Button\n            priority=\"link\"\n            onClick={() => {\n              trackAdvancedAnalyticsEvent('performance_views.tour.start', {organization});\n              showModal();\n            }}\n          >\n            {t('Take a Tour')}\n          </Button>\n        )}\n      </FeatureTourModal>\n    </OnboardingPanel>\n  );\n}\n\nconst PerfImage = styled('img')`\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    max-width: unset;\n    user-select: none;\n    position: absolute;\n    top: 75px;\n    bottom: 0;\n    width: 450px;\n    margin-top: auto;\n    margin-bottom: auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    width: 480px;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    width: 600px;\n  }\n`;\n\nconst ButtonList = styled(ButtonBar)`\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n  margin-bottom: 16px;\n`;\n\nexport default Onboarding;\n"],"names":["InnerGlobalSdkUpdateAlert","props","api","useApi","organization","useOrganization","selection","usePageFilters","showUpdateAlert","setShowUpdateAlert","useState","handleSnoozePrompt","useCallback","promptsUpdate","organizationId","id","feature","status","trackAdvancedAnalyticsEvent","handleReviewUpdatesClick","SidebarPanelStore","SidebarPanelKey","useEffect","isUnmounted","promptsCheck","then","prompt","promptIsDismissed","sdkUpdates","length","projects","ALL_ACCESS_PROJECTS","filter","update","includes","parseInt","projectId","every","v","suggestions","type","showIcon","className","trailingItems","Fragment","priority","size","title","t","onClick","WithSdkUpdatesGlobalSdkUpdateAlert","withSdkUpdates","OnboardingPanel","image","children","Container","IlloBox","StyledBox","centered","space","p","theme","breakpoints","small","medium","performanceSetupUrl","docsLink","external","href","PERFORMANCE_TOUR_STEPS","src","tourMetrics","body","actions","Onboarding","project","useProjects","location","useRouteContext","projectsForOnboarding","filterProjects","showOnboardingChecklist","features","hash","some","currentPlatform","platform","hasPerformanceOnboarding","withPerformanceOnboarding","setupButton","event","preventDefault","window","PerfImage","emptyStateImg","ButtonList","gap","async","addLoadingMessage","duration","url","slug","eventData","requestPromise","method","browserHistory","eventID","clearIndicators","error","Sentry","scope","setExtra","Error","addErrorMessage","steps","onAdvance","step","onCloseModal","doneUrl","doneText","showModal","large","ButtonBar"],"sourceRoot":""}