{"version":3,"file":"chunks/app_views_alerts_rules_issue_details_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"ydA6BA,QAjBA,SAA8B,GAA2B,IAA3B,SAACA,EAAQ,OAAEC,GAAc,EACrD,MAAMC,GAAeC,EAAAA,EAAAA,MACf,SAACC,EAAQ,SAAEC,IAAYC,EAAAA,EAAAA,GAAY,CAACC,MAAO,CAACN,EAAOO,aAGzD,OAAIH,GACK,QAAC,IAAgB,IAGnBL,IAAYS,EAAAA,EAAAA,gBAAeT,IAC9BU,EAAAA,EAAAA,cAAkBV,EAAU,CAC1BE,eACAS,QAASP,EAAS,KAEpB,IACN,C","sources":["webpack:///./app/views/alerts/rules/issue/details/index.tsx"],"sourcesContent":["import {cloneElement, isValidElement} from 'react';\nimport type {RouteComponentProps} from 'react-router';\n\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport useProjects from 'sentry/utils/useProjects';\n\ninterface Props\n  extends RouteComponentProps<{orgId: string; projectId: string; ruleId: string}, {}> {\n  children?: React.ReactNode;\n}\n\nfunction RuleDetailsContainer({children, params}: Props) {\n  const organization = useOrganization();\n  const {projects, fetching} = useProjects({slugs: [params.projectId]});\n\n  // Should almost never need to fetch project\n  if (fetching) {\n    return <LoadingIndicator />;\n  }\n\n  return children && isValidElement(children)\n    ? cloneElement<any>(children, {\n        organization,\n        project: projects[0],\n      })\n    : null;\n}\n\nexport default RuleDetailsContainer;\n"],"names":["children","params","organization","useOrganization","projects","fetching","useProjects","slugs","projectId","isValidElement","cloneElement","project"],"sourceRoot":""}