{"version":3,"file":"chunks/app_views_performance_transactionSummary_transactionReplays_index_tsx-node_modules_lodash__ba-240a92.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/performance/transactionSummary/transactionReplays/content.tsx","webpack:///./app/views/performance/transactionSummary/transactionReplays/index.tsx","webpack:///./app/views/performance/transactionSummary/transactionReplays/useReplaysFromTransaction.tsx","webpack:///../node_modules/lodash/_baseExtremum.js","webpack:///../node_modules/lodash/_baseGt.js"],"sourcesContent":["import {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\nimport first from 'lodash/first';\nimport omit from 'lodash/omit';\n\nimport CompactSelect from 'sentry/components/compactSelect';\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport SearchBar from 'sentry/components/events/searchBar';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport Pagination from 'sentry/components/pagination';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport type {Organization} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport EventView from 'sentry/utils/discover/eventView';\nimport ReplayTable from 'sentry/views/replays/replayTable';\nimport type {ReplayListLocationQuery} from 'sentry/views/replays/types';\n\nimport type {SpanOperationBreakdownFilter} from '../filter';\nimport {\n  EventsDisplayFilterName,\n  getEventsFilterOptions,\n  PercentileValues,\n} from '../transactionEvents/utils';\n\nimport type {ReplayListRecordWithTx} from './useReplaysFromTransaction';\n\ntype Props = {\n  eventView: EventView;\n  eventsDisplayFilterName: EventsDisplayFilterName;\n  isFetching: boolean;\n  location: Location<ReplayListLocationQuery>;\n  organization: Organization;\n  pageLinks: string | null;\n  replays: ReplayListRecordWithTx[];\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter;\n  percentileValues?: PercentileValues;\n};\n\nfunction ReplaysContent({\n  eventView,\n  eventsDisplayFilterName,\n  isFetching,\n  location,\n  organization,\n  pageLinks,\n  replays,\n  spanOperationBreakdownFilter,\n  percentileValues,\n}: Props) {\n  const query = location.query;\n\n  const eventsFilterOptions = getEventsFilterOptions(\n    spanOperationBreakdownFilter,\n    percentileValues\n  );\n\n  function handleChange(key: string) {\n    return function (value: string | undefined) {\n      const queryParams = normalizeDateTimeParams({\n        ...(location.query || {}),\n        [key]: value,\n      });\n\n      // do not propagate pagination when making a new search\n      const toOmit = ['cursor'];\n      if (!defined(value)) {\n        toOmit.push(key);\n      }\n      const searchQueryParams = omit(queryParams, toOmit);\n\n      browserHistory.push({\n        ...location,\n        query: searchQueryParams,\n      });\n    };\n  }\n\n  const handleEventDisplayFilterChange = (newFilterName: EventsDisplayFilterName) => {\n    const nextQuery: Location['query'] = {\n      ...location.query,\n      showTransactions: newFilterName,\n    };\n\n    if (newFilterName === EventsDisplayFilterName.p100) {\n      delete nextQuery.showTransaction;\n    }\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: nextQuery,\n    });\n  };\n\n  return (\n    <Layout.Main fullWidth>\n      <FilterActions>\n        <PageFilterBar condensed>\n          <EnvironmentPageFilter />\n          <DatePageFilter alignDropdown=\"left\" />\n        </PageFilterBar>\n        <StyledSearchBar\n          organization={organization}\n          projectIds={eventView.project}\n          query={query.query}\n          fields={eventView.fields}\n          onSearch={handleChange('query')}\n        />\n        <PercentileSelect\n          triggerProps={{prefix: t('Percentile')}}\n          value={eventsDisplayFilterName}\n          onChange={opt => handleEventDisplayFilterChange(opt.value)}\n          options={Object.entries(eventsFilterOptions).map(([name, filter]) => ({\n            value: name as EventsDisplayFilterName,\n            label: filter.label,\n          }))}\n        />\n      </FilterActions>\n      <ReplayTable\n        isFetching={isFetching}\n        replays={replays}\n        showProjectColumn={false}\n        sort={first(eventView.sorts) || {field: 'startedAt', kind: 'asc'}}\n        showSlowestTxColumn\n      />\n      <Pagination pageLinks={pageLinks} />\n    </Layout.Main>\n  );\n}\n\nconst FilterActions = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n  margin-bottom: ${space(2)};\n  grid-template-columns: repeat(2, 1fr);\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: auto 1fr auto;\n  }\n`;\n\nconst PercentileSelect = styled(CompactSelect)`\n  order: 2;\n  justify-self: flex-end;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    order: 3;\n  }\n`;\n\nconst StyledSearchBar = styled(SearchBar)`\n  order: 3;\n  grid-column: span 2;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    order: 2;\n    grid-column: span 1;\n  }\n`;\n\nexport default ReplaysContent;\n","import {Fragment, useEffect} from 'react';\nimport {Location} from 'history';\n\nimport Feature from 'sentry/components/acl/feature';\nimport Alert from 'sentry/components/alert';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport type {Organization, Project} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  SPAN_OP_BREAKDOWN_FIELDS,\n  SPAN_OP_RELATIVE_BREAKDOWN_FIELD,\n} from 'sentry/utils/discover/fields';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProjects from 'sentry/utils/withProjects';\nimport type {ReplayListLocationQuery} from 'sentry/views/replays/types';\n\nimport {decodeFilterFromLocation, SpanOperationBreakdownFilter} from '../filter';\nimport PageLayout, {ChildProps} from '../pageLayout';\nimport Tab from '../tabs';\nimport {decodeEventsDisplayFilterFromLocation} from '../transactionEvents/utils';\n\nimport ReplaysContent from './content';\nimport useReplaysFromTransaction from './useReplaysFromTransaction';\n\ntype Props = {\n  location: Location<ReplayListLocationQuery>;\n  organization: Organization;\n  projects: Project[];\n};\n\nfunction renderNoAccess() {\n  return (\n    <PageContent>\n      <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n    </PageContent>\n  );\n}\n\nfunction TransactionReplays(props: Props) {\n  const {location, organization, projects} = props;\n\n  return (\n    <Feature\n      features={['session-replay-ui']}\n      organization={organization}\n      renderDisabled={renderNoAccess}\n    >\n      <PageLayout\n        location={location}\n        organization={organization}\n        projects={projects}\n        tab={Tab.Replays}\n        getDocumentTitle={getDocumentTitle}\n        generateEventView={generateEventView}\n        childComponent={ReplaysContentWrapper}\n      />\n    </Feature>\n  );\n}\n\nfunction ReplaysContentWrapper({\n  eventView: eventsWithReplaysView,\n  location,\n  organization,\n  setError,\n}: ChildProps) {\n  const eventsDisplayFilterName = decodeEventsDisplayFilterFromLocation(location);\n  const spanOperationBreakdownFilter = decodeFilterFromLocation(location);\n\n  const {eventView, replays, pageLinks, isFetching, fetchError} =\n    useReplaysFromTransaction({\n      eventsWithReplaysView,\n      location,\n      organization,\n      eventsDisplayFilterName,\n      spanOperationBreakdownFilter,\n    });\n\n  useEffect(() => {\n    setError(fetchError?.message);\n  }, [setError, fetchError]);\n\n  if (isFetching || !eventView) {\n    return (\n      <Layout.Main fullWidth>\n        <LoadingIndicator />\n      </Layout.Main>\n    );\n  }\n\n  return replays ? (\n    <ReplaysContent\n      eventView={eventView}\n      isFetching={isFetching}\n      location={location}\n      organization={organization}\n      pageLinks={pageLinks}\n      replays={replays}\n      eventsDisplayFilterName={eventsDisplayFilterName}\n      spanOperationBreakdownFilter={spanOperationBreakdownFilter}\n    />\n  ) : (\n    <Fragment>{null}</Fragment>\n  );\n}\n\nfunction getDocumentTitle(transactionName: string): string {\n  const hasTransactionName =\n    typeof transactionName === 'string' && String(transactionName).trim().length > 0;\n\n  if (hasTransactionName) {\n    return [String(transactionName).trim(), t('Replays')].join(' \\u2014 ');\n  }\n\n  return [t('Summary'), t('Replays')].join(' \\u2014 ');\n}\n\nfunction generateEventView({\n  location,\n  transactionName,\n}: {\n  location: Location;\n  transactionName: string;\n}) {\n  const fields = ['replayId', 'count()', 'transaction.duration', 'trace', 'timestamp'];\n\n  const breakdown = decodeFilterFromLocation(location);\n  if (breakdown !== SpanOperationBreakdownFilter.None) {\n    fields.push(`spans.${breakdown}`);\n  } else {\n    fields.push(...SPAN_OP_BREAKDOWN_FIELDS, SPAN_OP_RELATIVE_BREAKDOWN_FIELD);\n  }\n\n  const query = decodeScalar(location.query.query, '');\n  const conditions = new MutableSearch(query);\n  conditions.setFilterValues('event.type', ['transaction']);\n  conditions.addFilterValues('transaction', [transactionName]);\n  conditions.addFilterValues('!replayId', ['']);\n\n  return EventView.fromNewQueryWithLocation(\n    {\n      id: '',\n      name: `Replay events within a transaction`,\n      version: 2,\n      fields,\n      query: conditions.formatString(),\n      projects: [],\n      orderby: decodeScalar(location.query.sort, '-timestamp'),\n    },\n    location\n  );\n}\n\nexport default withProjects(withOrganization(TransactionReplays));\n","import {useCallback, useEffect, useState} from 'react';\nimport * as Sentry from '@sentry/react';\nimport {Location} from 'history';\n\nimport type {Client} from 'sentry/api';\nimport type {Organization} from 'sentry/types';\nimport {TableData, TableDataRow} from 'sentry/utils/discover/discoverQuery';\nimport EventView, {fromSorts} from 'sentry/utils/discover/eventView';\nimport {doDiscoverQuery} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport fetchReplayList, {\n  DEFAULT_SORT,\n  REPLAY_LIST_FIELDS,\n} from 'sentry/utils/replays/fetchReplayList';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport useApi from 'sentry/utils/useApi';\nimport {ReplayListRecord} from 'sentry/views/replays/types';\n\nexport type ReplayListRecordWithTx = ReplayListRecord & {\n  txEvent: {[x: string]: any};\n};\n\nimport {SpanOperationBreakdownFilter} from '../filter';\nimport {\n  EventsDisplayFilterName,\n  getEventsFilterOptions,\n  getPercentilesEventView,\n  mapPercentileValues,\n  PercentileValues,\n} from '../transactionEvents/utils';\n\ntype State = Awaited<ReturnType<typeof fetchReplayList>> & {\n  eventView: undefined | EventView;\n  replays?: ReplayListRecordWithTx[];\n};\n\ntype Options = {\n  eventsDisplayFilterName: EventsDisplayFilterName;\n  eventsWithReplaysView: EventView;\n  location: Location;\n  organization: Organization;\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter;\n};\n\nfunction useReplaysFromTransaction({\n  eventsWithReplaysView,\n  location,\n  organization,\n  spanOperationBreakdownFilter,\n  eventsDisplayFilterName,\n}: Options) {\n  const api = useApi();\n  const [data, setData] = useState<State>({\n    fetchError: undefined,\n    isFetching: true,\n    pageLinks: null,\n    replays: [],\n    eventView: undefined,\n  });\n\n  const load = useCallback(async () => {\n    const percentilesView = getPercentilesEventView(eventsWithReplaysView.clone());\n    const percentileData = await fetchPercentiles({\n      api,\n      eventView: percentilesView,\n      location,\n      organization,\n    });\n    const percentiles = mapPercentileValues(percentileData);\n    const filteredEventView = getFilteredEventView({\n      eventView: eventsWithReplaysView,\n      percentiles,\n      spanOperationBreakdownFilter,\n      eventsDisplayFilterName,\n    });\n\n    const eventsData = await fetchEventsWithReplay({\n      api,\n      eventView: filteredEventView ?? eventsWithReplaysView,\n      location,\n      organization,\n    });\n\n    const replayIds = eventsData?.map(row => row.replayId);\n\n    const eventView = EventView.fromNewQueryWithLocation(\n      {\n        id: '',\n        name: 'Replays within a transaction',\n        version: 2,\n        fields: REPLAY_LIST_FIELDS,\n        projects: [],\n        query: `id:[${String(replayIds)}]`,\n      },\n      location\n    );\n\n    eventView.sorts = fromSorts(decodeScalar(location.query.sort, DEFAULT_SORT));\n\n    const listData = await fetchReplayList({\n      api,\n      eventView,\n      location,\n      organization,\n    });\n\n    const replays: ReplayListRecordWithTx[] | undefined = listData.replays?.map(\n      replay => {\n        let slowestEvent: TableDataRow | undefined;\n        for (const event of eventsData ?? []) {\n          // attach the slowest tx event to the replay\n          if (\n            event.replayId === replay.id &&\n            (!slowestEvent ||\n              event['transaction.duration'] > slowestEvent['transaction.duration'])\n          ) {\n            slowestEvent = event;\n          }\n        }\n\n        return {\n          ...replay,\n          txEvent: slowestEvent ?? {},\n        };\n      }\n    );\n\n    setData({\n      ...listData,\n      eventView,\n      replays,\n    });\n  }, [\n    api,\n    eventsWithReplaysView,\n    location,\n    organization,\n    spanOperationBreakdownFilter,\n    eventsDisplayFilterName,\n  ]);\n\n  useEffect(() => {\n    load();\n  }, [load]);\n\n  return data;\n}\n\nasync function fetchEventsWithReplay({\n  api,\n  eventView,\n  location,\n  organization,\n}: {\n  api: Client;\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n}) {\n  try {\n    const [data] = await doDiscoverQuery<TableData>(\n      api,\n      `/organizations/${organization.slug}/events/`,\n      eventView.getEventsAPIPayload(location)\n    );\n\n    return data.data;\n  } catch (err) {\n    Sentry.captureException(err);\n    return null;\n  }\n}\n\nasync function fetchPercentiles({\n  api,\n  eventView,\n  location,\n  organization,\n}: {\n  api: Client;\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n}) {\n  try {\n    const [data] = await doDiscoverQuery<TableData>(\n      api,\n      `/organizations/${organization.slug}/events/`,\n      eventView.getEventsAPIPayload(location)\n    );\n\n    return data.data[0];\n  } catch (err) {\n    Sentry.captureException(err);\n    return null;\n  }\n}\n\nfunction getFilteredEventView({\n  percentiles,\n  spanOperationBreakdownFilter,\n  eventsDisplayFilterName,\n  eventView,\n}: {\n  eventView: EventView;\n  eventsDisplayFilterName: EventsDisplayFilterName;\n  percentiles: PercentileValues;\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter;\n}) {\n  const filter = getEventsFilterOptions(spanOperationBreakdownFilter, percentiles)[\n    eventsDisplayFilterName\n  ];\n  const filteredEventView = eventView.clone();\n  if (filteredEventView && filter?.query) {\n    const query = new MutableSearch(filteredEventView.query);\n    filter.query.forEach(item => query.setFilterValues(item[0], [item[1]]));\n    filteredEventView.query = query.formatString();\n  }\n  return filteredEventView;\n}\n\nexport default useReplaysFromTransaction;\n","var isSymbol = require('./isSymbol');\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseExtremum;\n","/**\n * The base implementation of `_.gt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is greater than `other`,\n *  else `false`.\n */\nfunction baseGt(value, other) {\n  return value > other;\n}\n\nmodule.exports = baseGt;\n"],"names":["ReplaysContent","eventView","eventsDisplayFilterName","isFetching","location","organization","pageLinks","replays","spanOperationBreakdownFilter","percentileValues","query","eventsFilterOptions","getEventsFilterOptions","fullWidth","FilterActions","condensed","alignDropdown","StyledSearchBar","projectIds","project","fields","onSearch","key","value","queryParams","normalizeDateTimeParams","toOmit","defined","push","searchQueryParams","omit","browserHistory","PercentileSelect","triggerProps","prefix","t","onChange","opt","newFilterName","nextQuery","showTransactions","EventsDisplayFilterName","showTransaction","pathname","handleEventDisplayFilterChange","options","Object","entries","map","name","filter","label","showProjectColumn","sort","first","sorts","field","kind","showSlowestTxColumn","space","p","theme","breakpoints","small","CompactSelect","SearchBar","renderNoAccess","type","TransactionReplays","props","projects","features","renderDisabled","tab","Tab","getDocumentTitle","generateEventView","childComponent","ReplaysContentWrapper","eventsWithReplaysView","setError","decodeEventsDisplayFilterFromLocation","decodeFilterFromLocation","fetchError","api","useApi","data","setData","useState","undefined","load","useCallback","async","percentilesView","getPercentilesEventView","clone","percentileData","doDiscoverQuery","slug","getEventsAPIPayload","err","Sentry","fetchPercentiles","percentiles","mapPercentileValues","filteredEventView","MutableSearch","forEach","item","setFilterValues","formatString","getFilteredEventView","eventsData","fetchEventsWithReplay","replayIds","row","replayId","EventView","id","version","REPLAY_LIST_FIELDS","String","fromSorts","decodeScalar","DEFAULT_SORT","listData","fetchReplayList","replay","slowestEvent","event","txEvent","useEffect","useReplaysFromTransaction","message","Fragment","transactionName","trim","length","join","breakdown","SpanOperationBreakdownFilter","SPAN_OP_BREAKDOWN_FIELDS","SPAN_OP_RELATIVE_BREAKDOWN_FIELD","conditions","addFilterValues","orderby","withProjects","withOrganization","isSymbol","module","exports","array","iteratee","comparator","index","current","computed","result","other"],"sourceRoot":""}