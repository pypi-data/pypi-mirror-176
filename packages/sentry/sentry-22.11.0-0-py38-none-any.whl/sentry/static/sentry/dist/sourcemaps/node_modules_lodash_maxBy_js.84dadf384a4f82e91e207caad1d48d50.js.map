{"version":3,"file":"chunks/node_modules_lodash_maxBy_js.xxxxxxxxxxxxxxxxxxxx.js","mappings":"kJAAA,IAAIA,EAAW,EAAQ,sCA+BvBC,EAAOC,QAnBP,SAAsBC,EAAOC,EAAUC,GAIrC,IAHA,IAAIC,GAAS,EACTC,EAASJ,EAAMI,SAEVD,EAAQC,GAAQ,CACvB,IAAIC,EAAQL,EAAMG,GACdG,EAAUL,EAASI,GAEvB,GAAe,MAAXC,SAAiCC,IAAbC,EACfF,GAAYA,IAAYT,EAASS,GAClCJ,EAAWI,EAASE,IAE1B,IAAIA,EAAWF,EACXG,EAASJ,CAEjB,CACA,OAAOI,CACT,C,0CChBAX,EAAOC,QAJP,SAAgBM,EAAOK,GACrB,OAAOL,EAAQK,CACjB,C,8CCXA,IAAIC,EAAe,EAAQ,2CACvBC,EAAS,EAAQ,qCACjBC,EAAe,EAAQ,2CA+B3Bf,EAAOC,QANP,SAAeC,EAAOC,GACpB,OAAQD,GAASA,EAAMI,OACnBO,EAAaX,EAAOa,EAAaZ,EAAU,GAAIW,QAC/CL,CACN,C","sources":["webpack:///../node_modules/lodash/_baseExtremum.js","webpack:///../node_modules/lodash/_baseGt.js","webpack:///../node_modules/lodash/maxBy.js"],"sourcesContent":["var isSymbol = require('./isSymbol');\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseExtremum;\n","/**\n * The base implementation of `_.gt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is greater than `other`,\n *  else `false`.\n */\nfunction baseGt(value, other) {\n  return value > other;\n}\n\nmodule.exports = baseGt;\n","var baseExtremum = require('./_baseExtremum'),\n    baseGt = require('./_baseGt'),\n    baseIteratee = require('./_baseIteratee');\n\n/**\n * This method is like `_.max` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * the value is ranked. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * var objects = [{ 'n': 1 }, { 'n': 2 }];\n *\n * _.maxBy(objects, function(o) { return o.n; });\n * // => { 'n': 2 }\n *\n * // The `_.property` iteratee shorthand.\n * _.maxBy(objects, 'n');\n * // => { 'n': 2 }\n */\nfunction maxBy(array, iteratee) {\n  return (array && array.length)\n    ? baseExtremum(array, baseIteratee(iteratee, 2), baseGt)\n    : undefined;\n}\n\nmodule.exports = maxBy;\n"],"names":["isSymbol","module","exports","array","iteratee","comparator","index","length","value","current","undefined","computed","result","other","baseExtremum","baseGt","baseIteratee"],"sourceRoot":""}