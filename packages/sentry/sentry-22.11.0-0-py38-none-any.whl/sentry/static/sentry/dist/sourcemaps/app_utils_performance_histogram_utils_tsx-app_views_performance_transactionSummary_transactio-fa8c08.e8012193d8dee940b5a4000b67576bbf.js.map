{"version":3,"file":"chunks/app_utils_performance_histogram_utils_tsx-app_views_performance_transactionSummary_transactio-fa8c08.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/events/searchBar.tsx","webpack:///./app/utils/performance/histogram/utils.tsx","webpack:///./app/utils/withTags.tsx","webpack:///./app/views/performance/transactionSummary/transactionEvents/utils.tsx","webpack:///./app/views/performance/trends/content.tsx","webpack:///./app/views/performance/trends/index.tsx"],"sourcesContent":["import {useEffect, useMemo, useRef} from 'react';\nimport * as Sentry from '@sentry/react';\nimport {Transaction} from '@sentry/types';\nimport assign from 'lodash/assign';\nimport flatten from 'lodash/flatten';\nimport memoize from 'lodash/memoize';\nimport omit from 'lodash/omit';\n\nimport {fetchTagValues} from 'sentry/actionCreators/tags';\nimport SmartSearchBar from 'sentry/components/smartSearchBar';\nimport {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'sentry/constants';\nimport {Organization, SavedSearchType, TagCollection} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {CustomMeasurementCollection} from 'sentry/utils/customMeasurements/customMeasurements';\nimport {\n  Field,\n  FIELD_TAGS,\n  isAggregateField,\n  isEquation,\n  isMeasurement,\n  SEMVER_TAGS,\n  SPAN_OP_BREAKDOWN_FIELDS,\n  TRACING_FIELDS,\n} from 'sentry/utils/discover/fields';\nimport {FieldKey, FieldKind} from 'sentry/utils/fields';\nimport Measurements from 'sentry/utils/measurements/measurements';\nimport useApi from 'sentry/utils/useApi';\nimport withTags from 'sentry/utils/withTags';\nimport {isCustomMeasurement} from 'sentry/views/dashboardsV2/utils';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\n\nconst STATIC_FIELD_TAGS_SET = new Set(Object.keys(FIELD_TAGS));\nconst getFunctionTags = (fields: Readonly<Field[]> | undefined) => {\n  if (!fields?.length) {\n    return [];\n  }\n  return fields.reduce((acc, item) => {\n    if (\n      !STATIC_FIELD_TAGS_SET.has(item.field) &&\n      !isEquation(item.field) &&\n      !isCustomMeasurement(item.field)\n    ) {\n      acc[item.field] = {key: item.field, name: item.field, kind: FieldKind.FUNCTION};\n    }\n\n    return acc;\n  }, {});\n};\n\nconst getMeasurementTags = (\n  measurements: Parameters<\n    React.ComponentProps<typeof Measurements>['children']\n  >[0]['measurements'],\n  customMeasurements:\n    | Parameters<React.ComponentProps<typeof Measurements>['children']>[0]['measurements']\n    | undefined\n) => {\n  const measurementsWithKind = Object.keys(measurements).reduce((tags, key) => {\n    tags[key] = {\n      ...measurements[key],\n      kind: FieldKind.MEASUREMENT,\n    };\n    return tags;\n  }, {});\n\n  if (!customMeasurements) {\n    return measurementsWithKind;\n  }\n\n  return Object.keys(customMeasurements).reduce((tags, key) => {\n    tags[key] = {\n      ...customMeasurements[key],\n      kind: FieldKind.MEASUREMENT,\n    };\n    return tags;\n  }, measurementsWithKind);\n};\n\nconst STATIC_FIELD_TAGS = Object.keys(FIELD_TAGS).reduce((tags, key) => {\n  tags[key] = {\n    ...FIELD_TAGS[key],\n    kind: FieldKind.FIELD,\n  };\n  return tags;\n}, {});\n\nconst STATIC_FIELD_TAGS_WITHOUT_TRACING = omit(STATIC_FIELD_TAGS, TRACING_FIELDS);\n\nconst STATIC_SPAN_TAGS = SPAN_OP_BREAKDOWN_FIELDS.reduce((tags, key) => {\n  tags[key] = {name: key, kind: FieldKind.METRICS};\n  return tags;\n}, {});\n\nconst STATIC_SEMVER_TAGS = Object.keys(SEMVER_TAGS).reduce((tags, key) => {\n  tags[key] = {\n    ...SEMVER_TAGS[key],\n    kind: FieldKind.FIELD,\n  };\n  return tags;\n}, {});\n\nexport type SearchBarProps = Omit<React.ComponentProps<typeof SmartSearchBar>, 'tags'> & {\n  organization: Organization;\n  tags: TagCollection;\n  customMeasurements?: CustomMeasurementCollection;\n  fields?: Readonly<Field[]>;\n  includeSessionTagsValues?: boolean;\n  /**\n   * Used to define the max height of the menu in px.\n   */\n  maxMenuHeight?: number;\n  maxSearchItems?: React.ComponentProps<typeof SmartSearchBar>['maxSearchItems'];\n  omitTags?: string[];\n  projectIds?: number[] | Readonly<number[]>;\n};\n\nfunction SearchBar(props: SearchBarProps) {\n  const {\n    maxSearchItems,\n    organization,\n    tags,\n    omitTags,\n    fields,\n    projectIds,\n    includeSessionTagsValues,\n    maxMenuHeight,\n    customMeasurements,\n  } = props;\n\n  const api = useApi();\n  const collectedTransactionFromGetTagsListRef = useRef<boolean>(false);\n\n  const functionTags = useMemo(() => getFunctionTags(fields), [fields]);\n  const tagsWithKind = useMemo(() => {\n    return Object.keys(tags).reduce((acc, key) => {\n      acc[key] = {\n        ...tags[key],\n        kind: FieldKind.TAG,\n      };\n      return acc;\n    }, {});\n  }, [tags]);\n\n  useEffect(() => {\n    // Clear memoized data on mount to make tests more consistent.\n    getEventFieldValues.cache.clear?.();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [projectIds]);\n\n  // Returns array of tag values that substring match `query`; invokes `callback`\n  // with data when ready\n  const getEventFieldValues = memoize(\n    (tag, query, endpointParams): Promise<string[]> => {\n      const projectIdStrings = (projectIds as Readonly<number>[])?.map(String);\n\n      if (isAggregateField(tag.key) || isMeasurement(tag.key)) {\n        // We can't really auto suggest values for aggregate fields\n        // or measurements, so we simply don't\n        return Promise.resolve([]);\n      }\n\n      return fetchTagValues({\n        api,\n        orgSlug: organization.slug,\n        tagKey: tag.key,\n        search: query,\n        projectIds: projectIdStrings,\n        endpointParams,\n        // allows searching for tags on transactions as well\n        includeTransactions: true,\n        // allows searching for tags on sessions as well\n        includeSessions: includeSessionTagsValues,\n      }).then(\n        results =>\n          flatten(results.filter(({name}) => defined(name)).map(({name}) => name)),\n        () => {\n          throw new Error('Unable to fetch event field values');\n        }\n      );\n    },\n    ({key}, query) => `${key}-${query}`\n  );\n\n  const getTagList = (\n    measurements: Parameters<\n      React.ComponentProps<typeof Measurements>['children']\n    >[0]['measurements']\n  ) => {\n    // We will only collect a transaction once and only if the number of tags > 0\n    // This is to avoid a large number of transactions being sent to Sentry. The 0 check\n    // is to avoid collecting a transaction when tags are not loaded yet.\n    let transaction: Transaction | undefined = undefined;\n    if (!collectedTransactionFromGetTagsListRef.current && Object.keys(tags).length > 0) {\n      transaction = Sentry.startTransaction({\n        name: 'SearchBar.getTagList',\n      });\n      // Mark as collected - if code below errors, we risk never collecting\n      // a transaction in that case, but that is fine.\n      collectedTransactionFromGetTagsListRef.current = true;\n    }\n\n    const measurementsWithKind = getMeasurementTags(measurements, customMeasurements);\n    const orgHasPerformanceView = organization.features.includes('performance-view');\n\n    const combinedTags: TagCollection = orgHasPerformanceView\n      ? Object.assign(\n          {},\n          measurementsWithKind,\n          functionTags,\n          STATIC_SPAN_TAGS,\n          STATIC_FIELD_TAGS\n        )\n      : Object.assign({}, STATIC_FIELD_TAGS_WITHOUT_TRACING);\n\n    assign(combinedTags, tagsWithKind, STATIC_FIELD_TAGS, STATIC_SEMVER_TAGS);\n\n    combinedTags.has = {\n      key: FieldKey.HAS,\n      name: 'Has property',\n      values: Object.keys(combinedTags).sort((a, b) => {\n        return a.toLowerCase().localeCompare(b.toLowerCase());\n      }),\n      predefined: true,\n      kind: FieldKind.FIELD,\n    };\n\n    const list =\n      omitTags && omitTags.length > 0 ? omit(combinedTags, omitTags) : combinedTags;\n\n    if (transaction) {\n      const totalCount: number = Object.keys(list).length;\n      transaction.setTag('tags.totalCount', totalCount);\n      const countGroup = [\n        1, 5, 10, 20, 50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 10000,\n      ].find(n => totalCount <= n);\n      transaction.setTag('tags.totalCount.grouped', `<=${countGroup}`);\n      transaction.finish();\n    }\n    return list;\n  };\n\n  return (\n    <Measurements>\n      {({measurements}) => (\n        <SmartSearchBar\n          hasRecentSearches\n          savedSearchType={SavedSearchType.EVENT}\n          onGetTagValues={getEventFieldValues}\n          supportedTags={getTagList(measurements)}\n          prepareQuery={query => {\n            // Prepare query string (e.g. strip special characters like negation operator)\n            return query.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n          }}\n          maxSearchItems={maxSearchItems}\n          excludedTags={['environment']}\n          maxMenuHeight={maxMenuHeight ?? 300}\n          customPerformanceMetrics={customMeasurements}\n          {...props}\n        />\n      )}\n    </Measurements>\n  );\n}\n\nexport default withTags(SearchBar);\n","import {ColumnType} from 'sentry/utils/discover/fields';\nimport {getDuration} from 'sentry/utils/formatters';\n\nimport {HistogramData} from './types';\n\nexport function getBucketWidth(data: HistogramData) {\n  // We can assume that all buckets are of equal width, use the first two\n  // buckets to get the width. The value of each histogram function indicates\n  // the beginning of the bucket.\n  return data.length >= 2 ? data[1].bin - data[0].bin : 0;\n}\n\nexport function computeBuckets(data: HistogramData) {\n  const width = getBucketWidth(data);\n\n  return data.map(item => {\n    const bucket = item.bin;\n    return {\n      start: bucket,\n      end: bucket + width,\n    };\n  });\n}\n\nexport function formatHistogramData(\n  data: HistogramData,\n  {\n    precision,\n    type,\n    additionalFieldsFn,\n  }: {\n    additionalFieldsFn?: any;\n    precision?: number;\n    type?: ColumnType;\n  } = {}\n) {\n  const formatter = (value: number): string => {\n    switch (type) {\n      case 'duration':\n        const decimalPlaces = precision ?? (value < 1000 ? 0 : 3);\n        return getDuration(value / 1000, decimalPlaces, true);\n      case 'number':\n        // This is trying to avoid some of potential rounding errors that cause bins\n        // have the same label, if the number of bins doesn't visually match what is\n        // expected, check that this rounding is correct. If this issue persists,\n        // consider formatting the bin as a string in the response\n        const factor = 10 ** (precision ?? 0);\n        return (Math.round((value + Number.EPSILON) * factor) / factor).toLocaleString();\n      default:\n        throw new Error(`Unable to format type: ${type}`);\n    }\n  };\n  return data.map(item => {\n    return {\n      value: item.count,\n      name: formatter(item.bin),\n      ...(additionalFieldsFn?.(item.bin) ?? {}),\n    };\n  });\n}\n","import {Component} from 'react';\n\nimport TagStore from 'sentry/stores/tagStore';\nimport {TagCollection} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype InjectedTagsProps = {\n  tags: TagCollection;\n};\n\ntype State = {\n  tags: TagCollection;\n};\n\n/**\n * HOC for getting *only* tags from the TagStore.\n */\nfunction withTags<P extends InjectedTagsProps>(WrappedComponent: React.ComponentType<P>) {\n  class WithTags extends Component<Omit<P, keyof InjectedTagsProps>, State> {\n    static displayName = `withTags(${getDisplayName(WrappedComponent)})`;\n\n    state: State = {\n      tags: TagStore.getState(),\n    };\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = TagStore.listen(\n      (tags: TagCollection) => this.setState({tags}),\n      undefined\n    );\n\n    render() {\n      const {tags, ...props} = this.props as P;\n      return <WrappedComponent {...({tags: tags ?? this.state.tags, ...props} as P)} />;\n    }\n  }\n\n  return WithTags;\n}\n\nexport default withTags;\n","import {Location, Query} from 'history';\n\nimport {t} from 'sentry/locale';\nimport {TableDataRow} from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {QueryFieldValue} from 'sentry/utils/discover/fields';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nimport {filterToField, SpanOperationBreakdownFilter} from '../filter';\nimport {TransactionFilterOptions} from '../utils';\n\nexport enum EventsDisplayFilterName {\n  p50 = 'p50',\n  p75 = 'p75',\n  p95 = 'p95',\n  p99 = 'p99',\n  p100 = 'p100',\n}\n\nexport type PercentileValues = Record<EventsDisplayFilterName, number>;\n\nexport type EventsDisplayFilter = {\n  label: string;\n  name: EventsDisplayFilterName;\n  query?: string[][];\n  sort?: {field: string; kind: 'desc' | 'asc'};\n};\n\nexport type EventsFilterOptions = {\n  [name in EventsDisplayFilterName]: EventsDisplayFilter;\n};\n\nexport type EventsFilterPercentileValues = {\n  [name in Exclude<EventsDisplayFilterName, EventsDisplayFilterName.p100>]: number;\n};\n\nexport function getEventsFilterOptions(\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter,\n  percentileValues?: EventsFilterPercentileValues\n): EventsFilterOptions {\n  const {p99, p95, p75, p50} = percentileValues\n    ? percentileValues\n    : {p99: 0, p95: 0, p75: 0, p50: 0};\n  return {\n    [EventsDisplayFilterName.p50]: {\n      name: EventsDisplayFilterName.p50,\n      query: p50 ? [['transaction.duration', `<=${p50.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p50'),\n    },\n    [EventsDisplayFilterName.p75]: {\n      name: EventsDisplayFilterName.p75,\n      query: p75 ? [['transaction.duration', `<=${p75.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p75'),\n    },\n    [EventsDisplayFilterName.p95]: {\n      name: EventsDisplayFilterName.p95,\n      query: p95 ? [['transaction.duration', `<=${p95.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p95'),\n    },\n    [EventsDisplayFilterName.p99]: {\n      name: EventsDisplayFilterName.p99,\n      query: p99 ? [['transaction.duration', `<=${p99.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p99'),\n    },\n    [EventsDisplayFilterName.p100]: {\n      name: EventsDisplayFilterName.p100,\n      label: t('p100'),\n    },\n  };\n}\n\nexport function eventsRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  projectID?: string | string[];\n}) {\n  const pathname = `/organizations/${orgSlug}/performance/summary/events/`;\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\nfunction stringToFilter(option: string) {\n  if (\n    Object.values(EventsDisplayFilterName).includes(option as EventsDisplayFilterName)\n  ) {\n    return option as EventsDisplayFilterName;\n  }\n\n  return EventsDisplayFilterName.p100;\n}\nexport function decodeEventsDisplayFilterFromLocation(location: Location) {\n  return stringToFilter(\n    decodeScalar(location.query.showTransactions, EventsDisplayFilterName.p100)\n  );\n}\n\nexport function filterEventsDisplayToLocationQuery(\n  option: EventsDisplayFilterName,\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter\n) {\n  const eventsFilterOptions = getEventsFilterOptions(spanOperationBreakdownFilter);\n  const kind = eventsFilterOptions[option].sort?.kind;\n  const field = eventsFilterOptions[option].sort?.field;\n\n  const query: {showTransactions: string; sort?: string} = {\n    showTransactions: option,\n  };\n  if (kind && field) {\n    query.sort = `${kind === 'desc' ? '-' : ''}${field}`;\n  }\n  return query;\n}\n\nexport function mapShowTransactionToPercentile(\n  showTransaction\n): EventsDisplayFilterName | undefined {\n  switch (showTransaction) {\n    case TransactionFilterOptions.OUTLIER:\n      return EventsDisplayFilterName.p100;\n    case TransactionFilterOptions.SLOW:\n      return EventsDisplayFilterName.p95;\n    default:\n      return undefined;\n  }\n}\n\nexport function mapPercentileValues(percentileData?: TableDataRow | null) {\n  return {\n    p100: percentileData?.['p100()'],\n    p99: percentileData?.['p99()'],\n    p95: percentileData?.['p95()'],\n    p75: percentileData?.['p75()'],\n    p50: percentileData?.['p50()'],\n  } as PercentileValues;\n}\n\nexport function getPercentilesEventView(eventView: EventView): EventView {\n  const percentileColumns: QueryFieldValue[] = [\n    {\n      kind: 'function',\n      function: ['p100', '', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['p99', '', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['p95', '', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['p75', '', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['p50', '', undefined, undefined],\n    },\n  ];\n\n  return eventView.withColumns(percentileColumns);\n}\n","import {Component, Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport Alert from 'sentry/components/alert';\nimport Breadcrumbs from 'sentry/components/breadcrumbs';\nimport CompactSelect from 'sentry/components/compactSelect';\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport SearchBar from 'sentry/components/events/searchBar';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport ProjectPageFilter from 'sentry/components/projectPageFilter';\nimport {MAX_QUERY_LENGTH} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, PageFilters, Project} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {generateAggregateFields} from 'sentry/utils/discover/fields';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport withPageFilters from 'sentry/utils/withPageFilters';\n\nimport {getPerformanceLandingUrl, getTransactionSearchQuery} from '../utils';\n\nimport ChangedTransactions from './changedTransactions';\nimport {TrendChangeType, TrendFunctionField, TrendView} from './types';\nimport {\n  DEFAULT_MAX_DURATION,\n  DEFAULT_TRENDS_STATS_PERIOD,\n  getCurrentTrendFunction,\n  getCurrentTrendParameter,\n  getSelectedQueryKey,\n  modifyTrendsViewDefaultPeriod,\n  resetCursors,\n  TRENDS_FUNCTIONS,\n  TRENDS_PARAMETERS,\n} from './utils';\n\ntype Props = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  selection: PageFilters;\n};\n\ntype State = {\n  error?: string;\n  previousTrendFunction?: TrendFunctionField;\n};\n\nexport const defaultTrendsSelectionDate = {\n  start: null,\n  end: null,\n  utc: false,\n  period: DEFAULT_TRENDS_STATS_PERIOD,\n};\n\nclass TrendsContent extends Component<Props, State> {\n  state: State = {};\n\n  handleSearch = (searchQuery: string) => {\n    const {location} = this.props;\n\n    const cursors = resetCursors();\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        ...cursors,\n        query: String(searchQuery).trim() || undefined,\n      },\n    });\n  };\n\n  setError = (error: string | undefined) => {\n    this.setState({error});\n  };\n\n  handleTrendFunctionChange = (field: string) => {\n    const {organization, location} = this.props;\n\n    const offsets = {};\n\n    Object.values(TrendChangeType).forEach(trendChangeType => {\n      const queryKey = getSelectedQueryKey(trendChangeType);\n      offsets[queryKey] = undefined;\n    });\n\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.trends.change_function',\n      eventName: 'Performance Views: Change Function',\n      organization_id: parseInt(organization.id, 10),\n      function_name: field,\n    });\n\n    this.setState({\n      previousTrendFunction: getCurrentTrendFunction(location).field,\n    });\n\n    const cursors = resetCursors();\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        ...offsets,\n        ...cursors,\n        trendFunction: field,\n      },\n    });\n  };\n\n  renderError() {\n    const {error} = this.state;\n\n    if (!error) {\n      return null;\n    }\n\n    return (\n      <Alert type=\"error\" showIcon>\n        {error}\n      </Alert>\n    );\n  }\n\n  handleParameterChange = (label: string) => {\n    const {organization, location} = this.props;\n    const cursors = resetCursors();\n\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.trends.change_parameter',\n      eventName: 'Performance Views: Change Parameter',\n      organization_id: parseInt(organization.id, 10),\n      parameter_name: label,\n    });\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        ...cursors,\n        trendParameter: label,\n      },\n    });\n  };\n\n  getPerformanceLink() {\n    const {location} = this.props;\n\n    const newQuery = {\n      ...location.query,\n    };\n    const query = decodeScalar(location.query.query, '');\n    const conditions = new MutableSearch(query);\n\n    // This stops errors from occurring when navigating to other views since we are appending aggregates to the trends view\n    conditions.removeFilter('tpm()');\n    conditions.removeFilter('confidence()');\n    conditions.removeFilter('transaction.duration');\n    newQuery.query = conditions.formatString();\n    return {\n      pathname: getPerformanceLandingUrl(this.props.organization),\n      query: newQuery,\n    };\n  }\n\n  render() {\n    const {organization, eventView, location, projects} = this.props;\n    const {previousTrendFunction} = this.state;\n\n    const trendView = eventView.clone() as TrendView;\n    modifyTrendsViewDefaultPeriod(trendView, location);\n\n    const fields = generateAggregateFields(\n      organization,\n      [\n        {\n          field: 'absolute_correlation()',\n        },\n        {\n          field: 'trend_percentage()',\n        },\n        {\n          field: 'trend_difference()',\n        },\n        {\n          field: 'count_percentage()',\n        },\n        {\n          field: 'tpm()',\n        },\n        {\n          field: 'tps()',\n        },\n      ],\n      ['epm()', 'eps()']\n    );\n    const currentTrendFunction = getCurrentTrendFunction(location);\n    const currentTrendParameter = getCurrentTrendParameter(\n      location,\n      projects,\n      eventView.project\n    );\n    const query = getTransactionSearchQuery(location);\n\n    return (\n      <PageFiltersContainer\n        defaultSelection={{\n          datetime: defaultTrendsSelectionDate,\n        }}\n      >\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <Breadcrumbs\n              crumbs={[\n                {\n                  label: 'Performance',\n                  to: this.getPerformanceLink(),\n                },\n                {\n                  label: 'Trends',\n                },\n              ]}\n            />\n            <Layout.Title>{t('Trends')}</Layout.Title>\n          </Layout.HeaderContent>\n        </Layout.Header>\n        <Layout.Body>\n          <Layout.Main fullWidth>\n            <DefaultTrends location={location} eventView={eventView} projects={projects}>\n              <FilterActions>\n                <PageFilterBar condensed>\n                  <ProjectPageFilter />\n                  <EnvironmentPageFilter />\n                  <DatePageFilter alignDropdown=\"left\" />\n                </PageFilterBar>\n                <StyledSearchBar\n                  searchSource=\"trends\"\n                  organization={organization}\n                  projectIds={trendView.project}\n                  query={query}\n                  fields={fields}\n                  onSearch={this.handleSearch}\n                  maxQueryLength={MAX_QUERY_LENGTH}\n                />\n                <CompactSelect\n                  triggerProps={{prefix: t('Percentile')}}\n                  value={currentTrendFunction.field}\n                  options={TRENDS_FUNCTIONS.map(({label, field}) => ({\n                    value: field,\n                    label,\n                  }))}\n                  onChange={opt => this.handleTrendFunctionChange(opt.value)}\n                />\n                <CompactSelect\n                  triggerProps={{prefix: t('Parameter')}}\n                  value={currentTrendParameter.label}\n                  options={TRENDS_PARAMETERS.map(({label}) => ({\n                    value: label,\n                    label,\n                  }))}\n                  onChange={opt => this.handleParameterChange(opt.value)}\n                />\n              </FilterActions>\n              <ListContainer>\n                <ChangedTransactions\n                  trendChangeType={TrendChangeType.IMPROVED}\n                  previousTrendFunction={previousTrendFunction}\n                  trendView={trendView}\n                  location={location}\n                  setError={this.setError}\n                />\n                <ChangedTransactions\n                  trendChangeType={TrendChangeType.REGRESSION}\n                  previousTrendFunction={previousTrendFunction}\n                  trendView={trendView}\n                  location={location}\n                  setError={this.setError}\n                />\n              </ListContainer>\n            </DefaultTrends>\n          </Layout.Main>\n        </Layout.Body>\n      </PageFiltersContainer>\n    );\n  }\n}\n\ntype DefaultTrendsProps = {\n  children: React.ReactNode[];\n  eventView: EventView;\n  location: Location;\n  projects: Project[];\n};\n\nclass DefaultTrends extends Component<DefaultTrendsProps> {\n  hasPushedDefaults = false;\n\n  render() {\n    const {children, location, eventView, projects} = this.props;\n\n    const queryString = decodeScalar(location.query.query);\n    const trendParameter = getCurrentTrendParameter(\n      location,\n      projects,\n      eventView.project\n    );\n    const conditions = new MutableSearch(queryString || '');\n\n    if (queryString || this.hasPushedDefaults) {\n      this.hasPushedDefaults = true;\n      return <Fragment>{children}</Fragment>;\n    }\n    this.hasPushedDefaults = true;\n    conditions.setFilterValues('tpm()', ['>0.01']);\n    conditions.setFilterValues(trendParameter.column, ['>0', `<${DEFAULT_MAX_DURATION}`]);\n\n    const query = conditions.formatString();\n    eventView.query = query;\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        cursor: undefined,\n        query: String(query).trim() || undefined,\n      },\n    });\n    return null;\n  }\n}\n\nconst FilterActions = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n  margin-bottom: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: repeat(3, min-content);\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    grid-template-columns: auto 1fr auto auto;\n  }\n`;\n\nconst StyledSearchBar = styled(SearchBar)`\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    order: 1;\n    grid-column: 1/5;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    order: initial;\n    grid-column: auto;\n  }\n`;\n\nconst ListContainer = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: repeat(2, minmax(0, 1fr));\n  }\n`;\n\nexport default withPageFilters(TrendsContent);\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport {Client} from 'sentry/api';\nimport NoProjectMessage from 'sentry/components/noProjectMessage';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport {Organization, PageFilters, Project} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withPageFilters from 'sentry/utils/withPageFilters';\nimport withProjects from 'sentry/utils/withProjects';\n\nimport {generatePerformanceEventView} from '../data';\n\nimport TrendsContent from './content';\n\ntype Props = {\n  api: Client;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  selection: PageFilters;\n};\n\ntype State = {\n  eventView: EventView;\n  error?: string;\n};\n\nclass TrendsSummary extends Component<Props, State> {\n  static getDerivedStateFromProps(nextProps: Readonly<Props>, prevState: State): State {\n    return {\n      ...prevState,\n      eventView: generatePerformanceEventView(nextProps.location, nextProps.projects, {\n        isTrends: true,\n      }),\n    };\n  }\n\n  state: State = {\n    eventView: generatePerformanceEventView(this.props.location, this.props.projects, {\n      isTrends: true,\n    }),\n    error: undefined,\n  };\n\n  getDocumentTitle(): string {\n    return [t('Trends'), t('Performance')].join(' - ');\n  }\n\n  setError = (error: string | undefined) => {\n    this.setState({error});\n  };\n\n  renderContent() {\n    const {organization, location, projects} = this.props;\n    const {eventView} = this.state;\n    return (\n      <TrendsContent\n        organization={organization}\n        location={location}\n        eventView={eventView}\n        projects={projects}\n      />\n    );\n  }\n\n  render() {\n    const {organization} = this.props;\n\n    return (\n      <SentryDocumentTitle title={this.getDocumentTitle()} orgSlug={organization.slug}>\n        <StyledPageContent>\n          <NoProjectMessage organization={organization}>\n            {this.renderContent()}\n          </NoProjectMessage>\n        </StyledPageContent>\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nexport default withOrganization(withProjects(withPageFilters(withApi(TrendsSummary))));\n\nconst StyledPageContent = styled(PageContent)`\n  padding: 0;\n`;\n"],"names":["SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","STATIC_FIELD_TAGS_SET","Set","Object","keys","FIELD_TAGS","STATIC_FIELD_TAGS","reduce","tags","key","kind","FieldKind","STATIC_FIELD_TAGS_WITHOUT_TRACING","omit","TRACING_FIELDS","STATIC_SPAN_TAGS","SPAN_OP_BREAKDOWN_FIELDS","name","STATIC_SEMVER_TAGS","SEMVER_TAGS","SearchBar","props","maxSearchItems","organization","omitTags","fields","projectIds","includeSessionTagsValues","maxMenuHeight","customMeasurements","api","useApi","collectedTransactionFromGetTagsListRef","useRef","functionTags","useMemo","length","acc","item","has","field","isEquation","isCustomMeasurement","getFunctionTags","tagsWithKind","useEffect","getEventFieldValues","cache","clear","memoize","tag","query","endpointParams","projectIdStrings","map","String","isAggregateField","isMeasurement","Promise","resolve","fetchTagValues","orgSlug","slug","tagKey","search","includeTransactions","includeSessions","then","results","flatten","filter","defined","Error","getTagList","measurements","transaction","current","Sentry","measurementsWithKind","getMeasurementTags","combinedTags","features","includes","assign","FieldKey","values","sort","a","b","toLowerCase","localeCompare","predefined","list","totalCount","setTag","countGroup","find","n","finish","hasRecentSearches","savedSearchType","SavedSearchType","onGetTagValues","supportedTags","prepareQuery","replace","excludedTags","customPerformanceMetrics","withTags","getBucketWidth","data","bin","computeBuckets","width","bucket","start","end","formatHistogramData","precision","type","additionalFieldsFn","formatter","value","decimalPlaces","getDuration","factor","Math","round","Number","EPSILON","toLocaleString","count","WrappedComponent","WithTags","Component","TagStore","this","setState","undefined","componentWillUnmount","unsubscribe","render","state","getDisplayName","EventsDisplayFilterName","getEventsFilterOptions","spanOperationBreakdownFilter","percentileValues","p99","p95","p75","p50","toFixed","filterToField","label","t","p100","eventsRouteWithQuery","projectID","pathname","project","environment","statsPeriod","decodeEventsDisplayFilterFromLocation","location","option","decodeScalar","showTransactions","filterEventsDisplayToLocationQuery","eventsFilterOptions","mapShowTransactionToPercentile","showTransaction","TransactionFilterOptions","mapPercentileValues","percentileData","getPercentilesEventView","eventView","withColumns","function","defaultTrendsSelectionDate","utc","period","DEFAULT_TRENDS_STATS_PERIOD","TrendsContent","searchQuery","cursors","resetCursors","browserHistory","trim","error","offsets","TrendChangeType","forEach","trendChangeType","queryKey","getSelectedQueryKey","trackAnalyticsEvent","eventKey","eventName","organization_id","parseInt","id","function_name","previousTrendFunction","getCurrentTrendFunction","trendFunction","parameter_name","trendParameter","renderError","showIcon","getPerformanceLink","newQuery","conditions","MutableSearch","removeFilter","formatString","getPerformanceLandingUrl","projects","trendView","clone","modifyTrendsViewDefaultPeriod","generateAggregateFields","currentTrendFunction","currentTrendParameter","getCurrentTrendParameter","getTransactionSearchQuery","defaultSelection","datetime","crumbs","to","fullWidth","DefaultTrends","FilterActions","condensed","alignDropdown","StyledSearchBar","searchSource","onSearch","handleSearch","maxQueryLength","MAX_QUERY_LENGTH","triggerProps","prefix","options","TRENDS_FUNCTIONS","onChange","opt","handleTrendFunctionChange","TRENDS_PARAMETERS","handleParameterChange","ListContainer","setError","children","queryString","hasPushedDefaults","Fragment","setFilterValues","column","DEFAULT_MAX_DURATION","cursor","space","p","theme","breakpoints","small","xlarge","withPageFilters","TrendsSummary","generatePerformanceEventView","isTrends","static","nextProps","prevState","getDocumentTitle","join","renderContent","title","StyledPageContent","withOrganization","withProjects","withApi","PageContent"],"sourceRoot":""}