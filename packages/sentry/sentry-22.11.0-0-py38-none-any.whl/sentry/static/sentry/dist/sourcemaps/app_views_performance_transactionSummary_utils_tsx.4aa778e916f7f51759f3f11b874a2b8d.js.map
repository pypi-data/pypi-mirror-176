{"version":3,"file":"chunks/app_views_performance_transactionSummary_utils_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/performance/quickTrace/utils.tsx","webpack:///./app/utils/performance/urls.ts","webpack:///./app/views/performance/traceDetails/utils.tsx","webpack:///./app/views/performance/transactionSummary/utils.tsx"],"sourcesContent":["import omit from 'lodash/omit';\nimport moment from 'moment-timezone';\n\nimport {getTraceDateTimeRange} from 'sentry/components/events/interfaces/spans/utils';\nimport {ALL_ACCESS_PROJECTS} from 'sentry/constants/pageFilters';\nimport {OrganizationSummary} from 'sentry/types';\nimport {Event, EventTransaction} from 'sentry/types/event';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {DiscoverQueryProps} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {\n  QuickTrace,\n  QuickTraceEvent,\n  TraceFull,\n  TraceFullDetailed,\n  TraceLite,\n} from 'sentry/utils/performance/quickTrace/types';\n\nexport function isTransaction(event: Event): event is EventTransaction {\n  return event.type === 'transaction';\n}\n\n/**\n * An event can be an error or a transaction. We need to check whether the current\n * event id is in the list of errors as well\n */\nexport function isCurrentEvent(\n  event: TraceFull | QuickTraceEvent,\n  currentEvent: Event\n): boolean {\n  if (isTransaction(currentEvent)) {\n    return event.event_id === currentEvent.id;\n  }\n  return (\n    event.errors !== undefined && event.errors.some(e => e.event_id === currentEvent.id)\n  );\n}\n\ntype PathNode = {\n  event: TraceFull;\n  path: TraceLite;\n};\n\n/**\n * The `events-full` endpoint returns the full trace containing the specified event.\n * This means any sibling paths in the trace will also be returned.\n *\n * This method strips away these sibling paths leaving only the path from the root to\n * the specified event and all of its children/descendants.\n *\n * This method additionally flattens the trace into an array of the transactions in\n * the trace.\n */\nexport function flattenRelevantPaths(\n  currentEvent: Event,\n  traceFull: TraceFull\n): TraceLite {\n  const relevantPath: TraceLite = [];\n  const events: TraceFull[] = [];\n\n  /**\n   * First find a path from the root transaction to the current transaction via\n   * a breadth first search. This adds all transactions from the root to the\n   * current transaction (excluding the current transaction itself), to the\n   * relevant path.\n   */\n  const paths: PathNode[] = [{event: traceFull, path: []}];\n  while (paths.length) {\n    const current = paths.shift()!;\n    if (isCurrentEvent(current.event, currentEvent)) {\n      for (const node of current.path) {\n        relevantPath.push(node);\n      }\n      events.push(current.event);\n    } else {\n      const path = [...current.path, simplifyEvent(current.event)];\n      for (const child of current.event.children) {\n        paths.push({event: child, path});\n      }\n    }\n  }\n\n  if (!events.length) {\n    throw new Error('No relevant path exists!');\n  }\n\n  /**\n   * Traverse all transactions from current transaction onwards and add\n   * them all to the relevant path.\n   */\n  while (events.length) {\n    const current = events.shift()!;\n    for (const child of current.children) {\n      events.push(child);\n    }\n    relevantPath.push(simplifyEvent(current));\n  }\n\n  return relevantPath;\n}\n\nfunction simplifyEvent(event: TraceFull): QuickTraceEvent {\n  return omit(event, ['children']);\n}\n\ntype ParsedQuickTrace = {\n  /**\n   * `[]` represents the lack of ancestors in a full trace navigator\n   * `null` represents the uncertainty of ancestors in a lite trace navigator\n   */\n  ancestors: QuickTraceEvent[] | null;\n  /**\n   * `[]` represents the lack of children in a full/lite trace navigator\n   */\n  children: QuickTraceEvent[];\n  current: QuickTraceEvent;\n  /**\n   * `[]` represents the lack of descendants in a full trace navigator\n   * `null` represents the uncertainty of descendants in a lite trace navigator\n   */\n  descendants: QuickTraceEvent[] | null;\n  /**\n   * `null` represents either the lack of a direct parent or the uncertainty\n   * of what the parent is\n   */\n  parent: QuickTraceEvent | null;\n  /**\n   * `null` represents the lack of a root. It may still have a parent\n   */\n  root: QuickTraceEvent | null;\n};\n\nexport function parseQuickTrace(\n  quickTrace: QuickTrace,\n  event: Event,\n  organization: OrganizationSummary\n): ParsedQuickTrace | null {\n  const {type, trace} = quickTrace;\n\n  if (type === 'empty' || trace === null) {\n    throw new Error('Current event not in trace navigator!');\n  }\n\n  const isFullTrace = type === 'full';\n\n  const current = trace.find(e => isCurrentEvent(e, event)) ?? null;\n  if (current === null) {\n    throw new Error('Current event not in trace navigator!');\n  }\n\n  /**\n   * The parent event is the direct ancestor of the current event.\n   * This takes priority over the root, meaning if the parent is\n   * the root of the trace, this favours showing it as the parent.\n   */\n  const parent = current.parent_event_id\n    ? trace.find(e => e.event_id === current.parent_event_id) ?? null\n    : null;\n\n  /**\n   * The root event is the first event in the trace. This has lower priority\n   * than the parent event, meaning if the root event is the parent event of\n   * the current event, this favours showing it as the parent event.\n   */\n  const root =\n    trace.find(\n      e =>\n        // a root can't be the current event\n        e.event_id !== current.event_id &&\n        // a root can't be the direct parent\n        e.event_id !== parent?.event_id &&\n        // a root has to to be the first generation\n        e.generation === 0\n    ) ?? null;\n\n  const isChildren = e => e.parent_event_id === current.event_id;\n\n  const isDescendant = e =>\n    // the current generation needs to be known to determine a descendant\n    current.generation !== null &&\n    // the event's generation needs to be known to determine a descendant\n    e.generation !== null &&\n    // a descendant is the generation after the direct children\n    current.generation + 1 < e.generation;\n\n  const isAncestor = e =>\n    // the current generation needs to be known to determine an ancestor\n    current.generation !== null &&\n    // the event's generation needs to be known to determine an ancestor\n    e.generation !== null &&\n    // an ancestor can't be the root\n    e.generation > 0 &&\n    // an ancestor is the generation before the direct parent\n    current.generation - 1 > e.generation;\n\n  const ancestors: TraceLite | null = isFullTrace ? [] : null;\n  const children: TraceLite = [];\n  const descendants: TraceLite | null = isFullTrace ? [] : null;\n  const projects = new Set();\n\n  trace.forEach(e => {\n    projects.add(e.project_id);\n    if (isChildren(e)) {\n      children.push(e);\n    } else if (isFullTrace) {\n      if (isAncestor(e)) {\n        ancestors?.push(e);\n      } else if (isDescendant(e)) {\n        descendants?.push(e);\n      }\n    }\n  });\n\n  if (isFullTrace && projects.size > 1) {\n    handleProjectMeta(organization, projects.size);\n  }\n\n  return {\n    root,\n    ancestors: ancestors === null ? null : sortTraceLite(ancestors),\n    parent,\n    current,\n    children: sortTraceLite(children),\n    descendants: descendants === null ? null : sortTraceLite(descendants),\n  };\n}\n\nfunction sortTraceLite(trace: TraceLite): TraceLite {\n  return trace.sort((a, b) => b['transaction.duration'] - a['transaction.duration']);\n}\n\nexport function getTraceRequestPayload({\n  eventView,\n  location,\n}: Pick<DiscoverQueryProps, 'eventView' | 'location'>) {\n  return omit(eventView.getEventsAPIPayload(location), ['field', 'sort', 'per_page']);\n}\n\nexport function makeEventView({\n  start,\n  end,\n  statsPeriod,\n}: {\n  end?: string;\n  start?: string;\n  statsPeriod?: string | null;\n}) {\n  return EventView.fromSavedQuery({\n    id: undefined,\n    version: 2,\n    name: '',\n    // This field doesn't actually do anything,\n    // just here to satisfy a constraint in EventView.\n    fields: ['transaction.duration'],\n    projects: [ALL_ACCESS_PROJECTS],\n    query: '',\n    environment: [],\n    start,\n    end,\n    range: statsPeriod ?? undefined,\n  });\n}\n\nexport function getTraceTimeRangeFromEvent(event: Event): {end: string; start: string} {\n  const start = isTransaction(event)\n    ? event.startTimestamp\n    : moment(event.dateReceived ? event.dateReceived : event.dateCreated).valueOf() /\n      1000;\n  const end = isTransaction(event) ? event.endTimestamp : start;\n  return getTraceDateTimeRange({start, end});\n}\n\nexport function reduceTrace<T>(\n  trace: TraceFullDetailed,\n  visitor: (acc: T, e: TraceFullDetailed) => T,\n  initialValue: T\n): T {\n  let result = initialValue;\n\n  const events = [trace];\n  while (events.length) {\n    const current = events.pop()!;\n    for (const child of current.children) {\n      events.push(child);\n    }\n    result = visitor(result, current);\n  }\n\n  return result;\n}\n\nexport function filterTrace(\n  trace: TraceFullDetailed,\n  predicate: (transaction: TraceFullDetailed) => boolean\n): TraceFullDetailed[] {\n  return reduceTrace<TraceFullDetailed[]>(\n    trace,\n    (transactions, transaction) => {\n      if (predicate(transaction)) {\n        transactions.push(transaction);\n      }\n      return transactions;\n    },\n    []\n  );\n}\n\nexport function isTraceFull(transaction): transaction is TraceFull {\n  return Boolean((transaction as TraceFull).event_id);\n}\n\nexport function isTraceFullDetailed(transaction): transaction is TraceFullDetailed {\n  return Boolean((transaction as TraceFullDetailed).event_id);\n}\n\nfunction handleProjectMeta(organization: OrganizationSummary, projects: number) {\n  trackAdvancedAnalyticsEvent('quick_trace.connected_services', {\n    organization: organization.id,\n    projects,\n  });\n}\n","import {LocationDescriptor, Query} from 'history';\n\nimport {spanTargetHash} from 'sentry/components/events/interfaces/spans/utils';\nimport {Organization} from 'sentry/types';\nimport {defined} from 'sentry/utils';\n\nexport function getTransactionDetailsUrl(\n  orgSlug: Organization['slug'],\n  eventSlug: string,\n  transaction?: string,\n  query?: Query,\n  spanId?: string\n): LocationDescriptor {\n  const locationQuery = {\n    ...(query || {}),\n    transaction,\n  };\n  if (!defined(locationQuery.transaction)) {\n    delete locationQuery.transaction;\n  }\n\n  const target = {\n    pathname: `/organizations/${orgSlug}/performance/${eventSlug}/`,\n    query: locationQuery,\n    hash: defined(spanId) ? spanTargetHash(spanId) : undefined,\n  };\n  if (!defined(target.hash)) {\n    delete target.hash;\n  }\n\n  return target;\n}\n","import {LocationDescriptor, Query} from 'history';\n\nimport {PAGE_URL_PARAM} from 'sentry/constants/pageFilters';\nimport {OrganizationSummary} from 'sentry/types';\nimport {TraceFullDetailed} from 'sentry/utils/performance/quickTrace/types';\nimport {reduceTrace} from 'sentry/utils/performance/quickTrace/utils';\n\nimport {TraceInfo} from './types';\n\nexport function getTraceDetailsUrl(\n  organization: OrganizationSummary,\n  traceSlug: string,\n  dateSelection,\n  query: Query\n): LocationDescriptor {\n  const {start, end, statsPeriod} = dateSelection;\n  return {\n    pathname: `/organizations/${organization.slug}/performance/trace/${traceSlug}/`,\n    query: {\n      ...query,\n      statsPeriod,\n      [PAGE_URL_PARAM.PAGE_START]: start,\n      [PAGE_URL_PARAM.PAGE_END]: end,\n    },\n  };\n}\n\nfunction traceVisitor() {\n  return (accumulator: TraceInfo, event: TraceFullDetailed) => {\n    for (const error of event.errors ?? []) {\n      accumulator.errors.add(error.event_id);\n    }\n\n    accumulator.transactions.add(event.event_id);\n    accumulator.projects.add(event.project_slug);\n\n    accumulator.startTimestamp = Math.min(\n      accumulator.startTimestamp,\n      event.start_timestamp\n    );\n    accumulator.endTimestamp = Math.max(accumulator.endTimestamp, event.timestamp);\n\n    accumulator.maxGeneration = Math.max(accumulator.maxGeneration, event.generation);\n\n    return accumulator;\n  };\n}\n\nexport function getTraceInfo(traces: TraceFullDetailed[]) {\n  const initial = {\n    projects: new Set<string>(),\n    errors: new Set<string>(),\n    transactions: new Set<string>(),\n    startTimestamp: Number.MAX_SAFE_INTEGER,\n    endTimestamp: 0,\n    maxGeneration: 0,\n  };\n\n  return traces.reduce(\n    (info: TraceInfo, trace: TraceFullDetailed) =>\n      reduceTrace<TraceInfo>(trace, traceVisitor(), info),\n    initial\n  );\n}\n\nexport function isRootTransaction(trace: TraceFullDetailed): boolean {\n  // Root transactions has no parent_span_id\n  return trace.parent_span_id === null;\n}\n","import {PlainRoute} from 'react-router';\nimport styled from '@emotion/styled';\nimport {LocationDescriptor, Query} from 'history';\n\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {TableDataRow} from 'sentry/utils/discover/discoverQuery';\nimport {generateEventSlug} from 'sentry/utils/discover/urls';\nimport getRouteStringFromRoutes from 'sentry/utils/getRouteStringFromRoutes';\nimport {getTransactionDetailsUrl} from 'sentry/utils/performance/urls';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport {getTraceDetailsUrl} from 'sentry/views/performance/traceDetails/utils';\n\nimport {DisplayModes} from './transactionOverview/charts';\n\nexport enum TransactionFilterOptions {\n  FASTEST = 'fastest',\n  SLOW = 'slow',\n  OUTLIER = 'outlier',\n  RECENT = 'recent',\n}\n\nexport function generateTransactionSummaryRoute({orgSlug}: {orgSlug: string}): string {\n  return `/organizations/${orgSlug}/performance/summary/`;\n}\n\n// normalizes search conditions by removing any redundant search conditions before presenting them in:\n// - query strings\n// - search UI\nexport function normalizeSearchConditions(query: string): MutableSearch {\n  const filterParams = normalizeSearchConditionsWithTransactionName(query);\n\n  // no need to include transaction as its already in the query params\n  filterParams.removeFilter('transaction');\n\n  return filterParams;\n}\n\n// normalizes search conditions by removing any redundant search conditions, but retains any transaction name\nexport function normalizeSearchConditionsWithTransactionName(\n  query: string\n): MutableSearch {\n  const filterParams = new MutableSearch(query);\n\n  // remove any event.type queries since it is implied to apply to only transactions\n  filterParams.removeFilter('event.type');\n\n  return filterParams;\n}\n\nexport function transactionSummaryRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n  unselectedSeries = 'p100()',\n  display,\n  trendFunction,\n  trendColumn,\n  showTransactions,\n  additionalQuery,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  additionalQuery?: Record<string, string>;\n  display?: DisplayModes;\n  projectID?: string | string[];\n  showTransactions?: TransactionFilterOptions;\n  trendColumn?: string;\n  trendFunction?: string;\n  unselectedSeries?: string | string[];\n}) {\n  const pathname = generateTransactionSummaryRoute({\n    orgSlug,\n  });\n\n  let searchFilter: typeof query.query;\n  if (typeof query.query === 'string') {\n    searchFilter = normalizeSearchConditions(query.query).formatString();\n  } else {\n    searchFilter = query.query;\n  }\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: searchFilter,\n      unselectedSeries,\n      showTransactions,\n      display,\n      trendFunction,\n      trendColumn,\n      referrer: 'performance-transaction-summary',\n      ...additionalQuery,\n    },\n  };\n}\n\nexport function generateTraceLink(dateSelection) {\n  return (\n    organization: Organization,\n    tableRow: TableDataRow,\n    _query: Query\n  ): LocationDescriptor => {\n    const traceId = `${tableRow.trace}`;\n    if (!traceId) {\n      return {};\n    }\n\n    return getTraceDetailsUrl(organization, traceId, dateSelection, {});\n  };\n}\n\nexport function generateTransactionLink(transactionName: string) {\n  return (\n    organization: Organization,\n    tableRow: TableDataRow,\n    query: Query,\n    spanId?: string\n  ): LocationDescriptor => {\n    const eventSlug = generateEventSlug(tableRow);\n    return getTransactionDetailsUrl(\n      organization.slug,\n      eventSlug,\n      transactionName,\n      query,\n      spanId\n    );\n  };\n}\n\nexport function generateReplayLink(routes: PlainRoute<any>[]) {\n  return (\n    organization: Organization,\n    tableRow: TableDataRow,\n    _query: Query | undefined\n  ): LocationDescriptor => {\n    const replayId = tableRow.replayId;\n    if (!replayId) {\n      return {};\n    }\n\n    const replaySlug = `${tableRow['project.name']}:${replayId}`;\n    const referrer = getRouteStringFromRoutes(routes);\n\n    if (!tableRow.timestamp) {\n      return {\n        pathname: `/organizations/${organization.slug}/replays/${replaySlug}/`,\n        query: {\n          referrer,\n        },\n      };\n    }\n\n    const transactionTimestamp = new Date(tableRow.timestamp).getTime();\n\n    const transactionStartTimestamp =\n      transactionTimestamp - (tableRow['transaction.duration'] as number);\n\n    return {\n      pathname: `/organizations/${organization.slug}/replays/${replaySlug}/`,\n      query: {\n        event_t: transactionStartTimestamp,\n        referrer,\n      },\n    };\n  };\n}\nexport const SidebarSpacer = styled('div')`\n  margin-top: ${space(3)};\n`;\n"],"names":["isTransaction","event","type","isCurrentEvent","currentEvent","event_id","id","undefined","errors","some","e","flattenRelevantPaths","traceFull","relevantPath","events","paths","path","length","current","shift","node","push","simplifyEvent","child","children","Error","omit","parseQuickTrace","quickTrace","organization","trace","isFullTrace","find","parent","parent_event_id","root","generation","ancestors","descendants","projects","Set","forEach","add","project_id","isChildren","isAncestor","isDescendant","size","trackAdvancedAnalyticsEvent","handleProjectMeta","sortTraceLite","sort","a","b","getTraceRequestPayload","eventView","location","getEventsAPIPayload","makeEventView","start","end","statsPeriod","EventView","version","name","fields","ALL_ACCESS_PROJECTS","query","environment","range","getTraceTimeRangeFromEvent","startTimestamp","moment","dateReceived","dateCreated","valueOf","endTimestamp","getTraceDateTimeRange","reduceTrace","visitor","initialValue","result","pop","filterTrace","predicate","transactions","transaction","isTraceFull","Boolean","isTraceFullDetailed","getTransactionDetailsUrl","orgSlug","eventSlug","spanId","locationQuery","defined","target","pathname","hash","spanTargetHash","getTraceDetailsUrl","traceSlug","dateSelection","slug","PAGE_URL_PARAM","getTraceInfo","traces","initial","Number","MAX_SAFE_INTEGER","maxGeneration","reduce","info","accumulator","error","project_slug","Math","min","start_timestamp","max","timestamp","isRootTransaction","parent_span_id","TransactionFilterOptions","normalizeSearchConditions","filterParams","normalizeSearchConditionsWithTransactionName","removeFilter","MutableSearch","transactionSummaryRouteWithQuery","projectID","unselectedSeries","display","trendFunction","trendColumn","showTransactions","additionalQuery","generateTransactionSummaryRoute","searchFilter","formatString","project","referrer","generateTraceLink","tableRow","_query","traceId","generateTransactionLink","transactionName","generateEventSlug","generateReplayLink","routes","replayId","replaySlug","getRouteStringFromRoutes","transactionStartTimestamp","Date","getTime","event_t","SidebarSpacer","space"],"sourceRoot":""}