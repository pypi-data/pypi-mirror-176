{"version":3,"file":"chunks/app_views_performance_transactionSummary_transactionSpans_index_tsx-node_modules_lodash__base-bd10c8.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/gridEditable/sortLink.tsx","webpack:///./app/utils/performance/suspectSpans/suspectSpansQuery.tsx","webpack:///./app/utils/performance/suspectSpans/spanOpsQuery.tsx","webpack:///./app/views/performance/transactionSummary/transactionSpans/opsFilter.tsx","webpack:///./app/views/performance/transactionSummary/transactionSpans/content.tsx","webpack:///./app/views/performance/transactionSummary/transactionSpans/index.tsx","webpack:///./app/views/performance/transactionSummary/transactionSpans/spanDetails/utils.tsx","webpack:///./app/views/performance/transactionSummary/transactionSpans/suspectSpansTable.tsx","webpack:///../node_modules/lodash/_baseExtremum.js","webpack:///../node_modules/lodash/_baseGt.js"],"sourcesContent":["import {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {LocationDescriptorObject} from 'history';\nimport omit from 'lodash/omit';\n\nimport Link from 'sentry/components/links/link';\nimport {IconArrow} from 'sentry/icons';\n\nexport type Alignments = 'left' | 'right' | undefined;\nexport type Directions = 'desc' | 'asc' | undefined;\n\ntype Props = {\n  align: Alignments;\n  canSort: boolean;\n  direction: Directions;\n  generateSortLink: () => LocationDescriptorObject | undefined;\n  title: React.ReactNode;\n  onClick?: (e: React.MouseEvent<HTMLAnchorElement>) => void;\n  replace?: boolean;\n};\n\nfunction SortLink({\n  align,\n  title,\n  canSort,\n  generateSortLink,\n  onClick,\n  direction,\n  replace,\n}: Props) {\n  const target = generateSortLink();\n\n  if (!target || !canSort) {\n    return <StyledNonLink align={align}>{title}</StyledNonLink>;\n  }\n\n  const arrow = !direction ? null : (\n    <StyledIconArrow size=\"xs\" direction={direction === 'desc' ? 'down' : 'up'} />\n  );\n\n  const handleOnClick: React.MouseEventHandler<HTMLAnchorElement> = e => {\n    if (replace) {\n      e.preventDefault();\n      browserHistory.replace(target);\n    }\n    onClick?.(e);\n  };\n\n  return (\n    <StyledLink align={align} to={target} onClick={handleOnClick}>\n      {title} {arrow}\n    </StyledLink>\n  );\n}\n\ntype LinkProps = React.ComponentPropsWithoutRef<typeof Link>;\ntype StyledLinkProps = LinkProps & {align: Alignments};\n\nconst StyledLink = styled((props: StyledLinkProps) => {\n  const forwardProps = omit(props, ['align', 'css']);\n  return <Link {...forwardProps} />;\n})`\n  display: block;\n  width: 100%;\n  white-space: nowrap;\n  color: inherit;\n\n  &:hover,\n  &:active,\n  &:focus,\n  &:visited {\n    color: inherit;\n  }\n\n  ${(p: StyledLinkProps) => (p.align ? `text-align: ${p.align};` : '')}\n`;\n\nconst StyledNonLink = styled('div')<{align: Alignments}>`\n  display: block;\n  width: 100%;\n  white-space: nowrap;\n  ${(p: {align: Alignments}) => (p.align ? `text-align: ${p.align};` : '')}\n`;\n\nconst StyledIconArrow = styled(IconArrow)`\n  vertical-align: top;\n`;\n\nexport default SortLink;\n","import omit from 'lodash/omit';\n\nimport {defined} from 'sentry/utils';\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\n\nimport {SuspectSpans} from './types';\n\ntype SuspectSpansProps = {\n  maxExclusiveTime?: string;\n  minExclusiveTime?: string;\n  perSuspect?: number;\n  spanGroups?: string[];\n  spanOps?: string[];\n};\n\ntype RequestProps = DiscoverQueryProps & SuspectSpansProps;\n\nexport type ChildrenProps = Omit<GenericChildrenProps<SuspectSpansProps>, 'tableData'> & {\n  suspectSpans: SuspectSpans | null;\n};\n\ntype Props = RequestProps & {\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\nfunction getSuspectSpanPayload(props: RequestProps) {\n  const {perSuspect, spanOps, spanGroups, minExclusiveTime, maxExclusiveTime} = props;\n  const payload = {\n    perSuspect,\n    spanOp: spanOps,\n    spanGroup: spanGroups,\n    min_exclusive_time: minExclusiveTime,\n    max_exclusive_time: maxExclusiveTime,\n  };\n  if (!defined(payload.perSuspect)) {\n    delete payload.perSuspect;\n  }\n  if (!defined(payload.spanOp)) {\n    delete payload.spanOp;\n  }\n  if (!defined(payload.spanGroup)) {\n    delete payload.spanGroup;\n  }\n  const additionalPayload = props.eventView.getEventsAPIPayload(props.location);\n  return {\n    ...payload,\n    ...additionalPayload,\n  };\n}\n\nfunction SuspectSpansQuery(props: Props) {\n  return (\n    <GenericDiscoverQuery<SuspectSpans, SuspectSpansProps>\n      route=\"events-spans-performance\"\n      getRequestPayload={getSuspectSpanPayload}\n      {...omit(props, 'children')}\n    >\n      {({tableData, ...rest}) => {\n        return props.children({suspectSpans: tableData, ...rest});\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n\nexport default SuspectSpansQuery;\n","import omit from 'lodash/omit';\n\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\n\nimport {SpanOps} from './types';\n\ntype SpanOpsProps = {};\n\ntype RequestProps = DiscoverQueryProps & SpanOpsProps;\n\ntype ChildrenProps = Omit<GenericChildrenProps<SpanOpsProps>, 'tableData'> & {\n  spanOps: SpanOps | null;\n};\n\ntype Props = RequestProps & {\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\nfunction SpanOpsQuery(props: Props) {\n  return (\n    <GenericDiscoverQuery<SpanOps, SpanOpsProps>\n      route=\"events-span-ops\"\n      limit={20}\n      {...omit(props, 'children')}\n    >\n      {({tableData, ...rest}) => {\n        return props.children({spanOps: tableData, ...rest});\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n\nexport default SpanOpsQuery;\n","import styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport CompactSelect from 'sentry/components/compactSelect';\nimport {pickBarColor} from 'sentry/components/performance/waterfall/utils';\nimport {IconFilter, IconWarning} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport SpanOpsQuery from 'sentry/utils/performance/suspectSpans/spanOpsQuery';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\n\ntype Props = {\n  eventView: EventView;\n  handleOpChange: (op: string | undefined) => void;\n  location: Location;\n  organization: Organization;\n  transactionName: string;\n};\n\nfunction getMenuOptions({spanOps, isLoading, error}) {\n  if (isLoading) {\n    return [{key: 'isLoading', disabled: true, label: t('Loading…')}];\n  }\n\n  if (error) {\n    return [\n      {\n        key: 'error',\n        disabled: true,\n        label: t('Error loading operations'),\n        leadingItems: <IconWarning color=\"subText\" />,\n      },\n    ];\n  }\n\n  return spanOps.map(spanOp => ({\n    value: spanOp.op,\n    label: spanOp.op,\n    leadingItems: <OperationDot backgroundColor={pickBarColor(spanOp.op)} />,\n  }));\n}\n\nexport default function OpsFilter(props: Props) {\n  const {location, eventView, organization, handleOpChange, transactionName} = props;\n\n  // clear out the query string from the event view\n  // as we want to restrict queries to the op names\n  const conditions = new MutableSearch('');\n  conditions\n    .setFilterValues('event.type', ['transaction'])\n    .setFilterValues('transaction', [transactionName]);\n  const opsFilterEventView = eventView.clone();\n  opsFilterEventView.query = conditions.formatString();\n\n  const currentOp = decodeScalar(location.query.spanOp);\n\n  return (\n    <SpanOpsQuery\n      location={location}\n      orgSlug={organization.slug}\n      eventView={opsFilterEventView}\n      cursor=\"0:0:1\"\n      noPagination\n    >\n      {results => (\n        <CompactSelect\n          isClearable\n          maxMenuWidth=\"24rem\"\n          menuTitle={t('Filter by operation')}\n          options={getMenuOptions(results)}\n          onChange={opt => handleOpChange(opt?.value)}\n          value={currentOp}\n          triggerLabel={currentOp ?? t('Filter')}\n          triggerProps={{icon: <IconFilter />}}\n        />\n      )}\n    </SpanOpsQuery>\n  );\n}\n\nconst OperationDot = styled('div')<{backgroundColor: string}>`\n  display: block;\n  width: ${space(1)};\n  height: ${space(1)};\n  border-radius: 100%;\n  background-color: ${p => p.backgroundColor};\n`;\n","import {Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\nimport omit from 'lodash/omit';\n\nimport CompactSelect from 'sentry/components/compactSelect';\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport SearchBar from 'sentry/components/events/searchBar';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport Pagination from 'sentry/components/pagination';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport DiscoverQuery from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport SuspectSpansQuery from 'sentry/utils/performance/suspectSpans/suspectSpansQuery';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport useProjects from 'sentry/utils/useProjects';\n\nimport {SetStateAction} from '../types';\n\nimport OpsFilter from './opsFilter';\nimport SuspectSpansTable from './suspectSpansTable';\nimport {SpanSort, SpansTotalValues} from './types';\nimport {\n  getSuspectSpanSortFromEventView,\n  getTotalsView,\n  SPAN_RELATIVE_PERIODS,\n  SPAN_RETENTION_DAYS,\n  SPAN_SORT_OPTIONS,\n  SPAN_SORT_TO_FIELDS,\n} from './utils';\n\nconst ANALYTICS_VALUES = {\n  spanOp: (organization: Organization, value: string | undefined) =>\n    trackAdvancedAnalyticsEvent('performance_views.spans.change_op', {\n      organization,\n      operation_name: value,\n    }),\n  sort: (organization: Organization, value: string | undefined) =>\n    trackAdvancedAnalyticsEvent('performance_views.spans.change_sort', {\n      organization,\n      sort_column: value,\n    }),\n};\n\ntype Props = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  projectId: string;\n  setError: SetStateAction<string | undefined>;\n  transactionName: string;\n};\n\nfunction SpansContent(props: Props) {\n  const {location, organization, eventView, projectId, transactionName} = props;\n  const query = decodeScalar(location.query.query, '');\n\n  function handleChange(key: string) {\n    return function (value: string | undefined) {\n      ANALYTICS_VALUES[key]?.(organization, value);\n\n      const queryParams = normalizeDateTimeParams({\n        ...(location.query || {}),\n        [key]: value,\n      });\n\n      // do not propagate pagination when making a new search\n      const toOmit = ['cursor'];\n      if (!defined(value)) {\n        toOmit.push(key);\n      }\n      const searchQueryParams = omit(queryParams, toOmit);\n\n      browserHistory.push({\n        ...location,\n        query: searchQueryParams,\n      });\n    };\n  }\n\n  const spanOp = decodeScalar(location.query.spanOp);\n  const spanGroup = decodeScalar(location.query.spanGroup);\n  const sort = getSuspectSpanSortFromEventView(eventView);\n  const spansView = getSpansEventView(eventView, sort.field);\n  const totalsView = getTotalsView(eventView);\n\n  const {projects} = useProjects();\n\n  return (\n    <Layout.Main fullWidth>\n      <FilterActions>\n        <OpsFilter\n          location={location}\n          eventView={eventView}\n          organization={organization}\n          handleOpChange={handleChange('spanOp')}\n          transactionName={transactionName}\n        />\n        <PageFilterBar condensed>\n          <EnvironmentPageFilter />\n          <DatePageFilter\n            alignDropdown=\"left\"\n            maxPickableDays={SPAN_RETENTION_DAYS}\n            relativeOptions={SPAN_RELATIVE_PERIODS}\n          />\n        </PageFilterBar>\n        <StyledSearchBar\n          organization={organization}\n          projectIds={eventView.project}\n          query={query}\n          fields={eventView.fields}\n          onSearch={handleChange('query')}\n        />\n        <CompactSelect\n          value={sort.field}\n          options={SPAN_SORT_OPTIONS.map(opt => ({value: opt.field, label: opt.label}))}\n          onChange={opt => handleChange('sort')(opt.value)}\n          triggerProps={{prefix: sort.prefix}}\n          triggerLabel={sort.label}\n        />\n      </FilterActions>\n      <DiscoverQuery\n        eventView={totalsView}\n        orgSlug={organization.slug}\n        location={location}\n        referrer=\"api.performance.transaction-spans\"\n        cursor=\"0:0:1\"\n        noPagination\n        useEvents\n      >\n        {({tableData}) => {\n          const totals: SpansTotalValues | null =\n            (tableData?.data?.[0] as SpansTotalValues | undefined) ?? null;\n          return (\n            <SuspectSpansQuery\n              location={location}\n              orgSlug={organization.slug}\n              eventView={spansView}\n              limit={10}\n              perSuspect={0}\n              spanOps={defined(spanOp) ? [spanOp] : []}\n              spanGroups={defined(spanGroup) ? [spanGroup] : []}\n            >\n              {({suspectSpans, isLoading, pageLinks}) => (\n                <Fragment>\n                  <SuspectSpansTable\n                    location={location}\n                    organization={organization}\n                    transactionName={transactionName}\n                    project={projects.find(p => p.id === projectId)}\n                    isLoading={isLoading}\n                    suspectSpans={suspectSpans ?? []}\n                    totals={totals}\n                    sort={sort.field}\n                  />\n                  <Pagination pageLinks={pageLinks ?? null} />\n                </Fragment>\n              )}\n            </SuspectSpansQuery>\n          );\n        }}\n      </DiscoverQuery>\n    </Layout.Main>\n  );\n}\n\nfunction getSpansEventView(eventView: EventView, sort: SpanSort): EventView {\n  eventView = eventView.clone();\n  const fields = SPAN_SORT_TO_FIELDS[sort];\n  eventView.fields = fields ? fields.map(field => ({field})) : [];\n  return eventView;\n}\n\nconst FilterActions = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n  margin-bottom: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: repeat(3, min-content);\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    grid-template-columns: auto auto 1fr auto;\n  }\n`;\n\nconst StyledSearchBar = styled(SearchBar)`\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    order: 1;\n    grid-column: 1/5;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    order: initial;\n    grid-column: auto;\n  }\n`;\n\nexport default SpansContent;\n","import {Location} from 'history';\n\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProjects from 'sentry/utils/withProjects';\n\nimport PageLayout from '../pageLayout';\nimport Tab from '../tabs';\n\nimport SpansContent from './content';\nimport {generateSpansEventView} from './utils';\n\ntype Props = {\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n};\n\nfunction TransactionSpans(props: Props) {\n  const {location, organization, projects} = props;\n\n  return (\n    <PageLayout\n      location={location}\n      organization={organization}\n      projects={projects}\n      tab={Tab.Spans}\n      getDocumentTitle={getDocumentTitle}\n      generateEventView={generateSpansEventView}\n      childComponent={SpansContent}\n    />\n  );\n}\n\nfunction getDocumentTitle(transactionName: string): string {\n  const hasTransactionName =\n    typeof transactionName === 'string' && String(transactionName).trim().length > 0;\n\n  if (hasTransactionName) {\n    return [String(transactionName).trim(), t('Performance')].join(' - ');\n  }\n\n  return [t('Summary'), t('Performance')].join(' - ');\n}\n\nexport default withProjects(withOrganization(TransactionSpans));\n","import {Query} from 'history';\n\nimport {SpanSlug} from 'sentry/utils/performance/suspectSpans/types';\n\nexport function generateSpanDetailsRoute({\n  orgSlug,\n  spanSlug,\n}: {\n  orgSlug: string;\n  spanSlug: SpanSlug;\n}): string {\n  const spanComponent = `${encodeURIComponent(spanSlug.op)}:${spanSlug.group}`;\n  return `/organizations/${orgSlug}/performance/summary/spans/${spanComponent}/`;\n}\n\nexport function spanDetailsRouteWithQuery({\n  orgSlug,\n  transaction,\n  query,\n  spanSlug,\n  projectID,\n}: {\n  orgSlug: string;\n  query: Query;\n  spanSlug: SpanSlug;\n  transaction: string;\n  projectID?: string | string[];\n}) {\n  const pathname = generateSpanDetailsRoute({\n    orgSlug,\n    spanSlug,\n  });\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\nexport enum ZoomKeys {\n  MIN = 'min',\n  MAX = 'max',\n}\n","import {ReactNode} from 'react';\nimport {Location} from 'history';\n\nimport GridEditable, {\n  COL_WIDTH_UNDEFINED,\n  GridColumnOrder,\n} from 'sentry/components/gridEditable';\nimport SortLink from 'sentry/components/gridEditable/sortLink';\nimport Link from 'sentry/components/links/link';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {getFieldRenderer} from 'sentry/utils/discover/fieldRenderers';\nimport {ColumnType, fieldAlignment} from 'sentry/utils/discover/fields';\nimport {Container as TableCellContainer} from 'sentry/utils/discover/styles';\nimport {SuspectSpans} from 'sentry/utils/performance/suspectSpans/types';\n\nimport {spanDetailsRouteWithQuery} from './spanDetails/utils';\nimport {SpanSort, SpanSortOthers, SpanSortPercentiles, SpansTotalValues} from './types';\n\ntype Props = {\n  isLoading: boolean;\n  location: Location;\n  organization: Organization;\n  sort: SpanSort;\n  suspectSpans: SuspectSpans;\n  totals: SpansTotalValues | null;\n  transactionName: string;\n  project?: Project;\n};\n\nexport default function SuspectSpansTable(props: Props) {\n  const {\n    location,\n    organization,\n    transactionName,\n    isLoading,\n    suspectSpans,\n    totals,\n    sort,\n    project,\n  } = props;\n\n  const data: TableDataRowWithExtras[] = suspectSpans.map(suspectSpan => ({\n    operation: suspectSpan.op,\n    group: suspectSpan.group,\n    description: suspectSpan.description,\n    totalCount: suspectSpan.count,\n    frequency:\n      // Frequency is computed using the `uniq` function in ClickHouse.\n      // Because it is an approximation, it can occasionally exceed the number of events.\n      defined(suspectSpan.frequency) && defined(totals?.['count()'])\n        ? Math.min(1, suspectSpan.frequency / totals!['count()'])\n        : null,\n    avgOccurrences: suspectSpan.avgOccurrences,\n    p50ExclusiveTime: suspectSpan.p50ExclusiveTime,\n    p75ExclusiveTime: suspectSpan.p75ExclusiveTime,\n    p95ExclusiveTime: suspectSpan.p95ExclusiveTime,\n    p99ExclusiveTime: suspectSpan.p99ExclusiveTime,\n    sumExclusiveTime: suspectSpan.sumExclusiveTime,\n  }));\n\n  return (\n    <GridEditable\n      isLoading={isLoading}\n      data={data}\n      columnOrder={COLUMN_ORDER[sort].map(column => COLUMNS[column])}\n      columnSortBy={[]}\n      grid={{\n        renderHeadCell,\n        renderBodyCell: renderBodyCellWithMeta(\n          location,\n          organization,\n          transactionName,\n          project\n        ),\n      }}\n      location={location}\n    />\n  );\n}\n\nfunction renderHeadCell(column: TableColumn, _index: number): ReactNode {\n  const align = fieldAlignment(column.key, COLUMN_TYPE[column.key]);\n  return (\n    <SortLink\n      title={column.name}\n      align={align}\n      direction={undefined}\n      canSort={false}\n      generateSortLink={() => undefined}\n    />\n  );\n}\n\nfunction renderBodyCellWithMeta(\n  location: Location,\n  organization: Organization,\n  transactionName: string,\n  project?: Project\n) {\n  return (column: TableColumn, dataRow: TableDataRowWithExtras): React.ReactNode => {\n    const fieldRenderer = getFieldRenderer(column.key, COLUMN_TYPE);\n\n    if (column.key === 'description') {\n      const target = spanDetailsRouteWithQuery({\n        orgSlug: organization.slug,\n        transaction: transactionName,\n        query: location.query,\n        spanSlug: {op: dataRow.operation, group: dataRow.group},\n        projectID: project?.id,\n      });\n      return (\n        <TableCellContainer>\n          <Link to={target}>{dataRow[column.key] ?? t('(unnamed span)')}</Link>\n        </TableCellContainer>\n      );\n    }\n\n    return fieldRenderer(dataRow, {location, organization});\n  };\n}\n\ntype TableColumnKey =\n  | 'operation'\n  | 'description'\n  | 'totalCount'\n  | 'frequency'\n  | 'avgOccurrences'\n  | 'p50ExclusiveTime'\n  | 'p75ExclusiveTime'\n  | 'p95ExclusiveTime'\n  | 'p99ExclusiveTime'\n  | 'sumExclusiveTime';\n\ntype TableColumn = GridColumnOrder<TableColumnKey>;\n\ntype TableDataRow = Record<TableColumnKey, any>;\n\ntype TableDataRowWithExtras = TableDataRow & {\n  group: string;\n};\n\nconst COLUMN_ORDER: Record<SpanSort, TableColumnKey[]> = {\n  [SpanSortOthers.COUNT]: [\n    'operation',\n    'description',\n    'totalCount',\n    'frequency',\n    'p75ExclusiveTime',\n    'sumExclusiveTime',\n  ],\n  [SpanSortOthers.AVG_OCCURRENCE]: [\n    'operation',\n    'description',\n    'avgOccurrences',\n    'frequency',\n    'p75ExclusiveTime',\n    'sumExclusiveTime',\n  ],\n  [SpanSortOthers.SUM_EXCLUSIVE_TIME]: [\n    'operation',\n    'description',\n    'totalCount',\n    'frequency',\n    'p75ExclusiveTime',\n    'sumExclusiveTime',\n  ],\n  [SpanSortPercentiles.P50_EXCLUSIVE_TIME]: [\n    'operation',\n    'description',\n    'totalCount',\n    'frequency',\n    'p50ExclusiveTime',\n    'sumExclusiveTime',\n  ],\n  [SpanSortPercentiles.P75_EXCLUSIVE_TIME]: [\n    'operation',\n    'description',\n    'totalCount',\n    'frequency',\n    'p75ExclusiveTime',\n    'sumExclusiveTime',\n  ],\n  [SpanSortPercentiles.P95_EXCLUSIVE_TIME]: [\n    'operation',\n    'description',\n    'totalCount',\n    'frequency',\n    'p95ExclusiveTime',\n    'sumExclusiveTime',\n  ],\n  [SpanSortPercentiles.P99_EXCLUSIVE_TIME]: [\n    'operation',\n    'description',\n    'totalCount',\n    'frequency',\n    'p99ExclusiveTime',\n    'sumExclusiveTime',\n  ],\n};\n\nconst COLUMNS: Record<TableColumnKey, TableColumn> = {\n  operation: {\n    key: 'operation',\n    name: t('Span Operation'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  description: {\n    key: 'description',\n    name: t('Span Name'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  totalCount: {\n    key: 'totalCount',\n    name: t('Total Count'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  frequency: {\n    key: 'frequency',\n    name: t('Frequency'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  avgOccurrences: {\n    key: 'avgOccurrences',\n    name: t('Average Occurrences'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p50ExclusiveTime: {\n    key: 'p50ExclusiveTime',\n    name: t('P50 Self Time'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p75ExclusiveTime: {\n    key: 'p75ExclusiveTime',\n    name: t('P75 Self Time'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p95ExclusiveTime: {\n    key: 'p95ExclusiveTime',\n    name: t('P95 Self Time'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p99ExclusiveTime: {\n    key: 'p99ExclusiveTime',\n    name: t('P99 Self Time'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  sumExclusiveTime: {\n    key: 'sumExclusiveTime',\n    name: t('Total Self Time'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n};\n\nconst COLUMN_TYPE: Record<TableColumnKey, ColumnType> = {\n  operation: 'string',\n  description: 'string',\n  totalCount: 'integer',\n  frequency: 'percentage',\n  avgOccurrences: 'number',\n  p50ExclusiveTime: 'duration',\n  p75ExclusiveTime: 'duration',\n  p95ExclusiveTime: 'duration',\n  p99ExclusiveTime: 'duration',\n  sumExclusiveTime: 'duration',\n};\n","var isSymbol = require('./isSymbol');\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseExtremum;\n","/**\n * The base implementation of `_.gt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is greater than `other`,\n *  else `false`.\n */\nfunction baseGt(value, other) {\n  return value > other;\n}\n\nmodule.exports = baseGt;\n"],"names":["SortLink","align","title","canSort","generateSortLink","onClick","direction","replace","target","StyledNonLink","arrow","StyledIconArrow","size","StyledLink","to","e","preventDefault","browserHistory","props","forwardProps","omit","p","IconArrow","getSuspectSpanPayload","perSuspect","spanOps","spanGroups","minExclusiveTime","maxExclusiveTime","payload","spanOp","spanGroup","min_exclusive_time","max_exclusive_time","defined","additionalPayload","eventView","getEventsAPIPayload","location","SuspectSpansQuery","route","getRequestPayload","tableData","rest","children","suspectSpans","SpanOpsQuery","limit","getMenuOptions","isLoading","error","key","disabled","label","t","leadingItems","color","map","value","op","OperationDot","backgroundColor","pickBarColor","OpsFilter","organization","handleOpChange","transactionName","conditions","MutableSearch","setFilterValues","opsFilterEventView","clone","query","formatString","currentOp","decodeScalar","orgSlug","slug","cursor","noPagination","results","isClearable","maxMenuWidth","menuTitle","options","onChange","opt","triggerLabel","triggerProps","icon","space","ANALYTICS_VALUES","trackAdvancedAnalyticsEvent","operation_name","sort","sort_column","SpansContent","projectId","handleChange","queryParams","normalizeDateTimeParams","toOmit","push","searchQueryParams","getSuspectSpanSortFromEventView","spansView","fields","SPAN_SORT_TO_FIELDS","field","getSpansEventView","totalsView","getTotalsView","projects","useProjects","fullWidth","FilterActions","condensed","alignDropdown","maxPickableDays","SPAN_RETENTION_DAYS","relativeOptions","SPAN_RELATIVE_PERIODS","StyledSearchBar","projectIds","project","onSearch","SPAN_SORT_OPTIONS","prefix","referrer","useEvents","totals","data","pageLinks","Fragment","find","id","theme","breakpoints","small","xlarge","SearchBar","TransactionSpans","tab","Tab","getDocumentTitle","generateEventView","generateSpansEventView","childComponent","String","trim","length","join","withProjects","withOrganization","spanDetailsRouteWithQuery","transaction","spanSlug","projectID","pathname","encodeURIComponent","group","generateSpanDetailsRoute","environment","statsPeriod","start","end","ZoomKeys","SuspectSpansTable","suspectSpan","operation","description","totalCount","count","frequency","Math","min","avgOccurrences","p50ExclusiveTime","p75ExclusiveTime","p95ExclusiveTime","p99ExclusiveTime","sumExclusiveTime","columnOrder","COLUMN_ORDER","column","COLUMNS","columnSortBy","grid","renderHeadCell","renderBodyCell","renderBodyCellWithMeta","_index","fieldAlignment","COLUMN_TYPE","name","undefined","dataRow","fieldRenderer","getFieldRenderer","SpanSortOthers","SpanSortPercentiles","width","COL_WIDTH_UNDEFINED","isSymbol","module","exports","array","iteratee","comparator","index","current","computed","result","other"],"sourceRoot":""}