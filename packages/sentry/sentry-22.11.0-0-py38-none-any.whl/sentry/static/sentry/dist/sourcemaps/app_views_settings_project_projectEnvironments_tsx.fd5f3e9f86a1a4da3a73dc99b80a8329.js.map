{"version":3,"file":"chunks/app_views_settings_project_projectEnvironments_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/links/listLink.tsx","webpack:///./app/utils/environment.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/project/projectEnvironments.tsx"],"sourcesContent":["// eslint-disable-next-line no-restricted-imports\nimport {Link as RouterLink, withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport classNames from 'classnames';\nimport {LocationDescriptor} from 'history';\nimport * as qs from 'query-string';\n\ntype LinkProps = Omit<React.ComponentProps<typeof RouterLink>, 'to'>;\n\ntype Props = WithRouterProps &\n  LinkProps & {\n    /**\n     * Link target. We don't want to expose the ToLocationFunction on this component.\n     */\n    to: LocationDescriptor;\n    /**\n     * The class to apply when the link is 'active'\n     */\n    activeClassName?: string;\n    disabled?: boolean;\n    index?: boolean;\n    /**\n     * Should be should be supplied by the parent component\n     */\n    isActive?: (location: LocationDescriptor, indexOnly?: boolean) => boolean;\n    query?: string;\n  };\n\nfunction ListLink({\n  children,\n  className,\n  isActive,\n  query,\n  router,\n  to,\n  activeClassName = 'active',\n  index = false,\n  disabled = false,\n  ...props\n}: Props) {\n  const queryData = query ? qs.parse(query) : undefined;\n  const target: LocationDescriptor =\n    typeof to === 'string' ? {pathname: to, query: queryData} : to;\n\n  const active = isActive?.(target, index) ?? router.isActive(target, index);\n\n  return (\n    <StyledLi\n      className={classNames({[activeClassName]: active}, className)}\n      disabled={disabled}\n    >\n      <RouterLink {...props} onlyActiveOnIndex={index} to={disabled ? '' : to}>\n        {children}\n      </RouterLink>\n    </StyledLi>\n  );\n}\n\nexport default withRouter(ListLink);\n\nconst StyledLi = styled('li', {\n  shouldForwardProp: prop => prop !== 'disabled',\n})<{disabled?: boolean}>`\n  ${p =>\n    p.disabled &&\n    `\n   a {\n    color:${p.theme.disabled} !important;\n    pointer-events: none;\n    :hover {\n      color: ${p.theme.disabled}  !important;\n    }\n   }\n`}\n`;\n","import {Environment} from 'sentry/types';\n\nconst DEFAULT_EMPTY_ROUTING_NAME = 'none';\nconst DEFAULT_EMPTY_ENV_NAME = '(No Environment)';\n\nexport function getUrlRoutingName(env: Partial<Environment>) {\n  if (env.name) {\n    return encodeURIComponent(env.name);\n  }\n\n  if (env.displayName) {\n    return encodeURIComponent(env.displayName);\n  }\n  return DEFAULT_EMPTY_ROUTING_NAME;\n}\n\nexport function getDisplayName(env: Partial<Environment>) {\n  return env.name || env.displayName || DEFAULT_EMPTY_ENV_NAME;\n}\n","import Access from 'sentry/components/acl/access';\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['project:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert data-test-id=\"project-permission-alert\" type=\"warning\" {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner, manager, or admin role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nexport default PermissionAlert;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport Access from 'sentry/components/acl/access';\nimport Button from 'sentry/components/button';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport ListLink from 'sentry/components/links/listLink';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport NavTabs from 'sentry/components/navTabs';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'sentry/components/panels';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {ALL_ENVIRONMENTS_KEY} from 'sentry/constants';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Environment, Project} from 'sentry/types';\nimport {getDisplayName, getUrlRoutingName} from 'sentry/utils/environment';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport withApi from 'sentry/utils/withApi';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport PermissionAlert from 'sentry/views/settings/project/permissionAlert';\n\ntype Props = {\n  api: Client;\n} & RouteComponentProps<{orgId: string; projectId: string}, {}>;\n\ntype State = {\n  environments: null | Environment[];\n  isLoading: boolean;\n  project: null | Project;\n};\n\nclass ProjectEnvironments extends Component<Props, State> {\n  state: State = {\n    project: null,\n    environments: null,\n    isLoading: true,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      this.props.location.pathname.endsWith('hidden/') !==\n      prevProps.location.pathname.endsWith('hidden/')\n    ) {\n      this.fetchData();\n    }\n  }\n\n  fetchData() {\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n\n    if (!this.state.isLoading) {\n      this.setState({isLoading: true});\n    }\n\n    const {orgId, projectId} = this.props.params;\n    this.props.api.request(`/projects/${orgId}/${projectId}/environments/`, {\n      query: {\n        visibility: isHidden ? 'hidden' : 'visible',\n      },\n      success: environments => {\n        this.setState({environments, isLoading: false});\n      },\n    });\n  }\n\n  fetchProjectDetails() {\n    const {orgId, projectId} = this.props.params;\n    this.props.api.request(`/projects/${orgId}/${projectId}/`, {\n      success: project => {\n        this.setState({project});\n      },\n    });\n  }\n\n  // Toggle visibility of environment\n  toggleEnv = (env: Environment, shouldHide: boolean) => {\n    const {orgId, projectId} = this.props.params;\n\n    this.props.api.request(\n      `/projects/${orgId}/${projectId}/environments/${getUrlRoutingName(env)}/`,\n      {\n        method: 'PUT',\n        data: {\n          name: env.name,\n          isHidden: shouldHide,\n        },\n        success: () => {\n          addSuccessMessage(\n            tct('Updated [environment]', {\n              environment: getDisplayName(env),\n            })\n          );\n        },\n        error: () => {\n          addErrorMessage(\n            tct('Unable to update [environment]', {\n              environment: getDisplayName(env),\n            })\n          );\n        },\n        complete: this.fetchData.bind(this),\n      }\n    );\n  };\n\n  renderEmpty() {\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n    const message = isHidden\n      ? t(\"You don't have any hidden environments.\")\n      : t(\"You don't have any environments yet.\");\n    return <EmptyMessage>{message}</EmptyMessage>;\n  }\n\n  /**\n   * Renders rows for \"system\" environments:\n   * - \"All Environments\"\n   * - \"No Environment\"\n   *\n   */\n  renderAllEnvironmentsSystemRow() {\n    // Not available in \"Hidden\" tab\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n    if (isHidden) {\n      return null;\n    }\n    return (\n      <EnvironmentRow\n        name={ALL_ENVIRONMENTS_KEY}\n        environment={{\n          id: ALL_ENVIRONMENTS_KEY,\n          name: ALL_ENVIRONMENTS_KEY,\n          displayName: ALL_ENVIRONMENTS_KEY,\n        }}\n        isSystemRow\n      />\n    );\n  }\n\n  renderEnvironmentList(envs: Environment[]) {\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n    const buttonText = isHidden ? t('Show') : t('Hide');\n\n    return (\n      <Fragment>\n        {this.renderAllEnvironmentsSystemRow()}\n        {envs.map(env => (\n          <EnvironmentRow\n            key={env.id}\n            name={env.name}\n            environment={env}\n            isHidden={isHidden}\n            onHide={this.toggleEnv}\n            actionText={buttonText}\n            shouldShowAction\n          />\n        ))}\n      </Fragment>\n    );\n  }\n\n  renderBody() {\n    const {environments, isLoading} = this.state;\n\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n\n    return (\n      <PanelBody>\n        {environments?.length\n          ? this.renderEnvironmentList(environments)\n          : this.renderEmpty()}\n      </PanelBody>\n    );\n  }\n\n  render() {\n    const {routes, params, location} = this.props;\n    const isHidden = location.pathname.endsWith('hidden/');\n\n    const baseUrl = recreateRoute('', {routes, params, stepBack: -1});\n    return (\n      <div>\n        <SentryDocumentTitle title={t('Environments')} projectSlug={params.projectId} />\n        <SettingsPageHeader\n          title={t('Manage Environments')}\n          tabs={\n            <NavTabs underlined>\n              <ListLink to={baseUrl} index isActive={() => !isHidden}>\n                {t('Environments')}\n              </ListLink>\n              <ListLink to={`${baseUrl}hidden/`} index isActive={() => isHidden}>\n                {t('Hidden')}\n              </ListLink>\n            </NavTabs>\n          }\n        />\n        <PermissionAlert />\n\n        <Panel>\n          <PanelHeader>{isHidden ? t('Hidden') : t('Active Environments')}</PanelHeader>\n          {this.renderBody()}\n        </Panel>\n      </div>\n    );\n  }\n}\n\ntype RowProps = {\n  environment: Environment;\n  name: string;\n  actionText?: string;\n  isHidden?: boolean;\n  isSystemRow?: boolean;\n  onHide?: (env: Environment, isHidden: boolean) => void;\n  shouldShowAction?: boolean;\n};\n\nfunction EnvironmentRow({\n  environment,\n  name,\n  onHide,\n  shouldShowAction = false,\n  isSystemRow = false,\n  isHidden = false,\n  actionText = '',\n}: RowProps) {\n  return (\n    <EnvironmentItem>\n      <Name>{isSystemRow ? t('All Environments') : name}</Name>\n      <Access access={['project:write']}>\n        {({hasAccess}) => (\n          <Fragment>\n            {shouldShowAction && onHide && (\n              <EnvironmentButton\n                size=\"xs\"\n                disabled={!hasAccess}\n                onClick={() => onHide(environment, !isHidden)}\n              >\n                {actionText}\n              </EnvironmentButton>\n            )}\n          </Fragment>\n        )}\n      </Access>\n    </EnvironmentItem>\n  );\n}\n\nconst EnvironmentItem = styled(PanelItem)`\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst Name = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst EnvironmentButton = styled(Button)`\n  margin-left: ${space(0.5)};\n`;\n\nexport {ProjectEnvironments};\nexport default withApi(ProjectEnvironments);\n"],"names":["ListLink","children","className","isActive","query","router","to","activeClassName","index","disabled","props","queryData","qs","undefined","target","pathname","active","StyledLi","classNames","onlyActiveOnIndex","withRouter","shouldForwardProp","prop","p","theme","getUrlRoutingName","env","name","encodeURIComponent","displayName","getDisplayName","PermissionAlert","access","hasAccess","type","t","ProjectEnvironments","Component","project","environments","isLoading","shouldHide","orgId","projectId","this","params","api","request","method","data","isHidden","success","addSuccessMessage","tct","environment","error","addErrorMessage","complete","fetchData","bind","componentDidMount","componentDidUpdate","prevProps","location","endsWith","state","setState","visibility","fetchProjectDetails","renderEmpty","message","renderAllEnvironmentsSystemRow","EnvironmentRow","ALL_ENVIRONMENTS_KEY","id","isSystemRow","renderEnvironmentList","envs","buttonText","Fragment","map","onHide","toggleEnv","actionText","shouldShowAction","renderBody","length","render","routes","baseUrl","recreateRoute","stepBack","title","projectSlug","tabs","underlined","EnvironmentItem","Name","EnvironmentButton","size","onClick","PanelItem","Button","space","withApi"],"sourceRoot":""}