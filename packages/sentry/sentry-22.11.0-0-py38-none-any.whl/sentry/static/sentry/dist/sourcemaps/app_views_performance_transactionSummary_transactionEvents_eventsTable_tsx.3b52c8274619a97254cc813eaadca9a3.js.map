{"version":3,"file":"chunks/app_views_performance_transactionSummary_transactionEvents_eventsTable_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/performance/transactionSummary/transactionEvents/operationSort.tsx","webpack:///./app/views/performance/transactionSummary/transactionEvents/eventsTable.tsx"],"sourcesContent":["import {Component} from 'react';\nimport {createPortal} from 'react-dom';\nimport {Manager, Popper, Reference} from 'react-popper';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location, LocationDescriptorObject} from 'history';\n\nimport {GetActorPropsFn} from 'sentry/components/deprecatedDropdownMenu';\nimport MenuItem from 'sentry/components/menuItem';\nimport Radio from 'sentry/components/radio';\nimport {t} from 'sentry/locale';\nimport {TableData} from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\n\nexport type TitleProps = Partial<ReturnType<GetActorPropsFn>>;\n\ntype Props = {\n  eventView: EventView;\n  location: Location;\n  tableMeta: TableData['meta'];\n  title: React.ComponentType<TitleProps>;\n};\n\ntype State = {\n  isOpen: boolean;\n};\n\nclass OperationSort extends Component<Props, State> {\n  state: State = {\n    isOpen: false,\n  };\n\n  componentDidUpdate(_props: Props, prevState: State) {\n    if (this.state.isOpen && prevState.isOpen === false) {\n      document.addEventListener('click', this.handleClickOutside, true);\n    }\n    if (this.state.isOpen === false && prevState.isOpen) {\n      document.removeEventListener('click', this.handleClickOutside, true);\n    }\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('click', this.handleClickOutside, true);\n  }\n\n  private menuEl: Element | null = null;\n\n  handleClickOutside = (event: MouseEvent) => {\n    if (!this.menuEl) {\n      return;\n    }\n    if (!(event.target instanceof Element)) {\n      return;\n    }\n    if (this.menuEl.contains(event.target)) {\n      return;\n    }\n    this.setState({isOpen: false});\n  };\n\n  toggleOpen = () => {\n    this.setState(({isOpen}) => ({isOpen: !isOpen}));\n  };\n\n  generateSortLink(field): LocationDescriptorObject | undefined {\n    const {eventView, tableMeta, location} = this.props;\n    if (!tableMeta) {\n      return undefined;\n    }\n\n    const nextEventView = eventView.sortOnField(field, tableMeta, 'desc');\n    const queryStringObject = nextEventView.generateQueryStringObject();\n\n    return {\n      ...location,\n      query: {...location.query, sort: queryStringObject.sort},\n    };\n  }\n\n  renderMenuItem(operation, title) {\n    const {eventView} = this.props;\n    return (\n      <DropdownMenuItem>\n        <MenuItemContent>\n          <RadioLabel>\n            <StyledRadio\n              readOnly\n              radioSize=\"small\"\n              checked={eventView.sorts.some(({field}) => field === operation)}\n              onClick={() => {\n                const sortLink = this.generateSortLink({field: operation});\n                if (sortLink) {\n                  browserHistory.push(sortLink);\n                }\n              }}\n            />\n            <span>{title}</span>\n          </RadioLabel>\n        </MenuItemContent>\n      </DropdownMenuItem>\n    );\n  }\n\n  renderMenuContent() {\n    return (\n      <DropdownContent>\n        {this.renderMenuItem('spans.http', t('Sort By HTTP'))}\n        {this.renderMenuItem('spans.db', t('Sort By DB'))}\n        {this.renderMenuItem('spans.resource', t('Sort By Resource'))}\n        {this.renderMenuItem('spans.browser', t('Sort By Browser'))}\n      </DropdownContent>\n    );\n  }\n\n  renderMenu() {\n    const modifiers = [\n      {\n        name: 'hide',\n        enabled: false,\n      },\n      {\n        name: 'preventOverflow',\n        enabled: true,\n        options: {padding: 10},\n      },\n    ];\n\n    return createPortal(\n      <Popper placement=\"top\" modifiers={modifiers}>\n        {({ref: popperRef, style, placement}) => (\n          <DropdownWrapper\n            ref={ref => {\n              (popperRef as Function)(ref);\n              this.menuEl = ref;\n            }}\n            style={style}\n            data-placement={placement}\n          >\n            {this.renderMenuContent()}\n          </DropdownWrapper>\n        )}\n      </Popper>,\n      document.body\n    );\n  }\n\n  render() {\n    const {title: Title} = this.props;\n    const {isOpen} = this.state;\n    const menu: React.ReactPortal | null = isOpen ? this.renderMenu() : null;\n\n    return (\n      <Manager>\n        <Reference>\n          {({ref}) => (\n            <TitleWrapper ref={ref}>\n              <Title onClick={this.toggleOpen} />\n            </TitleWrapper>\n          )}\n        </Reference>\n        {menu}\n      </Manager>\n    );\n  }\n}\n\nconst DropdownWrapper = styled('div')`\n  /* Adapted from the dropdown-menu class */\n  border: none;\n  border-radius: 2px;\n  box-shadow: 0 0 0 1px rgba(52, 60, 69, 0.2), 0 1px 3px rgba(70, 82, 98, 0.25);\n  background-clip: padding-box;\n  background-color: ${p => p.theme.background};\n  width: 220px;\n  overflow: visible;\n  z-index: ${p => p.theme.zIndex.tooltip};\n\n  &:before,\n  &:after {\n    width: 0;\n    height: 0;\n    content: '';\n    display: block;\n    position: absolute;\n    right: auto;\n  }\n\n  &:before {\n    border-left: 9px solid transparent;\n    border-right: 9px solid transparent;\n    left: calc(50% - 9px);\n    z-index: -2;\n  }\n\n  &:after {\n    border-left: 8px solid transparent;\n    border-right: 8px solid transparent;\n    left: calc(50% - 8px);\n    z-index: -1;\n  }\n\n  &[data-placement*='bottom'] {\n    margin-top: 9px;\n\n    &:before {\n      border-bottom: 9px solid ${p => p.theme.border};\n      top: -9px;\n    }\n\n    &:after {\n      border-bottom: 8px solid ${p => p.theme.background};\n      top: -8px;\n    }\n  }\n\n  &[data-placement*='top'] {\n    margin-bottom: 9px;\n\n    &:before {\n      border-top: 9px solid ${p => p.theme.border};\n      bottom: -9px;\n    }\n\n    &:after {\n      border-top: 8px solid ${p => p.theme.background};\n      bottom: -8px;\n    }\n  }\n`;\n\nconst DropdownMenuItem = styled(MenuItem)`\n  font-size: ${p => p.theme.fontSizeMedium};\n\n  &:not(:last-child) {\n    border-bottom: 1px solid ${p => p.theme.innerBorder};\n  }\n`;\n\nconst MenuItemContent = styled('div')`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: center;\n  width: 100%;\n`;\n\nconst RadioLabel = styled('label')`\n  display: grid;\n  cursor: pointer;\n  gap: 0.25em 0.5em;\n  grid-template-columns: max-content auto;\n  align-items: center;\n  outline: none;\n  font-weight: normal;\n  margin: 0;\n`;\n\nconst StyledRadio = styled(Radio)`\n  margin: 0;\n`;\n\nconst DropdownContent = styled('div')`\n  max-height: 250px;\n  overflow-y: auto;\n`;\n\nconst TitleWrapper = styled('div')`\n  cursor: pointer;\n`;\n\nexport default OperationSort;\n","import {Component, Fragment} from 'react';\nimport {browserHistory, RouteContextInterface} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location, LocationDescriptor, LocationDescriptorObject} from 'history';\nimport groupBy from 'lodash/groupBy';\n\nimport {Client} from 'sentry/api';\nimport GridEditable, {\n  COL_WIDTH_UNDEFINED,\n  GridColumn,\n} from 'sentry/components/gridEditable';\nimport SortLink from 'sentry/components/gridEditable/sortLink';\nimport Link from 'sentry/components/links/link';\nimport Pagination from 'sentry/components/pagination';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport Tooltip from 'sentry/components/tooltip';\nimport {t, tct} from 'sentry/locale';\nimport {IssueAttachment, Organization, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport DiscoverQuery, {\n  TableData,\n  TableDataRow,\n} from 'sentry/utils/discover/discoverQuery';\nimport EventView, {EventData, isFieldSortable} from 'sentry/utils/discover/eventView';\nimport {getFieldRenderer} from 'sentry/utils/discover/fieldRenderers';\nimport {\n  fieldAlignment,\n  getAggregateAlias,\n  isSpanOperationBreakdownField,\n  SPAN_OP_RELATIVE_BREAKDOWN_FIELD,\n} from 'sentry/utils/discover/fields';\nimport parseLinkHeader from 'sentry/utils/parseLinkHeader';\nimport CellAction, {Actions, updateQuery} from 'sentry/views/eventsV2/table/cellAction';\nimport {TableColumn} from 'sentry/views/eventsV2/table/types';\n\nimport {COLUMN_TITLES} from '../../data';\nimport {\n  generateReplayLink,\n  generateTraceLink,\n  generateTransactionLink,\n  normalizeSearchConditions,\n} from '../utils';\n\nimport OperationSort, {TitleProps} from './operationSort';\n\nexport function getProjectID(\n  eventData: EventData,\n  projects: Project[]\n): string | undefined {\n  const projectSlug = (eventData?.project as string) || undefined;\n\n  if (typeof projectSlug === undefined) {\n    return undefined;\n  }\n\n  const project = projects.find(currentProject => currentProject.slug === projectSlug);\n\n  if (!project) {\n    return undefined;\n  }\n\n  return project.id;\n}\n\nfunction OperationTitle({onClick}: TitleProps) {\n  return (\n    <div onClick={onClick}>\n      <span>{t('operation duration')}</span>\n      <StyledIconQuestion\n        size=\"xs\"\n        position=\"top\"\n        title={t(\n          `Span durations are summed over the course of an entire transaction. Any overlapping spans are only counted once.`\n        )}\n      />\n    </div>\n  );\n}\n\ntype Props = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  routes: RouteContextInterface['routes'];\n  setError: (msg: string | undefined) => void;\n  transactionName: string;\n  columnTitles?: string[];\n  customColumns?: ('attachments' | 'minidump')[];\n  excludedTags?: string[];\n  issueId?: string;\n  projectSlug?: string;\n  referrer?: string;\n  showReplayCol?: boolean;\n  totalEventCount?: string;\n};\n\ntype State = {\n  attachments: IssueAttachment[];\n  hasMinidumps: boolean;\n  lastFetchedCursor: string;\n  widths: number[];\n};\n\nclass EventsTable extends Component<Props, State> {\n  state: State = {\n    widths: [],\n    lastFetchedCursor: '',\n    attachments: [],\n    hasMinidumps: false,\n  };\n\n  api = new Client();\n  replayLinkGenerator = generateReplayLink(this.props.routes);\n\n  handleCellAction = (column: TableColumn<keyof TableDataRow>) => {\n    return (action: Actions, value: React.ReactText) => {\n      const {eventView, location, organization, excludedTags} = this.props;\n\n      trackAnalyticsEvent({\n        eventKey: 'performance_views.transactionEvents.cellaction',\n        eventName: 'Performance Views: Transaction Events Tab Cell Action Clicked',\n        organization_id: parseInt(organization.id, 10),\n        action,\n      });\n\n      const searchConditions = normalizeSearchConditions(eventView.query);\n\n      if (excludedTags) {\n        excludedTags.forEach(tag => {\n          searchConditions.removeFilter(tag);\n        });\n      }\n\n      updateQuery(searchConditions, action, column, value);\n\n      browserHistory.push({\n        pathname: location.pathname,\n        query: {\n          ...location.query,\n          cursor: undefined,\n          query: searchConditions.formatString(),\n        },\n      });\n    };\n  };\n\n  renderBodyCell(\n    tableData: TableData | null,\n    column: TableColumn<keyof TableDataRow>,\n    dataRow: TableDataRow\n  ): React.ReactNode {\n    const {eventView, organization, location, transactionName, projectSlug} = this.props;\n\n    if (!tableData || !tableData.meta) {\n      return dataRow[column.key];\n    }\n    const tableMeta = tableData.meta;\n    const field = String(column.key);\n    const fieldRenderer = getFieldRenderer(field, tableMeta);\n    const rendered = fieldRenderer(dataRow, {\n      organization,\n      location,\n      eventView,\n      projectSlug,\n    });\n\n    const allowActions = [\n      Actions.ADD,\n      Actions.EXCLUDE,\n      Actions.SHOW_GREATER_THAN,\n      Actions.SHOW_LESS_THAN,\n    ];\n\n    if (['attachments', 'minidump'].includes(field)) {\n      return rendered;\n    }\n\n    if (field === 'id' || field === 'trace') {\n      const {issueId} = this.props;\n      const isIssue: boolean = !!issueId;\n      let target: LocationDescriptor = {};\n      // TODO: set referrer properly\n      if (isIssue && field === 'id') {\n        target.pathname = `/organizations/${organization.slug}/issues/${issueId}/events/${dataRow.id}/`;\n      } else {\n        const generateLink = field === 'id' ? generateTransactionLink : generateTraceLink;\n        target = generateLink(transactionName)(organization, dataRow, location.query);\n      }\n\n      return (\n        <CellAction\n          column={column}\n          dataRow={dataRow}\n          handleCellAction={this.handleCellAction(column)}\n          allowActions={allowActions}\n        >\n          <Link to={target}>{rendered}</Link>\n        </CellAction>\n      );\n    }\n\n    if (field === 'replayId') {\n      const target: LocationDescriptor | null = dataRow.replayId\n        ? this.replayLinkGenerator(organization, dataRow, undefined)\n        : null;\n\n      return (\n        <CellAction\n          column={column}\n          dataRow={dataRow}\n          handleCellAction={this.handleCellAction(column)}\n          allowActions={allowActions}\n        >\n          {target ? <Link to={target}>{rendered}</Link> : rendered}\n        </CellAction>\n      );\n    }\n\n    const fieldName = getAggregateAlias(field);\n    const value = dataRow[fieldName];\n    if (tableMeta[fieldName] === 'integer' && defined(value) && value > 999) {\n      return (\n        <Tooltip\n          title={value.toLocaleString()}\n          containerDisplayMode=\"block\"\n          position=\"right\"\n        >\n          <CellAction\n            column={column}\n            dataRow={dataRow}\n            handleCellAction={this.handleCellAction(column)}\n            allowActions={allowActions}\n          >\n            {rendered}\n          </CellAction>\n        </Tooltip>\n      );\n    }\n\n    return (\n      <CellAction\n        column={column}\n        dataRow={dataRow}\n        handleCellAction={this.handleCellAction(column)}\n        allowActions={allowActions}\n      >\n        {rendered}\n      </CellAction>\n    );\n  }\n\n  renderBodyCellWithData = (tableData: TableData | null) => {\n    return (\n      column: TableColumn<keyof TableDataRow>,\n      dataRow: TableDataRow\n    ): React.ReactNode => this.renderBodyCell(tableData, column, dataRow);\n  };\n\n  onSortClick(currentSortKind?: string, currentSortField?: string) {\n    const {organization} = this.props;\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.transactionEvents.sort',\n      eventName: 'Performance Views: Transaction Events Tab Sorted',\n      organization_id: parseInt(organization.id, 10),\n      field: currentSortField,\n      direction: currentSortKind,\n    });\n  }\n\n  renderHeadCell(\n    tableMeta: TableData['meta'],\n    column: TableColumn<keyof TableDataRow>,\n    title: React.ReactNode\n  ): React.ReactNode {\n    const {eventView, location} = this.props;\n\n    const align = fieldAlignment(column.name, column.type, tableMeta);\n    const field = {field: column.name, width: column.width};\n\n    function generateSortLink(): LocationDescriptorObject | undefined {\n      if (!tableMeta) {\n        return undefined;\n      }\n\n      const nextEventView = eventView.sortOnField(field, tableMeta);\n      const queryStringObject = nextEventView.generateQueryStringObject();\n\n      return {\n        ...location,\n        query: {...location.query, sort: queryStringObject.sort},\n      };\n    }\n    const currentSort = eventView.sortForField(field, tableMeta);\n    // EventId, TraceId, and ReplayId are technically sortable but we don't want to sort them here since sorting by a uuid value doesn't make sense\n    const canSort =\n      field.field !== 'id' &&\n      field.field !== 'trace' &&\n      field.field !== 'replayId' &&\n      field.field !== SPAN_OP_RELATIVE_BREAKDOWN_FIELD &&\n      isFieldSortable(field, tableMeta);\n\n    const currentSortKind = currentSort ? currentSort.kind : undefined;\n    const currentSortField = currentSort ? currentSort.field : undefined;\n\n    if (field.field === SPAN_OP_RELATIVE_BREAKDOWN_FIELD) {\n      title = (\n        <OperationSort\n          title={OperationTitle}\n          eventView={eventView}\n          tableMeta={tableMeta}\n          location={location}\n        />\n      );\n    }\n\n    const sortLink = (\n      <SortLink\n        align={align}\n        title={title || field.field}\n        direction={currentSortKind}\n        canSort={canSort}\n        generateSortLink={generateSortLink}\n        onClick={() => this.onSortClick(currentSortKind, currentSortField)}\n      />\n    );\n    return sortLink;\n  }\n\n  renderHeadCellWithMeta = (tableMeta: TableData['meta']) => {\n    const columnTitles = this.props.columnTitles ?? COLUMN_TITLES;\n    return (column: TableColumn<keyof TableDataRow>, index: number): React.ReactNode =>\n      this.renderHeadCell(tableMeta, column, columnTitles[index]);\n  };\n\n  handleResizeColumn = (columnIndex: number, nextColumn: GridColumn) => {\n    const widths: number[] = [...this.state.widths];\n    widths[columnIndex] = nextColumn.width\n      ? Number(nextColumn.width)\n      : COL_WIDTH_UNDEFINED;\n    this.setState({...this.state, widths});\n  };\n\n  render() {\n    const {\n      eventView,\n      organization,\n      location,\n      setError,\n      totalEventCount,\n      referrer,\n      showReplayCol,\n    } = this.props;\n\n    const totalTransactionsView = eventView.clone();\n    totalTransactionsView.sorts = [];\n    totalTransactionsView.fields = [{field: 'count()', width: -1}];\n\n    const {widths} = this.state;\n    const containsSpanOpsBreakdown = eventView\n      .getColumns()\n      .find(\n        (col: TableColumn<React.ReactText>) =>\n          col.name === SPAN_OP_RELATIVE_BREAKDOWN_FIELD\n      );\n\n    const columnOrder = eventView\n      .getColumns()\n      .filter(\n        (col: TableColumn<React.ReactText>) =>\n          ((!containsSpanOpsBreakdown || !isSpanOperationBreakdownField(col.name)) &&\n            col.name !== 'replayId') ||\n          showReplayCol\n      )\n      .map((col: TableColumn<React.ReactText>, i: number) => {\n        if (typeof widths[i] === 'number') {\n          return {...col, width: widths[i]};\n        }\n        return col;\n      });\n\n    if (\n      this.props.customColumns?.includes('attachments') &&\n      this.state.attachments.length\n    ) {\n      columnOrder.push({\n        isSortable: false,\n        key: 'attachments',\n        name: 'attachments',\n        type: 'never',\n        column: {field: 'attachments', kind: 'field', alias: undefined},\n      });\n    }\n\n    if (this.props.customColumns?.includes('minidump') && this.state.hasMinidumps) {\n      columnOrder.push({\n        isSortable: false,\n        key: 'minidump',\n        name: 'minidump',\n        type: 'never',\n        column: {field: 'minidump', kind: 'field', alias: undefined},\n      });\n    }\n\n    const joinCustomData = ({data}: TableData) => {\n      const attachmentsByEvent = groupBy(this.state.attachments, 'event_id');\n      data.forEach(event => {\n        event.attachments = (attachmentsByEvent[event.id] || []) as any;\n      });\n    };\n\n    const fetchAttachments = async ({data}: TableData, cursor: string) => {\n      const eventIds = data.map(value => value.id);\n      const fetchOnlyMinidumps = !this.props.customColumns?.includes('attachments');\n\n      const queries: string = [\n        'per_page=50',\n        ...(fetchOnlyMinidumps ? ['types=event.minidump'] : []),\n        ...eventIds.map(eventId => `event_id=${eventId}`),\n      ].join('&');\n\n      const res: IssueAttachment[] = await this.api.requestPromise(\n        `/api/0/issues/${this.props.issueId}/attachments/?${queries}`\n      );\n\n      let hasMinidumps = false;\n\n      res.forEach(attachment => {\n        if (attachment.type === 'event.minidump') {\n          hasMinidumps = true;\n        }\n      });\n\n      this.setState({\n        ...this.state,\n        lastFetchedCursor: cursor,\n        attachments: res,\n        hasMinidumps,\n      });\n    };\n\n    return (\n      <div data-test-id=\"events-table\">\n        <DiscoverQuery\n          eventView={eventView}\n          orgSlug={organization.slug}\n          location={location}\n          setError={error => setError(error?.message)}\n          referrer={referrer || 'api.performance.transaction-events'}\n          useEvents\n        >\n          {({pageLinks, isLoading: isDiscoverQueryLoading, tableData}) => {\n            tableData ??= {data: []};\n            const parsedPageLinks = parseLinkHeader(pageLinks);\n            const cursor = parsedPageLinks?.next?.cursor;\n            const shouldFetchAttachments: boolean =\n              organization.features.includes('event-attachments') &&\n              !!this.props.issueId &&\n              !!cursor &&\n              this.state.lastFetchedCursor !== cursor; // Only fetch on issue details page\n            let currentEvent = cursor?.split(':')[1] ?? 0;\n            if (!parsedPageLinks?.next?.results && totalEventCount) {\n              currentEvent = totalEventCount;\n            }\n\n            const paginationCaption =\n              totalEventCount && currentEvent\n                ? tct('Showing [currentEvent] of [totalEventCount] events', {\n                    currentEvent,\n                    totalEventCount,\n                  })\n                : undefined;\n            if (shouldFetchAttachments) {\n              fetchAttachments(tableData, cursor);\n            }\n            joinCustomData(tableData);\n            return (\n              <Fragment>\n                <GridEditable\n                  isLoading={isDiscoverQueryLoading || shouldFetchAttachments}\n                  data={tableData?.data ?? []}\n                  columnOrder={columnOrder}\n                  columnSortBy={eventView.getSorts()}\n                  grid={{\n                    onResizeColumn: this.handleResizeColumn,\n                    renderHeadCell: this.renderHeadCellWithMeta(tableData?.meta) as any,\n                    renderBodyCell: this.renderBodyCellWithData(tableData) as any,\n                  }}\n                  location={location}\n                />\n                <Pagination\n                  disabled={isDiscoverQueryLoading}\n                  caption={paginationCaption}\n                  pageLinks={pageLinks}\n                />\n              </Fragment>\n            );\n          }}\n        </DiscoverQuery>\n      </div>\n    );\n  }\n}\n\nconst StyledIconQuestion = styled(QuestionTooltip)`\n  position: relative;\n  top: 1px;\n  left: 4px;\n`;\n\nexport default EventsTable;\n"],"names":["OperationSort","Component","isOpen","event","this","menuEl","target","Element","contains","setState","componentDidUpdate","_props","prevState","state","document","addEventListener","handleClickOutside","removeEventListener","componentWillUnmount","generateSortLink","field","eventView","tableMeta","location","props","queryStringObject","sortOnField","generateQueryStringObject","query","sort","renderMenuItem","operation","title","DropdownMenuItem","MenuItemContent","RadioLabel","StyledRadio","readOnly","radioSize","checked","sorts","some","onClick","sortLink","browserHistory","renderMenuContent","DropdownContent","t","renderMenu","createPortal","Popper","placement","modifiers","name","enabled","options","padding","ref","popperRef","style","DropdownWrapper","body","render","Title","menu","Manager","Reference","TitleWrapper","toggleOpen","p","theme","background","zIndex","tooltip","border","MenuItem","fontSizeMedium","innerBorder","Radio","OperationTitle","StyledIconQuestion","size","position","EventsTable","widths","lastFetchedCursor","attachments","hasMinidumps","Client","generateReplayLink","routes","column","action","value","organization","excludedTags","trackAnalyticsEvent","eventKey","eventName","organization_id","parseInt","id","searchConditions","normalizeSearchConditions","forEach","tag","removeFilter","updateQuery","pathname","cursor","undefined","formatString","tableData","dataRow","renderBodyCell","columnTitles","COLUMN_TITLES","index","renderHeadCell","columnIndex","nextColumn","width","Number","COL_WIDTH_UNDEFINED","transactionName","projectSlug","meta","key","String","rendered","getFieldRenderer","fieldRenderer","allowActions","Actions","includes","issueId","slug","generateTransactionLink","generateTraceLink","generateLink","handleCellAction","to","replayId","replayLinkGenerator","fieldName","getAggregateAlias","defined","toLocaleString","containerDisplayMode","onSortClick","currentSortKind","currentSortField","direction","align","fieldAlignment","type","currentSort","sortForField","canSort","SPAN_OP_RELATIVE_BREAKDOWN_FIELD","isFieldSortable","kind","setError","totalEventCount","referrer","showReplayCol","totalTransactionsView","clone","fields","containsSpanOpsBreakdown","getColumns","find","col","columnOrder","filter","isSpanOperationBreakdownField","map","i","customColumns","length","push","isSortable","alias","joinCustomData","data","attachmentsByEvent","groupBy","fetchAttachments","async","eventIds","queries","eventId","join","res","api","requestPromise","attachment","orgSlug","error","message","useEvents","pageLinks","isLoading","isDiscoverQueryLoading","parsedPageLinks","parseLinkHeader","next","shouldFetchAttachments","features","currentEvent","split","results","paginationCaption","tct","Fragment","columnSortBy","getSorts","grid","onResizeColumn","handleResizeColumn","renderHeadCellWithMeta","renderBodyCellWithData","disabled","caption","QuestionTooltip"],"sourceRoot":""}