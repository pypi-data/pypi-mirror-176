{"version":3,"file":"chunks/app_views_dashboardsV2_view_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/dashboardsV2/orgDashboards.tsx","webpack:///./app/views/dashboardsV2/view.tsx"],"sourcesContent":["import {browserHistory} from 'react-router';\nimport {Location} from 'history';\nimport isEmpty from 'lodash/isEmpty';\nimport isEqual from 'lodash/isEqual';\n\nimport {Client} from 'sentry/api';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport NotFound from 'sentry/components/errors/notFound';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport {Organization} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\n\nimport {assignTempId} from './layoutUtils';\nimport {DashboardDetails, DashboardListItem} from './types';\nimport {hasSavedPageFilters} from './utils';\n\ntype OrgDashboardsChildrenProps = {\n  dashboard: DashboardDetails | null;\n  dashboards: DashboardListItem[];\n  error: boolean;\n  onDashboardUpdate: (updatedDashboard: DashboardDetails) => void;\n};\n\ntype Props = {\n  api: Client;\n  children: (props: OrgDashboardsChildrenProps) => React.ReactNode;\n  location: Location;\n  organization: Organization;\n  params: {orgId: string; dashboardId?: string};\n};\n\ntype State = {\n  // endpoint response\n  dashboards: DashboardListItem[] | null;\n  /**\n   * The currently selected dashboard.\n   */\n  selectedDashboard: DashboardDetails | null;\n} & AsyncComponent['state'];\n\nclass OrgDashboards extends AsyncComponent<Props, State> {\n  state: State = {\n    // AsyncComponent state\n    loading: true,\n    reloading: false,\n    error: false,\n    errors: {},\n\n    dashboards: [],\n    selectedDashboard: null,\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (!isEqual(prevProps.params.dashboardId, this.props.params.dashboardId)) {\n      this.remountComponent();\n    }\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, params} = this.props;\n    const url = `/organizations/${organization.slug}/dashboards/`;\n    const endpoints: ReturnType<AsyncComponent['getEndpoints']> = [['dashboards', url]];\n\n    if (params.dashboardId) {\n      endpoints.push(['selectedDashboard', `${url}${params.dashboardId}/`]);\n      trackAnalyticsEvent({\n        eventKey: 'dashboards2.view',\n        eventName: 'Dashboards2: View dashboard',\n        organization_id: parseInt(this.props.organization.id, 10),\n        dashboard_id: params.dashboardId,\n      });\n    }\n\n    return endpoints;\n  }\n\n  onDashboardUpdate(updatedDashboard: DashboardDetails) {\n    this.setState({selectedDashboard: updatedDashboard});\n  }\n\n  getDashboards(): DashboardListItem[] {\n    const {dashboards} = this.state;\n\n    return Array.isArray(dashboards) ? dashboards : [];\n  }\n\n  onRequestSuccess({stateKey, data}) {\n    const {params, organization, location} = this.props;\n\n    if (params.dashboardId || stateKey === 'selectedDashboard') {\n      const queryParamFilters = new Set([\n        'project',\n        'environment',\n        'statsPeriod',\n        'start',\n        'end',\n        'utc',\n        'release',\n      ]);\n      if (\n        organization.features.includes('dashboards-top-level-filter') &&\n        stateKey === 'selectedDashboard' &&\n        // Only redirect if there are saved filters and none of the filters\n        // appear in the query params\n        hasSavedPageFilters(data) &&\n        isEmpty(\n          Object.keys(location.query).filter(unsavedQueryParam =>\n            queryParamFilters.has(unsavedQueryParam)\n          )\n        )\n      ) {\n        browserHistory.replace({\n          ...location,\n          query: {\n            ...location.query,\n            project: data.projects,\n            environment: data.environment,\n            statsPeriod: data.period,\n            start: data.start,\n            end: data.end,\n            utc: data.utc,\n          },\n        });\n      }\n      return;\n    }\n\n    // If we don't have a selected dashboard, and one isn't going to arrive\n    // we can redirect to the first dashboard in the list.\n    const dashboardId = data.length ? data[0].id : 'default-overview';\n    const url = `/organizations/${organization.slug}/dashboard/${dashboardId}/`;\n    browserHistory.replace({\n      pathname: url,\n      query: {\n        ...location.query,\n      },\n    });\n  }\n\n  renderLoading() {\n    return (\n      <PageContent>\n        <LoadingIndicator />\n      </PageContent>\n    );\n  }\n\n  renderBody() {\n    const {children} = this.props;\n    const {selectedDashboard, error} = this.state;\n    let dashboard = selectedDashboard;\n\n    // Ensure there are always tempIds for grid layout\n    // This is needed because there are cases where the dashboard\n    // renders before the onRequestSuccess setState is processed\n    // and will caused stacked widgets because of missing tempIds\n    dashboard = selectedDashboard\n      ? {\n          ...selectedDashboard,\n          widgets: selectedDashboard.widgets.map(assignTempId),\n        }\n      : null;\n\n    return children({\n      error,\n      dashboard,\n      dashboards: this.getDashboards(),\n      onDashboardUpdate: (updatedDashboard: DashboardDetails) =>\n        this.onDashboardUpdate(updatedDashboard),\n    });\n  }\n\n  renderError(error: Error) {\n    const notFound = Object.values(this.state.errors).find(\n      resp => resp && resp.status === 404\n    );\n\n    if (notFound) {\n      return <NotFound />;\n    }\n\n    return super.renderError(error, true);\n  }\n\n  renderComponent() {\n    const {organization, location} = this.props;\n    const {loading, selectedDashboard} = this.state;\n\n    if (!organization.features.includes('dashboards-basic')) {\n      // Redirect to Dashboards v1\n      browserHistory.replace({\n        pathname: `/organizations/${organization.slug}/dashboards/`,\n        query: {\n          ...location.query,\n        },\n      });\n      return null;\n    }\n\n    if (\n      loading &&\n      organization.features.includes('dashboards-top-level-filter') &&\n      selectedDashboard &&\n      hasSavedPageFilters(selectedDashboard) &&\n      isEmpty(location.query)\n    ) {\n      // Block dashboard from rendering if the dashboard has filters and\n      // the URL does not contain filters yet. The filters can either match the\n      // saved filters, or can be different (i.e. sharing an unsaved state)\n      return this.renderLoading();\n    }\n\n    return (\n      <SentryDocumentTitle title={t('Dashboards')} orgSlug={organization.slug}>\n        {super.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nexport default OrgDashboards;\n","import {useEffect, useState} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport pick from 'lodash/pick';\n\nimport {updateDashboardVisit} from 'sentry/actionCreators/dashboards';\nimport Feature from 'sentry/components/acl/feature';\nimport Alert from 'sentry/components/alert';\nimport ErrorBoundary from 'sentry/components/errorBoundary';\nimport NotFound from 'sentry/components/errors/notFound';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport {Organization} from 'sentry/types';\nimport useApi from 'sentry/utils/useApi';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nimport DashboardDetail from './detail';\nimport OrgDashboards from './orgDashboards';\nimport {DashboardState, Widget} from './types';\nimport {constructWidgetFromQuery} from './utils';\n\nconst ALLOWED_PARAMS = [\n  'start',\n  'end',\n  'utc',\n  'period',\n  'project',\n  'environment',\n  'statsPeriod',\n];\n\ntype Props = RouteComponentProps<\n  {dashboardId: string; orgId: string; widgetId?: number},\n  {}\n> & {\n  children: React.ReactNode;\n  organization: Organization;\n};\n\nfunction ViewEditDashboard(props: Props) {\n  const api = useApi();\n\n  const {organization, params, location} = props;\n  const dashboardId = params.dashboardId;\n  const orgSlug = organization.slug;\n  const [newWidget, setNewWidget] = useState<Widget | undefined>();\n  const [dashboardInitialState, setDashboardInitialState] = useState(DashboardState.VIEW);\n\n  useEffect(() => {\n    if (dashboardId && dashboardId !== 'default-overview') {\n      updateDashboardVisit(api, orgSlug, dashboardId);\n    }\n  }, [api, orgSlug, dashboardId]);\n\n  useEffect(() => {\n    const constructedWidget = constructWidgetFromQuery(location.query);\n    setNewWidget(constructedWidget);\n    // Clean up url after constructing widget from query string, only allow GHS params\n    if (constructedWidget) {\n      setDashboardInitialState(DashboardState.EDIT);\n      browserHistory.replace({\n        pathname: location.pathname,\n        query: pick(location.query, ALLOWED_PARAMS),\n      });\n    }\n  }, [location.pathname]);\n\n  return (\n    <DashboardBasicFeature organization={organization}>\n      <OrgDashboards\n        api={api}\n        location={location}\n        params={params}\n        organization={organization}\n      >\n        {({dashboard, dashboards, error, onDashboardUpdate}) => {\n          return error ? (\n            <NotFound />\n          ) : dashboard ? (\n            <ErrorBoundary>\n              <DashboardDetail\n                {...props}\n                initialState={dashboardInitialState}\n                dashboard={dashboard}\n                dashboards={dashboards}\n                onDashboardUpdate={onDashboardUpdate}\n                newWidget={newWidget}\n                onSetNewWidget={() => setNewWidget(undefined)}\n              />\n            </ErrorBoundary>\n          ) : (\n            <LoadingIndicator />\n          );\n        }}\n      </OrgDashboards>\n    </DashboardBasicFeature>\n  );\n}\n\nexport default withOrganization(ViewEditDashboard);\n\ntype FeatureProps = {\n  children: React.ReactNode;\n  organization: Organization;\n};\n\nexport const DashboardBasicFeature = ({organization, children}: FeatureProps) => {\n  const renderDisabled = () => (\n    <PageContent>\n      <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n    </PageContent>\n  );\n\n  return (\n    <Feature\n      hookName=\"feature-disabled:dashboards-page\"\n      features={['organizations:dashboards-basic']}\n      organization={organization}\n      renderDisabled={renderDisabled}\n    >\n      {children}\n    </Feature>\n  );\n};\n"],"names":["OrgDashboards","AsyncComponent","loading","reloading","error","errors","dashboards","selectedDashboard","componentDidUpdate","prevProps","isEqual","params","dashboardId","this","props","remountComponent","getEndpoints","organization","url","slug","endpoints","push","trackAnalyticsEvent","eventKey","eventName","organization_id","parseInt","id","dashboard_id","onDashboardUpdate","updatedDashboard","setState","getDashboards","state","Array","isArray","onRequestSuccess","stateKey","data","location","queryParamFilters","Set","features","includes","hasSavedPageFilters","isEmpty","Object","keys","query","filter","unsavedQueryParam","has","browserHistory","project","projects","environment","statsPeriod","period","start","end","utc","length","pathname","renderLoading","renderBody","children","dashboard","widgets","map","assignTempId","renderError","values","find","resp","status","super","renderComponent","title","t","orgSlug","ALLOWED_PARAMS","ViewEditDashboard","api","useApi","newWidget","setNewWidget","useState","dashboardInitialState","setDashboardInitialState","DashboardState","useEffect","updateDashboardVisit","constructedWidget","constructWidgetFromQuery","pick","DashboardBasicFeature","initialState","onSetNewWidget","undefined","withOrganization","hookName","renderDisabled","type"],"sourceRoot":""}