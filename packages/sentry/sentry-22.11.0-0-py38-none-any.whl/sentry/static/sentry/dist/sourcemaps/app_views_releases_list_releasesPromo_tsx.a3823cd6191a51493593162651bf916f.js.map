{"version":3,"file":"chunks/app_views_releases_list_releasesPromo_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/releases/list/releasesPromo.tsx"],"sourcesContent":["import {useCallback, useEffect, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport commitImage from 'sentry-images/spot/releases-tour-commits.svg';\nimport emailImage from 'sentry-images/spot/releases-tour-email.svg';\nimport resolutionImage from 'sentry-images/spot/releases-tour-resolution.svg';\nimport statsImage from 'sentry-images/spot/releases-tour-stats.svg';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {openCreateReleaseIntegration} from 'sentry/actionCreators/modal';\nimport Access from 'sentry/components/acl/access';\nimport Button from 'sentry/components/button';\nimport DropdownAutoComplete from 'sentry/components/dropdownAutoComplete';\nimport {Item} from 'sentry/components/dropdownAutoComplete/types';\nimport Link from 'sentry/components/links/link';\nimport {TourImage, TourStep, TourText} from 'sentry/components/modals/featureTourModal';\nimport {Panel} from 'sentry/components/panels';\nimport TextOverflow from 'sentry/components/textOverflow';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconAdd, IconCopy} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {PageHeader} from 'sentry/styles/organization';\nimport space from 'sentry/styles/space';\nimport {Organization, Project, SentryApp} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport useApi from 'sentry/utils/useApi';\nimport useApiRequests from 'sentry/utils/useApiRequests';\n\nconst releasesSetupUrl = 'https://docs.sentry.io/product/releases/';\n\nconst docsLink = (\n  <Button external href={releasesSetupUrl}>\n    {t('Setup')}\n  </Button>\n);\n\nexport const RELEASES_TOUR_STEPS: TourStep[] = [\n  {\n    title: t('Suspect Commits'),\n    image: <TourImage src={commitImage} />,\n    body: (\n      <TourText>\n        {t(\n          'Sentry suggests which commit caused an issue and who is likely responsible so you can triage.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Release Stats'),\n    image: <TourImage src={statsImage} />,\n    body: (\n      <TourText>\n        {t(\n          'Get an overview of the commits in each release, and which issues were introduced or fixed.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Easily Resolve'),\n    image: <TourImage src={resolutionImage} />,\n    body: (\n      <TourText>\n        {t(\n          'Automatically resolve issues by including the issue number in your commit message.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Deploy Emails'),\n    image: <TourImage src={emailImage} />,\n    body: (\n      <TourText>\n        {t(\n          'Receive email notifications about when your code gets deployed. This can be customized in settings.'\n        )}\n      </TourText>\n    ),\n  },\n];\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n};\n\nconst ReleasesPromo = ({organization, project}: Props) => {\n  const {data, renderComponent, isLoading} = useApiRequests<{\n    internalIntegrations: SentryApp[];\n  }>({\n    endpoints: [\n      [\n        'internalIntegrations',\n        `/organizations/${organization.slug}/sentry-apps/`,\n        {query: {status: 'internal'}},\n      ],\n    ],\n  });\n  const api = useApi();\n  const [token, setToken] = useState(null);\n  const [integrations, setIntegrations] = useState<SentryApp[]>([]);\n  const [selectedItem, selectItem] = useState<Pick<Item, 'label' | 'value'> | null>(null);\n\n  useEffect(() => {\n    if (!isLoading && data.internalIntegrations) {\n      setIntegrations(data.internalIntegrations);\n    }\n  }, [isLoading, data.internalIntegrations]);\n  useEffect(() => {\n    trackAdvancedAnalyticsEvent('releases.quickstart_viewed', {\n      organization,\n      project_id: project.id,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const trackQuickstartCopy = useCallback(() => {\n    trackAdvancedAnalyticsEvent('releases.quickstart_copied', {\n      organization,\n      project_id: project.id,\n    });\n  }, [organization, project]);\n\n  const trackQuickstartCreatedIntegration = useCallback(\n    (integration: SentryApp) => {\n      trackAdvancedAnalyticsEvent('releases.quickstart_create_integration.success', {\n        organization,\n        project_id: project.id,\n        integration_uuid: integration.uuid,\n      });\n    },\n    [organization, project]\n  );\n\n  const trackCreateIntegrationModalClose = useCallback(() => {\n    trackAdvancedAnalyticsEvent('releases.quickstart_create_integration_modal.close', {\n      organization,\n      project_id: project.id,\n    });\n  }, [organization, project.id]);\n\n  const fetchToken = async sentryAppSlug => {\n    const tokens = await api.requestPromise(`/sentry-apps/${sentryAppSlug}/api-tokens/`);\n    if (!tokens.length) {\n      const newToken = await generateToken(sentryAppSlug);\n      return setToken(newToken);\n    }\n    return setToken(tokens[0].token);\n  };\n\n  const generateToken = async (sentryAppSlug: string) => {\n    const newToken = await api.requestPromise(\n      `/sentry-apps/${sentryAppSlug}/api-tokens/`,\n      {\n        method: 'POST',\n      }\n    );\n    return newToken.token;\n  };\n\n  const handleCopy = async () => {\n    if (!token || !selectedItem) {\n      addErrorMessage(t('Select an integration for your auth token!'));\n      return;\n    }\n    const current_text = `\n      # Install the cli\n      curl -sL https://sentry.io/get-cli/ | SENTRY_CLI_VERSION=\"2.2.0\" bash\n      # Setup configuration values\n      SENTRY_AUTH_TOKEN=${token} # From internal integration: ${selectedItem.value.name}\n      SENTRY_ORG=${organization.slug}\n      SENTRY_PROJECT=${project.slug}\n      VERSION=\\`sentry-cli releases propose-version\\`\n      # Workflow to create releases\n      sentry-cli releases new \"$VERSION\"\n      sentry-cli releases set-commits \"$VERSION\" --auto\n      sentry-cli releases finalize \"$VERSION\"\n      `;\n    await navigator.clipboard.writeText(current_text);\n    addSuccessMessage(t('Copied to clipboard!'));\n    trackQuickstartCopy();\n  };\n\n  const renderIntegrationNode = (integration: SentryApp) => {\n    return {\n      value: {slug: integration.slug, name: integration.name},\n      searchKey: `${integration.name}`,\n      label: (\n        <MenuItemWrapper data-test-id=\"integration-option\" key={integration.uuid}>\n          <Label>{integration.name}</Label>\n        </MenuItemWrapper>\n      ),\n    };\n  };\n  return renderComponent(\n    <Panel>\n      <Container>\n        <StyledPageHeader>\n          <h3>{t('Set up Releases')}</h3>\n\n          <Button priority=\"default\" size=\"sm\" href={releasesSetupUrl} external>\n            {t('Full Documentation')}\n          </Button>\n        </StyledPageHeader>\n\n        <p>\n          {t(\n            'Find which release caused an issue, apply source maps, and get notified about your deploys.'\n          )}\n        </p>\n        <p>\n          {t(\n            'Add the following commands to your CI config when you deploy your application.'\n          )}\n        </p>\n\n        <CodeBlock>\n          <CopyButton onClick={handleCopy}>\n            <IconCopy />\n          </CopyButton>\n          <Comment># Install the cli</Comment>\n          <Bash>\n            curl -sL https://sentry.io/get-cli/ | SENTRY_CLI_VERSION=\"2.2.0\" bash\n          </Bash>\n          <Bash>{'\\n'}</Bash>\n          <Comment># Setup configuration values</Comment>\n          <Bash>\n            SENTRY_AUTH_TOKEN=\n            <StyledDropdownAutoComplete\n              minWidth={300}\n              maxHeight={400}\n              onOpen={e => {\n                // This can be called multiple times and does not always have `event`\n                e?.stopPropagation();\n              }}\n              items={[\n                {\n                  label: <GroupHeader>{t('Available Integrations')}</GroupHeader>,\n                  id: 'available-integrations',\n                  items: (integrations || []).map(renderIntegrationNode),\n                },\n              ]}\n              alignMenu=\"left\"\n              onSelect={({label, value}) => {\n                selectItem({label, value});\n                fetchToken(value.slug);\n              }}\n              itemSize=\"small\"\n              searchPlaceholder={t('Select Internal Integration')}\n              menuFooter={\n                <Access access={['org:integrations']}>\n                  {({hasAccess}) => (\n                    <Tooltip\n                      title={t(\n                        'You must be an organization owner, manager or admin to create an integration.'\n                      )}\n                      disabled={hasAccess}\n                    >\n                      <CreateIntegrationLink\n                        to=\"\"\n                        data-test-id=\"create-release-integration\"\n                        disabled={!hasAccess}\n                        onClick={() =>\n                          openCreateReleaseIntegration({\n                            organization,\n                            project,\n                            onCreateSuccess: (integration: SentryApp) => {\n                              setIntegrations([integration, ...integrations]);\n                              const {label, value} = renderIntegrationNode(integration);\n                              selectItem({\n                                label,\n                                value,\n                              });\n                              fetchToken(value.slug);\n                              trackQuickstartCreatedIntegration(integration);\n                            },\n                            onCancel: () => {\n                              trackCreateIntegrationModalClose();\n                            },\n                          })\n                        }\n                      >\n                        <MenuItemFooterWrapper>\n                          <IconContainer>\n                            <IconAdd color=\"purple300\" isCircled size=\"14px\" />\n                          </IconContainer>\n                          <Label>{t('Create New Integration')}</Label>\n                        </MenuItemFooterWrapper>\n                      </CreateIntegrationLink>\n                    </Tooltip>\n                  )}\n                </Access>\n              }\n              disableLabelPadding\n              emptyHidesInput\n            >\n              {() => {\n                return token && selectedItem ? (\n                  <span style={{display: 'flex'}}>\n                    <Bash>{token}</Bash>\n                    <Comment>{` # From internal integration: ${selectedItem.value.name} `}</Comment>\n                  </span>\n                ) : (\n                  <Bash style={{color: '#7cc5c4'}}>{'<click-here-for-your-token>'}</Bash>\n                );\n              }}\n            </StyledDropdownAutoComplete>\n          </Bash>\n\n          <Bash>{`SENTRY_ORG=${organization.slug}`}</Bash>\n          <Bash>{`SENTRY_PROJECT=${project.slug}`}</Bash>\n          <Bash>VERSION=`sentry-cli releases propose-version`</Bash>\n          <Bash>{'\\n'}</Bash>\n          <Comment># Workflow to create releases</Comment>\n          <Bash>sentry-cli releases new \"$VERSION\"</Bash>\n          <Bash>sentry-cli releases set-commits \"$VERSION\" --auto</Bash>\n          <Bash>sentry-cli releases finalize \"$VERSION\"</Bash>\n        </CodeBlock>\n      </Container>\n    </Panel>\n  );\n};\n\nconst StyledPageHeader = styled(PageHeader)`\n  margin-bottom: ${space(3)};\n\n  h3 {\n    margin: 0;\n  }\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    flex-direction: column;\n    align-items: flex-start;\n\n    h3 {\n      margin-bottom: ${space(2)};\n    }\n  }\n`;\n\nconst CodeBlock = styled('pre')`\n  background: #251f3d;\n  display: flex;\n  flex-direction: column;\n  padding: ${space(2)};\n  overflow: initial;\n  position: relative;\n`;\n\nconst CopyButton = styled(Button)`\n  position: absolute;\n  right: 20px;\n`;\nconst Language = styled('code')`\n  font-size: 15px;\n  text-shadow: none;\n  direction: ltr;\n  text-align: left;\n  white-space: pre;\n  word-spacing: normal;\n  word-break: normal;\n  line-height: 1.5;\n  display: flex;\n  align-items: center;\n`;\nconst Bash = styled(Language)`\n  color: #f2edf6;\n`;\n\nconst Comment = styled(Language)`\n  color: #77658b;\n`;\nconst Container = styled('div')`\n  padding: ${space(3)};\n`;\n\nconst StyledDropdownAutoComplete = styled(DropdownAutoComplete)`\n  font-family: ${p => p.theme.text.family};\n  border: none;\n  border-radius: 4px;\n  width: 300px;\n`;\nconst GroupHeader = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-family: ${p => p.theme.text.family};\n  font-weight: 600;\n  margin: ${space(1)} 0;\n  color: ${p => p.theme.subText};\n  line-height: ${p => p.theme.fontSizeSmall};\n  text-align: left;\n`;\nconst CreateIntegrationLink = styled(Link)`\n  color: ${p => (p.disabled ? p.theme.disabled : p.theme.textColor)};\n`;\n\nconst MenuItemWrapper = styled('div')<{\n  disabled?: boolean;\n  py?: number;\n}>`\n  cursor: ${p => (p.disabled ? 'not-allowed' : 'pointer')};\n  display: flex;\n  align-items: center;\n  font-family: ${p => p.theme.text.family};\n  font-size: 13px;\n  ${p =>\n    typeof p.py !== 'undefined' &&\n    `\n      padding-top: ${p.py};\n      padding-bottom: ${p.py};\n    `};\n`;\n\nconst MenuItemFooterWrapper = styled(MenuItemWrapper)`\n  padding: ${space(0.25)} ${space(1)};\n  border-top: 1px solid ${p => p.theme.innerBorder};\n  background-color: ${p => p.theme.tag.highlight.background};\n  color: ${p => p.theme.active};\n  :hover {\n    color: ${p => p.theme.activeHover};\n    svg {\n      fill: ${p => p.theme.activeHover};\n    }\n  }\n`;\n\nconst IconContainer = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 24px;\n  height: 24px;\n  flex-shrink: 0;\n`;\n\nconst Label = styled(TextOverflow)`\n  margin-left: 6px;\n`;\n\nexport default ReleasesPromo;\n"],"names":["releasesSetupUrl","docsLink","external","href","t","RELEASES_TOUR_STEPS","title","image","src","body","actions","StyledPageHeader","PageHeader","space","p","theme","breakpoints","small","CodeBlock","CopyButton","Button","Language","Bash","Comment","Container","StyledDropdownAutoComplete","DropdownAutoComplete","text","family","GroupHeader","fontSizeSmall","subText","CreateIntegrationLink","Link","disabled","textColor","MenuItemWrapper","py","MenuItemFooterWrapper","innerBorder","tag","highlight","background","active","activeHover","IconContainer","Label","TextOverflow","organization","project","data","renderComponent","isLoading","useApiRequests","endpoints","slug","query","status","api","useApi","token","setToken","useState","integrations","setIntegrations","selectedItem","selectItem","useEffect","internalIntegrations","trackAdvancedAnalyticsEvent","project_id","id","trackQuickstartCopy","useCallback","trackQuickstartCreatedIntegration","integration","integration_uuid","uuid","trackCreateIntegrationModalClose","fetchToken","async","tokens","requestPromise","sentryAppSlug","length","newToken","generateToken","method","renderIntegrationNode","value","name","searchKey","label","priority","size","onClick","addErrorMessage","current_text","navigator","clipboard","writeText","addSuccessMessage","minWidth","maxHeight","onOpen","e","stopPropagation","items","map","alignMenu","onSelect","itemSize","searchPlaceholder","menuFooter","access","hasAccess","to","openCreateReleaseIntegration","onCreateSuccess","onCancel","color","isCircled","disableLabelPadding","emptyHidesInput","style","display"],"sourceRoot":""}