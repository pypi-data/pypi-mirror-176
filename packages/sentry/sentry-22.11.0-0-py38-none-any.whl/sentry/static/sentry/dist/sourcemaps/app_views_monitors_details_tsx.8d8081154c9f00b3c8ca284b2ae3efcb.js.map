{"version":3,"file":"chunks/app_views_monitors_details_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/issues/groupList.tsx","webpack:///./app/components/issues/groupListHeader.tsx","webpack:///./app/views/alerts/rules/metric/details/relatedIssuesNotAvailable.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/monitors/checkInIcon.tsx","webpack:///./app/views/monitors/monitorCheckIns.tsx","webpack:///./app/views/monitors/monitorHeaderActions.tsx","webpack:///./app/utils/logging.tsx","webpack:///./app/views/monitors/monitorHeader.tsx","webpack:///./app/views/monitors/monitorIssues.tsx","webpack:///./app/views/monitors/monitorStats.tsx","webpack:///./app/views/monitors/onboarding.tsx","webpack:///./app/views/monitors/details.tsx","webpack:///./app/views/monitors/monitorIcon.tsx"],"sourcesContent":["import {Component, Fragment} from 'react';\n// eslint-disable-next-line no-restricted-imports\nimport {browserHistory, withRouter, WithRouterProps} from 'react-router';\nimport isEqual from 'lodash/isEqual';\nimport omit from 'lodash/omit';\nimport * as qs from 'query-string';\n\nimport {fetchOrgMembers, indexMembersByProject} from 'sentry/actionCreators/members';\nimport {Client} from 'sentry/api';\nimport EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport Pagination from 'sentry/components/pagination';\nimport {Panel, PanelBody} from 'sentry/components/panels';\nimport {parseSearch, Token} from 'sentry/components/searchSyntax/parser';\nimport {treeResultLocator} from 'sentry/components/searchSyntax/utils';\nimport StreamGroup, {\n  DEFAULT_STREAM_GROUP_STATS_PERIOD,\n} from 'sentry/components/stream/group';\nimport {t} from 'sentry/locale';\nimport GroupStore from 'sentry/stores/groupStore';\nimport {Group} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\nimport {TimePeriodType} from 'sentry/views/alerts/rules/metric/details/constants';\nimport {RELATED_ISSUES_BOOLEAN_QUERY_ERROR} from 'sentry/views/alerts/rules/metric/details/relatedIssuesNotAvailable';\n\nimport GroupListHeader from './groupListHeader';\n\nconst defaultProps = {\n  canSelectGroups: true,\n  withChart: true,\n  withPagination: true,\n  useFilteredStats: true,\n  useTintRow: true,\n  narrowGroups: false,\n};\n\ntype Props = WithRouterProps & {\n  api: Client;\n  endpointPath: string;\n  orgId: string;\n  query: string;\n  customStatsPeriod?: TimePeriodType;\n  onFetchSuccess?: (\n    groupListState: State,\n    onCursor: (\n      cursor: string,\n      path: string,\n      query: Record<string, any>,\n      pageDiff: number\n    ) => void\n  ) => void;\n  queryFilterDescription?: string;\n  queryParams?: Record<string, number | string | string[] | undefined | null>;\n  renderEmptyMessage?: () => React.ReactNode;\n  renderErrorMessage?: (props: {detail: string}, retry: () => void) => React.ReactNode;\n  // where the group list is rendered\n  source?: string;\n} & Partial<typeof defaultProps>;\n\ntype State = {\n  error: boolean;\n  errorData: {detail: string} | null;\n  groups: Group[];\n  loading: boolean;\n  pageLinks: string | null;\n  memberList?: ReturnType<typeof indexMembersByProject>;\n};\n\nclass GroupList extends Component<Props, State> {\n  static defaultProps = defaultProps;\n\n  state: State = {\n    loading: true,\n    error: false,\n    errorData: null,\n    groups: [],\n    pageLinks: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\n    return (\n      !isEqual(this.state, nextState) ||\n      nextProps.endpointPath !== this.props.endpointPath ||\n      nextProps.query !== this.props.query ||\n      !isEqual(nextProps.queryParams, this.props.queryParams)\n    );\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const ignoredQueryParams = ['end'];\n\n    if (\n      prevProps.orgId !== this.props.orgId ||\n      prevProps.endpointPath !== this.props.endpointPath ||\n      prevProps.query !== this.props.query ||\n      !isEqual(\n        omit(prevProps.queryParams, ignoredQueryParams),\n        omit(this.props.queryParams, ignoredQueryParams)\n      )\n    ) {\n      this.fetchData();\n    }\n  }\n\n  componentWillUnmount() {\n    GroupStore.reset();\n    this.listener?.();\n  }\n\n  listener = GroupStore.listen(() => this.onGroupChange(), undefined);\n\n  fetchData = async () => {\n    GroupStore.loadInitialData([]);\n    const {api, orgId, queryParams} = this.props;\n    api.clear();\n\n    this.setState({loading: true, error: false, errorData: null});\n\n    fetchOrgMembers(api, orgId).then(members => {\n      this.setState({memberList: indexMembersByProject(members)});\n    });\n\n    const endpoint = this.getGroupListEndpoint();\n\n    const parsedQuery = parseSearch((queryParams ?? this.getQueryParams()).query);\n    const hasLogicBoolean = parsedQuery\n      ? treeResultLocator<boolean>({\n          tree: parsedQuery,\n          noResultValue: false,\n          visitorTest: ({token, returnResult}) => {\n            return token.type === Token.LogicBoolean ? returnResult(true) : null;\n          },\n        })\n      : false;\n\n    // Check if the alert rule query has AND or OR\n    // logic queries haven't been implemented for issue search yet\n    if (hasLogicBoolean) {\n      this.setState({\n        error: true,\n        errorData: {detail: RELATED_ISSUES_BOOLEAN_QUERY_ERROR},\n        loading: false,\n      });\n      return;\n    }\n\n    try {\n      const [data, , jqXHR] = await api.requestPromise(endpoint, {\n        includeAllArgs: true,\n      });\n\n      GroupStore.add(data);\n\n      this.setState(\n        {\n          error: false,\n          errorData: null,\n          loading: false,\n          pageLinks: jqXHR?.getResponseHeader('Link') ?? null,\n        },\n        () => {\n          this.props.onFetchSuccess?.(this.state, this.handleCursorChange);\n        }\n      );\n    } catch (error) {\n      this.setState({error: true, errorData: error.responseJSON, loading: false});\n    }\n  };\n\n  getGroupListEndpoint() {\n    const {orgId, endpointPath, queryParams} = this.props;\n    const path = endpointPath ?? `/organizations/${orgId}/issues/`;\n    const queryParameters = queryParams ?? this.getQueryParams();\n\n    return `${path}?${qs.stringify(queryParameters)}`;\n  }\n\n  getQueryParams() {\n    const {location, query} = this.props;\n\n    const queryParams = location.query;\n    queryParams.limit = 50;\n    queryParams.sort = 'new';\n    queryParams.query = query;\n\n    return queryParams;\n  }\n\n  handleCursorChange(\n    cursor: string | undefined,\n    path: string,\n    query: Record<string, any>,\n    pageDiff: number\n  ) {\n    const queryPageInt = parseInt(query.page, 10);\n    let nextPage: number | undefined = isNaN(queryPageInt)\n      ? pageDiff\n      : queryPageInt + pageDiff;\n\n    // unset cursor and page when we navigate back to the first page\n    // also reset cursor if somehow the previous button is enabled on\n    // first page and user attempts to go backwards\n    if (nextPage <= 0) {\n      cursor = undefined;\n      nextPage = undefined;\n    }\n\n    browserHistory.push({\n      pathname: path,\n      query: {...query, cursor, page: nextPage},\n    });\n  }\n\n  onGroupChange() {\n    const groups = GroupStore.getAllItems() as Group[];\n    if (!isEqual(groups, this.state.groups)) {\n      this.setState({groups});\n    }\n  }\n\n  render() {\n    const {\n      canSelectGroups,\n      withChart,\n      renderEmptyMessage,\n      renderErrorMessage,\n      withPagination,\n      useFilteredStats,\n      useTintRow,\n      customStatsPeriod,\n      queryParams,\n      queryFilterDescription,\n      narrowGroups,\n      source,\n    } = this.props;\n    const {loading, error, errorData, groups, memberList, pageLinks} = this.state;\n\n    if (loading) {\n      return <LoadingIndicator />;\n    }\n\n    if (error) {\n      if (typeof renderErrorMessage === 'function' && errorData) {\n        return renderErrorMessage(errorData, this.fetchData);\n      }\n\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    if (groups.length === 0) {\n      if (typeof renderEmptyMessage === 'function') {\n        return renderEmptyMessage();\n      }\n      return (\n        <Panel>\n          <PanelBody>\n            <EmptyStateWarning>\n              <p>{t(\"There don't seem to be any events fitting the query.\")}</p>\n            </EmptyStateWarning>\n          </PanelBody>\n        </Panel>\n      );\n    }\n\n    const statsPeriod =\n      queryParams?.groupStatsPeriod === 'auto'\n        ? queryParams?.groupStatsPeriod\n        : DEFAULT_STREAM_GROUP_STATS_PERIOD;\n\n    return (\n      <Fragment>\n        <Panel>\n          <GroupListHeader withChart={!!withChart} narrowGroups={narrowGroups} />\n          <PanelBody>\n            {groups.map(({id, project}) => {\n              const members = memberList?.hasOwnProperty(project.slug)\n                ? memberList[project.slug]\n                : undefined;\n\n              return (\n                <StreamGroup\n                  key={id}\n                  id={id}\n                  canSelect={canSelectGroups}\n                  withChart={withChart}\n                  memberList={members}\n                  useFilteredStats={useFilteredStats}\n                  useTintRow={useTintRow}\n                  customStatsPeriod={customStatsPeriod}\n                  statsPeriod={statsPeriod}\n                  queryFilterDescription={queryFilterDescription}\n                  narrowGroups={narrowGroups}\n                  source={source}\n                />\n              );\n            })}\n          </PanelBody>\n        </Panel>\n        {withPagination && (\n          <Pagination pageLinks={pageLinks} onCursor={this.handleCursorChange} />\n        )}\n      </Fragment>\n    );\n  }\n}\n\nexport {GroupList};\n\nexport default withApi(withRouter(GroupList));\n","import styled from '@emotion/styled';\n\nimport {PanelHeader} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\ntype Props = {\n  withChart: boolean;\n  narrowGroups?: boolean;\n};\n\nconst GroupListHeader = ({withChart = true, narrowGroups = false}: Props) => (\n  <PanelHeader disablePadding>\n    <IssueWrapper>{t('Issue')}</IssueWrapper>\n    {withChart && <ChartWrapper narrowGroups={narrowGroups}>{t('Graph')}</ChartWrapper>}\n    <EventUserWrapper>{t('events')}</EventUserWrapper>\n    <EventUserWrapper>{t('users')}</EventUserWrapper>\n    <AssigneeWrapper narrowGroups={narrowGroups}>{t('Assignee')}</AssigneeWrapper>\n  </PanelHeader>\n);\n\nexport default GroupListHeader;\n\nconst Heading = styled('div')`\n  display: flex;\n  align-self: center;\n  margin: 0 ${space(2)};\n  color: ${p => p.theme.subText};\n`;\n\nconst IssueWrapper = styled(Heading)`\n  flex: 1;\n  width: 66.66%;\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    width: 50%;\n  }\n`;\n\nconst EventUserWrapper = styled(Heading)`\n  justify-content: flex-end;\n  width: 60px;\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    width: 80px;\n  }\n`;\n\nconst ChartWrapper = styled(Heading)<{narrowGroups: boolean}>`\n  justify-content: space-between;\n  width: 160px;\n\n  @media (max-width: ${p =>\n      p.narrowGroups ? p.theme.breakpoints.xlarge : p.theme.breakpoints.large}) {\n    display: none;\n  }\n`;\n\nconst AssigneeWrapper = styled(Heading)<{narrowGroups: boolean}>`\n  justify-content: flex-end;\n  width: 80px;\n\n  @media (max-width: ${p =>\n      p.narrowGroups ? p.theme.breakpoints.large : p.theme.breakpoints.medium}) {\n    display: none;\n  }\n`;\n","import styled from '@emotion/styled';\n\nimport Feature from 'sentry/components/acl/feature';\nimport Alert from 'sentry/components/alert';\nimport Button from 'sentry/components/button';\nimport type {LinkProps} from 'sentry/components/links/link';\nimport {Panel} from 'sentry/components/panels';\n\ninterface Props {\n  buttonText: string;\n  buttonTo: LinkProps['to'];\n}\n\nexport const RELATED_ISSUES_BOOLEAN_QUERY_ERROR =\n  'Error parsing search query: Boolean statements containing \"OR\" or \"AND\" are not supported in this search';\n\n/**\n * Renders an Alert box of type \"info\" for boolean queries in alert details. Renders a discover link if the feature is available.\n */\nexport const RelatedIssuesNotAvailable = ({buttonTo, buttonText}: Props) => (\n  <StyledAlert\n    type=\"info\"\n    showIcon\n    trailingItems={\n      <Feature features={['discover-basic']}>\n        <Button type=\"button\" priority=\"default\" size=\"xs\" to={buttonTo}>\n          {buttonText}\n        </Button>\n      </Feature>\n    }\n  >\n    <div data-test-id=\"loading-error-message\">\n      Related Issues unavailable for this alert.\n    </div>\n  </StyledAlert>\n);\n\nconst StyledAlert = styled(Alert)`\n  ${Panel} & {\n    border-radius: 0;\n    border-width: 1px 0;\n  }\n`;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import styled from '@emotion/styled';\n\nimport {CheckInStatus} from './types';\n\ntype Props = {\n  size: number | string;\n  status: CheckInStatus;\n  color?: string;\n};\n\nexport default styled('div')<Props>`\n  display: inline-block;\n  position: relative;\n  border-radius: 50%;\n  height: ${p => p.size}px;\n  width: ${p => p.size}px;\n\n  ${p =>\n    p.color\n      ? `background: ${p.color};`\n      : `background: ${\n          p.status === 'error'\n            ? p.theme.error\n            : p.status === 'ok'\n            ? p.theme.success\n            : p.status === 'missed'\n            ? p.theme.yellow300\n            : p.theme.disabled\n        };`};\n`;\n","import styled from '@emotion/styled';\n\nimport Duration from 'sentry/components/duration';\nimport {PanelBody, PanelItem} from 'sentry/components/panels';\nimport TimeSince from 'sentry/components/timeSince';\nimport Tooltip from 'sentry/components/tooltip';\nimport {tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport useApiRequests from 'sentry/utils/useApiRequests';\nimport {CheckInStatus, Monitor} from 'sentry/views/monitors/types';\n\nimport CheckInIcon from './checkInIcon';\n\ntype CheckIn = {\n  dateCreated: string;\n  duration: number;\n  id: string;\n  status: CheckInStatus;\n};\n\ntype Props = {\n  monitor: Monitor;\n};\n\ntype State = {\n  checkInList: CheckIn[];\n};\n\nconst MonitorCheckIns = ({monitor}: Props) => {\n  const {data, hasError, renderComponent} = useApiRequests<State>({\n    endpoints: [\n      ['checkInList', `/monitors/${monitor.id}/checkins/`, {query: {per_page: '10'}}],\n    ],\n  });\n\n  const renderedComponent = renderComponent(\n    <PanelBody>\n      {data.checkInList?.map(checkIn => (\n        <PanelItem key={checkIn.id}>\n          <CheckInIconWrapper>\n            <Tooltip\n              title={tct('Check In Status: [status]', {\n                status: checkIn.status,\n              })}\n            >\n              <CheckInIcon status={checkIn.status} size={16} />\n            </Tooltip>\n          </CheckInIconWrapper>\n          <TimeSinceWrapper>\n            <TimeSince date={checkIn.dateCreated} />\n          </TimeSinceWrapper>\n          <DurationWrapper>\n            {checkIn.duration && <Duration seconds={checkIn.duration / 100} />}\n          </DurationWrapper>\n        </PanelItem>\n      ))}\n    </PanelBody>\n  );\n\n  return hasError ? <ErrorWrapper>{renderedComponent}</ErrorWrapper> : renderedComponent;\n};\n\nexport default MonitorCheckIns;\n\nconst DivMargin = styled('div')`\n  margin-right: ${space(2)};\n`;\n\nconst CheckInIconWrapper = styled(DivMargin)`\n  display: flex;\n  align-items: center;\n`;\n\nconst TimeSinceWrapper = styled(DivMargin)`\n  font-variant-numeric: tabular-nums;\n`;\n\nconst DurationWrapper = styled('div')`\n  font-variant-numeric: tabular-nums;\n`;\n\nconst ErrorWrapper = styled('div')`\n  margin: ${space(3)} ${space(3)} 0;\n`;\n","import {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'sentry/actionCreators/indicator';\nimport Access from 'sentry/components/acl/access';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport Confirm from 'sentry/components/confirm';\nimport {IconDelete, IconEdit} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {logException} from 'sentry/utils/logging';\nimport useApi from 'sentry/utils/useApi';\n\nimport {Monitor} from './types';\n\ntype Props = {\n  monitor: Monitor;\n  onUpdate: (data: Monitor) => void;\n  orgId: string;\n};\n\nconst DISABLED_TOOLTIP_TEXT = t(\n  'These settings can only be edited by users with the organization owner, manager, or admin role.'\n);\n\nconst MonitorHeaderActions = ({monitor, orgId, onUpdate}: Props) => {\n  const api = useApi();\n\n  const handleDelete = () => {\n    const redirectPath = `/organizations/${orgId}/monitors/`;\n    addLoadingMessage(t('Deleting Monitor...'));\n\n    api\n      .requestPromise(`/monitors/${monitor.id}/`, {\n        method: 'DELETE',\n      })\n      .then(() => {\n        browserHistory.push(redirectPath);\n      })\n      .catch(() => {\n        addErrorMessage(t('Unable to remove monitor.'));\n      });\n  };\n\n  const updateMonitor = (data: Partial<Monitor>) => {\n    addLoadingMessage();\n    api\n      .requestPromise(`/monitors/${monitor.id}/`, {\n        method: 'PUT',\n        data,\n      })\n      .then(resp => {\n        clearIndicators();\n        onUpdate?.(resp);\n      })\n      .catch(err => {\n        logException(err);\n        addErrorMessage(t('Unable to update monitor.'));\n      });\n  };\n\n  const toggleStatus = () =>\n    updateMonitor({\n      status: monitor.status === 'disabled' ? 'active' : 'disabled',\n    });\n\n  return (\n    <Access access={['project:write']}>\n      {({hasAccess}) => (\n        <ButtonContainer>\n          <ButtonBar gap={1}>\n            <Button\n              size=\"sm\"\n              icon={<IconEdit size=\"xs\" />}\n              to={`/organizations/${orgId}/monitors/${monitor.id}/edit/`}\n            >\n              {hasAccess ? t('Edit') : t('View Config')}\n            </Button>\n            <Button\n              size=\"sm\"\n              onClick={toggleStatus}\n              disabled={!hasAccess}\n              title={DISABLED_TOOLTIP_TEXT}\n              tooltipProps={{disabled: hasAccess}}\n            >\n              {monitor.status !== 'disabled' ? t('Pause') : t('Enable')}\n            </Button>\n            <Confirm\n              onConfirm={handleDelete}\n              message={t(\n                'Deleting this monitor is permanent. Are you sure you wish to continue?'\n              )}\n              disabled={!hasAccess}\n            >\n              <Button\n                size=\"sm\"\n                icon={<IconDelete size=\"xs\" />}\n                title={DISABLED_TOOLTIP_TEXT}\n                tooltipProps={{disabled: hasAccess}}\n              >\n                {t('Delete')}\n              </Button>\n            </Confirm>\n          </ButtonBar>\n        </ButtonContainer>\n      )}\n    </Access>\n  );\n};\n\nconst ButtonContainer = styled('div')`\n  margin-bottom: ${space(3)};\n  display: flex;\n  flex-shrink: 1;\n  align-self: flex-end;\n`;\n\nexport default MonitorHeaderActions;\n","import * as Sentry from '@sentry/react';\n\nexport function logException(ex: Error, context?: any): void {\n  Sentry.withScope(scope => {\n    if (context) {\n      scope.setExtra('context', context);\n    }\n\n    Sentry.captureException(ex);\n  });\n  /* eslint no-console:0 */\n  window.console && console.error && console.error(ex);\n}\n","import styled from '@emotion/styled';\n\nimport Breadcrumbs from 'sentry/components/breadcrumbs';\nimport {SectionHeading} from 'sentry/components/charts/styles';\nimport IdBadge from 'sentry/components/idBadge';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport TimeSince from 'sentry/components/timeSince';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\nimport MonitorHeaderActions from './monitorHeaderActions';\nimport MonitorIcon from './monitorIcon';\n\ntype Props = React.ComponentProps<typeof MonitorHeaderActions>;\n\nconst MonitorHeader = ({monitor, orgId, onUpdate}: Props) => {\n  const crumbs = [\n    {\n      label: t('Monitors'),\n      to: `/organizations/${orgId}/monitors`,\n    },\n    {\n      label: t('Monitor Details'),\n    },\n  ];\n\n  return (\n    <Layout.Header>\n      <Layout.HeaderContent>\n        <Breadcrumbs crumbs={crumbs} />\n        <Layout.Title>\n          <MonitorName>\n            <IdBadge\n              project={monitor.project}\n              avatarSize={28}\n              hideName\n              avatarProps={{hasTooltip: true, tooltip: monitor.project.slug}}\n            />\n            {monitor.name}\n          </MonitorName>\n        </Layout.Title>\n        <MonitorId>{monitor.id}</MonitorId>\n      </Layout.HeaderContent>\n      <Layout.HeaderActions>\n        <MonitorHeaderActions orgId={orgId} monitor={monitor} onUpdate={onUpdate} />\n        <MonitorStats>\n          <MonitorStatLabel>{t('Last Check-in')}</MonitorStatLabel>\n          <MonitorStatLabel>{t('Next Check-in')}</MonitorStatLabel>\n          <MonitorStatLabel>{t('Status')}</MonitorStatLabel>\n          <div>{monitor.lastCheckIn && <TimeSince date={monitor.lastCheckIn} />}</div>\n          <div>{monitor.nextCheckIn && <TimeSince date={monitor.nextCheckIn} />}</div>\n          <MonitorIcon status={monitor.status} size={16} />\n        </MonitorStats>\n      </Layout.HeaderActions>\n    </Layout.Header>\n  );\n};\n\nconst MonitorName = styled('div')`\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  grid-column-gap: ${space(1)};\n  align-items: center;\n`;\n\nconst MonitorId = styled('div')`\n  margin-top: ${space(1)};\n  color: ${p => p.theme.subText};\n`;\n\nconst MonitorStats = styled('div')`\n  display: grid;\n  align-self: flex-end;\n  grid-template-columns: repeat(3, max-content);\n  grid-column-gap: ${space(4)};\n  grid-row-gap: ${space(0.5)};\n  margin-bottom: ${space(2)};\n`;\n\nconst MonitorStatLabel = styled(SectionHeading)`\n  text-transform: uppercase;\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nexport default MonitorHeader;\n","import EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport GroupList from 'sentry/components/issues/groupList';\nimport {Panel, PanelBody} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\n\nimport {Monitor} from './types';\n\ntype Props = {\n  monitor: Monitor;\n  orgId: string;\n};\n\nconst MonitorIssuesEmptyMessage = () => (\n  <Panel>\n    <PanelBody>\n      <EmptyStateWarning>\n        <p>{t('No issues founds relating to this monitor')}</p>\n      </EmptyStateWarning>\n    </PanelBody>\n  </Panel>\n);\n\nconst MonitorIssues = ({orgId, monitor}: Props) => {\n  return (\n    <GroupList\n      orgId={orgId}\n      endpointPath={`/organizations/${orgId}/issues/`}\n      queryParams={{\n        query: `monitor.id:\"${monitor.id}\"`,\n        project: monitor.project.id,\n        limit: 5,\n      }}\n      query=\"\"\n      renderEmptyMessage={MonitorIssuesEmptyMessage}\n      canSelectGroups={false}\n      withPagination={false}\n      withChart={false}\n      useTintRow={false}\n      source=\"monitors\"\n    />\n  );\n};\n\nexport default MonitorIssues;\n","import type {LineSeriesOption} from 'echarts';\n\nimport {BarChart} from 'sentry/components/charts/barChart';\nimport {getYAxisMaxFn} from 'sentry/components/charts/miniBarChart';\nimport LineSeries from 'sentry/components/charts/series/lineSeries';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport {Panel, PanelBody} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport {SeriesDataUnit} from 'sentry/types/echarts';\nimport {axisLabelFormatter, tooltipFormatter} from 'sentry/utils/discover/charts';\nimport {AggregationOutputType} from 'sentry/utils/discover/fields';\nimport theme from 'sentry/utils/theme';\nimport useApiRequests from 'sentry/utils/useApiRequests';\n\nimport {Monitor, MonitorStat} from './types';\n\ntype Props = {\n  monitor: Monitor;\n};\n\ntype State = {\n  stats: MonitorStat[] | null;\n};\n\nconst MonitorStats = ({monitor}: Props) => {\n  const until = Math.floor(new Date().getTime() / 1000);\n  const since = until - 3600 * 24 * 30;\n  const {data, renderComponent} = useApiRequests<State>({\n    endpoints: [\n      [\n        'stats',\n        `/monitors/${monitor.id}/stats/`,\n        {\n          query: {\n            since: since.toString(),\n            until: until.toString(),\n            resolution: '1d',\n          },\n        },\n      ],\n    ],\n  });\n\n  let emptyStats = true;\n  const success = {\n    seriesName: t('Successful'),\n    yAxisIndex: 0,\n    data: [] as SeriesDataUnit[],\n  };\n  const failed = {\n    seriesName: t('Failed'),\n    yAxisIndex: 0,\n    data: [] as SeriesDataUnit[],\n  };\n  const durationData = [] as [number, number][];\n\n  data.stats?.forEach(p => {\n    if (p.ok || p.error) {\n      emptyStats = false;\n    }\n    const timestamp = p.ts * 1000;\n    success.data.push({name: timestamp, value: p.ok});\n    failed.data.push({name: timestamp, value: p.error});\n    durationData.push([timestamp, Math.trunc(p.duration)]);\n  });\n  const colors = [theme.green200, theme.red200];\n\n  const durationTitle = t('Average Duration');\n  const additionalSeries: LineSeriesOption[] = [\n    LineSeries({\n      name: durationTitle,\n      data: durationData,\n      lineStyle: {color: theme.purple300, width: 2},\n      itemStyle: {color: theme.purple300},\n      yAxisIndex: 1,\n      animation: false,\n    }),\n  ];\n\n  const height = 150;\n  const getYAxisOptions = (aggregateType: AggregationOutputType) => ({\n    max: getYAxisMaxFn(height),\n    splitLine: {\n      show: false,\n    },\n    axisLabel: {\n      formatter: (value: number) => axisLabelFormatter(value, aggregateType, true),\n      showMaxLabel: false,\n    },\n  });\n\n  return renderComponent(\n    <Panel>\n      <PanelBody withPadding>\n        {!emptyStats ? (\n          <BarChart\n            isGroupedByDate\n            showTimeInTooltip\n            series={[success, failed]}\n            stacked\n            additionalSeries={additionalSeries}\n            height={height}\n            colors={colors}\n            tooltip={{\n              trigger: 'axis',\n              valueFormatter: (value: number, label?: string) => {\n                return label === durationTitle\n                  ? tooltipFormatter(value, 'duration')\n                  : tooltipFormatter(value, 'number');\n              },\n            }}\n            yAxes={[{...getYAxisOptions('number')}, {...getYAxisOptions('duration')}]}\n            grid={{\n              top: 6,\n              bottom: 0,\n              left: 4,\n              right: 0,\n            }}\n            animation={false}\n          />\n        ) : (\n          <EmptyMessage\n            title={t('Nothing recorded in the last 30 days.')}\n            description={t('All check-ins for this monitor.')}\n          />\n        )}\n      </PanelBody>\n    </Panel>\n  );\n};\n\nexport default MonitorStats;\n","import styled from '@emotion/styled';\n\nimport {CodeSnippet} from 'sentry/components/codeSnippet';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport List from 'sentry/components/list';\nimport ListItem from 'sentry/components/list/listItem';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\nimport {Monitor} from './types';\n\ntype Props = {\n  monitor: Monitor;\n};\n\nconst MonitorOnboarding = ({monitor}: Props) => {\n  const checkInUrl = `https://sentry.io/api/0/monitors/${monitor.id}/checkins/`;\n\n  return (\n    <Panel>\n      <PanelHeader>{t('How to instrument monitors')}</PanelHeader>\n      <PanelBody withPadding>\n        <List symbol=\"bullet\">\n          <StyledListItem>\n            <OnboardingText>\n              {tct(\n                'To report on the status of a job make POST requests using [linkDocs:DSN authentication]',\n                {\n                  linkDocs: (\n                    <ExternalLink href=\"https://docs.sentry.io/api/auth/#dsn-authentication\" />\n                  ),\n                }\n              )}\n            </OnboardingText>\n            <CodeSnippet language=\"text\" hideActionBar>\n              {`POST ${checkInUrl}`}\n            </CodeSnippet>\n          </StyledListItem>\n          <StyledListItem>\n            <OnboardingText>\n              {t(\n                'Supply one of the following JSON bodies to the POST request depending on the job status to be reported'\n              )}\n            </OnboardingText>\n            <OnboardingText>\n              {t('For the start of a job')}\n              <CodeSnippet language=\"json\" hideActionBar>\n                {`{ \"status\": \"in_progress\" }`}\n              </CodeSnippet>\n            </OnboardingText>\n            <OnboardingText>\n              {t('For job completion with optional duration in milliseconds')}\n              <CodeSnippet language=\"json\" hideActionBar>\n                {`{ \"status\": \"ok\", \"duration\": 3000 }`}\n              </CodeSnippet>\n            </OnboardingText>\n            <OnboardingText>\n              {t('For a job failure with optional duration in milliseconds')}\n              <CodeSnippet language=\"json\" hideActionBar>\n                {`{ \"status\": \"error\", \"duration\": 3000 }`}\n              </CodeSnippet>\n            </OnboardingText>\n          </StyledListItem>\n        </List>\n      </PanelBody>\n    </Panel>\n  );\n};\n\nconst OnboardingText = styled('p')`\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n\nconst StyledListItem = styled(ListItem)`\n  margin-bottom: ${space(2)};\n`;\n\nexport default MonitorOnboarding;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {Panel, PanelHeader} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport AsyncView from 'sentry/views/asyncView';\n\nimport MonitorCheckIns from './monitorCheckIns';\nimport MonitorHeader from './monitorHeader';\nimport MonitorIssues from './monitorIssues';\nimport MonitorStats from './monitorStats';\nimport MonitorOnboarding from './onboarding';\nimport {Monitor} from './types';\n\ntype Props = AsyncView['props'] &\n  RouteComponentProps<{monitorId: string; orgId: string}, {}>;\n\ntype State = AsyncView['state'] & {\n  monitor: Monitor | null;\n};\n\nclass MonitorDetails extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {params, location} = this.props;\n    return [['monitor', `/monitors/${params.monitorId}/`, {query: location.query}]];\n  }\n\n  getTitle() {\n    if (this.state.monitor) {\n      return `${this.state.monitor.name} - Monitors - ${this.props.params.orgId}`;\n    }\n    return `Monitors - ${this.props.params.orgId}`;\n  }\n\n  onUpdate = (data: Monitor) =>\n    this.setState(state => ({monitor: {...state.monitor, ...data}}));\n\n  renderBody() {\n    const {monitor} = this.state;\n\n    if (monitor === null) {\n      return null;\n    }\n\n    return (\n      <Fragment>\n        <MonitorHeader\n          monitor={monitor}\n          orgId={this.props.params.orgId}\n          onUpdate={this.onUpdate}\n        />\n        <Layout.Body>\n          <Layout.Main fullWidth>\n            {!monitor.lastCheckIn && <MonitorOnboarding monitor={monitor} />}\n\n            <MonitorStats monitor={monitor} />\n\n            <MonitorIssues monitor={monitor} orgId={this.props.params.orgId} />\n\n            <Panel>\n              <PanelHeader>{t('Recent Check-ins')}</PanelHeader>\n\n              <MonitorCheckIns monitor={monitor} />\n            </Panel>\n          </Layout.Main>\n        </Layout.Body>\n      </Fragment>\n    );\n  }\n}\n\nexport default MonitorDetails;\n","import styled from '@emotion/styled';\n\nimport {Status} from './types';\n\nexport default styled('div')<{size: number; status: Status}>`\n  display: inline-block;\n  position: relative;\n  border-radius: 50%;\n  height: ${p => p.size}px;\n  width: ${p => p.size}px;\n\n  ${p =>\n    p.color\n      ? `background: ${p.color};`\n      : `background: ${\n          p.status === 'error'\n            ? p.theme.error\n            : p.status === 'ok'\n            ? p.theme.success\n            : p.status === 'missed_checkin'\n            ? p.theme.yellow300\n            : p.theme.disabled\n        };`};\n`;\n"],"names":["GroupList","Component","loading","error","errorData","groups","pageLinks","GroupStore","this","onGroupChange","undefined","async","api","orgId","queryParams","props","clear","setState","fetchOrgMembers","then","members","memberList","indexMembersByProject","endpoint","getGroupListEndpoint","parsedQuery","parseSearch","getQueryParams","query","treeResultLocator","tree","noResultValue","visitorTest","token","returnResult","type","Token","detail","RELATED_ISSUES_BOOLEAN_QUERY_ERROR","data","jqXHR","requestPromise","includeAllArgs","getResponseHeader","onFetchSuccess","state","handleCursorChange","responseJSON","componentDidMount","fetchData","shouldComponentUpdate","nextProps","nextState","isEqual","endpointPath","componentDidUpdate","prevProps","ignoredQueryParams","omit","componentWillUnmount","listener","path","queryParameters","qs","location","limit","sort","cursor","pageDiff","queryPageInt","parseInt","page","nextPage","isNaN","browserHistory","pathname","render","canSelectGroups","withChart","renderEmptyMessage","renderErrorMessage","withPagination","useFilteredStats","useTintRow","customStatsPeriod","queryFilterDescription","narrowGroups","source","onRetry","length","t","statsPeriod","groupStatsPeriod","DEFAULT_STREAM_GROUP_STATS_PERIOD","Fragment","map","id","project","hasOwnProperty","slug","canSelect","onCursor","withApi","withRouter","GroupListHeader","disablePadding","IssueWrapper","ChartWrapper","EventUserWrapper","AssigneeWrapper","Heading","space","p","theme","subText","breakpoints","medium","xlarge","large","RelatedIssuesNotAvailable","buttonTo","buttonText","StyledAlert","showIcon","trailingItems","features","priority","size","to","Alert","Panel","AsyncView","AsyncComponent","getTitle","title","renderComponent","color","status","success","yellow300","disabled","monitor","hasError","useApiRequests","endpoints","per_page","renderedComponent","checkInList","checkIn","CheckInIconWrapper","tct","TimeSinceWrapper","date","dateCreated","DurationWrapper","duration","seconds","ErrorWrapper","DivMargin","DISABLED_TOOLTIP_TEXT","MonitorHeaderActions","onUpdate","useApi","handleDelete","redirectPath","addLoadingMessage","method","catch","addErrorMessage","toggleStatus","updateMonitor","resp","clearIndicators","err","ex","Sentry","scope","window","console","access","hasAccess","ButtonContainer","gap","icon","onClick","tooltipProps","onConfirm","message","MonitorHeader","crumbs","label","MonitorName","avatarSize","hideName","avatarProps","hasTooltip","tooltip","name","MonitorId","MonitorStats","MonitorStatLabel","lastCheckIn","nextCheckIn","SectionHeading","fontSizeSmall","MonitorIssuesEmptyMessage","MonitorIssues","until","Math","floor","Date","getTime","since","toString","resolution","emptyStats","seriesName","yAxisIndex","failed","durationData","stats","forEach","ok","timestamp","ts","push","value","trunc","colors","durationTitle","additionalSeries","LineSeries","lineStyle","width","itemStyle","animation","getYAxisOptions","aggregateType","max","getYAxisMaxFn","splitLine","show","axisLabel","formatter","axisLabelFormatter","showMaxLabel","withPadding","description","isGroupedByDate","showTimeInTooltip","series","stacked","height","trigger","valueFormatter","tooltipFormatter","yAxes","grid","top","bottom","left","right","MonitorOnboarding","checkInUrl","symbol","StyledListItem","OnboardingText","linkDocs","href","language","hideActionBar","fontSizeLarge","ListItem","MonitorDetails","getEndpoints","params","monitorId","renderBody","fullWidth"],"sourceRoot":""}