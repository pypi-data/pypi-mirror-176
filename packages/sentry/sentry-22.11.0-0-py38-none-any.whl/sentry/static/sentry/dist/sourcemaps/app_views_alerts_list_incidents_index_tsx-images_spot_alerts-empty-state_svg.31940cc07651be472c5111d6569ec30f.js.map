{"version":3,"file":"chunks/app_views_alerts_list_incidents_index_tsx-images_spot_alerts-empty-state_svg.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/onboardingPanel.tsx","webpack:///./app/views/alerts/list/onboarding.tsx","webpack:///./app/views/alerts/list/incidents/row.tsx","webpack:///./app/views/alerts/list/incidents/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport {Panel} from 'sentry/components/panels';\nimport space from 'sentry/styles/space';\n\ninterface Props extends React.ComponentProps<typeof Panel> {\n  children: React.ReactNode;\n  image?: React.ReactNode;\n}\n\nfunction OnboardingPanel({image, children, ...props}: Props) {\n  return (\n    <Panel {...props}>\n      <Container>\n        {image ? <IlloBox>{image}</IlloBox> : null}\n        <StyledBox centered={!image}>{children}</StyledBox>\n      </Container>\n    </Panel>\n  );\n}\n\nconst Container = styled('div')`\n  padding: ${space(3)};\n  position: relative;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n    min-height: 300px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    min-height: 350px;\n  }\n`;\n\nconst StyledBox = styled('div')<{centered?: boolean}>`\n  z-index: 1;\n\n  ${p => (p.centered ? 'text-align: center;' : '')}\n  ${p => (p.centered ? 'max-width: 600px;' : '')}\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 2;\n  }\n`;\n\nconst IlloBox = styled(StyledBox)`\n  position: relative;\n  min-height: 100px;\n  max-width: 300px;\n  margin: ${space(2)} auto;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 1;\n    margin: ${space(3)};\n    max-width: auto;\n  }\n`;\n\nexport default OnboardingPanel;\n","import styled from '@emotion/styled';\n\nimport emptyStateImg from 'sentry-images/spot/alerts-empty-state.svg';\n\nimport ButtonBar from 'sentry/components/buttonBar';\nimport OnboardingPanel from 'sentry/components/onboardingPanel';\nimport {t} from 'sentry/locale';\n\ntype Props = {\n  actions: React.ReactNode;\n};\n\nfunction Onboarding({actions}: Props) {\n  return (\n    <OnboardingPanel image={<AlertsImage src={emptyStateImg} />}>\n      <h3>{t('More signal, less noise')}</h3>\n      <p>\n        {t(\n          'Not every error is worth an email. Set your own rules for alerts you need, with information that helps.'\n        )}\n      </p>\n      <ButtonList gap={1}>{actions}</ButtonList>\n    </OnboardingPanel>\n  );\n}\n\nconst AlertsImage = styled('img')`\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    user-select: none;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    width: 220px;\n    margin-top: auto;\n    margin-bottom: auto;\n    transform: translateX(-50%);\n    left: 50%;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    transform: translateX(-60%);\n    width: 280px;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    transform: translateX(-75%);\n    width: 320px;\n  }\n`;\n\nconst ButtonList = styled(ButtonBar)`\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n`;\n\nexport default Onboarding;\n","import {Fragment, useMemo} from 'react';\nimport styled from '@emotion/styled';\nimport moment from 'moment';\n\nimport ActorAvatar from 'sentry/components/avatar/actorAvatar';\nimport Duration from 'sentry/components/duration';\nimport ErrorBoundary from 'sentry/components/errorBoundary';\nimport IdBadge from 'sentry/components/idBadge';\nimport Link from 'sentry/components/links/link';\nimport Tag from 'sentry/components/tag';\nimport TimeSince from 'sentry/components/timeSince';\nimport {t} from 'sentry/locale';\nimport TeamStore from 'sentry/stores/teamStore';\nimport space from 'sentry/styles/space';\nimport {Actor, Organization, Project} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {Incident, IncidentStatus} from 'sentry/views/alerts/types';\nimport {alertDetailsLink} from 'sentry/views/alerts/utils';\n\ntype Props = {\n  incident: Incident;\n  organization: Organization;\n  projects: Project[];\n  projectsLoaded: boolean;\n};\n\nfunction AlertListRow({incident, projectsLoaded, projects, organization}: Props) {\n  const slug = incident.projects[0];\n  const started = moment(incident.dateStarted);\n  const duration = moment\n    .duration(moment(incident.dateClosed || new Date()).diff(started))\n    .as('seconds');\n\n  const project = useMemo(() => projects.find(p => p.slug === slug), [slug, projects]);\n\n  const alertLink = {\n    pathname: alertDetailsLink(organization, incident),\n    query: {alert: incident.identifier},\n  };\n  const ownerId = incident.alertRule.owner?.split(':')[1];\n  let teamName = '';\n  if (ownerId) {\n    teamName = TeamStore.getById(ownerId)?.name ?? '';\n  }\n  const teamActor = ownerId\n    ? {type: 'team' as Actor['type'], id: ownerId, name: teamName}\n    : null;\n\n  return (\n    <ErrorBoundary>\n      <Title data-test-id=\"alert-title\">\n        <Link to={alertLink}>{incident.title}</Link>\n      </Title>\n\n      <NoWrapNumeric>\n        {getDynamicText({\n          value: <TimeSince date={incident.dateStarted} extraShort />,\n          fixed: '1w ago',\n        })}\n      </NoWrapNumeric>\n      <NoWrapNumeric>\n        {incident.status === IncidentStatus.CLOSED ? (\n          <Duration seconds={getDynamicText({value: duration, fixed: 1200})} />\n        ) : (\n          <Tag type=\"warning\">{t('Still Active')}</Tag>\n        )}\n      </NoWrapNumeric>\n\n      <ProjectBadge avatarSize={18} project={!projectsLoaded ? {slug} : project} />\n      <NoWrapNumeric>#{incident.id}</NoWrapNumeric>\n\n      <FlexCenter>\n        {teamActor ? (\n          <Fragment>\n            <StyledActorAvatar actor={teamActor} size={24} hasTooltip={false} />{' '}\n            <TeamWrapper>{teamActor.name}</TeamWrapper>\n          </Fragment>\n        ) : (\n          '-'\n        )}\n      </FlexCenter>\n    </ErrorBoundary>\n  );\n}\n\nconst Title = styled('div')`\n  ${p => p.theme.overflowEllipsis}\n  min-width: 130px;\n`;\n\nconst NoWrapNumeric = styled('div')`\n  white-space: nowrap;\n  font-variant-numeric: tabular-nums;\n`;\n\nconst ProjectBadge = styled(IdBadge)`\n  flex-shrink: 0;\n`;\n\nconst FlexCenter = styled('div')`\n  ${p => p.theme.overflowEllipsis}\n  display: flex;\n  align-items: center;\n`;\n\nconst TeamWrapper = styled('span')`\n  ${p => p.theme.overflowEllipsis}\n`;\n\nconst StyledActorAvatar = styled(ActorAvatar)`\n  margin-right: ${space(1)};\n`;\n\nexport default AlertListRow;\n","import {Fragment, useEffect} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {promptsCheck, promptsUpdate} from 'sentry/actionCreators/prompts';\nimport Feature from 'sentry/components/acl/feature';\nimport Alert from 'sentry/components/alert';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Button from 'sentry/components/button';\nimport CreateAlertButton from 'sentry/components/createAlertButton';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport Pagination from 'sentry/components/pagination';\nimport {PanelTable} from 'sentry/components/panels';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport Projects from 'sentry/utils/projects';\n\nimport FilterBar from '../../filterBar';\nimport {Incident} from '../../types';\nimport {getQueryStatus, getTeamParams} from '../../utils';\nimport AlertHeader from '../header';\nimport Onboarding from '../onboarding';\n\nimport AlertListRow from './row';\n\nconst DOCS_URL =\n  'https://docs.sentry.io/workflow/alerts-notifications/alerts/?_ga=2.21848383.580096147.1592364314-1444595810.1582160976';\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & {\n  organization: Organization;\n};\n\ntype State = {\n  incidentList: Incident[];\n  /**\n   * User has not yet seen the 'alert_stream' welcome prompt for this\n   * organization.\n   */\n  firstVisitShown?: boolean;\n  /**\n   * Is there at least one alert rule configured for the currently selected\n   * projects?\n   */\n  hasAlertRule?: boolean;\n};\n\nclass IncidentsList extends AsyncComponent<Props, State & AsyncComponent['state']> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {params, location} = this.props;\n    const {query} = location;\n    const status = getQueryStatus(query.status);\n\n    return [\n      [\n        'incidentList',\n        `/organizations/${params?.orgId}/incidents/`,\n        {\n          query: {\n            ...query,\n            status: status === 'all' ? undefined : status,\n            team: getTeamParams(query.team),\n            expand: ['original_alert_rule'],\n          },\n        },\n      ],\n    ];\n  }\n\n  /**\n   * If our incidentList is empty, determine if we've configured alert rules or\n   * if the user has seen the welcome prompt.\n   */\n  async onLoadAllEndpointsSuccess() {\n    const {incidentList} = this.state;\n\n    if (!incidentList || incidentList.length !== 0) {\n      this.setState({hasAlertRule: true, firstVisitShown: false});\n      return;\n    }\n\n    this.setState({loading: true});\n\n    // Check if they have rules or not, to know which empty state message to\n    // display\n    const {params, location, organization} = this.props;\n\n    const alertRules = await this.api.requestPromise(\n      `/organizations/${params?.orgId}/alert-rules/`,\n      {\n        method: 'GET',\n        query: location.query,\n      }\n    );\n    const hasAlertRule = alertRules.length > 0;\n\n    // We've already configured alert rules, no need to check if we should show\n    // the \"first time welcome\" prompt\n    if (hasAlertRule) {\n      this.setState({hasAlertRule, firstVisitShown: false, loading: false});\n      return;\n    }\n\n    // Check if they have already seen the prompt for the alert stream\n    const prompt = await promptsCheck(this.api, {\n      organizationId: organization.id,\n      feature: 'alert_stream',\n    });\n\n    const firstVisitShown = !prompt?.dismissedTime;\n\n    if (firstVisitShown) {\n      // Prompt has not been seen, mark the prompt as seen immediately so they\n      // don't see it again\n      promptsUpdate(this.api, {\n        feature: 'alert_stream',\n        organizationId: organization.id,\n        status: 'dismissed',\n      });\n    }\n\n    this.setState({hasAlertRule, firstVisitShown, loading: false});\n  }\n\n  get projectsFromIncidents() {\n    const {incidentList} = this.state;\n\n    return [...new Set(incidentList?.map(({projects}) => projects).flat())];\n  }\n\n  handleChangeSearch = (title: string) => {\n    const {router, location} = this.props;\n    const {cursor: _cursor, page: _page, ...currentQuery} = location.query;\n    router.push({\n      pathname: location.pathname,\n      query: {\n        ...currentQuery,\n        title,\n      },\n    });\n  };\n\n  handleChangeFilter = (activeFilters: string[]) => {\n    const {router, location} = this.props;\n    const {cursor: _cursor, page: _page, ...currentQuery} = location.query;\n\n    router.push({\n      pathname: location.pathname,\n      query: {\n        ...currentQuery,\n        // Preserve empty team query parameter\n        team: activeFilters.length > 0 ? activeFilters : '',\n      },\n    });\n  };\n\n  handleChangeStatus = (value: string): void => {\n    const {router, location} = this.props;\n    const {cursor: _cursor, page: _page, ...currentQuery} = location.query;\n\n    router.push({\n      pathname: location.pathname,\n      query: {\n        ...currentQuery,\n        status: value === 'all' ? undefined : value,\n      },\n    });\n  };\n\n  tryRenderOnboarding() {\n    const {firstVisitShown} = this.state;\n    const {organization} = this.props;\n\n    if (!firstVisitShown) {\n      return null;\n    }\n\n    const actions = (\n      <Fragment>\n        <Button size=\"sm\" external href={DOCS_URL}>\n          {t('View Features')}\n        </Button>\n        <CreateAlertButton\n          organization={organization}\n          iconProps={{size: 'xs'}}\n          size=\"sm\"\n          priority=\"primary\"\n          referrer=\"alert_stream\"\n        >\n          {t('Create Alert')}\n        </CreateAlertButton>\n      </Fragment>\n    );\n\n    return <Onboarding actions={actions} />;\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderList() {\n    const {loading, incidentList, incidentListPageLinks, hasAlertRule} = this.state;\n    const {\n      params: {orgId},\n      organization,\n    } = this.props;\n\n    const checkingForAlertRules =\n      incidentList?.length === 0 && hasAlertRule === undefined;\n    const showLoadingIndicator = loading || checkingForAlertRules;\n\n    return (\n      <Fragment>\n        {this.tryRenderOnboarding() ?? (\n          <StyledPanelTable\n            isLoading={showLoadingIndicator}\n            isEmpty={incidentList?.length === 0}\n            emptyMessage={t('No incidents exist for the current query.')}\n            emptyAction={\n              <EmptyStateAction>\n                {tct('Learn more about [link:Metric Alerts]', {\n                  link: <ExternalLink href={DOCS_URL} />,\n                })}\n              </EmptyStateAction>\n            }\n            headers={[\n              t('Alert Rule'),\n              t('Triggered'),\n              t('Duration'),\n              t('Project'),\n              t('Alert ID'),\n              t('Team'),\n            ]}\n          >\n            <Projects orgId={orgId} slugs={this.projectsFromIncidents}>\n              {({initiallyLoaded, projects}) =>\n                incidentList.map(incident => (\n                  <AlertListRow\n                    key={incident.id}\n                    projectsLoaded={initiallyLoaded}\n                    projects={projects as Project[]}\n                    incident={incident}\n                    organization={organization}\n                  />\n                ))\n              }\n            </Projects>\n          </StyledPanelTable>\n        )}\n        <Pagination pageLinks={incidentListPageLinks} />\n      </Fragment>\n    );\n  }\n\n  renderBody() {\n    const {params, router, location} = this.props;\n    const {orgId} = params;\n\n    return (\n      <SentryDocumentTitle title={t('Alerts')} orgSlug={orgId}>\n        <PageFiltersContainer>\n          <AlertHeader router={router} activeTab=\"stream\" />\n          <Layout.Body>\n            <Layout.Main fullWidth>\n              {!this.tryRenderOnboarding() && (\n                <Fragment>\n                  <StyledAlert showIcon>\n                    {t('This page only shows metric alerts.')}\n                  </StyledAlert>\n                  <FilterBar\n                    location={location}\n                    onChangeFilter={this.handleChangeFilter}\n                    onChangeSearch={this.handleChangeSearch}\n                    onChangeStatus={this.handleChangeStatus}\n                    hasStatusFilters\n                  />\n                </Fragment>\n              )}\n              {this.renderList()}\n            </Layout.Main>\n          </Layout.Body>\n        </PageFiltersContainer>\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nfunction IncidentsListContainer(props: Props) {\n  useEffect(() => {\n    trackAdvancedAnalyticsEvent('alert_stream.viewed', {\n      organization: props.organization,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const renderDisabled = () => (\n    <Layout.Body>\n      <Layout.Main fullWidth>\n        <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n      </Layout.Main>\n    </Layout.Body>\n  );\n\n  return (\n    <Feature\n      features={['incidents']}\n      hookName=\"feature-disabled:alerts-page\"\n      renderDisabled={renderDisabled}\n    >\n      <IncidentsList {...props} />\n    </Feature>\n  );\n}\n\nconst StyledPanelTable = styled(PanelTable)`\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst StyledAlert = styled(Alert)`\n  margin-bottom: ${space(1.5)};\n`;\n\nconst EmptyStateAction = styled('p')`\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n\nexport default IncidentsListContainer;\n"],"names":["OnboardingPanel","image","children","props","Container","IlloBox","StyledBox","centered","space","p","theme","breakpoints","small","medium","Onboarding","actions","AlertsImage","src","emptyStateImg","t","ButtonList","gap","large","xlarge","ButtonBar","AlertListRow","incident","projectsLoaded","projects","organization","slug","started","moment","dateStarted","duration","dateClosed","Date","diff","as","project","useMemo","find","alertLink","pathname","alertDetailsLink","query","alert","identifier","ownerId","alertRule","owner","split","teamName","TeamStore","name","teamActor","type","id","Title","to","title","NoWrapNumeric","getDynamicText","value","date","extraShort","fixed","status","IncidentStatus","seconds","ProjectBadge","avatarSize","FlexCenter","Fragment","StyledActorAvatar","actor","size","hasTooltip","TeamWrapper","overflowEllipsis","IdBadge","ActorAvatar","DOCS_URL","IncidentsList","AsyncComponent","router","location","this","cursor","_cursor","page","_page","currentQuery","push","activeFilters","team","length","undefined","getEndpoints","params","getQueryStatus","orgId","getTeamParams","expand","async","incidentList","state","setState","hasAlertRule","firstVisitShown","loading","api","requestPromise","method","promptsCheck","organizationId","feature","dismissedTime","promptsUpdate","projectsFromIncidents","Set","map","flat","tryRenderOnboarding","external","href","iconProps","priority","referrer","renderLoading","renderBody","renderList","incidentListPageLinks","showLoadingIndicator","StyledPanelTable","isLoading","isEmpty","emptyMessage","emptyAction","EmptyStateAction","tct","link","headers","slugs","initiallyLoaded","pageLinks","orgSlug","activeTab","fullWidth","StyledAlert","showIcon","onChangeFilter","handleChangeFilter","onChangeSearch","handleChangeSearch","onChangeStatus","handleChangeStatus","hasStatusFilters","IncidentsListContainer","useEffect","trackAdvancedAnalyticsEvent","features","hookName","renderDisabled","PanelTable","fontSizeMedium","Alert","fontSizeLarge"],"sourceRoot":""}