{"version":3,"file":"chunks/app_components_tag_tsx-app_components_truncate_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/tag.tsx","webpack:///./app/components/truncate.tsx"],"sourcesContent":["import {cloneElement, isValidElement} from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport Link, {LinkProps} from 'sentry/components/links/link';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconClose, IconOpen} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {defined} from 'sentry/utils';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport theme, {Color, Theme} from 'sentry/utils/theme';\n\nconst TAG_HEIGHT = '20px';\n\ninterface Props extends React.HTMLAttributes<HTMLSpanElement> {\n  /**\n   * Makes the tag clickable. Use for external links.\n   * If no icon is passed, it defaults to IconOpen (can be removed by passing icon={null})\n   */\n  href?: string;\n  /**\n   * Icon on the left side.\n   */\n  icon?: React.ReactNode;\n  /**\n   * Triggered when the item is clicked\n   */\n  onClick?: (eventKey: any) => void;\n  /**\n   * Shows clickable IconClose on the right side.\n   */\n  onDismiss?: () => void;\n  /**\n   * Max width of the tag's text\n   */\n  textMaxWidth?: number;\n  /**\n   * Makes the tag clickable. Use for internal links handled by react router.\n   * If no icon is passed, it defaults to IconOpen (can be removed by passing icon={null})\n   */\n  to?: LinkProps['to'];\n  /**\n   * Text to show up on a hover.\n   */\n  tooltipText?: React.ComponentProps<typeof Tooltip>['title'];\n  /**\n   * Dictates color scheme of the tag.\n   */\n  type?: keyof Theme['tag'];\n}\n\nfunction Tag({\n  type = 'default',\n  icon,\n  tooltipText,\n  to,\n  onClick,\n  href,\n  onDismiss,\n  children,\n  textMaxWidth = 150,\n  ...props\n}: Props) {\n  const iconsProps = {\n    size: '11px',\n    color: theme.tag[type].iconColor as Color,\n  };\n\n  const tag = (\n    <Tooltip title={tooltipText} containerDisplayMode=\"inline-flex\">\n      <Background type={type}>\n        {tagIcon()}\n\n        <Text type={type} maxWidth={textMaxWidth}>\n          {children}\n        </Text>\n\n        {defined(onDismiss) && (\n          <DismissButton\n            onClick={handleDismiss}\n            size=\"zero\"\n            priority=\"link\"\n            aria-label={t('Dismiss')}\n          >\n            <IconClose isCircled {...iconsProps} />\n          </DismissButton>\n        )}\n      </Background>\n    </Tooltip>\n  );\n\n  function handleDismiss(event: React.MouseEvent) {\n    event.preventDefault();\n    onDismiss?.();\n  }\n\n  const trackClickEvent = () => {\n    trackAdvancedAnalyticsEvent('tag.clicked', {\n      is_clickable: defined(onClick) || defined(to) || defined(href),\n      organization: null,\n    });\n  };\n\n  function tagIcon() {\n    if (isValidElement(icon)) {\n      return <IconWrapper>{cloneElement(icon, {...iconsProps})}</IconWrapper>;\n    }\n\n    if ((defined(href) || defined(to)) && icon === undefined) {\n      return (\n        <IconWrapper>\n          <IconOpen {...iconsProps} />\n        </IconWrapper>\n      );\n    }\n\n    return null;\n  }\n\n  function tagWithParent() {\n    if (defined(href)) {\n      return <ExternalLink href={href}>{tag}</ExternalLink>;\n    }\n\n    if (defined(to) && defined(onClick)) {\n      return (\n        <Link to={to} onClick={onClick}>\n          {tag}\n        </Link>\n      );\n    }\n    if (defined(to)) {\n      return <Link to={to}>{tag}</Link>;\n    }\n\n    return tag;\n  }\n\n  return (\n    <TagWrapper {...props} onClick={trackClickEvent}>\n      {tagWithParent()}\n    </TagWrapper>\n  );\n}\n\nconst TagWrapper = styled('span')`\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nexport const Background = styled('div')<{type: keyof Theme['tag']}>`\n  display: inline-flex;\n  align-items: center;\n  height: ${TAG_HEIGHT};\n  border-radius: ${TAG_HEIGHT};\n  background-color: ${p => p.theme.tag[p.type].background};\n  border: solid 1px ${p => p.theme.tag[p.type].border};\n  padding: 0 ${space(1)};\n`;\n\nconst IconWrapper = styled('span')`\n  margin-right: ${space(0.5)};\n  display: inline-flex;\n`;\n\nconst Text = styled('span')<{maxWidth: number; type: keyof Theme['tag']}>`\n  color: ${p =>\n    ['black', 'white'].includes(p.type)\n      ? p.theme.tag[p.type].iconColor\n      : p.theme.textColor};\n  max-width: ${p => p.maxWidth}px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  line-height: ${TAG_HEIGHT};\n`;\n\nconst DismissButton = styled(Button)`\n  margin-left: ${space(0.5)};\n  border: none;\n`;\n\nexport default Tag;\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\n\ntype DefaultProps = {\n  className: string;\n  expandDirection: 'left' | 'right';\n  expandable: boolean;\n  leftTrim: boolean;\n  maxLength: number;\n  minLength: number;\n};\n\ntype Props = DefaultProps & {\n  value: string;\n  trimRegex?: RegExp;\n};\n\ntype State = {\n  isExpanded: boolean;\n};\n\nclass Truncate extends Component<Props, State> {\n  static defaultProps: DefaultProps = {\n    className: '',\n    minLength: 15,\n    maxLength: 50,\n    leftTrim: false,\n    expandable: true,\n    expandDirection: 'right',\n  };\n\n  state: State = {\n    isExpanded: false,\n  };\n\n  onFocus = () => {\n    const {value, maxLength} = this.props;\n    if (value.length <= maxLength) {\n      return;\n    }\n    this.setState({isExpanded: true});\n  };\n\n  onBlur = () => {\n    if (this.state.isExpanded) {\n      this.setState({isExpanded: false});\n    }\n  };\n\n  render() {\n    const {\n      className,\n      leftTrim,\n      trimRegex,\n      minLength,\n      maxLength,\n      value,\n      expandable,\n      expandDirection,\n    } = this.props;\n    const isTruncated = value.length > maxLength;\n    let shortValue: React.ReactNode = '';\n\n    if (isTruncated) {\n      const slicedValue = leftTrim\n        ? value.slice(value.length - (maxLength - 4), value.length)\n        : value.slice(0, maxLength - 4);\n\n      // Try to trim to values from the regex\n      if (trimRegex && leftTrim) {\n        const valueIndex = slicedValue.search(trimRegex);\n        shortValue = (\n          <span>\n            â€¦{' '}\n            {valueIndex > 0 && valueIndex <= maxLength - minLength\n              ? slicedValue.slice(slicedValue.search(trimRegex), slicedValue.length)\n              : slicedValue}\n          </span>\n        );\n      } else if (trimRegex && !leftTrim) {\n        const matches = slicedValue.match(trimRegex);\n        let lastIndex = matches\n          ? slicedValue.lastIndexOf(matches[matches.length - 1]) + 1\n          : slicedValue.length;\n        if (lastIndex <= minLength) {\n          lastIndex = slicedValue.length;\n        }\n        shortValue = <span>{slicedValue.slice(0, lastIndex)} â€¦</span>;\n      } else if (leftTrim) {\n        shortValue = <span>â€¦ {slicedValue}</span>;\n      } else {\n        shortValue = <span>{slicedValue} â€¦</span>;\n      }\n    } else {\n      shortValue = value;\n    }\n\n    return (\n      <Wrapper\n        className={className}\n        onMouseOver={expandable ? this.onFocus : undefined}\n        onMouseOut={expandable ? this.onBlur : undefined}\n        onFocus={expandable ? this.onFocus : undefined}\n        onBlur={expandable ? this.onBlur : undefined}\n      >\n        <span>{shortValue}</span>\n        {isTruncated && (\n          <FullValue expanded={this.state.isExpanded} expandDirection={expandDirection}>\n            {value}\n          </FullValue>\n        )}\n      </Wrapper>\n    );\n  }\n}\n\nconst Wrapper = styled('span')`\n  position: relative;\n`;\n\nexport const FullValue = styled('span')<{\n  expandDirection: 'left' | 'right';\n  expanded: boolean;\n}>`\n  display: none;\n  position: absolute;\n  background: ${p => p.theme.background};\n  padding: ${space(0.5)};\n  border: 1px solid ${p => p.theme.innerBorder};\n  white-space: nowrap;\n  border-radius: ${space(0.5)};\n  top: -5px;\n  ${p => p.expandDirection === 'left' && 'right: -5px;'}\n  ${p => p.expandDirection === 'right' && 'left: -5px;'}\n\n  ${p =>\n    p.expanded &&\n    `\n    z-index: ${p.theme.zIndex.truncationFullValue};\n    display: block;\n    `}\n`;\n\nexport default Truncate;\n"],"names":["TAG_HEIGHT","Tag","type","icon","tooltipText","to","onClick","href","onDismiss","children","textMaxWidth","props","iconsProps","size","color","theme","iconColor","tag","title","containerDisplayMode","Background","isValidElement","IconWrapper","cloneElement","defined","undefined","Text","maxWidth","DismissButton","event","preventDefault","priority","t","isCircled","TagWrapper","trackAdvancedAnalyticsEvent","is_clickable","organization","p","fontSizeSmall","background","border","space","includes","textColor","Button","Truncate","Component","isExpanded","value","maxLength","this","length","setState","state","render","className","leftTrim","trimRegex","minLength","expandable","expandDirection","isTruncated","shortValue","slicedValue","slice","valueIndex","search","matches","match","lastIndex","lastIndexOf","Wrapper","onMouseOver","onFocus","onMouseOut","onBlur","FullValue","expanded","innerBorder","zIndex","truncationFullValue"],"sourceRoot":""}