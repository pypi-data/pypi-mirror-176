{"version":3,"file":"chunks/app_components_codeSnippet_tsx-app_utils_discover_charts_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/codeSnippet.tsx","webpack:///./app/utils/discover/charts.tsx"],"sourcesContent":["import 'prism-sentry/index.css';\n\nimport {Fragment, useEffect, useRef, useState} from 'react';\nimport styled from '@emotion/styled';\nimport Prism from 'prismjs';\n\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconCopy} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\ninterface CodeSnippetProps {\n  children: string;\n  language: string;\n  filename?: string;\n  hideActionBar?: boolean;\n}\n\nexport function CodeSnippet({\n  children,\n  language,\n  filename,\n  hideActionBar,\n}: CodeSnippetProps) {\n  const ref = useRef<HTMLModElement | null>(null);\n\n  useEffect(\n    () => void (ref.current && Prism.highlightElement(ref.current, false)),\n    [children]\n  );\n\n  const [tooltipState, setTooltipState] = useState<'copy' | 'copied' | 'error'>('copy');\n\n  const handleCopy = async () => {\n    try {\n      await navigator.clipboard.writeText(children);\n      setTooltipState('copied');\n    } catch (err) {\n      setTooltipState('error');\n    }\n  };\n\n  const tooltipTitle =\n    tooltipState === 'copy'\n      ? t('Copy')\n      : tooltipState === 'copied'\n      ? t('Copied')\n      : t('Unable to copy');\n\n  return (\n    <Fragment>\n      {!hideActionBar && (\n        <CodeContainerActionBar>\n          {filename && <span>{filename}</span>}\n          <Tooltip delay={0} isHoverable={false} title={tooltipTitle} position=\"bottom\">\n            <UnstyledButton\n              type=\"button\"\n              onClick={handleCopy}\n              onMouseLeave={() => setTooltipState('copy')}\n            >\n              <IconCopy />\n            </UnstyledButton>\n          </Tooltip>\n        </CodeContainerActionBar>\n      )}\n\n      <PreContainer unsetBorderRadiusTop={!hideActionBar}>\n        <code ref={ref} className={`language-${language}`}>\n          {children}\n        </code>\n      </PreContainer>\n    </Fragment>\n  );\n}\n\nconst PreContainer = styled('pre')<{unsetBorderRadiusTop?: boolean}>`\n  overflow-x: scroll;\n  ${p =>\n    p.unsetBorderRadiusTop\n      ? `\n  border-top-left-radius: 0px;\n  border-top-right-radius: 0px;\n  `\n      : null}\n\n  word-break: break-all;\n  white-space: pre-wrap;\n\n  code {\n    white-space: pre;\n  }\n`;\n\nconst UnstyledButton = styled('button')`\n  all: unset;\n  cursor: pointer;\n`;\n\n// code blocks are globally styled by `prism-sentry`\n// its design tokens are slightly different than the app\n// so we've left it in charge of colors while overriding\n// css that breaks the experience\nconst CodeContainerActionBar = styled(({children, ...props}) => (\n  <div {...props}>\n    <pre className=\"language-\">{children}</pre>\n  </div>\n))`\n  pre.language- {\n    display: flex;\n    justify-content: end;\n    gap: ${space(1)};\n    padding: ${space(1.5)};\n    margin-bottom: 0px;\n    border-bottom: 1px solid ${p => p.theme.purple200};\n    border-radius: ${p => p.theme.borderRadiusTop};\n    font-size: ${p => p.theme.fontSizeSmall};\n  }\n`;\n","import {LegendComponentOption} from 'echarts';\n\nimport {t} from 'sentry/locale';\nimport {Series} from 'sentry/types/echarts';\nimport {defined, formatBytesBase2} from 'sentry/utils';\nimport {AggregationOutputType} from 'sentry/utils/discover/fields';\nimport {\n  DAY,\n  formatAbbreviatedNumber,\n  formatPercentage,\n  getDuration,\n  HOUR,\n  MINUTE,\n  SECOND,\n  WEEK,\n} from 'sentry/utils/formatters';\n\n/**\n * Formatter for chart tooltips that handle a variety of discover and metrics result values.\n * If the result is metric values, the value can be of type number or null\n */\nexport function tooltipFormatter(\n  value: number | null,\n  outputType: AggregationOutputType = 'number'\n): string {\n  if (!defined(value)) {\n    return '\\u2014';\n  }\n  return tooltipFormatterUsingAggregateOutputType(value, outputType);\n}\n\n/**\n * Formatter for chart tooltips that takes the aggregate output type directly\n */\nexport function tooltipFormatterUsingAggregateOutputType(\n  value: number | null,\n  type: string\n): string {\n  if (!defined(value)) {\n    return '\\u2014';\n  }\n  switch (type) {\n    case 'integer':\n    case 'number':\n      return value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 2);\n    case 'duration':\n      return getDuration(value / 1000, 2, true);\n    case 'size':\n      return formatBytesBase2(value);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Formatter for chart axis labels that handle a variety of discover result values\n * This function is *very similar* to tooltipFormatter but outputs data with less precision.\n */\nexport function axisLabelFormatter(\n  value: number,\n  outputType: AggregationOutputType,\n  abbreviation: boolean = false,\n  durationUnit?: number\n): string {\n  return axisLabelFormatterUsingAggregateOutputType(\n    value,\n    outputType,\n    abbreviation,\n    durationUnit\n  );\n}\n\n/**\n * Formatter for chart axis labels that takes the aggregate output type directly\n */\nexport function axisLabelFormatterUsingAggregateOutputType(\n  value: number,\n  type: string,\n  abbreviation: boolean = false,\n  durationUnit?: number\n): string {\n  switch (type) {\n    case 'integer':\n    case 'number':\n      return abbreviation ? formatAbbreviatedNumber(value) : value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 0);\n    case 'duration':\n      return axisDuration(value, durationUnit);\n    case 'size':\n      return formatBytesBase2(value, 0);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Specialized duration formatting for axis labels.\n * In that context we are ok sacrificing accuracy for more\n * consistent sizing.\n *\n * @param value Number of milliseconds to format.\n */\nexport function axisDuration(value: number, durationUnit?: number): string {\n  durationUnit ??= categorizeDuration(value);\n  if (value === 0) {\n    return '0';\n  }\n  switch (durationUnit) {\n    case WEEK: {\n      const label = (value / WEEK).toFixed(0);\n      return t('%swk', label);\n    }\n    case DAY: {\n      const label = (value / DAY).toFixed(0);\n      return t('%sd', label);\n    }\n    case HOUR: {\n      const label = (value / HOUR).toFixed(0);\n      return t('%shr', label);\n    }\n    case MINUTE: {\n      const label = (value / MINUTE).toFixed(0);\n      return t('%smin', label);\n    }\n    case SECOND: {\n      const label = (value / SECOND).toFixed(0);\n      return t('%ss', label);\n    }\n    default:\n      const label = value.toFixed(0);\n      return t('%sms', label);\n  }\n}\n\n/**\n * Given an array of series and an eCharts legend object,\n * finds the range of y values (min and max) based on which series is selected in the legend\n * Assumes series[0] > series[1] > ...\n * @param series Array of eCharts series\n * @param legend eCharts legend object\n * @returns\n */\nexport function findRangeOfMultiSeries(series: Series[], legend?: LegendComponentOption) {\n  let range: {max: number; min: number} | undefined;\n  if (series[0]?.data) {\n    let minSeries = series[0];\n    let maxSeries;\n    series.forEach(({seriesName, data}, idx) => {\n      if (legend?.selected?.[seriesName] !== false && data.length) {\n        minSeries = series[idx];\n        maxSeries ??= series[idx];\n      }\n    });\n    if (maxSeries?.data) {\n      const max = Math.max(\n        ...maxSeries.data.map(({value}) => value).filter(value => !!value)\n      );\n      const min = Math.min(\n        ...minSeries.data.map(({value}) => value).filter(value => !!value)\n      );\n      range = {max, min};\n    }\n  }\n  return range;\n}\n\n/**\n * Given a eCharts series and legend, returns the unit to be used on the yAxis for a duration chart\n * @param series eCharts series array\n * @param legend eCharts legend object\n * @returns\n */\nexport function getDurationUnit(\n  series: Series[],\n  legend?: LegendComponentOption\n): number {\n  let durationUnit = 0;\n  const range = findRangeOfMultiSeries(series, legend);\n  if (range) {\n    const avg = (range.max + range.min) / 2;\n    durationUnit = categorizeDuration((range.max - range.min) / 5); // avg of 5 yAxis ticks per chart\n\n    const numOfDigits = (avg / durationUnit).toFixed(0).length;\n    if (numOfDigits > 6) {\n      durationUnit = categorizeDuration(avg);\n    }\n  }\n  return durationUnit;\n}\n\n/**\n * Categorizes the duration by Second, Minute, Hour, etc\n * Ex) categorizeDuration(1200) = MINUTE\n * @param value Duration in ms\n */\nexport function categorizeDuration(value): number {\n  if (value >= WEEK) {\n    return WEEK;\n  }\n  if (value >= DAY) {\n    return DAY;\n  }\n  if (value >= HOUR) {\n    return HOUR;\n  }\n  if (value >= MINUTE) {\n    return MINUTE;\n  }\n  if (value >= SECOND) {\n    return SECOND;\n  }\n  return 1;\n}\n"],"names":["CodeSnippet","children","language","filename","hideActionBar","ref","useRef","useEffect","current","Prism","tooltipState","setTooltipState","useState","tooltipTitle","t","Fragment","CodeContainerActionBar","delay","isHoverable","title","position","UnstyledButton","type","onClick","async","navigator","clipboard","writeText","err","onMouseLeave","PreContainer","unsetBorderRadiusTop","className","p","props","space","theme","purple200","borderRadiusTop","fontSizeSmall","tooltipFormatter","value","outputType","defined","tooltipFormatterUsingAggregateOutputType","toLocaleString","formatPercentage","getDuration","formatBytesBase2","toString","axisLabelFormatter","abbreviation","durationUnit","axisLabelFormatterUsingAggregateOutputType","formatAbbreviatedNumber","axisDuration","categorizeDuration","WEEK","label","toFixed","DAY","HOUR","MINUTE","SECOND","getDurationUnit","series","legend","range","data","maxSeries","minSeries","forEach","idx","seriesName","selected","length","max","Math","map","filter","min","findRangeOfMultiSeries","avg"],"sourceRoot":""}