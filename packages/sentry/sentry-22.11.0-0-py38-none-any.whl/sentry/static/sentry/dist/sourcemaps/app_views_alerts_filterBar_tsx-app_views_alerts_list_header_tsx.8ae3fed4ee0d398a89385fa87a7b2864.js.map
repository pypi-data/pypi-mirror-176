{"version":3,"file":"chunks/app_views_alerts_filterBar_tsx-app_views_alerts_list_header_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"suBAoDA,SAASA,EAA0B,GASA,IATA,SACjCC,EAAQ,UACRC,EAAS,aACTC,EAAY,SACZC,EAAQ,QACRC,EAAO,UACPC,EAAS,qBACTC,KACGC,GAC4B,EAC/B,MAAMC,EAAUR,EAASS,MAAKC,GAAKA,EAAEC,KAAQ,GAAEV,EAAUO,QAAQ,OAC3DI,EAAcX,EAAUY,4BAC1BD,EAAYE,OAAOC,SAAU,WAAUP,GAASQ,UAClDJ,EAAYE,MAASF,EAAYE,MAAiBG,QAC/C,WAAUT,GAASQ,OACpB,KAIJ,MAAME,EAAgBb,EAClBc,EAAAA,GAAyBd,GACzBe,EAAAA,GAEEC,EAAK,CACTC,SAAW,kBAAiBpB,EAAac,0BACzCF,MAAO,IACFF,EACHW,oBAAoB,EACpBjB,uBACAH,cACGe,EACHV,QAASA,GAASQ,KAClBQ,UAAWZ,EAAYa,OAASP,EAAcM,YAQlD,OACE,QAACE,EAAiB,CAChBxB,aAAcA,EACdE,QAPgB,KAClBA,KAAW,EAOTiB,GAAIA,EACJ,cAAYM,EAAAA,EAAAA,GAAE,mBACVpB,GAGV,CAjDSR,EAAyB,wCAoElC,MAAM2B,GAAoBE,EAAAA,EAAAA,aACxB,IAW8B,IAX7B,aACC1B,EAAY,YACZ2B,EAAW,UACXC,EAAS,SACT3B,EAAQ,OACR4B,EAAM,SACNC,EAAQ,oBACRC,EAAmB,YACnBC,EAAW,QACXC,KACG5B,GACoB,EACvB,MAAM6B,GAAMC,EAAAA,EAAAA,KACNC,EAAkBC,IACtB,MAAMC,EAAS,IAAIC,gBAUnB,OATItC,GACFqC,EAAOE,OAAO,WAAYvC,GAEP,eAAjBoC,GACFC,EAAOE,OAAO,UAAWH,GAEvBL,GACFM,EAAOE,OAAO,eAAgBR,GAExB,kBAAiBhC,EAAac,uBAAuBwB,EAAOG,YAAY,EAGlF,SAASC,EAA0BC,GACjCA,EAAMC,iBACNX,OAEAY,EAAAA,EAAAA,GAAWT,EAAe,cAAeP,EAC3C,CAEAiB,eAAeC,IACb,MAAMC,EAAoB,kBAAiBhD,EAAac,SACxDmC,EAAAA,EAAAA,MACA,UACQf,EAAIgB,eAAeF,EAAkB,CACzCG,OAAQ,MACRC,KAAM,CACJC,mBAAmB,MAGvBC,EAAAA,EAAAA,KAAkB7B,EAAAA,EAAAA,GAAE,8CAGtB,CAFE,MAAO8B,IACPC,EAAAA,EAAAA,KAAgB/B,EAAAA,EAAAA,GAAE,0CACpB,CACF,CAEA,MAAMgC,GAAwBC,EAAAA,EAAAA,IAC5B,yFACA,CAACC,cAAc,QAAC,IAAI,CAACxC,GAAK,aAAYnB,EAAac,WAG/C8C,EAAgBC,IACpB,QAAC,KAAM,CACLC,UAAWD,EACXE,MAAQF,OAAoCG,EAAxBP,EACpBQ,MAAOnC,IAAY,QAAC,KAAS,IAAKF,IAClCT,GAAIQ,EAAcS,EAAeT,QAAeqC,EAChDE,aAAc,CACZC,aAAa,EACbC,SAAU,MACVC,aAAc,CACZC,SAAU,UAGdpE,QAASyB,EAAcM,EAAUS,KAC7BrC,EAAW,SAEdA,EAAYkE,WAAY9C,EAAAA,EAAAA,GAAE,kBAIzB+C,GAAaxE,EAAaqD,qBAAuBtB,EAEvD,OACE,QAAC,IAAM,CAAC/B,aAAcA,EAAcyE,OAAQ,CAAC,gBAAgB,SAC1D,QAAC,UAACZ,GAAU,SACXW,GACE,QAAC,IAAM,CAACxE,aAAcA,EAAcyE,OAAQ,CAAC,aAAa,SACvD,QAAEZ,UAAWa,GAAW,SACvB,QAAC,IAAW,CACVC,OAAQD,EAAa,qBAAuB,sBAC5CE,SAAUF,EAAa3B,OAA0BiB,EAAU,SAE1DJ,EAAaC,IACF,IAIlBD,EAAaC,EACd,GAEI,IAMf,G,gjBCzMA,SAASgB,EAAU,GAMT,IANS,SACjBC,EAAQ,eACRC,EAAc,eACdC,EAAc,eACdC,EAAc,iBACdC,GACM,EACN,MAAMC,GAAgBC,EAAAA,EAAAA,IAAcN,EAASlE,MAAMyE,MAC7CC,GAAiBC,EAAAA,EAAAA,IAAeT,EAASlE,MAAM4E,QAErD,OACE,QAACC,EAAO,YACN,QAACC,EAAa,CAACC,IAAK,IAAI,WACtB,QAAC,IAAU,CAACR,cAAeA,EAAeS,mBAAoBZ,KAC9D,QAAC,IAAiB,IACjBE,GAAoBD,IACnB,QAAC,IAAa,CACZY,aAAc,CACZC,QAAQrE,EAAAA,EAAAA,GAAE,WAEZsE,QAAS,CACP,CACEC,MAAO,MACPC,OAAOxE,EAAAA,EAAAA,GAAE,QAEX,CACEuE,MAAO,OACPC,OAAOxE,EAAAA,EAAAA,GAAE,WAEX,CACEuE,MAAO,SACPC,OAAOxE,EAAAA,EAAAA,GAAE,cAGbuE,MAAOV,EACPY,SAAU,QAAC,MAACF,GAAM,SAAKf,EAAee,EAAM,QAIlD,QAAC,IAAS,CACRG,aAAa1E,EAAAA,EAAAA,GAAE,kBACfb,MAAOkE,EAASlE,OAAOwF,KACvBC,SAAUtB,MAIlB,CA9CSF,EAAS,wBAgDlB,UAEMY,GAAU,OAAO,MAAK,oBAAZ,CAAa,qBAEpBa,EAAAA,EAAAA,GAAM,KAAI,mBACAA,EAAAA,EAAAA,GAAM,GAAE,wBAEJ9F,GAAKA,EAAE+F,MAAMC,YAAYC,OAAK,6CAK/Cf,GAAgB,OAAOgB,EAAAA,GAAS,oBAAhB,CAAiB,uBAChBlG,GAAKA,EAAE+F,MAAMC,YAAYC,OAAK,8CAG1CH,EAAAA,EAAAA,GAAM,KAAI,yBAGE9F,GAAKA,EAAE+F,MAAMC,YAAYC,OAAK,yD,6rBCnErD,MAAME,EAAc,IAAgC,IAA/B,OAAC9E,EAAM,UAAE+E,GAAiB,EAC7C,MAAM5G,GAAe6G,EAAAA,EAAAA,MACf,UAACC,IAAaC,EAAAA,EAAAA,KAUdC,GACJ,cAAIC,UAAyB,UAAdL,EAAwB,SAAW,GAAG,UACnD,QAAC,IAAmB,CAACzF,GAAK,kBAAiBnB,EAAac,qBAAqB,UAC1EW,EAAAA,EAAAA,GAAE,mBAKT,OACE,QAAC,KAAa,YACZ,QAAC,KAAoB,WACnB,QAACyF,EAAiB,WAAEzF,EAAAA,EAAAA,GAAE,eAExB,QAAC,KAAoB,WACnB,QAAC0F,EAAO,CAACxB,IAAK,EAAE,WACd,QAAC,IAAiB,CAChB3F,aAAcA,EACd4B,UAAW,CAACwF,KAAM,MAClBA,KAAK,KACLC,SAAS,UACTpH,SAAS,eACT8B,qBAAmB,EACnBJ,YACgC,IAA9BmF,EAAUhH,SAASwH,OACfC,EAAAA,EAAAA,QAAuB,GAAET,EAAUhH,SAAS,OAAOgB,UACnDkD,EACL,UAEAvC,EAAAA,EAAAA,GAAE,mBAEL,QAAC,KAAM,CACL2F,KAAK,KACLlH,QArCwBsH,IAChCA,EAAE5E,kBACFC,EAAAA,EAAAA,GAAY,aAAY7C,EAAac,mCAAoCe,EAAO,EAoCxE4F,KAAK,IACLxD,MAAM,QAAC,KAAY,CAACmD,KAAK,OACzB,cAAY3F,EAAAA,EAAAA,GAAE,oBAIpB,QAAC,KAAoB,CAACiG,YAAU,YAC7BV,GACD,cAAIC,UAAyB,WAAdL,EAAyB,SAAW,GAAG,UACpD,QAAC,IAAmB,CAACzF,GAAK,kBAAiBnB,EAAac,eAAe,UACpEW,EAAAA,EAAAA,GAAE,oBAIK,EA3DdkF,EAAW,0BA+DjB,UAEMO,GAAoB,OAAOS,EAAAA,GAAY,oBAAnB,CAAoB,eAC9BrB,EAAAA,EAAAA,GAAM,IAAI,KAGpBa,GAAU,OAAOT,EAAAA,GAAS,oBAAhB,CAAiB,qC,kNCpF1B,IAAKkB,EAKAC,EAMAC,EAMAC,EAUAC,EAQAC,EAYAC,EAgEAC,EAUAC,EAYAC,GAlIX,SAHWT,GAAAA,EAAAA,EAAsB,iBAAtBA,EAAAA,EAAsB,iBAGjC,CAHWA,IAAAA,EAAsB,KASjC,SAJWC,GAAAA,EAAoB,oBAApBA,EAAoB,kBAApBA,EAAoB,kBAI/B,CAJWA,IAAAA,EAAoB,KAU/B,SAJWC,GAAAA,EAAuB,cAAvBA,EAAuB,gBAAvBA,EAAuB,kBAIlC,CAJWA,IAAAA,EAAuB,KAclC,SARWC,GAAAA,EAAO,gBAAPA,EAAO,4BAAPA,EAAO,kCAAPA,EAAO,oBAAPA,EAAO,kBAQlB,CARWA,IAAAA,EAAO,KAgBlB,SANWC,GAAAA,EAAU,kBAAVA,EAAU,cAAVA,EAAU,0BAAVA,EAAU,YAAVA,EAAU,kBAMrB,CANWA,IAAAA,EAAU,KAetB,SAPYC,GAAAA,EAAU,8BAAVA,EAAU,kBAAVA,EAAU,cAAVA,EAAU,0BAOtB,CAPYA,IAAAA,EAAU,KAerB,SAHWC,GAAAA,EAAiB,4FAAjBA,EAAiB,mFAG5B,CAHWA,IAAAA,EAAiB,KAwE5B,SARWC,GAAAA,EAAU,eAAVA,EAAU,aAAVA,EAAU,gBAAVA,EAAU,oBAAVA,EAAU,oBAAVA,EAAU,kBAQrB,CARWA,IAAAA,EAAU,KAoBrB,SAVWC,GAAAA,EAAAA,EAAU,2BAAVA,EAAAA,EAAU,+BAAVA,EAAAA,EAAU,8BAAVA,EAAAA,EAAU,sCAAVA,EAAAA,EAAU,oCAAVA,EAAAA,EAAU,wBAAVA,EAAAA,EAAU,2BAAVA,EAAAA,EAAU,6BAAVA,EAAAA,EAAU,wBAUrB,CAVWA,IAAAA,EAAU,KAkBrB,SANWC,GAAAA,EAAU,cAAVA,EAAU,cAAVA,EAAU,sBAAVA,EAAU,kBAAVA,EAAU,wBAMrB,CANWA,IAAAA,EAAU,KAQf,MAAMC,EAAc,CAGzB,CAACD,EAAWE,QAAQ9G,EAAAA,EAAAA,GAAE,UACtB,CAAC4G,EAAWG,QAAQ/G,EAAAA,EAAAA,GAAE,SACtB,CAAC4G,EAAWI,YAAYhH,EAAAA,EAAAA,GAAE,aAC1B,CAAC4G,EAAWK,UAAUjH,EAAAA,EAAAA,GAAE,YACxB,CAAC4G,EAAWM,aAAalH,EAAAA,EAAAA,GAAE,iBAGtB,IAAKmH,GAYX,SAZWA,GAAAA,EAAU,oBAAVA,EAAU,YAAVA,EAAU,YAAVA,EAAU,wBAYrB,CAZWA,IAAAA,EAAU,KAcf,MAAMC,EAAc,CACzB,CAACD,EAAWE,OAAOrH,EAAAA,EAAAA,GAAE,UACrB,CAACmH,EAAWG,OAAOtH,EAAAA,EAAAA,GAAE,Q,2CCvKhB,IAAKuH,EAmDAC,EAQAC,EAOAC,EAMAC,EAMAC,E,sDA3EX,SAHWL,GAAAA,EAAa,gBAAbA,EAAa,cAGxB,CAHWA,IAAAA,EAAa,KAyDxB,SANWC,GAAAA,EAAAA,EAAoB,qBAApBA,EAAAA,EAAoB,uBAApBA,EAAAA,EAAoB,iCAApBA,EAAAA,EAAoB,qBAApBA,EAAAA,EAAoB,qBAM/B,CANWA,IAAAA,EAAoB,KAa/B,SALWC,GAAAA,EAAAA,EAAc,mBAAdA,EAAAA,EAAc,mBAAdA,EAAAA,EAAc,sBAAdA,EAAAA,EAAc,wBAKzB,CALWA,IAAAA,EAAc,KAWzB,SAJWC,GAAAA,EAAAA,EAAoB,mBAApBA,EAAAA,EAAoB,+BAApBA,EAAAA,EAAoB,mCAI/B,CAJWA,IAAAA,EAAoB,KAU/B,SAJWC,GAAAA,EAAAA,EAAe,qBAAfA,EAAAA,EAAe,uBAAfA,EAAAA,EAAe,uBAI1B,CAJWA,IAAAA,EAAe,KAS1B,SAHWC,GAAAA,EAAiB,oBAAjBA,EAAiB,aAG5B,CAHWA,IAAAA,EAAiB,I,kjBCpDtB,SAASC,EACdlG,GAEA,OAAQA,EAAKmG,eAAe,WAC9B,CAEO,MAAMC,EAAqB,CAChC,CAACzB,EAAAA,GAAAA,SAAiBtG,EAAAA,EAAAA,GAAE,UACpB,CAACsG,EAAAA,GAAAA,eAAuBtG,EAAAA,EAAAA,GAAE,gBAC1B,CAACwG,EAAAA,GAAAA,eAA2B,yCAC5B,CAACA,EAAAA,GAAAA,OAAmB,mBACpB,CAACA,EAAAA,GAAAA,SAAqB,qBACtB,CAACA,EAAAA,GAAAA,aAAyB,0BAIfwB,EAAqC,CAChD,CAACxB,EAAAA,GAAAA,eAA2B,CAC1ByB,QAAS3B,EAAAA,GAAAA,OACT4B,WAAY,CAAC3B,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,UAEjC,CAACC,EAAAA,GAAAA,OAAmB,CAClByB,QAAS3B,EAAAA,GAAAA,OACT4B,WAAY,CAAC3B,EAAAA,GAAAA,QAEf,CAACC,EAAAA,GAAAA,SAAqB,CACpByB,QAAS3B,EAAAA,GAAAA,OACT4B,WAAY,CAAC3B,EAAAA,GAAAA,UAEf,CAACC,EAAAA,GAAAA,aAAyB,CACxByB,QAAS3B,EAAAA,GAAAA,aACT4B,WAAY,CAAC3B,EAAAA,GAAAA,eAKV,SAAS4B,EACdF,EACAC,GAGA,OAAID,IAAY3B,EAAAA,GAAAA,cAAwB2B,IAAY3B,EAAAA,GAAAA,gBAC3CE,EAAAA,GAAAA,YAGJ0B,EAIDA,EAAW9I,SAASmH,EAAAA,GAAAA,UAAuB2B,EAAW9I,SAASmH,EAAAA,GAAAA,OAC1DC,EAAAA,GAAAA,cAEL0B,EAAW9I,SAASmH,EAAAA,GAAAA,SACfC,EAAAA,GAAAA,QAEFA,EAAAA,GAAAA,MATEA,EAAAA,GAAAA,KAUX,CAQO,SAAS4B,EACdjJ,GAEA,IAAIkJ,EAAQlJ,EAAMkJ,MAChB,uGAEF,OAAIA,EAGiB,kBADAA,EAAMC,MAAM,EAAG,GAAGC,OAAOC,KAAK,KAExC,KAGF,CAACC,OAAQjC,EAAAA,GAAAA,cAA0BrH,MAAOA,EAAMG,QAAQ+I,EAAM,GAAI,IAAIK,SAG/EL,EAAQlJ,EAAMkJ,MAAM,kDAChBA,GAAS7B,EAAAA,GAAW6B,EAAM,GAAGM,eACxB,CACLF,OAAQjC,EAAAA,GAAW6B,EAAM,GAAGM,eAC5BxJ,MAAOA,EAAMG,QAAQ+I,EAAM,GAAI,IAAIK,QAIhC,KACT,CAEO,SAASE,EAAmB/I,GACjC,OAAOgJ,OAAOC,OAAOrC,EAAAA,IAAmBrH,SAASS,EACnD,CAEO,MAAMkJ,EAA6B,CACxC,CAACtC,EAAAA,GAAAA,qBAAwCuC,EAAAA,GAAAA,SACzC,CAACvC,EAAAA,GAAAA,kBAAqCuC,EAAAA,GAAAA,OAGjC,SAASC,EAAmB1E,EAAe2E,EAAoBrJ,GACpE,OAAI+I,EAAmB/I,IACdsJ,EAAAA,EAAAA,IAAQ5E,GAAU,GAAE6E,IAAM7E,EAAO,MAAQ,KAG3C8E,EAAAA,EAAAA,IAAmB9E,GAAO+E,EAAAA,EAAAA,IAAoBJ,GACvD,CAEO,SAASK,EACdhF,EACA2E,EACArJ,GAEA,OAAI+I,EAAmB/I,IACdsJ,EAAAA,EAAAA,IAAQ5E,GAAU,GAAEA,KAAW,KAGjCiF,EAAAA,EAAAA,IAAiBjF,GAAO+E,EAAAA,EAAAA,IAAoBJ,GACrD,CAEO,MAAMO,EAA6B,KAEnC,SAASC,EAAsB7J,GAGpC,OAAO+I,EAAmB/I,EAC5B,CAEO,SAAS8J,EAAiBpL,EAA4BqL,GAC3D,MAAQ,kBAAiBrL,EAAac,6BACpCuK,EAASC,UAAU9F,SAAW4D,EAAAA,GAAAA,UAC9BiC,EAASC,UAAUC,oBACfF,EAASC,UAAUC,oBACnBF,EAASC,UAAU7K,KAE3B,CAKO,SAAS8E,EAAeC,GAC7B,OAAIgG,MAAMC,QAAQjG,IAAsB,KAAXA,EACpB,MAGF,CAAC,OAAQ,UAAU3E,SAAS2E,GAAUA,EAAS,KACxD,CAEA,MAAMkG,EAAiC,CAAC,UAAW,cAK5C,SAAStG,EAAcC,GAC5B,YAAarB,IAATqB,EACKqG,EAGI,KAATrG,EACK,GAGLmG,MAAMC,QAAQpG,GACTA,EAGF,CAACA,EACV,C,2QChLO,IAAKsG,EAMAC,GAFX,SAJWD,GAAAA,EAAAA,EAAkB,iBAAlBA,EAAAA,EAAkB,6BAAlBA,EAAAA,EAAkB,2BAI7B,CAJWA,IAAAA,EAAkB,KAU7B,SAJWC,GAAAA,EAAgB,oBAAhBA,EAAgB,kBAAhBA,EAAgB,mCAI3B,CAJWA,IAAAA,EAAgB,KAQrB,MAAMC,EAAiE,CAC5E,CAAC9D,EAAAA,GAAAA,QAAiB4D,EAAmBG,MACrC,CAAC/D,EAAAA,GAAAA,cAAuB4D,EAAmBI,YAC3C,CAAChE,EAAAA,GAAAA,iBAA0B4D,EAAmBI,YAC9C,CAAChE,EAAAA,GAAAA,SAAkB4D,EAAmBK,WACtC,CAACjE,EAAAA,GAAAA,UAAmB4D,EAAmBK,YAG5BC,EAAmD,CAC9DC,QAAQzK,EAAAA,EAAAA,GAAE,UACV0K,YAAY1K,EAAAA,EAAAA,GAAE,oBACd2K,2BAA2B3K,EAAAA,EAAAA,GAAE,6BAC7B4K,YAAY5K,EAAAA,EAAAA,GAAE,cACd6K,gBAAgB7K,EAAAA,EAAAA,GAAE,wBAClB8K,OAAO9K,EAAAA,EAAAA,GAAE,SACT+K,cAAc/K,EAAAA,EAAAA,GAAE,gBAChBgL,KAAKhL,EAAAA,EAAAA,GAAE,4BACPiL,KAAKjL,EAAAA,EAAAA,GAAE,qBACPkL,KAAKlL,EAAAA,EAAAA,GAAE,2BACPmL,QAAQnL,EAAAA,EAAAA,GAAE,iBACVoL,qBAAqBpL,EAAAA,EAAAA,GAAE,2BACvBqL,kBAAkBrL,EAAAA,EAAAA,GAAE,yBAOTsL,EAA4BC,GAA6C,CACpF,CACEC,iBAAiBxL,EAAAA,EAAAA,GAAE,UACnBsE,QAAS,CAAC,SAAU,aAAc,iCAEhCiH,EAAIE,SAASrM,SAAS,qBACtB,CACE,CACEoM,iBAAiBxL,EAAAA,EAAAA,GAAE,YACnBsE,QAAS,CAAC,sBAAuB,sBAGrC,GACJ,CACEkH,iBAAiBxL,EAAAA,EAAAA,GAAE,eACnBsE,QAAS,CACP,aACA,iBACA,QACA,eACA,MACA,MACA,QAGJ,CACEkH,iBAAiBxL,EAAAA,EAAAA,GAAE,SACnBsE,QAAS,CAAC,YAUD9E,EAGT,CACFkL,WAAY,CACV7K,UAAW,UACXoI,QAAS3B,EAAAA,GAAAA,OACT4B,WAAY3B,EAAAA,GAAAA,OAEdoE,0BAA2B,CACzB9K,UAAW,qBACXoI,QAAS3B,EAAAA,GAAAA,OACT4B,WAAY3B,EAAAA,GAAAA,OAEdqE,WAAY,CACV/K,UAAW,UACXoI,QAAS3B,EAAAA,GAAAA,aACT4B,WAAY3B,EAAAA,GAAAA,aAEdsE,eAAgB,CACdhL,UAAW,4BACXoI,QAAS3B,EAAAA,GAAAA,aACT4B,WAAY3B,EAAAA,GAAAA,aAEduE,MAAO,CACLjL,UAAW,aACXoI,QAAS3B,EAAAA,GAAAA,aACT4B,WAAY3B,EAAAA,GAAAA,aAEdwE,aAAc,CACZlL,UAAW,iBACXoI,QAAS3B,EAAAA,GAAAA,aACT4B,WAAY3B,EAAAA,GAAAA,aAEdyE,IAAK,CACHnL,UAAW,wBACXoI,QAAS3B,EAAAA,GAAAA,aACT4B,WAAY3B,EAAAA,GAAAA,aAEd0E,IAAK,CACHpL,UAAW,wBACXoI,QAAS3B,EAAAA,GAAAA,aACT4B,WAAY3B,EAAAA,GAAAA,aAEd2E,IAAK,CACHrL,UAAW,wBACXoI,QAAS3B,EAAAA,GAAAA,aACT4B,WAAY3B,EAAAA,GAAAA,aAEd4E,OAAQ,CACNtL,UAAW,uBACXoI,QAAS3B,EAAAA,GAAAA,aACT4B,WAAY3B,EAAAA,GAAAA,aAEd6E,oBAAqB,CACnBvL,UAAW4G,EAAAA,GAAAA,oBAEXwB,QAAS3B,EAAAA,GAAAA,SACT4B,WAAY3B,EAAAA,GAAAA,SAEd8E,iBAAkB,CAChBxL,UAAW4G,EAAAA,GAAAA,iBAEXwB,QAAS3B,EAAAA,GAAAA,SACT4B,WAAY3B,EAAAA,GAAAA,OAIH9G,EAA0BD,EAAyBkL,WAEnDgB,EAAyB,IAAIC,IAAe,CACvD,aACA,4BACA,aACA,QACA,eACA,sBACA,qBAGWC,EAA2B,IAAID,IAAe,CACzD,iBACA,MACA,MACA,QAGK,SAASE,EACd5D,EACA6D,GAGA,OAAI7D,IAAY3B,EAAAA,GAAAA,OACP6D,EAAiB4B,SAGtBD,EACK3B,EAAiB6B,iBAGtB/D,IAAY3B,EAAAA,GAAAA,gBACP6D,EAAiB8B,QAGnB9B,EAAiB4B,QAC1B,C","sources":["webpack:///./app/components/createAlertButton.tsx","webpack:///./app/views/alerts/filterBar.tsx","webpack:///./app/views/alerts/list/header.tsx","webpack:///./app/views/alerts/rules/metric/types.tsx","webpack:///./app/views/alerts/types.tsx","webpack:///./app/views/alerts/utils/index.tsx","webpack:///./app/views/alerts/wizard/options.tsx"],"sourcesContent":["// eslint-disable-next-line no-restricted-imports\nimport {withRouter, WithRouterProps} from 'react-router';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {navigateTo} from 'sentry/actionCreators/navigation';\nimport Access from 'sentry/components/acl/access';\nimport GuideAnchor from 'sentry/components/assistant/guideAnchor';\nimport Button, {ButtonProps} from 'sentry/components/button';\nimport Link from 'sentry/components/links/link';\nimport {IconSiren} from 'sentry/icons';\nimport type {SVGIconProps} from 'sentry/icons/svgIcon';\nimport {t, tct} from 'sentry/locale';\nimport type {Organization, Project} from 'sentry/types';\nimport type EventView from 'sentry/utils/discover/eventView';\nimport useApi from 'sentry/utils/useApi';\nimport {\n  AlertType,\n  AlertWizardAlertNames,\n  AlertWizardRuleTemplates,\n  DEFAULT_WIZARD_TEMPLATE,\n} from 'sentry/views/alerts/wizard/options';\n\nexport type CreateAlertFromViewButtonProps = ButtonProps & {\n  /**\n   * Discover query used to create the alert\n   */\n  eventView: EventView;\n  organization: Organization;\n  projects: Project[];\n  alertType?: AlertType;\n  className?: string;\n  /**\n   * Passed in value to override any metrics decision and switch back to transactions dataset.\n   * We currently do a few checks on metrics data on performance pages and this passes the decision onward to alerts.\n   */\n  disableMetricDataset?: boolean;\n  /**\n   * Called when the user is redirected to the alert builder\n   */\n  onClick?: () => void;\n\n  referrer?: string;\n};\n\n/**\n * Provide a button that can create an alert from an event view.\n * Emits incompatible query issues on click\n */\nfunction CreateAlertFromViewButton({\n  projects,\n  eventView,\n  organization,\n  referrer,\n  onClick,\n  alertType,\n  disableMetricDataset,\n  ...buttonProps\n}: CreateAlertFromViewButtonProps) {\n  const project = projects.find(p => p.id === `${eventView.project[0]}`);\n  const queryParams = eventView.generateQueryStringObject();\n  if (queryParams.query?.includes(`project:${project?.slug}`)) {\n    queryParams.query = (queryParams.query as string).replace(\n      `project:${project?.slug}`,\n      ''\n    );\n  }\n\n  const alertTemplate = alertType\n    ? AlertWizardRuleTemplates[alertType]\n    : DEFAULT_WIZARD_TEMPLATE;\n\n  const to = {\n    pathname: `/organizations/${organization.slug}/alerts/new/metric/`,\n    query: {\n      ...queryParams,\n      createFromDiscover: true,\n      disableMetricDataset,\n      referrer,\n      ...alertTemplate,\n      project: project?.slug,\n      aggregate: queryParams.yAxis ?? alertTemplate.aggregate,\n    },\n  };\n\n  const handleClick = () => {\n    onClick?.();\n  };\n\n  return (\n    <CreateAlertButton\n      organization={organization}\n      onClick={handleClick}\n      to={to}\n      aria-label={t('Create Alert')}\n      {...buttonProps}\n    />\n  );\n}\n\ntype CreateAlertButtonProps = {\n  organization: Organization;\n  alertOption?: keyof typeof AlertWizardAlertNames;\n  hideIcon?: boolean;\n  iconProps?: SVGIconProps;\n  /**\n   * Callback when the button is clicked.\n   * This is different from `onClick` which always overrides the default\n   * behavior when the button was clicked.\n   */\n  onEnter?: () => void;\n  projectSlug?: string;\n  referrer?: string;\n  showPermissionGuide?: boolean;\n} & WithRouterProps &\n  ButtonProps;\n\nconst CreateAlertButton = withRouter(\n  ({\n    organization,\n    projectSlug,\n    iconProps,\n    referrer,\n    router,\n    hideIcon,\n    showPermissionGuide,\n    alertOption,\n    onEnter,\n    ...buttonProps\n  }: CreateAlertButtonProps) => {\n    const api = useApi();\n    const createAlertUrl = (providedProj: string): string => {\n      const params = new URLSearchParams();\n      if (referrer) {\n        params.append('referrer', referrer);\n      }\n      if (providedProj !== ':projectId') {\n        params.append('project', providedProj);\n      }\n      if (alertOption) {\n        params.append('alert_option', alertOption);\n      }\n      return `/organizations/${organization.slug}/alerts/wizard/?${params.toString()}`;\n    };\n\n    function handleClickWithoutProject(event: React.MouseEvent) {\n      event.preventDefault();\n      onEnter?.();\n\n      navigateTo(createAlertUrl(':projectId'), router);\n    }\n\n    async function enableAlertsMemberWrite() {\n      const settingsEndpoint = `/organizations/${organization.slug}/`;\n      addLoadingMessage();\n      try {\n        await api.requestPromise(settingsEndpoint, {\n          method: 'PUT',\n          data: {\n            alertsMemberWrite: true,\n          },\n        });\n        addSuccessMessage(t('Successfully updated organization settings'));\n      } catch (err) {\n        addErrorMessage(t('Unable to update organization settings'));\n      }\n    }\n\n    const permissionTooltipText = tct(\n      'Ask your organization owner or manager to [settingsLink:enable alerts access] for you.',\n      {settingsLink: <Link to={`/settings/${organization.slug}`} />}\n    );\n\n    const renderButton = (hasAccess: boolean) => (\n      <Button\n        disabled={!hasAccess}\n        title={!hasAccess ? permissionTooltipText : undefined}\n        icon={!hideIcon && <IconSiren {...iconProps} />}\n        to={projectSlug ? createAlertUrl(projectSlug) : undefined}\n        tooltipProps={{\n          isHoverable: true,\n          position: 'top',\n          overlayStyle: {\n            maxWidth: '270px',\n          },\n        }}\n        onClick={projectSlug ? onEnter : handleClickWithoutProject}\n        {...buttonProps}\n      >\n        {buttonProps.children ?? t('Create Alert')}\n      </Button>\n    );\n\n    const showGuide = !organization.alertsMemberWrite && !!showPermissionGuide;\n\n    return (\n      <Access organization={organization} access={['alerts:write']}>\n        {({hasAccess}) =>\n          showGuide ? (\n            <Access organization={organization} access={['org:write']}>\n              {({hasAccess: isOrgAdmin}) => (\n                <GuideAnchor\n                  target={isOrgAdmin ? 'alerts_write_owner' : 'alerts_write_member'}\n                  onFinish={isOrgAdmin ? enableAlertsMemberWrite : undefined}\n                >\n                  {renderButton(hasAccess)}\n                </GuideAnchor>\n              )}\n            </Access>\n          ) : (\n            renderButton(hasAccess)\n          )\n        }\n      </Access>\n    );\n  }\n);\n\nexport {CreateAlertFromViewButton};\nexport default CreateAlertButton;\n","import styled from '@emotion/styled';\nimport type {Location} from 'history';\n\nimport ButtonBar from 'sentry/components/buttonBar';\nimport CompactSelect from 'sentry/components/compactSelect';\nimport ProjectPageFilter from 'sentry/components/projectPageFilter';\nimport SearchBar from 'sentry/components/searchBar';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\nimport TeamFilter from './list/rules/teamFilter';\nimport {getQueryStatus, getTeamParams} from './utils';\n\ninterface Props {\n  location: Location<any>;\n  onChangeFilter: (activeFilters: string[]) => void;\n  onChangeSearch: (query: string) => void;\n  hasStatusFilters?: boolean;\n  onChangeStatus?: (status: string) => void;\n}\n\nfunction FilterBar({\n  location,\n  onChangeSearch,\n  onChangeFilter,\n  onChangeStatus,\n  hasStatusFilters,\n}: Props) {\n  const selectedTeams = getTeamParams(location.query.team);\n  const selectedStatus = getQueryStatus(location.query.status);\n\n  return (\n    <Wrapper>\n      <FilterButtons gap={1.5}>\n        <TeamFilter selectedTeams={selectedTeams} handleChangeFilter={onChangeFilter} />\n        <ProjectPageFilter />\n        {hasStatusFilters && onChangeStatus && (\n          <CompactSelect\n            triggerProps={{\n              prefix: t('Status'),\n            }}\n            options={[\n              {\n                value: 'all',\n                label: t('All'),\n              },\n              {\n                value: 'open',\n                label: t('Active'),\n              },\n              {\n                value: 'closed',\n                label: t('Inactive'),\n              },\n            ]}\n            value={selectedStatus}\n            onChange={({value}) => onChangeStatus(value)}\n          />\n        )}\n      </FilterButtons>\n      <SearchBar\n        placeholder={t('Search by name')}\n        query={location.query?.name}\n        onSearch={onChangeSearch}\n      />\n    </Wrapper>\n  );\n}\n\nexport default FilterBar;\n\nconst Wrapper = styled('div')`\n  display: grid;\n  gap: ${space(1.5)};\n  margin-bottom: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: min-content 1fr;\n  }\n`;\n\nconst FilterButtons = styled(ButtonBar)`\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    display: flex;\n    align-items: flex-start;\n    gap: ${space(1.5)};\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: grid;\n    grid-auto-columns: minmax(auto, 300px);\n  }\n`;\n","import {InjectedRouter} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {navigateTo} from 'sentry/actionCreators/navigation';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport CreateAlertButton from 'sentry/components/createAlertButton';\nimport GlobalSelectionLink from 'sentry/components/globalSelectionLink';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {IconSettings} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport space from 'sentry/styles/space';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePageFilters from 'sentry/utils/usePageFilters';\n\ntype Props = {\n  activeTab: 'stream' | 'rules';\n  router: InjectedRouter;\n};\n\nconst AlertHeader = ({router, activeTab}: Props) => {\n  const organization = useOrganization();\n  const {selection} = usePageFilters();\n  /**\n   * Incidents list is currently at the organization level, but the link needs to\n   * go down to a specific project scope.\n   */\n  const handleNavigateToSettings = (e: React.MouseEvent) => {\n    e.preventDefault();\n    navigateTo(`/settings/${organization.slug}/projects/:projectId/alerts/`, router);\n  };\n\n  const alertRulesLink = (\n    <li className={activeTab === 'rules' ? 'active' : ''}>\n      <GlobalSelectionLink to={`/organizations/${organization.slug}/alerts/rules/`}>\n        {t('Alert Rules')}\n      </GlobalSelectionLink>\n    </li>\n  );\n\n  return (\n    <Layout.Header>\n      <Layout.HeaderContent>\n        <StyledLayoutTitle>{t('Alerts')}</StyledLayoutTitle>\n      </Layout.HeaderContent>\n      <Layout.HeaderActions>\n        <Actions gap={1}>\n          <CreateAlertButton\n            organization={organization}\n            iconProps={{size: 'sm'}}\n            size=\"sm\"\n            priority=\"primary\"\n            referrer=\"alert_stream\"\n            showPermissionGuide\n            projectSlug={\n              selection.projects.length === 1\n                ? ProjectsStore.getById(`${selection.projects[0]}`)?.slug\n                : undefined\n            }\n          >\n            {t('Create Alert')}\n          </CreateAlertButton>\n          <Button\n            size=\"sm\"\n            onClick={handleNavigateToSettings}\n            href=\"#\"\n            icon={<IconSettings size=\"sm\" />}\n            aria-label={t('Settings')}\n          />\n        </Actions>\n      </Layout.HeaderActions>\n      <Layout.HeaderNavTabs underlined>\n        {alertRulesLink}\n        <li className={activeTab === 'stream' ? 'active' : ''}>\n          <GlobalSelectionLink to={`/organizations/${organization.slug}/alerts/`}>\n            {t('History')}\n          </GlobalSelectionLink>\n        </li>\n      </Layout.HeaderNavTabs>\n    </Layout.Header>\n  );\n};\n\nexport default AlertHeader;\n\nconst StyledLayoutTitle = styled(Layout.Title)`\n  margin-top: ${space(0.5)};\n`;\n\nconst Actions = styled(ButtonBar)`\n  height: 32px;\n`;\n","import {t} from 'sentry/locale';\nimport {MEPAlertsQueryType} from 'sentry/views/alerts/wizard/options';\nimport type {SchemaFormConfig} from 'sentry/views/organizationIntegrations/sentryAppExternalForm';\n\nimport type {Incident} from '../../types';\n\nexport enum AlertRuleThresholdType {\n  ABOVE,\n  BELOW,\n}\n\nexport enum AlertRuleTriggerType {\n  CRITICAL = 'critical',\n  WARNING = 'warning',\n  RESOLVE = 'resolve',\n}\n\nexport enum AlertRuleComparisonType {\n  COUNT = 'count',\n  CHANGE = 'change',\n  PERCENT = 'percent',\n}\n\nexport enum Dataset {\n  ERRORS = 'events',\n  TRANSACTIONS = 'transactions',\n  /** Also used for performance alerts **/\n  GENERIC_METRICS = 'generic_metrics',\n  SESSIONS = 'sessions',\n  /** Also used for crash free alerts */\n  METRICS = 'metrics',\n}\n\nexport enum EventTypes {\n  DEFAULT = 'default',\n  ERROR = 'error',\n  TRANSACTION = 'transaction',\n  USER = 'user',\n  SESSION = 'session',\n}\n\nexport enum Datasource {\n  ERROR_DEFAULT = 'error_default',\n  DEFAULT = 'default',\n  ERROR = 'error',\n  TRANSACTION = 'transaction',\n}\n\n/**\n * This is not a real aggregate as crash-free sessions/users can be only calculated on frontend by comparing the count of sessions broken down by status\n * It is here nevertheless to shoehorn sessions dataset into existing alerts codebase\n * This will most likely be revised as we introduce the metrics dataset\n */\nexport enum SessionsAggregate {\n  CRASH_FREE_SESSIONS = 'percentage(sessions_crashed, sessions) AS _crash_rate_alert_aggregate',\n  CRASH_FREE_USERS = 'percentage(users_crashed, users) AS _crash_rate_alert_aggregate',\n}\n\nexport type UnsavedTrigger = {\n  actions: Action[];\n  alertThreshold: number | '' | null;\n  label: AlertRuleTriggerType;\n  // UnsavedTrigger can be a part of an Unsaved Alert Rule that does not have an\n  // id yet\n  alertRuleId?: string;\n};\n\nexport type ThresholdControlValue = {\n  /**\n   * Resolve threshold is optional, so it can be null\n   */\n  threshold: number | '' | null;\n  thresholdType: AlertRuleThresholdType;\n};\n\ntype SavedTrigger = Omit<UnsavedTrigger, 'actions'> & {\n  actions: Action[];\n  dateCreated: string;\n  id: string;\n};\n\nexport type Trigger = Partial<SavedTrigger> & UnsavedTrigger;\n\nexport type UnsavedMetricRule = {\n  aggregate: string;\n  dataset: Dataset;\n  environment: string | null;\n  projects: string[];\n  query: string;\n  resolveThreshold: number | '' | null;\n  thresholdPeriod: number | null;\n  thresholdType: AlertRuleThresholdType;\n  timeWindow: TimeWindow;\n  triggers: Trigger[];\n  comparisonDelta?: number | null;\n  eventTypes?: EventTypes[];\n  owner?: string | null;\n  queryType?: MEPAlertsQueryType | null;\n};\n\nexport interface SavedMetricRule extends UnsavedMetricRule {\n  dateCreated: string;\n  dateModified: string;\n  id: string;\n  name: string;\n  status: number;\n  createdBy?: {email: string; id: number; name: string} | null;\n  errors?: {detail: string}[];\n  /**\n   * Returned with the expand=latestIncident query parameter\n   */\n  latestIncident?: Incident | null;\n  originalAlertRuleId?: number | null;\n}\n\nexport type MetricRule = Partial<SavedMetricRule> & UnsavedMetricRule;\n\nexport enum TimePeriod {\n  SIX_HOURS = '6h',\n  ONE_DAY = '1d',\n  THREE_DAYS = '3d',\n  // Seven days is actually 10080m but we have a max of 10000 events\n  SEVEN_DAYS = '10000m',\n  FOURTEEN_DAYS = '14d',\n  THIRTY_DAYS = '30d',\n}\n\nexport enum TimeWindow {\n  ONE_MINUTE = 1,\n  FIVE_MINUTES = 5,\n  TEN_MINUTES = 10,\n  FIFTEEN_MINUTES = 15,\n  THIRTY_MINUTES = 30,\n  ONE_HOUR = 60,\n  TWO_HOURS = 120,\n  FOUR_HOURS = 240,\n  ONE_DAY = 1440,\n}\n\nexport enum ActionType {\n  EMAIL = 'email',\n  SLACK = 'slack',\n  PAGERDUTY = 'pagerduty',\n  MSTEAMS = 'msteams',\n  SENTRY_APP = 'sentry_app',\n}\n\nexport const ActionLabel = {\n  // \\u200B is needed because Safari disregards autocomplete=\"off\". It's seeing \"Email\" and\n  // opening up the browser autocomplete for email. https://github.com/JedWatson/react-select/issues/3500\n  [ActionType.EMAIL]: t('Emai\\u200Bl'),\n  [ActionType.SLACK]: t('Slack'),\n  [ActionType.PAGERDUTY]: t('Pagerduty'),\n  [ActionType.MSTEAMS]: t('MS Teams'),\n  [ActionType.SENTRY_APP]: t('Notification'),\n};\n\nexport enum TargetType {\n  // A direct reference, like an email address, Slack channel, or PagerDuty service\n  SPECIFIC = 'specific',\n\n  // A specific user. This could be used to grab the user's email address.\n  USER = 'user',\n\n  // A specific team. This could be used to send an email to everyone associated with a team.\n  TEAM = 'team',\n\n  // A Sentry App instead of any of the above.\n  SENTRY_APP = 'sentry_app',\n}\n\nexport const TargetLabel = {\n  [TargetType.USER]: t('Member'),\n  [TargetType.TEAM]: t('Team'),\n};\n\n/**\n * This is an available action template that is associated to a Trigger in a\n * Metric Alert Rule. They are defined by the available-actions API.\n */\nexport type MetricActionTemplate = {\n  /**\n   * See `TargetType`\n   */\n  allowedTargetTypes: TargetType[];\n\n  /**\n   * The integration type e.g. 'email'\n   */\n  type: ActionType;\n\n  /**\n   * Integration id for this `type`, should be passed to backend as `integrationId` when creating an action\n   */\n  integrationId?: number;\n\n  /**\n   * Name of the integration. This is a text field that differentiates integrations from the same provider from each other\n   */\n  integrationName?: string;\n\n  /**\n   * For some available actions, we pass in the list of available targets.\n   */\n  options?: Array<{label: string; value: any}>;\n\n  /**\n   * SentryApp id for this `type`, should be passed to backend as `sentryAppId` when creating an action.\n   */\n  sentryAppId?: number;\n\n  sentryAppInstallationUuid?: string;\n  /**\n   * Name of the SentryApp. Like `integrationName`, this differentiates SentryApps from each other.\n   */\n  sentryAppName?: string;\n\n  /**\n   * Sentry App Alert Rule UI Component settings\n   */\n  settings?: SchemaFormConfig;\n\n  /**\n   * If this is a `sentry_app` action, this is the Sentry App's status.\n   */\n  status?: 'unpublished' | 'published' | 'internal';\n};\n\n/**\n * This is the user's configured action\n */\nexport type Action = UnsavedAction & Partial<SavedActionFields>;\n\ntype SavedActionFields = {\n  /**\n   * The id of the alert rule this action belongs to\n   */\n  alertRuleTriggerId: string;\n\n  /**\n   * date created\n   */\n  dateCreated: string;\n\n  /**\n   * A human readable description of the action generated by server\n   */\n  desc: string;\n\n  /**\n   * model id of the action\n   */\n  id: string;\n\n  /**\n   *  Could not fetch details from SentryApp. Show the rule but make it disabled.\n   */\n  disabled?: boolean;\n};\n\ntype UnsavedAction = {\n  /**\n   * An optional Slack channel or user id the user can input to avoid rate limiting issues.\n   */\n  inputChannelId: string | null;\n  /**\n   * For some available actions, we pass in the list of available targets.\n   */\n  options: Array<{label: string; value: any}> | null;\n  /**\n   * How to identify the target. Can be email, slack channel, pagerduty service,\n   * user_id, team_id, SentryApp id, etc\n   */\n  targetIdentifier: string | null;\n\n  targetType: TargetType | null;\n\n  type: ActionType;\n  /** Used to maintain order of unsaved actions */\n  unsavedDateCreated: string;\n  unsavedId: string;\n\n  /**\n   * The id of the integration, can be null (e.g. email) or undefined (server errors when posting w/ null value)\n   */\n  integrationId?: number | null;\n\n  /**\n   * The id of the SentryApp, can be null (e.g. email) or undefined (server errors when posting w/ null value)\n   */\n  sentryAppId?: number | null;\n\n  /**\n   * If this is a `sentry_app` action, this is the Sentry App's status.\n   */\n  status?: 'unpublished' | 'published' | 'internal';\n};\n","import {User} from 'sentry/types';\nimport {IssueAlertRule} from 'sentry/types/alerts';\nimport {MetricRule} from 'sentry/views/alerts/rules/metric/types';\n\ntype Data = [number, {count: number}[]][];\n\nexport enum AlertRuleType {\n  METRIC = 'metric',\n  ISSUE = 'issue',\n}\n\nexport type Incident = {\n  alertRule: MetricRule;\n  dateClosed: string | null;\n  dateCreated: string;\n  dateDetected: string;\n  dateStarted: string;\n  // Array of group ids\n  discoverQuery: string;\n  groups: string[];\n  hasSeen: boolean;\n  id: string;\n  identifier: string;\n  isSubscribed: boolean;\n  organizationId: string;\n  projects: string[];\n  // Array of slugs\n  seenBy: User[];\n  status: IncidentStatus;\n  statusMethod: IncidentStatusMethod;\n  title: string;\n  activities?: ActivityType[];\n};\n\nexport type IncidentStats = {\n  eventStats: {\n    data: Data;\n  };\n  totalEvents: number;\n  uniqueUsers: number;\n};\n\nexport type ActivityTypeDraft = {\n  comment: null | string;\n  dateCreated: string;\n  id: string;\n  incidentIdentifier: string;\n  type: IncidentActivityType;\n  user: User | null;\n};\n\nexport type ActivityType = ActivityTypeDraft & {\n  previousValue: string | null;\n  value: string | null;\n  eventStats?: {data: Data};\n};\n\nexport enum IncidentActivityType {\n  CREATED = 0,\n  DETECTED = 1,\n  STATUS_CHANGE = 2,\n  COMMENT = 3,\n  STARTED = 4,\n}\n\nexport enum IncidentStatus {\n  OPENED = 1,\n  CLOSED = 2,\n  WARNING = 10,\n  CRITICAL = 20,\n}\n\nexport enum IncidentStatusMethod {\n  MANUAL = 1,\n  RULE_UPDATED = 2,\n  RULE_TRIGGERED = 3,\n}\n\nexport enum AlertRuleStatus {\n  PENDING = 0,\n  SNAPSHOT = 4,\n  DISABLED = 5,\n}\n\nexport enum CombinedAlertType {\n  METRIC = 'alert_rule',\n  ISSUE = 'rule',\n}\n\nexport type CombinedMetricIssueAlerts = (IssueAlertRule | MetricRule) & {\n  type: CombinedAlertType;\n  latestIncident?: Incident | null;\n};\n","import round from 'lodash/round';\n\nimport {t} from 'sentry/locale';\nimport {Organization, SessionFieldWithOperation} from 'sentry/types';\nimport {IssueAlertRule} from 'sentry/types/alerts';\nimport {defined} from 'sentry/utils';\nimport {getUtcDateString} from 'sentry/utils/dates';\nimport {axisLabelFormatter, tooltipFormatter} from 'sentry/utils/discover/charts';\nimport {aggregateOutputType} from 'sentry/utils/discover/fields';\nimport {\n  Dataset,\n  Datasource,\n  EventTypes,\n  MetricRule,\n  SavedMetricRule,\n  SessionsAggregate,\n} from 'sentry/views/alerts/rules/metric/types';\n\nimport {AlertRuleStatus, Incident, IncidentStats} from '../types';\n\n/**\n * Gets start and end date query parameters from stats\n */\nexport function getStartEndFromStats(stats: IncidentStats) {\n  const start = getUtcDateString(stats.eventStats.data[0][0] * 1000);\n  const end = getUtcDateString(\n    stats.eventStats.data[stats.eventStats.data.length - 1][0] * 1000\n  );\n\n  return {start, end};\n}\n\nexport function isIssueAlert(\n  data: IssueAlertRule | SavedMetricRule | MetricRule\n): data is IssueAlertRule {\n  return !data.hasOwnProperty('triggers');\n}\n\nexport const DATA_SOURCE_LABELS = {\n  [Dataset.ERRORS]: t('Errors'),\n  [Dataset.TRANSACTIONS]: t('Transactions'),\n  [Datasource.ERROR_DEFAULT]: 'event.type:error OR event.type:default',\n  [Datasource.ERROR]: 'event.type:error',\n  [Datasource.DEFAULT]: 'event.type:default',\n  [Datasource.TRANSACTION]: 'event.type:transaction',\n};\n\n// Maps a datasource to the relevant dataset and event_types for the backend to use\nexport const DATA_SOURCE_TO_SET_AND_EVENT_TYPES = {\n  [Datasource.ERROR_DEFAULT]: {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.ERROR, EventTypes.DEFAULT],\n  },\n  [Datasource.ERROR]: {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.ERROR],\n  },\n  [Datasource.DEFAULT]: {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.DEFAULT],\n  },\n  [Datasource.TRANSACTION]: {\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: [EventTypes.TRANSACTION],\n  },\n};\n\n// Converts the given dataset and event types array to a datasource for the datasource dropdown\nexport function convertDatasetEventTypesToSource(\n  dataset: Dataset,\n  eventTypes: EventTypes[]\n) {\n  // transactions and generic_metrics only have one datasource option regardless of event type\n  if (dataset === Dataset.TRANSACTIONS || dataset === Dataset.GENERIC_METRICS) {\n    return Datasource.TRANSACTION;\n  }\n  // if no event type was provided use the default datasource\n  if (!eventTypes) {\n    return Datasource.ERROR;\n  }\n\n  if (eventTypes.includes(EventTypes.DEFAULT) && eventTypes.includes(EventTypes.ERROR)) {\n    return Datasource.ERROR_DEFAULT;\n  }\n  if (eventTypes.includes(EventTypes.DEFAULT)) {\n    return Datasource.DEFAULT;\n  }\n  return Datasource.ERROR;\n}\n\n/**\n * Attempt to guess the data source of a discover query\n *\n * @returns An object containing the datasource and new query without the datasource.\n * Returns null on no datasource.\n */\nexport function getQueryDatasource(\n  query: string\n): {query: string; source: Datasource} | null {\n  let match = query.match(\n    /\\(?\\bevent\\.type:(error|default|transaction)\\)?\\WOR\\W\\(?event\\.type:(error|default|transaction)\\)?/i\n  );\n  if (match) {\n    // should be [error, default] or [default, error]\n    const eventTypes = match.slice(1, 3).sort().join(',');\n    if (eventTypes !== 'default,error') {\n      return null;\n    }\n\n    return {source: Datasource.ERROR_DEFAULT, query: query.replace(match[0], '').trim()};\n  }\n\n  match = query.match(/(^|\\s)event\\.type:(error|default|transaction)/i);\n  if (match && Datasource[match[2].toUpperCase()]) {\n    return {\n      source: Datasource[match[2].toUpperCase()],\n      query: query.replace(match[0], '').trim(),\n    };\n  }\n\n  return null;\n}\n\nexport function isSessionAggregate(aggregate: string) {\n  return Object.values(SessionsAggregate).includes(aggregate as SessionsAggregate);\n}\n\nexport const SESSION_AGGREGATE_TO_FIELD = {\n  [SessionsAggregate.CRASH_FREE_SESSIONS]: SessionFieldWithOperation.SESSIONS,\n  [SessionsAggregate.CRASH_FREE_USERS]: SessionFieldWithOperation.USERS,\n};\n\nexport function alertAxisFormatter(value: number, seriesName: string, aggregate: string) {\n  if (isSessionAggregate(aggregate)) {\n    return defined(value) ? `${round(value, 2)}%` : '\\u2015';\n  }\n\n  return axisLabelFormatter(value, aggregateOutputType(seriesName));\n}\n\nexport function alertTooltipValueFormatter(\n  value: number,\n  seriesName: string,\n  aggregate: string\n) {\n  if (isSessionAggregate(aggregate)) {\n    return defined(value) ? `${value}%` : '\\u2015';\n  }\n\n  return tooltipFormatter(value, aggregateOutputType(seriesName));\n}\n\nexport const ALERT_CHART_MIN_MAX_BUFFER = 1.03;\n\nexport function shouldScaleAlertChart(aggregate: string) {\n  // We want crash free rate charts to be scaled because they are usually too\n  // close to 100% and therefore too fine to see the spikes on 0%-100% scale.\n  return isSessionAggregate(aggregate);\n}\n\nexport function alertDetailsLink(organization: Organization, incident: Incident) {\n  return `/organizations/${organization.slug}/alerts/rules/details/${\n    incident.alertRule.status === AlertRuleStatus.SNAPSHOT &&\n    incident.alertRule.originalAlertRuleId\n      ? incident.alertRule.originalAlertRuleId\n      : incident.alertRule.id\n  }/`;\n}\n\n/**\n * Noramlizes a status string\n */\nexport function getQueryStatus(status: string | string[]): string {\n  if (Array.isArray(status) || status === '') {\n    return 'all';\n  }\n\n  return ['open', 'closed'].includes(status) ? status : 'all';\n}\n\nconst ALERT_LIST_QUERY_DEFAULT_TEAMS = ['myteams', 'unassigned'];\n\n/**\n * Noramlize a team slug from the query\n */\nexport function getTeamParams(team?: string | string[]): string[] {\n  if (team === undefined) {\n    return ALERT_LIST_QUERY_DEFAULT_TEAMS;\n  }\n\n  if (team === '') {\n    return [];\n  }\n\n  if (Array.isArray(team)) {\n    return team;\n  }\n\n  return [team];\n}\n","import {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport {\n  Dataset,\n  EventTypes,\n  SessionsAggregate,\n} from 'sentry/views/alerts/rules/metric/types';\n\nexport type AlertType =\n  | 'issues'\n  | 'num_errors'\n  | 'users_experiencing_errors'\n  | 'throughput'\n  | 'trans_duration'\n  | 'apdex'\n  | 'failure_rate'\n  | 'lcp'\n  | 'fid'\n  | 'cls'\n  | 'custom'\n  | 'crash_free_sessions'\n  | 'crash_free_users';\n\nexport enum MEPAlertsQueryType {\n  ERROR = 0,\n  PERFORMANCE = 1,\n  CRASH_RATE = 2,\n}\n\nexport enum MEPAlertsDataset {\n  DISCOVER = 'discover',\n  METRICS = 'metrics',\n  METRICS_ENHANCED = 'metricsEnhanced',\n}\n\nexport type MetricAlertType = Exclude<AlertType, 'issues'>;\n\nexport const DatasetMEPAlertQueryTypes: Record<Dataset, MEPAlertsQueryType> = {\n  [Dataset.ERRORS]: MEPAlertsQueryType.ERROR,\n  [Dataset.TRANSACTIONS]: MEPAlertsQueryType.PERFORMANCE,\n  [Dataset.GENERIC_METRICS]: MEPAlertsQueryType.PERFORMANCE,\n  [Dataset.METRICS]: MEPAlertsQueryType.CRASH_RATE,\n  [Dataset.SESSIONS]: MEPAlertsQueryType.CRASH_RATE,\n};\n\nexport const AlertWizardAlertNames: Record<AlertType, string> = {\n  issues: t('Issues'),\n  num_errors: t('Number of Errors'),\n  users_experiencing_errors: t('Users Experiencing Errors'),\n  throughput: t('Throughput'),\n  trans_duration: t('Transaction Duration'),\n  apdex: t('Apdex'),\n  failure_rate: t('Failure Rate'),\n  lcp: t('Largest Contentful Paint'),\n  fid: t('First Input Delay'),\n  cls: t('Cumulative Layout Shift'),\n  custom: t('Custom Metric'),\n  crash_free_sessions: t('Crash Free Session Rate'),\n  crash_free_users: t('Crash Free User Rate'),\n};\n\ntype AlertWizardCategory = {\n  categoryHeading: string;\n  options: AlertType[];\n};\nexport const getAlertWizardCategories = (org: Organization): AlertWizardCategory[] => [\n  {\n    categoryHeading: t('Errors'),\n    options: ['issues', 'num_errors', 'users_experiencing_errors'],\n  },\n  ...(org.features.includes('crash-rate-alerts')\n    ? [\n        {\n          categoryHeading: t('Sessions'),\n          options: ['crash_free_sessions', 'crash_free_users'] as AlertType[],\n        },\n      ]\n    : []),\n  {\n    categoryHeading: t('Performance'),\n    options: [\n      'throughput',\n      'trans_duration',\n      'apdex',\n      'failure_rate',\n      'lcp',\n      'fid',\n      'cls',\n    ],\n  },\n  {\n    categoryHeading: t('Other'),\n    options: ['custom'],\n  },\n];\n\nexport type WizardRuleTemplate = {\n  aggregate: string;\n  dataset: Dataset;\n  eventTypes: EventTypes;\n};\n\nexport const AlertWizardRuleTemplates: Record<\n  MetricAlertType,\n  Readonly<WizardRuleTemplate>\n> = {\n  num_errors: {\n    aggregate: 'count()',\n    dataset: Dataset.ERRORS,\n    eventTypes: EventTypes.ERROR,\n  },\n  users_experiencing_errors: {\n    aggregate: 'count_unique(user)',\n    dataset: Dataset.ERRORS,\n    eventTypes: EventTypes.ERROR,\n  },\n  throughput: {\n    aggregate: 'count()',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  trans_duration: {\n    aggregate: 'p95(transaction.duration)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  apdex: {\n    aggregate: 'apdex(300)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  failure_rate: {\n    aggregate: 'failure_rate()',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  lcp: {\n    aggregate: 'p95(measurements.lcp)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  fid: {\n    aggregate: 'p95(measurements.fid)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  cls: {\n    aggregate: 'p95(measurements.cls)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  custom: {\n    aggregate: 'p95(measurements.fp)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  crash_free_sessions: {\n    aggregate: SessionsAggregate.CRASH_FREE_SESSIONS,\n    // TODO(scttcper): Use Dataset.Metric on GA of alert-crash-free-metrics\n    dataset: Dataset.SESSIONS,\n    eventTypes: EventTypes.SESSION,\n  },\n  crash_free_users: {\n    aggregate: SessionsAggregate.CRASH_FREE_USERS,\n    // TODO(scttcper): Use Dataset.Metric on GA of alert-crash-free-metrics\n    dataset: Dataset.SESSIONS,\n    eventTypes: EventTypes.USER,\n  },\n};\n\nexport const DEFAULT_WIZARD_TEMPLATE = AlertWizardRuleTemplates.num_errors;\n\nexport const hidePrimarySelectorSet = new Set<AlertType>([\n  'num_errors',\n  'users_experiencing_errors',\n  'throughput',\n  'apdex',\n  'failure_rate',\n  'crash_free_sessions',\n  'crash_free_users',\n]);\n\nexport const hideParameterSelectorSet = new Set<AlertType>([\n  'trans_duration',\n  'lcp',\n  'fid',\n  'cls',\n]);\n\nexport function getMEPAlertsDataset(\n  dataset: Dataset,\n  newAlert: boolean\n): MEPAlertsDataset {\n  // Dataset.ERRORS overrides all cases\n  if (dataset === Dataset.ERRORS) {\n    return MEPAlertsDataset.DISCOVER;\n  }\n\n  if (newAlert) {\n    return MEPAlertsDataset.METRICS_ENHANCED;\n  }\n\n  if (dataset === Dataset.GENERIC_METRICS) {\n    return MEPAlertsDataset.METRICS;\n  }\n\n  return MEPAlertsDataset.DISCOVER;\n}\n"],"names":["CreateAlertFromViewButton","projects","eventView","organization","referrer","onClick","alertType","disableMetricDataset","buttonProps","project","find","p","id","queryParams","generateQueryStringObject","query","includes","slug","replace","alertTemplate","AlertWizardRuleTemplates","DEFAULT_WIZARD_TEMPLATE","to","pathname","createFromDiscover","aggregate","yAxis","CreateAlertButton","t","withRouter","projectSlug","iconProps","router","hideIcon","showPermissionGuide","alertOption","onEnter","api","useApi","createAlertUrl","providedProj","params","URLSearchParams","append","toString","handleClickWithoutProject","event","preventDefault","navigateTo","async","enableAlertsMemberWrite","settingsEndpoint","addLoadingMessage","requestPromise","method","data","alertsMemberWrite","addSuccessMessage","err","addErrorMessage","permissionTooltipText","tct","settingsLink","renderButton","hasAccess","disabled","title","undefined","icon","tooltipProps","isHoverable","position","overlayStyle","maxWidth","children","showGuide","access","isOrgAdmin","target","onFinish","FilterBar","location","onChangeSearch","onChangeFilter","onChangeStatus","hasStatusFilters","selectedTeams","getTeamParams","team","selectedStatus","getQueryStatus","status","Wrapper","FilterButtons","gap","handleChangeFilter","triggerProps","prefix","options","value","label","onChange","placeholder","name","onSearch","space","theme","breakpoints","small","ButtonBar","AlertHeader","activeTab","useOrganization","selection","usePageFilters","alertRulesLink","className","StyledLayoutTitle","Actions","size","priority","length","ProjectsStore","e","href","underlined","Layout","AlertRuleThresholdType","AlertRuleTriggerType","AlertRuleComparisonType","Dataset","EventTypes","Datasource","SessionsAggregate","TimePeriod","TimeWindow","ActionType","ActionLabel","EMAIL","SLACK","PAGERDUTY","MSTEAMS","SENTRY_APP","TargetType","TargetLabel","USER","TEAM","AlertRuleType","IncidentActivityType","IncidentStatus","IncidentStatusMethod","AlertRuleStatus","CombinedAlertType","isIssueAlert","hasOwnProperty","DATA_SOURCE_LABELS","DATA_SOURCE_TO_SET_AND_EVENT_TYPES","dataset","eventTypes","convertDatasetEventTypesToSource","getQueryDatasource","match","slice","sort","join","source","trim","toUpperCase","isSessionAggregate","Object","values","SESSION_AGGREGATE_TO_FIELD","SessionFieldWithOperation","alertAxisFormatter","seriesName","defined","round","axisLabelFormatter","aggregateOutputType","alertTooltipValueFormatter","tooltipFormatter","ALERT_CHART_MIN_MAX_BUFFER","shouldScaleAlertChart","alertDetailsLink","incident","alertRule","originalAlertRuleId","Array","isArray","ALERT_LIST_QUERY_DEFAULT_TEAMS","MEPAlertsQueryType","MEPAlertsDataset","DatasetMEPAlertQueryTypes","ERROR","PERFORMANCE","CRASH_RATE","AlertWizardAlertNames","issues","num_errors","users_experiencing_errors","throughput","trans_duration","apdex","failure_rate","lcp","fid","cls","custom","crash_free_sessions","crash_free_users","getAlertWizardCategories","org","categoryHeading","features","hidePrimarySelectorSet","Set","hideParameterSelectorSet","getMEPAlertsDataset","newAlert","DISCOVER","METRICS_ENHANCED","METRICS"],"sourceRoot":""}