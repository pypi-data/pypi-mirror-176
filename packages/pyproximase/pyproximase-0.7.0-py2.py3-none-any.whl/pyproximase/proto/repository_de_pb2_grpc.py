# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import common_pb2 as proto_dot_common__pb2
from proto import proxima_se_pb2 as proto_dot_proxima__se__pb2


class RepositoryServiceStub(object):
    """! GRPC service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create_collection_subscription = channel.unary_unary(
                '/proxima.de.proto.RepositoryService/create_collection_subscription',
                request_serializer=proto_dot_proxima__se__pb2.CollectionConfig.SerializeToString,
                response_deserializer=proto_dot_common__pb2.Status.FromString,
                )
        self.drop_collection_subscription = channel.unary_unary(
                '/proxima.de.proto.RepositoryService/drop_collection_subscription',
                request_serializer=proto_dot_proxima__se__pb2.CollectionName.SerializeToString,
                response_deserializer=proto_dot_common__pb2.Status.FromString,
                )
        self.get_version = channel.unary_unary(
                '/proxima.de.proto.RepositoryService/get_version',
                request_serializer=proto_dot_proxima__se__pb2.GetVersionRequest.SerializeToString,
                response_deserializer=proto_dot_proxima__se__pb2.GetVersionResponse.FromString,
                )


class RepositoryServiceServicer(object):
    """! GRPC service
    """

    def create_collection_subscription(self, request, context):
        """Create collection subscription
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def drop_collection_subscription(self, request, context):
        """Drop collection subscription
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_version(self, request, context):
        """Version for de_repository server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RepositoryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create_collection_subscription': grpc.unary_unary_rpc_method_handler(
                    servicer.create_collection_subscription,
                    request_deserializer=proto_dot_proxima__se__pb2.CollectionConfig.FromString,
                    response_serializer=proto_dot_common__pb2.Status.SerializeToString,
            ),
            'drop_collection_subscription': grpc.unary_unary_rpc_method_handler(
                    servicer.drop_collection_subscription,
                    request_deserializer=proto_dot_proxima__se__pb2.CollectionName.FromString,
                    response_serializer=proto_dot_common__pb2.Status.SerializeToString,
            ),
            'get_version': grpc.unary_unary_rpc_method_handler(
                    servicer.get_version,
                    request_deserializer=proto_dot_proxima__se__pb2.GetVersionRequest.FromString,
                    response_serializer=proto_dot_proxima__se__pb2.GetVersionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proxima.de.proto.RepositoryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RepositoryService(object):
    """! GRPC service
    """

    @staticmethod
    def create_collection_subscription(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.de.proto.RepositoryService/create_collection_subscription',
            proto_dot_proxima__se__pb2.CollectionConfig.SerializeToString,
            proto_dot_common__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def drop_collection_subscription(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.de.proto.RepositoryService/drop_collection_subscription',
            proto_dot_proxima__se__pb2.CollectionName.SerializeToString,
            proto_dot_common__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_version(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.de.proto.RepositoryService/get_version',
            proto_dot_proxima__se__pb2.GetVersionRequest.SerializeToString,
            proto_dot_proxima__se__pb2.GetVersionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
