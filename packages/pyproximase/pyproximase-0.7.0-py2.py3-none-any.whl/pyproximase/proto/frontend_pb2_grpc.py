# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from proto import admin_pb2 as proto_dot_admin__pb2
from proto import common_pb2 as proto_dot_common__pb2
from proto import frontend_pb2 as proto_dot_frontend__pb2
from proto import proxima_se_pb2 as proto_dot_proxima__se__pb2


class FrontendServiceStub(object):
    """! GRPC service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create_resource_group = channel.unary_unary(
                '/proxima.de.proto.FrontendService/create_resource_group',
                request_serializer=proto_dot_admin__pb2.ResourceGroupConfig.SerializeToString,
                response_deserializer=proto_dot_common__pb2.Status.FromString,
                )
        self.update_resource_group = channel.unary_unary(
                '/proxima.de.proto.FrontendService/update_resource_group',
                request_serializer=proto_dot_admin__pb2.UpdateResourceGroupRequest.SerializeToString,
                response_deserializer=proto_dot_common__pb2.Status.FromString,
                )
        self.drop_resource_group = channel.unary_unary(
                '/proxima.de.proto.FrontendService/drop_resource_group',
                request_serializer=proto_dot_admin__pb2.DropResourceGroupRequest.SerializeToString,
                response_deserializer=proto_dot_common__pb2.Status.FromString,
                )
        self.describe_resource_group = channel.unary_unary(
                '/proxima.de.proto.FrontendService/describe_resource_group',
                request_serializer=proto_dot_admin__pb2.ResourceGroupName.SerializeToString,
                response_deserializer=proto_dot_admin__pb2.DescribeResourceGroupResponse.FromString,
                )
        self.cluster_status = channel.unary_unary(
                '/proxima.de.proto.FrontendService/cluster_status',
                request_serializer=proto_dot_admin__pb2.ClusterStatusRequest.SerializeToString,
                response_deserializer=proto_dot_admin__pb2.ClusterStatusResponse.FromString,
                )
        self.notify_collection_placement = channel.unary_unary(
                '/proxima.de.proto.FrontendService/notify_collection_placement',
                request_serializer=proto_dot_admin__pb2.CollectionPlacement.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.notify_collection_progress = channel.unary_unary(
                '/proxima.de.proto.FrontendService/notify_collection_progress',
                request_serializer=proto_dot_admin__pb2.CollectionProgress.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.describe_collection = channel.unary_unary(
                '/proxima.de.proto.FrontendService/describe_collection',
                request_serializer=proto_dot_frontend__pb2.DescribeCollectionShardRequest.SerializeToString,
                response_deserializer=proto_dot_proxima__se__pb2.DescribeCollectionResponse.FromString,
                )


class FrontendServiceServicer(object):
    """! GRPC service
    """

    def create_resource_group(self, request, context):
        """Create a ResourceGroup
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update_resource_group(self, request, context):
        """Update a ResourceGroup
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def drop_resource_group(self, request, context):
        """Drop a ResourceGroup
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def describe_resource_group(self, request, context):
        """Get information of a ResourceGroup
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cluster_status(self, request, context):
        """Get cluster status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def notify_collection_placement(self, request, context):
        """Notify collection deployment provided for admin
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def notify_collection_progress(self, request, context):
        """Notify collection progress provided for admin
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def describe_collection(self, request, context):
        """Get information of a collection from a shard, special for repository
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FrontendServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create_resource_group': grpc.unary_unary_rpc_method_handler(
                    servicer.create_resource_group,
                    request_deserializer=proto_dot_admin__pb2.ResourceGroupConfig.FromString,
                    response_serializer=proto_dot_common__pb2.Status.SerializeToString,
            ),
            'update_resource_group': grpc.unary_unary_rpc_method_handler(
                    servicer.update_resource_group,
                    request_deserializer=proto_dot_admin__pb2.UpdateResourceGroupRequest.FromString,
                    response_serializer=proto_dot_common__pb2.Status.SerializeToString,
            ),
            'drop_resource_group': grpc.unary_unary_rpc_method_handler(
                    servicer.drop_resource_group,
                    request_deserializer=proto_dot_admin__pb2.DropResourceGroupRequest.FromString,
                    response_serializer=proto_dot_common__pb2.Status.SerializeToString,
            ),
            'describe_resource_group': grpc.unary_unary_rpc_method_handler(
                    servicer.describe_resource_group,
                    request_deserializer=proto_dot_admin__pb2.ResourceGroupName.FromString,
                    response_serializer=proto_dot_admin__pb2.DescribeResourceGroupResponse.SerializeToString,
            ),
            'cluster_status': grpc.unary_unary_rpc_method_handler(
                    servicer.cluster_status,
                    request_deserializer=proto_dot_admin__pb2.ClusterStatusRequest.FromString,
                    response_serializer=proto_dot_admin__pb2.ClusterStatusResponse.SerializeToString,
            ),
            'notify_collection_placement': grpc.unary_unary_rpc_method_handler(
                    servicer.notify_collection_placement,
                    request_deserializer=proto_dot_admin__pb2.CollectionPlacement.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'notify_collection_progress': grpc.unary_unary_rpc_method_handler(
                    servicer.notify_collection_progress,
                    request_deserializer=proto_dot_admin__pb2.CollectionProgress.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'describe_collection': grpc.unary_unary_rpc_method_handler(
                    servicer.describe_collection,
                    request_deserializer=proto_dot_frontend__pb2.DescribeCollectionShardRequest.FromString,
                    response_serializer=proto_dot_proxima__se__pb2.DescribeCollectionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proxima.de.proto.FrontendService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FrontendService(object):
    """! GRPC service
    """

    @staticmethod
    def create_resource_group(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.de.proto.FrontendService/create_resource_group',
            proto_dot_admin__pb2.ResourceGroupConfig.SerializeToString,
            proto_dot_common__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update_resource_group(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.de.proto.FrontendService/update_resource_group',
            proto_dot_admin__pb2.UpdateResourceGroupRequest.SerializeToString,
            proto_dot_common__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def drop_resource_group(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.de.proto.FrontendService/drop_resource_group',
            proto_dot_admin__pb2.DropResourceGroupRequest.SerializeToString,
            proto_dot_common__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def describe_resource_group(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.de.proto.FrontendService/describe_resource_group',
            proto_dot_admin__pb2.ResourceGroupName.SerializeToString,
            proto_dot_admin__pb2.DescribeResourceGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def cluster_status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.de.proto.FrontendService/cluster_status',
            proto_dot_admin__pb2.ClusterStatusRequest.SerializeToString,
            proto_dot_admin__pb2.ClusterStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def notify_collection_placement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.de.proto.FrontendService/notify_collection_placement',
            proto_dot_admin__pb2.CollectionPlacement.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def notify_collection_progress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.de.proto.FrontendService/notify_collection_progress',
            proto_dot_admin__pb2.CollectionProgress.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def describe_collection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.de.proto.FrontendService/describe_collection',
            proto_dot_frontend__pb2.DescribeCollectionShardRequest.SerializeToString,
            proto_dot_proxima__se__pb2.DescribeCollectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class HttpFrontendServiceStub(object):
    """Restful APIs of FrontendService for query documents on collection
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.resource_group = channel.unary_unary(
                '/proxima.de.proto.HttpFrontendService/resource_group',
                request_serializer=proto_dot_common__pb2.HttpRequest.SerializeToString,
                response_deserializer=proto_dot_common__pb2.HttpResponse.FromString,
                )
        self.cluster_status = channel.unary_unary(
                '/proxima.de.proto.HttpFrontendService/cluster_status',
                request_serializer=proto_dot_common__pb2.HttpRequest.SerializeToString,
                response_deserializer=proto_dot_common__pb2.HttpResponse.FromString,
                )


class HttpFrontendServiceServicer(object):
    """Restful APIs of FrontendService for query documents on collection
    """

    def resource_group(self, request, context):
        """! Resource group management APIS
        1. Create ResourceGroup
        Http: POST /v1/resource-group/{resource-group-name}
        You can use the create resource group API to add a new resource group to an Proxima DE server. When creating an
        resource group, you need specify the ResourceGroupConfig as json string attached to the body
        2. Get ResourceGroup
        HTTP: GET /v1/resource-group/{resource-group-name}
        Returns information about the resource group named by Path Param ${resource-group-name}.
        3. Delete ResourceGroup
        HTTP: DEL /v1/resource-group/{resource-group-name}
        Deletes an existing resource group named by Path Param ${resource-group-name}
        4. Update ResourceGroup
        HTTP: PUT /v1/resource-group/{resource-group-name}, supported later
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cluster_status(self, request, context):
        """! Get status of cluster
        HTTP: GET /v1/cluster-status
        Returns status of cluster
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HttpFrontendServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'resource_group': grpc.unary_unary_rpc_method_handler(
                    servicer.resource_group,
                    request_deserializer=proto_dot_common__pb2.HttpRequest.FromString,
                    response_serializer=proto_dot_common__pb2.HttpResponse.SerializeToString,
            ),
            'cluster_status': grpc.unary_unary_rpc_method_handler(
                    servicer.cluster_status,
                    request_deserializer=proto_dot_common__pb2.HttpRequest.FromString,
                    response_serializer=proto_dot_common__pb2.HttpResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proxima.de.proto.HttpFrontendService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HttpFrontendService(object):
    """Restful APIs of FrontendService for query documents on collection
    """

    @staticmethod
    def resource_group(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.de.proto.HttpFrontendService/resource_group',
            proto_dot_common__pb2.HttpRequest.SerializeToString,
            proto_dot_common__pb2.HttpResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def cluster_status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proxima.de.proto.HttpFrontendService/cluster_status',
            proto_dot_common__pb2.HttpRequest.SerializeToString,
            proto_dot_common__pb2.HttpResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
