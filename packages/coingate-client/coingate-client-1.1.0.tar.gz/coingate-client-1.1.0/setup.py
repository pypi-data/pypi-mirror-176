# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['coingate', 'coingate.resources', 'coingate.services']

package_data = \
{'': ['*']}

install_requires = \
['pydantic>=1.9.2,<2.0.0',
 'requests>=2.28.1,<3.0.0',
 'typing-extensions>=4.3.0,<5.0.0']

setup_kwargs = {
    'name': 'coingate-client',
    'version': '1.1.0',
    'description': 'CoinGate Python SDK (API v2)',
    'long_description': '# CoinGate Python Client (API v2)\n\n![StaticCheckAndTestCI](https://github.com/markkkkas/coingate-python/actions/workflows/static-check-tests.yml/badge.svg)\n\nThis Client provides conveniet way to communicate between CoinGate API v2 and your Python code.\n\n## Requirements\nPython 3.7+\n\n## Installing\n```\npip install coingate-python\n```\n\n## Dependencies\nThis library requires the following packages to work properly:\n- [requests](https://pypi.org/project/requests/)\n- [pydantic](https://pypi.org/project/pydantic/)\n\n## Getting started\nYou can sign up for a CoinGate account at https://coingate.com for production and https://sandbox.coingate.com for testing (sandbox).\n\nPlease note, that for Sandbox you must generate separate API credentials on https://sandbox.coingate.com. API credentials generated on https://coingate.com will not work for Sandbox mode.\n\nUsage of Client looks like:\n```py\n>>> from coingate import CoinGate\n>>> client = CoinGate("YOUR_API_TOKEN")\n```\n\nIn order, to use sandbox mode, you need to pass second parameter as `True`\n```py\n>>> from coingate import CoinGate\n>>> client = CoinGate("YOUR_API_TOKEN", True)\n```\n\nIf you planning to use only Public API endpoints, you can initialize client without parameters\n```py\n>>> from coingate import CoinGate\n>>> client = CoinGate()\n```\nFull documentation of the CoinGate API can be found [here](https://developer.coingate.com/reference/api-overview)\n\n## Payment Gateway API\n\n### Create Order\nCreate order at CoinGate and redirect shopper to invoice (`payment_url`). This is private API endpoint and requires authentication.\n\n```py\n>>> client.order.create(Decimal(\'10\'), \'EUR\', \'EUR\')\nNewOrder(\n    id=1,\n    status=\'new\',\n    do_not_convert=False,\n    price_currency=\'EUR\',\n    price_ammount=Decimal(\'10\'),\n    lightning_network=False,\n    receive_currency=\'EUR\',\n    receive_amount=Decimal(\'10\'),\n    created_at=datetime(2022, 10, 10, 12, 23, 22),\n    order_id=\'\',\n    payment_url=\'\',\n    underpaid_amount=Decimal(\'0.000543\'),\n    overpaid_amount=Decimal(\'0.000543\'),\n    is_refundable=True,\n    token=\'token\'\n)\n```\n\n### Checkout\nPlacing created order with pre-selected payment currency (BTC, LTC, ETH, etc). Display `payment_address` and `pay_amount` for shopper or redirect to `payment_url`. Can be used to white-label invoices. This is private API endpoint and requires authentication.\n\n```py\n>>> client.order.checkout(123, \'EUR\')\nCheckout(\n    pay_currency=\'EUR\',\n    pay_amount=Decimal(\'10\'),\n    expire_at=datetime(2022, 10, 10, 12, 23, 22),\n    payment_address=\'addy\',\n    platform=Platform(id=1, title=\'title\', id_name=\'id_name\')\n)\n```\n\n### Get Order\nRetrieves a specific order. This is private API endpoint and requires authentication.\n\n```py\n>>> client.order.get(123)\nOrder(\n    id=123,\n    status=\'new\',\n    do_not_convert=False,\n    price_currency=\'EUR\',\n    price_ammount=Decimal(\'10\'),\n    lightning_network=False,\n    receive_currency=\'EUR\',\n    receive_amount=Decimal(\'10\'),\n    created_at=datetime(2022, 10, 10, 12, 23, 22),\n    order_id=\'\',\n    payment_url=\'\',\n    underpaid_amount=Decimal(\'0.000543\'),\n    overpaid_amount=Decimal(\'0.000543\'),\n    is_refundable=True,\n    orderable_type=\'order\',\n    orderable_id=1,\n    payment_address=\'addy\'\n)\n```\n\n### List Orders\nRetrieving information of all placed orders. This is private API endpoint and requires authentication.\n\n```py\n>>> client.order.get_all()\nPaginatedOrders(\n    current_page=1,\n    per_page=100,\n    total_orders=500,\n    total_pages=5,\n    orders=[\n        Order(\n            id=123,\n            status=\'new\',\n            do_not_convert=False,\n            price_currency=\'EUR\',\n            price_ammount=Decimal(\'10\'),\n            lightning_network=False,\n            receive_currency=\'EUR\',\n            receive_amount=Decimal(\'10\'),\n            created_at=datetime(2022, 10, 10, 12, 23, 22),\n            order_id=\'\',\n            payment_url=\'\',\n            underpaid_amount=Decimal(\'0.000543\'),\n            overpaid_amount=Decimal(\'0.000543\'),\n            is_refundable=True,\n            orderable_type=\'order\',\n            orderable_id=1,\n            payment_address=\'addy\'\n        )\n    ]\n)\n```\n\n## Refunds API\n\n### Create Order Refund\nCreates a refund for an order. This is private API endpoint and requires authentication.\n\n```py\n>>> client.refund.create_order_refund(1, Decimal(\'10\'), \'addy\', 1, 1, \'refund\', \'email@email.com\', \'id\')\nRefund(\n    id=1,\n    request_amount=Decimal(\'10\'),\n    refund_amount=Decimal(\'10\'),\n    address=\'addy\',\n    status=\'new\',\n    memo=None,\n    created_at=datetime(2022, 10, 10, 12, 23, 22),\n    order=RefundOrder(id=1),\n    transactions=[\'tx_id\'],\n    ledger_account=RefundLedgerAccount(id=1, currency=Currency(id=1, title=\'Bitcoin\', symbol=\'BTC\'))\n)\n```\n\n### Get Order Refund\nRetrieves a specific refund for an order. This is private API endpoint and requires authentication.\n\n```py\n>>> client.refund.get_order_refund(1, 1)\nRefund(\n    id=1,\n    request_amount=Decimal(\'10\'),\n    refund_amount=Decimal(\'10\'),\n    address=\'addy\',\n    status=\'new\',\n    memo=None,\n    created_at=datetime(2022, 10, 10, 12, 23, 22),\n    order=RefundOrder(id=1),\n    transactions=[\'tx_id\'],\n    ledger_account=RefundLedgerAccount(id=1, currency=Currency(id=1, title=\'Bitcoin\', symbol=\'BTC\'))\n)\n```\n\n### Get Order Refunds\nRetrieves all refunds for an order. This is private API endpoint and requires authentication.\n\n```py\n>>> client.refund.get_order_refunds(1)\nPaginatedRefunds(\n    current_page=1,\n    per_page=100,\n    total_refunds=500,\n    total_pages=5,\n    refunds=[\n        PaginatedRefundsRefund(\n            id=1,\n            request_amount=Decimal(\'10\'),\n            refund_amount=Decimal(\'10\'),\n            crypto_address=\'addy\',\n            crypto_address_memo=None,\n            status=\'new\',\n            order=RefundOrder(id=1),\n            refund_currency=RefundCurrency(\n                id=1,\n                title=\'Bitcoin\',\n                symbol=\'BTC\',\n                platform=RefundCurrencyPlatform(id=1, title=\'platform\')\n            )\n        )\n    ]\n)\n```\n\n### Get Refunds\nRetrieves all refunds. This is private API endpoint and requires authentication.\n\n```py\n>>> client.refund.get_refunds()\nPaginatedRefunds(\n    current_page=1,\n    per_page=100,\n    total_refunds=500,\n    total_pages=5,\n    refunds=[\n        PaginatedRefundsRefund(\n            id=1,\n            request_amount=Decimal(\'10\'),\n            refund_amount=Decimal(\'10\'),\n            crypto_address=\'addy\',\n            crypto_address_memo=None,\n            status=\'new\',\n            order=RefundOrder(id=1),\n            refund_currency=RefundCurrency(\n                id=1,\n                title=\'Bitcoin\',\n                symbol=\'BTC\',\n                platform=RefundCurrencyPlatform(id=1, title=\'platform\')\n            )\n        )\n    ]\n)\n```\n\n## Ledger API\n\n### Get Account\nRetrieves a specific ledger account. This is private API endpoint and requires authentication.\n\n```py\n>>> client.ledger.get(1)\nLedgerAccount(\n    id="01GBPW7M2G5XQK3BE50XQRA36E",\n    balance=Decimal(\'10\'),\n    status=\'active\',\n    currency=Currency(\n        id=1,\n        title=\'Bitcoin\',\n        symbol=\'BTC\'\n    )\n)\n```\n\n### List Accounts\nRetrieves all ledger accounts. This is private API endpoint and requires authentication.\n\n```py\n>>> client.ledger.get_all()\nPaginatedLedgerAccounts(\n    current_page=1,\n    per_page=100,\n    total_accounts=2,\n    total_pages=100,\n    accounts=[\n        LedgerAccount(\n            id="01GBPW7M2G5XQK3BE50XQRA36E",\n            balance=Decimal(\'10\'),\n            status=\'active\',\n            currency=Currency(\n                id=1,\n                title=\'Bitcoin\',\n                symbol=\'BTC\'\n            )\n        ),\n        LedgerAccount(\n            id="01GBPW7M2G5XQK3BE50XQRA36E",\n            balance=Decimal(\'11\'),\n            status=\'active\',\n            currency=Currency(\n                id=2,\n                title=\'Bitcoin\',\n                symbol=\'BTC\'\n            )\n        )\n    ]\n)\n```\n\n## Withdrawals API\n\n### Get Withdrawals\nRetrieves all withdrawals. This is private API endpoint and requires authentication.\n\n```py\n>>> client.withdrawal.get_all()\nPaginatedWithdrawals(\n    current_page=1,\n    per_page=100,\n    total_withdrawals=1000,\n    total_pages=10,\n    withdrawals=[\n        Withdrawal(\n            id=1,\n            status=\'active\',\n            created_at=datetime(\'2022/10/10\'),\n            completed_at=None,\n            currency=Currency(\n                id=1,\n                title=\'Bitcoin\',\n                symbol=\'BTC\'\n                payout_setting={\n                    \'id\': 1,\n                    \'title\': \'somewhere\',\n                    \'address\': \'addy\',\n                    \'currency\': {\n                        \'id\': 1,\n                        \'title\': \'Bitcoin\',\n                        \'symbol\': \'BTC\'\n                    }\n                }\n                platform=None\n            )\n        )\n    ]\n)\n```\n\n### Get Withdrawal\nRetrieves withdrawal by ID. This is private API endpoint and requires authentication.\n\n```py\n>>> client.withdrawal.get(1)\nWithdrawal(\n    id=1,\n    status=\'active\',\n    created_at=datetime(\'2022/10/10\'),\n    completed_at=None,\n    currency=Currency(\n        id=1,\n        title=\'Bitcoin\',\n        symbol=\'BTC\'\n        payout_setting={\n            \'id\': 1,\n            \'title\': \'somewhere\',\n            \'address\': \'addy\',\n            \'currency\': {\n                \'id\': 1,\n                \'title\': \'Bitcoin\',\n                \'symbol\': \'BTC\'\n            }\n        }\n        platform=None\n    )\n)\n```\n\n## Public API\n\n### Get Exchange Rate\nCurrent exchange rate for any two currencies, fiat or crypto. This endpoint is public, authentication is not required.\n\n```py\n# Get exchange rate for Merchants\n>>> client.public.get_exchange_rate_for_merchant(from_currency="EUR", to_currency="BTC")\nDecimal(\'0.0000472\')\n\n# Get exchange rate for Traders\n>>> client.public.get_exchange_rate_for_trader(kind="buy", from_currency="EUR", to_currency="ETH")\nDecimal(\'0.00063213\')\n```\n\n### List Exchange Rates\nCurrent CoinGate exchange rates for Merchants and Traders. This endpoint is public, authentication is not required.\n\n```py\n# Get all exchange rates for Merchants and Traders\n>>> client.public.get_all_exchange_rates()\nExchangeRates(\n    merchant={\n        \'BTC\': {\n            \'EUR\': Decimal(\'7449.99\'),\n            \'USD\': Decimal(\'9139.34\'),\n            \'ETH\': Decimal(\'13.18044023\')\n        },\n        \'EUR\': {\n            \'BTC\': \'0.00013351\',\n            \'USD\': \'1.2317\',\n            \'ETH\': \'0.00175954\'\n        }\n    }\n    trader=ExchangeTrader(\n        buy={\n            \'BTC\': {\n                \'EUR\': Decimal(\'7449.99\'),\n                \'USD\': Decimal(\'9139.34\'),\n                \'ETH\': Decimal(\'13.18044023\')\n            },\n            \'EUR\': {\n                \'BTC\': \'0.00013351\',\n                \'USD\': \'1.2317\',\n                \'ETH\': \'0.00175954\'\n            }\n        }\n        sell={\n            \'BTC\': {\n                \'EUR\': Decimal(\'7449.99\'),\n                \'USD\': Decimal(\'9139.34\'),\n                \'ETH\': Decimal(\'13.18044023\')\n            },\n            \'EUR\': {\n                \'BTC\': \'0.00013351\',\n                \'USD\': \'1.2317\',\n                \'ETH\': \'0.00175954\'\n            }\n        }\n    )\n)\n\n# Get all exchange rates for Merchants\n>>> client.public.get_merchant_exchange_rates()\n{\n    \'BTC\': {\n        \'EUR\': Decimal(\'7449.99\'),\n        \'USD\': Decimal(\'9139.34\'),\n        \'ETH\': Decimal(\'13.18044023\')\n    },\n    \'EUR\': {\n        \'BTC\': \'0.00013351\',\n        \'USD\': \'1.2317\',\n        \'ETH\': \'0.00175954\'\n    }\n}\n\n# Get all exchange rates for Traders\n>>> client.public.get_trader_exchange_rates()\nExchangeTrader(\n    buy={\n        \'BTC\': {\n            \'EUR\': Decimal(\'7449.99\'),\n            \'USD\': Decimal(\'9139.34\'),\n            \'ETH\': Decimal(\'13.18044023\')\n        },\n        \'EUR\': {\n            \'BTC\': \'0.00013351\',\n            \'USD\': \'1.2317\',\n            \'ETH\': \'0.00175954\'\n        }\n    }\n    sell={\n        \'BTC\': {\n            \'EUR\': Decimal(\'7449.99\'),\n            \'USD\': Decimal(\'9139.34\'),\n            \'ETH\': Decimal(\'13.18044023\')\n        },\n        \'EUR\': {\n            \'BTC\': \'0.00013351\',\n            \'USD\': \'1.2317\',\n            \'ETH\': \'0.00175954\'\n        }\n    }\n)\n```\n\n### Ping\nA health check endpoint for CoinGate API. This endpoint is public, authentication is not required.\n\n```py\n>>> client.public.ping()\nPing(ping=\'pong\', time=\'2017-12-13T19:07:18+00:00\')\n```\n\n### IP Addresses\nGet IP addresses of CoinGate servers\n\n```py\n>>> client.public.get_ip_addresses(separator="|")\n\'52.28.22.118|35.156.68.160\'\n```\n\n### Get Currencies\nRetrieves all currencies.\n\n```py\n>>> client.public.get_currencies(native=True, enabled=True, merchant_pay=True, merchant_receive=True, kind="crypto")\n[\n    PublicCurrency(id=1,\n        title=\'Bitcoin\',\n        kind=\'crypto\',\n        native=True,\n        disabled=False,\n        disabled_message=None,\n        merchant=CurrencyMerchant(price=True, pay=True, receive=True),\n        platforms=[\n            CurrencyPlatform(id=8, id_name=\'bitcoin\', title=\'Bitcoin\' enabled=True)\n        ]\n    ),\n    PublicCurrency(\n        id=2,\n        title=\'Euro\',\n        kind=\'fiat\',\n        symbol=\'EUR\',\n        native=True,\n        disabled=False,\n        disabled_message=None,\n        merchant=CurrencyMerchant(price=True, pay=False, receive=True),\n        platforms=None\n    ),\n    PublicCurrency(\n        id=3,\n        title=\'United States dollar\',\n        kind=\'fiat\',\n        symbol=\'USD\',\n        native=True,\n        disabled=False,\n        disabled_message=None,\n        merchant=CurrencyMerchant(price=True, pay=False, receive=True),\n        platforms=None\n    ),\n    PublicCurrency(\n        id=4,\n        title=\'British Pound\',\n        kind=\'fiat\',\n        symbol=\'GBP\',\n        native=True,\n        disabled=False,\n        disabled_message=None,\n        merchant=CurrencyMerchant(price=True, pay=False, receive=True),\n        platforms=None\n    ),\n    PublicCurrency(\n        id=5,\n        title=\'Ethereum\',\n        kind=\'crypto\',\n        symbol=\'ETH\',\n        native=True,\n        disabled=False,\n        disabled_message=None,\n        merchant=CurrencyMerchant(price=True, pay=True, receive=True),\n        platforms=[\n            CurrencyPlatform(id=2, id_name=\'binance_chain\', title=\'Binance Chain (BEP2)\', enabled=True),\n            CurrencyPlatform(id=7, id_name=\'ethereum\', title=\'Ethereum\', enabled=True)\n        ]\n    )\n]\n```\n\n### Platforms\nGet all platforms\n\n```py\n>>> client.public.get_platforms(enabled=True)\n[\n    PublicPlatform(\n        id=1,\n        title=\'Ethereum (ERC20)\',\n        id_name=\'ethereum\',\n        disabled=False,\n        disabled_message=None,\n        currencies=[\n            PlatformCurrency(id=50, title=\'Ethereum\', symbol=\'ETH\', enabled=True),\n            PlatformCurrency(id=61, title=\'DAI\', symbol=\'DAI\', enabled=True),\n            PlatformCurrency(id=71, title=\'Basic Attention Token\', symbol=\'BAT\', enabled=True)\n        ]\n    ),\n    PublicPlatform(\n        id=2,\n        title=\'Binance Chain (BEP2)\',\n        id_name=\'binance_chain\',\n        disabled=False,\n        disabled_message=None,\n        currencies=[\n            PlatformCurrency(id=50, title=\'Ethereum\', symbol=\'ETH\', enabled=True)\n            PlatformCurrency(id=91, title=\'Binance Coin\', symbol=\'BNB\', enabled=True)\n        ]\n    )\n]\n```\n\n## Custom Request Timeout\nTo modify request timeout time, you need to call method which will change it.\n\n```py\n>>> from coingate import CoinGate\n>>> client = CoinGate("YOUR_API_TOKEN", True)\n>>> client.set_timeout(10)\n```\n\n## Setting API Key after initialization\nIf you decided to initialize client without API Key and you need to do it later, you can call method which will update auth headers.\n\n```py\n>>> from coingate import Coingate\n>>> client = CoinGate()\n>>> client.public.ping()\nPing(ping=\'pong\', time=\'2017-12-13T19:07:18+00:00\')\n>>> client.set_api_key(\'YOUR_API_KEY\')\n```\n\n## Attention plugin developers\nAre you writing a plugin that integrates CoinGate and embeds our library? Then please use the setAppInfo function to identify your plugin. For example:\n\n```py\n>>> from coingate import Coingate\n>>> coingate.set_app_info("MyAwesomePlugin", "1.0.0")\n```\n\nThe method should be called once, before any request is sent to the API. The second parameter is optional.\n',
    'author': 'CoinGate',
    'author_email': 'info@coingate.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/coingate/coingate-python',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
