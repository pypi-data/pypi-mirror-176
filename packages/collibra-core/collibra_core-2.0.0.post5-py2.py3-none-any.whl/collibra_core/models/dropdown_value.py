# coding: utf-8

"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from collibra_core.configuration import Configuration


class DropdownValue(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'parents': 'list[str]',
        'id_as_string': 'str',
        'id': 'str',
        'text': 'str'
    }

    attribute_map = {
        'parents': 'parents',
        'id_as_string': 'idAsString',
        'id': 'id',
        'text': 'text'
    }

    def __init__(self, parents=None, id_as_string=None, id=None, text=None, local_vars_configuration=None):  # noqa: E501
        """DropdownValue - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._parents = None
        self._id_as_string = None
        self._id = None
        self._text = None
        self.discriminator = None

        if parents is not None:
            self.parents = parents
        if id_as_string is not None:
            self.id_as_string = id_as_string
        if id is not None:
            self.id = id
        if text is not None:
            self.text = text

    @property
    def parents(self):
        """Gets the parents of this DropdownValue.  # noqa: E501

        The list of parents.  # noqa: E501

        :return: The parents of this DropdownValue.  # noqa: E501
        :rtype: list[str]
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """Sets the parents of this DropdownValue.

        The list of parents.  # noqa: E501

        :param parents: The parents of this DropdownValue.  # noqa: E501
        :type: list[str]
        """

        self._parents = parents

    @property
    def id_as_string(self):
        """Gets the id_as_string of this DropdownValue.  # noqa: E501

        Returns the id of the dropdown value.  # noqa: E501

        :return: The id_as_string of this DropdownValue.  # noqa: E501
        :rtype: str
        """
        return self._id_as_string

    @id_as_string.setter
    def id_as_string(self, id_as_string):
        """Sets the id_as_string of this DropdownValue.

        Returns the id of the dropdown value.  # noqa: E501

        :param id_as_string: The id_as_string of this DropdownValue.  # noqa: E501
        :type: str
        """

        self._id_as_string = id_as_string

    @property
    def id(self):
        """Gets the id of this DropdownValue.  # noqa: E501

        The id of the dropdown value if it is possible to convert it to UUID.  # noqa: E501

        :return: The id of this DropdownValue.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DropdownValue.

        The id of the dropdown value if it is possible to convert it to UUID.  # noqa: E501

        :param id: The id of this DropdownValue.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def text(self):
        """Gets the text of this DropdownValue.  # noqa: E501

        The text.  # noqa: E501

        :return: The text of this DropdownValue.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this DropdownValue.

        The text.  # noqa: E501

        :param text: The text of this DropdownValue.  # noqa: E501
        :type: str
        """

        self._text = text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DropdownValue):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DropdownValue):
            return True

        return self.to_dict() != other.to_dict()
