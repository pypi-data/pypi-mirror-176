// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/status.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fstatus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fstatus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fstatus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcore_2fprotobuf_2fstatus_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fstatus_2eproto;
namespace tensorflow {
class DerivedStatus;
struct DerivedStatusDefaultTypeInternal;
extern DerivedStatusDefaultTypeInternal _DerivedStatus_default_instance_;
class StackTracePayload;
struct StackTracePayloadDefaultTypeInternal;
extern StackTracePayloadDefaultTypeInternal _StackTracePayload_default_instance_;
class StackTracePayload_StackFrame;
struct StackTracePayload_StackFrameDefaultTypeInternal;
extern StackTracePayload_StackFrameDefaultTypeInternal _StackTracePayload_StackFrame_default_instance_;
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::DerivedStatus* Arena::CreateMaybeMessage<::tensorflow::DerivedStatus>(Arena*);
template<> ::tensorflow::StackTracePayload* Arena::CreateMaybeMessage<::tensorflow::StackTracePayload>(Arena*);
template<> ::tensorflow::StackTracePayload_StackFrame* Arena::CreateMaybeMessage<::tensorflow::StackTracePayload_StackFrame>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {

// ===================================================================

class DerivedStatus final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:tensorflow.DerivedStatus) */ {
 public:
  inline DerivedStatus() : DerivedStatus(nullptr) {}
  explicit constexpr DerivedStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DerivedStatus(const DerivedStatus& from);
  DerivedStatus(DerivedStatus&& from) noexcept
    : DerivedStatus() {
    *this = ::std::move(from);
  }

  inline DerivedStatus& operator=(const DerivedStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline DerivedStatus& operator=(DerivedStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DerivedStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const DerivedStatus* internal_default_instance() {
    return reinterpret_cast<const DerivedStatus*>(
               &_DerivedStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DerivedStatus& a, DerivedStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(DerivedStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DerivedStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DerivedStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DerivedStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DerivedStatus& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DerivedStatus& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.DerivedStatus";
  }
  protected:
  explicit DerivedStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tensorflow.DerivedStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fstatus_2eproto;
};
// -------------------------------------------------------------------

class StackTracePayload_StackFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.StackTracePayload.StackFrame) */ {
 public:
  inline StackTracePayload_StackFrame() : StackTracePayload_StackFrame(nullptr) {}
  ~StackTracePayload_StackFrame() override;
  explicit constexpr StackTracePayload_StackFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StackTracePayload_StackFrame(const StackTracePayload_StackFrame& from);
  StackTracePayload_StackFrame(StackTracePayload_StackFrame&& from) noexcept
    : StackTracePayload_StackFrame() {
    *this = ::std::move(from);
  }

  inline StackTracePayload_StackFrame& operator=(const StackTracePayload_StackFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline StackTracePayload_StackFrame& operator=(StackTracePayload_StackFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StackTracePayload_StackFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const StackTracePayload_StackFrame* internal_default_instance() {
    return reinterpret_cast<const StackTracePayload_StackFrame*>(
               &_StackTracePayload_StackFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StackTracePayload_StackFrame& a, StackTracePayload_StackFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(StackTracePayload_StackFrame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StackTracePayload_StackFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StackTracePayload_StackFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StackTracePayload_StackFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StackTracePayload_StackFrame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StackTracePayload_StackFrame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StackTracePayload_StackFrame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.StackTracePayload.StackFrame";
  }
  protected:
  explicit StackTracePayload_StackFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
    kFunctionNameFieldNumber = 3,
    kLineNumberFieldNumber = 2,
  };
  // string file_name = 1;
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // string function_name = 3;
  void clear_function_name();
  const std::string& function_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_function_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_function_name();
  PROTOBUF_NODISCARD std::string* release_function_name();
  void set_allocated_function_name(std::string* function_name);
  private:
  const std::string& _internal_function_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_function_name(const std::string& value);
  std::string* _internal_mutable_function_name();
  public:

  // int32 line_number = 2;
  void clear_line_number();
  int32_t line_number() const;
  void set_line_number(int32_t value);
  private:
  int32_t _internal_line_number() const;
  void _internal_set_line_number(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.StackTracePayload.StackFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_name_;
  int32_t line_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fstatus_2eproto;
};
// -------------------------------------------------------------------

class StackTracePayload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.StackTracePayload) */ {
 public:
  inline StackTracePayload() : StackTracePayload(nullptr) {}
  ~StackTracePayload() override;
  explicit constexpr StackTracePayload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StackTracePayload(const StackTracePayload& from);
  StackTracePayload(StackTracePayload&& from) noexcept
    : StackTracePayload() {
    *this = ::std::move(from);
  }

  inline StackTracePayload& operator=(const StackTracePayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline StackTracePayload& operator=(StackTracePayload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StackTracePayload& default_instance() {
    return *internal_default_instance();
  }
  static inline const StackTracePayload* internal_default_instance() {
    return reinterpret_cast<const StackTracePayload*>(
               &_StackTracePayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StackTracePayload& a, StackTracePayload& b) {
    a.Swap(&b);
  }
  inline void Swap(StackTracePayload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StackTracePayload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StackTracePayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StackTracePayload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StackTracePayload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StackTracePayload& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StackTracePayload* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.StackTracePayload";
  }
  protected:
  explicit StackTracePayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StackTracePayload_StackFrame StackFrame;

  // accessors -------------------------------------------------------

  enum : int {
    kStackFramesFieldNumber = 1,
  };
  // repeated .tensorflow.StackTracePayload.StackFrame stack_frames = 1;
  int stack_frames_size() const;
  private:
  int _internal_stack_frames_size() const;
  public:
  void clear_stack_frames();
  ::tensorflow::StackTracePayload_StackFrame* mutable_stack_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::StackTracePayload_StackFrame >*
      mutable_stack_frames();
  private:
  const ::tensorflow::StackTracePayload_StackFrame& _internal_stack_frames(int index) const;
  ::tensorflow::StackTracePayload_StackFrame* _internal_add_stack_frames();
  public:
  const ::tensorflow::StackTracePayload_StackFrame& stack_frames(int index) const;
  ::tensorflow::StackTracePayload_StackFrame* add_stack_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::StackTracePayload_StackFrame >&
      stack_frames() const;

  // @@protoc_insertion_point(class_scope:tensorflow.StackTracePayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::StackTracePayload_StackFrame > stack_frames_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2fstatus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DerivedStatus

// -------------------------------------------------------------------

// StackTracePayload_StackFrame

// string file_name = 1;
inline void StackTracePayload_StackFrame::clear_file_name() {
  file_name_.ClearToEmpty();
}
inline const std::string& StackTracePayload_StackFrame::file_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.StackTracePayload.StackFrame.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StackTracePayload_StackFrame::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.StackTracePayload.StackFrame.file_name)
}
inline std::string* StackTracePayload_StackFrame::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.StackTracePayload.StackFrame.file_name)
  return _s;
}
inline const std::string& StackTracePayload_StackFrame::_internal_file_name() const {
  return file_name_.Get();
}
inline void StackTracePayload_StackFrame::_internal_set_file_name(const std::string& value) {
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StackTracePayload_StackFrame::_internal_mutable_file_name() {
  
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StackTracePayload_StackFrame::release_file_name() {
  // @@protoc_insertion_point(field_release:tensorflow.StackTracePayload.StackFrame.file_name)
  return file_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StackTracePayload_StackFrame::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StackTracePayload.StackFrame.file_name)
}

// int32 line_number = 2;
inline void StackTracePayload_StackFrame::clear_line_number() {
  line_number_ = 0;
}
inline int32_t StackTracePayload_StackFrame::_internal_line_number() const {
  return line_number_;
}
inline int32_t StackTracePayload_StackFrame::line_number() const {
  // @@protoc_insertion_point(field_get:tensorflow.StackTracePayload.StackFrame.line_number)
  return _internal_line_number();
}
inline void StackTracePayload_StackFrame::_internal_set_line_number(int32_t value) {
  
  line_number_ = value;
}
inline void StackTracePayload_StackFrame::set_line_number(int32_t value) {
  _internal_set_line_number(value);
  // @@protoc_insertion_point(field_set:tensorflow.StackTracePayload.StackFrame.line_number)
}

// string function_name = 3;
inline void StackTracePayload_StackFrame::clear_function_name() {
  function_name_.ClearToEmpty();
}
inline const std::string& StackTracePayload_StackFrame::function_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.StackTracePayload.StackFrame.function_name)
  return _internal_function_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StackTracePayload_StackFrame::set_function_name(ArgT0&& arg0, ArgT... args) {
 
 function_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.StackTracePayload.StackFrame.function_name)
}
inline std::string* StackTracePayload_StackFrame::mutable_function_name() {
  std::string* _s = _internal_mutable_function_name();
  // @@protoc_insertion_point(field_mutable:tensorflow.StackTracePayload.StackFrame.function_name)
  return _s;
}
inline const std::string& StackTracePayload_StackFrame::_internal_function_name() const {
  return function_name_.Get();
}
inline void StackTracePayload_StackFrame::_internal_set_function_name(const std::string& value) {
  
  function_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StackTracePayload_StackFrame::_internal_mutable_function_name() {
  
  return function_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StackTracePayload_StackFrame::release_function_name() {
  // @@protoc_insertion_point(field_release:tensorflow.StackTracePayload.StackFrame.function_name)
  return function_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StackTracePayload_StackFrame::set_allocated_function_name(std::string* function_name) {
  if (function_name != nullptr) {
    
  } else {
    
  }
  function_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), function_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (function_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    function_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StackTracePayload.StackFrame.function_name)
}

// -------------------------------------------------------------------

// StackTracePayload

// repeated .tensorflow.StackTracePayload.StackFrame stack_frames = 1;
inline int StackTracePayload::_internal_stack_frames_size() const {
  return stack_frames_.size();
}
inline int StackTracePayload::stack_frames_size() const {
  return _internal_stack_frames_size();
}
inline void StackTracePayload::clear_stack_frames() {
  stack_frames_.Clear();
}
inline ::tensorflow::StackTracePayload_StackFrame* StackTracePayload::mutable_stack_frames(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.StackTracePayload.stack_frames)
  return stack_frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::StackTracePayload_StackFrame >*
StackTracePayload::mutable_stack_frames() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.StackTracePayload.stack_frames)
  return &stack_frames_;
}
inline const ::tensorflow::StackTracePayload_StackFrame& StackTracePayload::_internal_stack_frames(int index) const {
  return stack_frames_.Get(index);
}
inline const ::tensorflow::StackTracePayload_StackFrame& StackTracePayload::stack_frames(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.StackTracePayload.stack_frames)
  return _internal_stack_frames(index);
}
inline ::tensorflow::StackTracePayload_StackFrame* StackTracePayload::_internal_add_stack_frames() {
  return stack_frames_.Add();
}
inline ::tensorflow::StackTracePayload_StackFrame* StackTracePayload::add_stack_frames() {
  ::tensorflow::StackTracePayload_StackFrame* _add = _internal_add_stack_frames();
  // @@protoc_insertion_point(field_add:tensorflow.StackTracePayload.stack_frames)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::StackTracePayload_StackFrame >&
StackTracePayload::stack_frames() const {
  // @@protoc_insertion_point(field_list:tensorflow.StackTracePayload.stack_frames)
  return stack_frames_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2fstatus_2eproto
