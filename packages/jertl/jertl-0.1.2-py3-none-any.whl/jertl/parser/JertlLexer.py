# Generated from Jertl.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,20,192,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,
        5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,
        10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,5,
        12,98,8,12,10,12,12,12,101,9,12,1,12,1,12,1,13,1,13,1,14,1,14,1,
        14,1,15,1,15,5,15,112,8,15,10,15,12,15,115,9,15,1,16,3,16,118,8,
        16,1,17,1,17,3,17,122,8,17,1,18,1,18,1,18,3,18,127,8,18,1,19,1,19,
        1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,3,22,140,8,22,1,22,
        1,22,1,23,3,23,145,8,23,1,23,1,23,1,23,4,23,150,8,23,11,23,12,23,
        151,3,23,154,8,23,1,23,3,23,157,8,23,1,24,1,24,1,24,5,24,162,8,24,
        10,24,12,24,165,9,24,3,24,167,8,24,1,25,1,25,3,25,171,8,25,1,25,
        1,25,1,26,4,26,176,8,26,11,26,12,26,177,1,26,1,26,1,27,1,27,1,27,
        1,27,5,27,186,8,27,10,27,12,27,189,9,27,1,27,1,27,0,0,28,1,1,3,2,
        5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,
        15,31,16,33,0,35,0,37,0,39,0,41,0,43,0,45,17,47,18,49,0,51,0,53,
        19,55,20,1,0,10,3,0,65,90,95,95,97,122,8,0,34,34,47,47,92,92,98,
        98,102,102,110,110,114,114,116,116,3,0,48,57,65,70,97,102,3,0,0,
        31,34,34,92,92,1,0,48,57,1,0,49,57,2,0,69,69,101,101,2,0,43,43,45,
        45,3,0,9,10,13,13,32,32,2,0,10,10,13,13,198,0,1,1,0,0,0,0,3,1,0,
        0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
        0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
        0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,45,1,0,0,
        0,0,47,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,1,57,1,0,0,0,3,59,1,0,0,
        0,5,61,1,0,0,0,7,63,1,0,0,0,9,65,1,0,0,0,11,68,1,0,0,0,13,70,1,0,
        0,0,15,72,1,0,0,0,17,74,1,0,0,0,19,78,1,0,0,0,21,83,1,0,0,0,23,88,
        1,0,0,0,25,94,1,0,0,0,27,104,1,0,0,0,29,106,1,0,0,0,31,109,1,0,0,
        0,33,117,1,0,0,0,35,121,1,0,0,0,37,123,1,0,0,0,39,128,1,0,0,0,41,
        134,1,0,0,0,43,136,1,0,0,0,45,139,1,0,0,0,47,144,1,0,0,0,49,166,
        1,0,0,0,51,168,1,0,0,0,53,175,1,0,0,0,55,181,1,0,0,0,57,58,5,123,
        0,0,58,2,1,0,0,0,59,60,5,44,0,0,60,4,1,0,0,0,61,62,5,125,0,0,62,
        6,1,0,0,0,63,64,5,58,0,0,64,8,1,0,0,0,65,66,5,42,0,0,66,67,5,42,
        0,0,67,10,1,0,0,0,68,69,5,91,0,0,69,12,1,0,0,0,70,71,5,93,0,0,71,
        14,1,0,0,0,72,73,5,42,0,0,73,16,1,0,0,0,74,75,5,45,0,0,75,76,5,45,
        0,0,76,77,5,62,0,0,77,18,1,0,0,0,78,79,5,110,0,0,79,80,5,117,0,0,
        80,81,5,108,0,0,81,82,5,108,0,0,82,20,1,0,0,0,83,84,5,116,0,0,84,
        85,5,114,0,0,85,86,5,117,0,0,86,87,5,101,0,0,87,22,1,0,0,0,88,89,
        5,102,0,0,89,90,5,97,0,0,90,91,5,108,0,0,91,92,5,115,0,0,92,93,5,
        101,0,0,93,24,1,0,0,0,94,99,5,34,0,0,95,98,3,37,18,0,96,98,3,43,
        21,0,97,95,1,0,0,0,97,96,1,0,0,0,98,101,1,0,0,0,99,97,1,0,0,0,99,
        100,1,0,0,0,100,102,1,0,0,0,101,99,1,0,0,0,102,103,5,34,0,0,103,
        26,1,0,0,0,104,105,5,126,0,0,105,28,1,0,0,0,106,107,5,58,0,0,107,
        108,5,61,0,0,108,30,1,0,0,0,109,113,3,33,16,0,110,112,3,35,17,0,
        111,110,1,0,0,0,112,115,1,0,0,0,113,111,1,0,0,0,113,114,1,0,0,0,
        114,32,1,0,0,0,115,113,1,0,0,0,116,118,7,0,0,0,117,116,1,0,0,0,118,
        34,1,0,0,0,119,122,3,33,16,0,120,122,2,48,57,0,121,119,1,0,0,0,121,
        120,1,0,0,0,122,36,1,0,0,0,123,126,5,92,0,0,124,127,7,1,0,0,125,
        127,3,39,19,0,126,124,1,0,0,0,126,125,1,0,0,0,127,38,1,0,0,0,128,
        129,5,117,0,0,129,130,3,41,20,0,130,131,3,41,20,0,131,132,3,41,20,
        0,132,133,3,41,20,0,133,40,1,0,0,0,134,135,7,2,0,0,135,42,1,0,0,
        0,136,137,8,3,0,0,137,44,1,0,0,0,138,140,5,45,0,0,139,138,1,0,0,
        0,139,140,1,0,0,0,140,141,1,0,0,0,141,142,3,49,24,0,142,46,1,0,0,
        0,143,145,5,45,0,0,144,143,1,0,0,0,144,145,1,0,0,0,145,146,1,0,0,
        0,146,153,3,49,24,0,147,149,5,46,0,0,148,150,7,4,0,0,149,148,1,0,
        0,0,150,151,1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,154,1,0,
        0,0,153,147,1,0,0,0,153,154,1,0,0,0,154,156,1,0,0,0,155,157,3,51,
        25,0,156,155,1,0,0,0,156,157,1,0,0,0,157,48,1,0,0,0,158,167,5,48,
        0,0,159,163,7,5,0,0,160,162,7,4,0,0,161,160,1,0,0,0,162,165,1,0,
        0,0,163,161,1,0,0,0,163,164,1,0,0,0,164,167,1,0,0,0,165,163,1,0,
        0,0,166,158,1,0,0,0,166,159,1,0,0,0,167,50,1,0,0,0,168,170,7,6,0,
        0,169,171,7,7,0,0,170,169,1,0,0,0,170,171,1,0,0,0,171,172,1,0,0,
        0,172,173,3,49,24,0,173,52,1,0,0,0,174,176,7,8,0,0,175,174,1,0,0,
        0,176,177,1,0,0,0,177,175,1,0,0,0,177,178,1,0,0,0,178,179,1,0,0,
        0,179,180,6,26,0,0,180,54,1,0,0,0,181,182,5,47,0,0,182,183,5,47,
        0,0,183,187,1,0,0,0,184,186,8,9,0,0,185,184,1,0,0,0,186,189,1,0,
        0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,190,1,0,0,0,189,187,1,0,
        0,0,190,191,6,27,0,0,191,56,1,0,0,0,17,0,97,99,113,117,121,126,139,
        144,151,153,156,163,166,170,177,187,1,6,0,0
    ]

class JertlLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    IMPLIES = 9
    NULL = 10
    TRUE = 11
    FALSE = 12
    STRING = 13
    MATCHES = 14
    ASSIGNED = 15
    IDENTIFIER = 16
    INTEGER = 17
    FLOAT = 18
    WS = 19
    LINE_COMMENT = 20

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "','", "'}'", "':'", "'**'", "'['", "']'", "'*'", "'-->'", 
            "'null'", "'true'", "'false'", "'~'", "':='" ]

    symbolicNames = [ "<INVALID>",
            "IMPLIES", "NULL", "TRUE", "FALSE", "STRING", "MATCHES", "ASSIGNED", 
            "IDENTIFIER", "INTEGER", "FLOAT", "WS", "LINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "IMPLIES", "NULL", "TRUE", "FALSE", "STRING", 
                  "MATCHES", "ASSIGNED", "IDENTIFIER", "VALID_ID_START", 
                  "VALID_ID_CHAR", "ESC", "UNICODE", "HEX", "SAFECODEPOINT", 
                  "INTEGER", "FLOAT", "INT", "EXP", "WS", "LINE_COMMENT" ]

    grammarFileName = "Jertl.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


