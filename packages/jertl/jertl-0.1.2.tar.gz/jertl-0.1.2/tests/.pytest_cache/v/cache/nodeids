[
  "test_ast_builder.py::test_ast_for_string[array-[1, \"have a\", *splat,                     \"or\", *two]-result6]",
  "test_ast_builder.py::test_ast_for_string[array-[1, 2, true]-result4]",
  "test_ast_builder.py::test_ast_for_string[array-[]-result5]",
  "test_ast_builder.py::test_ast_for_string[atom-\"string\"-string]",
  "test_ast_builder.py::test_ast_for_string[atom-1-1]",
  "test_ast_builder.py::test_ast_for_string[atom-3.14159-3.14159]",
  "test_ast_builder.py::test_ast_for_string[atom-false-False]",
  "test_ast_builder.py::test_ast_for_string[atom-null-None]",
  "test_ast_builder.py::test_ast_for_string[atom-true-True]",
  "test_ast_builder.py::test_ast_for_string[collation--result21]",
  "test_ast_builder.py::test_ast_for_string[collation-\\n                         thing1 ~ {\"integer\": 1, \"list\": [x, 4.4, *spread], **kw}\\n                         thing2 ~ thing1\\n                         thing3 ~ [thing1, thing2]\\n                     -result18]",
  "test_ast_builder.py::test_ast_for_string[matcher-thing ~ {\"integer\": 1, \"list\": [a, 4.4, *spread], **kw}-result15]",
  "test_ast_builder.py::test_ast_for_string[obj-{\"integer\": 1, \"list\": [a,             4.4, *spread],                  **kw}-result13]",
  "test_ast_builder.py::test_ast_for_string[rule_--->-result20]",
  "test_ast_builder.py::test_ast_for_string[rule_-\\n                           thing1 ~ {\"integer\": 1, \"list\": [a, 4.4, *spread], **kw}\\n                           thing2 ~ thing1\\n                           thing3 ~ [thing1, thing2]\\n                         -->\\n                           thong1 := {\"integer\": 2, \"list\": [thing3, 4.4, *spread], **kw}\\n                       -result19]",
  "test_ast_builder.py::test_ast_for_string[setter-result := {\"integer\": 1, \"list\": [a, 4.4, *spread], **kw}-result17]",
  "test_ast_builder.py::test_ast_for_string[setter-result := {\"integer\": 1}-result16]",
  "test_ast_builder.py::test_ast_for_string[structure-\"atom\"-atom]",
  "test_ast_builder.py::test_ast_for_string[structure-[\"a\", 4, \"element\", array]-result1]",
  "test_ast_builder.py::test_ast_for_string[structure-variable-result3]",
  "test_ast_builder.py::test_ast_for_string[structure-{\"an\": \"object\"}-result0]",
  "test_ast_builder.py::test_ast_for_string[transform-{\"integer\": 1, \"list\": [a, 4.4, *spread], **kw} --> true-result14]",
  "test_constructor.py::test_ast_for_string[[1, 2, *splat]-bindings2-result2]",
  "test_constructor.py::test_ast_for_string[[1, 2.2, true, null, \"String\"]-bindings3-result3]",
  "test_constructor.py::test_ast_for_string[[x, y, \"z\"]-bindings1-result1]",
  "test_constructor.py::test_ast_for_string[x-bindings0-100]",
  "test_constructor.py::test_ast_for_string[{\"1\": 1, \"2\": 2, **splot}-bindings4-result4]",
  "test_constructor.py::test_ast_for_string[{\"1\": 1, \"list\": [1, {\"inner\": x}, *splat, y], **splot}-bindings5-result5]",
  "test_parser.py::test_failure",
  "test_parser.py::test_null_collation",
  "test_parser.py::test_null_rule",
  "test_parser.py::test_parse[array-[1, \"have a\", *splat, \"or\", *two]]",
  "test_parser.py::test_parse[array-[1, 2, True]]",
  "test_parser.py::test_parse[array-[]]",
  "test_parser.py::test_parse[atom-\"string\"]",
  "test_parser.py::test_parse[atom-1]",
  "test_parser.py::test_parse[atom-3.14159]",
  "test_parser.py::test_parse[atom-false]",
  "test_parser.py::test_parse[atom-null]",
  "test_parser.py::test_parse[atom-true]",
  "test_parser.py::test_parse[collation-\\n                                    thing1 ~ {\"integer\": 1, \"list\": [_, 4.4, *spread], **kw}\\n                                    thing2 ~ thing1\\n                                    thing3 ~ [thing1, thing2]\\n                                ]",
  "test_parser.py::test_parse[matcher-thing ~ {\"integer\": 1, \"list\": [a, 4.4, *spread], **kw}]",
  "test_parser.py::test_parse[obj-{\"integer\": 1, \"list\": [a, 4.4, *spread], **kw}]",
  "test_parser.py::test_parse[rule_-\\n                                    thing1 ~ {\"integer\": 1, \"list\": [a, 4.4, *spread], **kw}\\n                                    thing2 ~ thing1\\n                                    thing3 ~ [thing1, thing2]\\n                                  -->\\n                                    thong1 := {\"integer\": 2, \"list\": [thing3, 4.4, *spread], **kw}\\n                                ]",
  "test_parser.py::test_parse[setter-result := {\"integer\": 1, \"list\": [a, 4.4, *spread], **kw}]",
  "test_parser.py::test_parse[setter-result := {\"integer\": 1}]",
  "test_parser.py::test_parse[structure-\"atom\"]",
  "test_parser.py::test_parse[structure-[\"a\", 4, \"element\", array]]",
  "test_parser.py::test_parse[structure-variable]",
  "test_parser.py::test_parse[structure-{\"an\": \"object\"}]",
  "test_parser.py::test_parse[transform-{\"integer\": 1, \"list\": [a, 4.4, *spread], **kw} --> True]",
  "test_representation.py::test_equality",
  "test_representation.py::test_identifier_of_anonymous_variables",
  "test_representation.py::test_inequality",
  "test_representation.py::test_representation_of_anonymous_variables",
  "test_representation.py::test_uniqueness_of_anonymous_variables",
  "test_toplevel.py::test_collate_all",
  "test_toplevel.py::test_compiled_collate",
  "test_toplevel.py::test_compiled_fill",
  "test_toplevel.py::test_compiled_inference",
  "test_toplevel.py::test_compiled_match",
  "test_toplevel.py::test_fill",
  "test_toplevel.py::test_match_all",
  "test_toplevel.py::test_transform_all"
]