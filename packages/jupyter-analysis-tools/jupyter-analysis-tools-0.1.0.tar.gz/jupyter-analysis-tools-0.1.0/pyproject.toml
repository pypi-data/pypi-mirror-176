[build-system]
requires = [
    "setuptools>=30.3.0",
    "wheel",
]

[tool.blue]
line-length = 100
target-version = ['py37']
skip-string-normalization = true

[tool.isort]
force_single_line = true
line_length = 100
known_first_party = 'jupyter_analysis_tools'
default_section = 'THIRDPARTY'
forced_separate = 'test_jupyter_analysis_tools'
skip = ['.tox', '.eggs', 'ci/templates', 'build', 'dist', '.ipynb_checkpoints']

[tool.tbump]
# Uncomment this if your project is hosted on GitHub:
github_url = "https://github.com/BAMresearch/jupyter_analysis_tools"

[tool.tbump.version]
current = "0.1.0"

# Make sure this matches current_version before using tbump
regex = '(?P<major>\d+)\.(?P<minor>\d+)\.(?P<patch>\d+)'

[tool.tbump.git]
message_template = "Bump to {new_version}"
tag_template = "v{new_version}"

# For each file to patch, add a [[tool.tbump.file]] config
# section containing the path of the file, relative to the
# tbump.toml location.
[[tool.tbump.file]]
src = "setup.py"
search = "version='{current_version}'"

[[tool.tbump.file]]
src = "README.rst"
search = "/v{current_version}.svg"

[[tool.tbump.file]]
src = "README.rst"
search = "/v{current_version}...main"

[[tool.tbump.file]]
src = "docs/conf.py"
search = "version = release = '{current_version}'"

[[tool.tbump.file]]
src = "src/jupyter_analysis_tools/__init__.py"
search = "__version__ = '{current_version}'"

# You can specify a list of commands to
# run after the files have been patched
# and before the git commit is made

[[tool.tbump.before_commit]]
name = "check changelog"
cmd = "grep -q {new_version} CHANGELOG.rst"

# Or run some commands after the git tag and the branch
# have been pushed:
#  [[tool.tbump.after_push]]
#  name = "publish"
#  cmd = "./publish.sh"
