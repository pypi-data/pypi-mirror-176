# This an autogenerated file
# 
# Generated with JobResult
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.jobresult import JobResultBlueprint
from numpy import ndarray,asarray
from dmt.namedentity import NamedEntity

class JobResult(NamedEntity):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    name : str
         (default None)
    progress : float
         (default 0.0)
    result : str
         (default None)
    wind_speed : ndarray
    wind_direction : ndarray
    """

    def __init__(self , description="", name=None, progress=0.0, result=None, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.name = name
        self.progress = progress
        self.result = result
        self.wind_speed = ndarray(1)
        self.wind_direction = ndarray(1)
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return JobResultBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = str(value)

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def progress(self) -> float:
        """"""
        return self.__progress

    @progress.setter
    def progress(self, value: float):
        """Set progress"""
        self.__progress = float(value)

    @property
    def result(self) -> str:
        """"""
        return self.__result

    @result.setter
    def result(self, value: str):
        """Set result"""
        self.__result = str(value)

    @property
    def wind_speed(self) -> ndarray:
        """"""
        return self.__wind_speed

    @wind_speed.setter
    def wind_speed(self, value: ndarray):
        """Set wind_speed"""
        self.__wind_speed = asarray(value)

    @property
    def wind_direction(self) -> ndarray:
        """"""
        return self.__wind_direction

    @wind_direction.setter
    def wind_direction(self, value: ndarray):
        """Set wind_direction"""
        self.__wind_direction = asarray(value)
