# This an autogenerated file
# 
# Generated with MetVariable
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.metvariable import MetVariableBlueprint
from typing import Dict
from dmt.namedentity import NamedEntity

class MetVariable(NamedEntity):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    name : str
         (default None)
    max : float
         (default 0.0)
    mean : float
         (default 0.0)
    min : float
         (default 0.0)
    size : int
         (default 0)
    standard_name : str
         (default None)
    std : float
         (default 0.0)
    units : str
         (default None)
    """

    def __init__(self , description="", name=None, max=0.0, mean=0.0, min=0.0, size=0, standard_name=None, std=0.0, units=None, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.name = name
        self.max = max
        self.mean = mean
        self.min = min
        self.size = size
        self.standard_name = standard_name
        self.std = std
        self.units = units
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return MetVariableBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = str(value)

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def max(self) -> float:
        """"""
        return self.__max

    @max.setter
    def max(self, value: float):
        """Set max"""
        self.__max = float(value)

    @property
    def mean(self) -> float:
        """"""
        return self.__mean

    @mean.setter
    def mean(self, value: float):
        """Set mean"""
        self.__mean = float(value)

    @property
    def min(self) -> float:
        """"""
        return self.__min

    @min.setter
    def min(self, value: float):
        """Set min"""
        self.__min = float(value)

    @property
    def size(self) -> int:
        """"""
        return self.__size

    @size.setter
    def size(self, value: int):
        """Set size"""
        self.__size = int(value)

    @property
    def standard_name(self) -> str:
        """"""
        return self.__standard_name

    @standard_name.setter
    def standard_name(self, value: str):
        """Set standard_name"""
        self.__standard_name = str(value)

    @property
    def std(self) -> float:
        """"""
        return self.__std

    @std.setter
    def std(self, value: float):
        """Set std"""
        self.__std = float(value)

    @property
    def units(self) -> str:
        """"""
        return self.__units

    @units.setter
    def units(self, value: str):
        """Set units"""
        self.__units = str(value)
