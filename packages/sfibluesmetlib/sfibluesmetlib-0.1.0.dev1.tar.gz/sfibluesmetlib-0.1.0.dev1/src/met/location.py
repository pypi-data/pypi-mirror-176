# This an autogenerated file
# 
# Generated with Location
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.location import LocationBlueprint
from typing import Dict
from dmt.namedentity import NamedEntity
from met.scatter.scatter import Scatter
from met.scatter.wave import Wave
from met.wave import Wave
from met.wind import Wind

class Location(NamedEntity):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    name : str
         (default None)
    geospatial_lat_min : float
         (default 0.0)
    geospatial_lat_max : float
         (default 0.0)
    geospatial_lon_min : float
         (default 0.0)
    geospatial_lon_max : float
         (default 0.0)
    waves : List[Wave]
    winds : List[Wind]
    waveScatter : Scatter
    waveDirScatter : Wave
    meanWaveDirection : float
         (default 0.0)
    meanHs : float
         (default 0.0)
    meanTp : float
         (default 0.0)
    """

    def __init__(self , description="", name=None, geospatial_lat_min=0.0, geospatial_lat_max=0.0, geospatial_lon_min=0.0, geospatial_lon_max=0.0, meanWaveDirection=0.0, meanHs=0.0, meanTp=0.0, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.name = name
        self.geospatial_lat_min = geospatial_lat_min
        self.geospatial_lat_max = geospatial_lat_max
        self.geospatial_lon_min = geospatial_lon_min
        self.geospatial_lon_max = geospatial_lon_max
        self.waves = list()
        self.winds = list()
        self.waveScatter = None
        self.waveDirScatter = None
        self.meanWaveDirection = meanWaveDirection
        self.meanHs = meanHs
        self.meanTp = meanTp
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return LocationBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = str(value)

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def geospatial_lat_min(self) -> float:
        """"""
        return self.__geospatial_lat_min

    @geospatial_lat_min.setter
    def geospatial_lat_min(self, value: float):
        """Set geospatial_lat_min"""
        self.__geospatial_lat_min = float(value)

    @property
    def geospatial_lat_max(self) -> float:
        """"""
        return self.__geospatial_lat_max

    @geospatial_lat_max.setter
    def geospatial_lat_max(self, value: float):
        """Set geospatial_lat_max"""
        self.__geospatial_lat_max = float(value)

    @property
    def geospatial_lon_min(self) -> float:
        """"""
        return self.__geospatial_lon_min

    @geospatial_lon_min.setter
    def geospatial_lon_min(self, value: float):
        """Set geospatial_lon_min"""
        self.__geospatial_lon_min = float(value)

    @property
    def geospatial_lon_max(self) -> float:
        """"""
        return self.__geospatial_lon_max

    @geospatial_lon_max.setter
    def geospatial_lon_max(self, value: float):
        """Set geospatial_lon_max"""
        self.__geospatial_lon_max = float(value)

    @property
    def waves(self) -> List[Wave]:
        """"""
        return self.__waves

    @waves.setter
    def waves(self, value: List[Wave]):
        """Set waves"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__waves = value

    @property
    def winds(self) -> List[Wind]:
        """"""
        return self.__winds

    @winds.setter
    def winds(self, value: List[Wind]):
        """Set winds"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__winds = value

    @property
    def waveScatter(self) -> Scatter:
        """"""
        return self.__waveScatter

    @waveScatter.setter
    def waveScatter(self, value: Scatter):
        """Set waveScatter"""
        self.__waveScatter = value

    @property
    def waveDirScatter(self) -> Wave:
        """"""
        return self.__waveDirScatter

    @waveDirScatter.setter
    def waveDirScatter(self, value: Wave):
        """Set waveDirScatter"""
        self.__waveDirScatter = value

    @property
    def meanWaveDirection(self) -> float:
        """"""
        return self.__meanWaveDirection

    @meanWaveDirection.setter
    def meanWaveDirection(self, value: float):
        """Set meanWaveDirection"""
        self.__meanWaveDirection = float(value)

    @property
    def meanHs(self) -> float:
        """"""
        return self.__meanHs

    @meanHs.setter
    def meanHs(self, value: float):
        """Set meanHs"""
        self.__meanHs = float(value)

    @property
    def meanTp(self) -> float:
        """"""
        return self.__meanTp

    @meanTp.setter
    def meanTp(self, value: float):
        """Set meanTp"""
        self.__meanTp = float(value)
