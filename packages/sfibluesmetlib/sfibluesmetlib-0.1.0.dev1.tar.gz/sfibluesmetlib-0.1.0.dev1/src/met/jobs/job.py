# This an autogenerated file
# 
# Generated with Job
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.job import JobBlueprint
from typing import Dict
from dmt.namedentity import NamedEntity
from met.jobs.jobrunner import JobRunner

class Job(NamedEntity):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    name : str
         (default None)
    runner : JobRunner
    """

    def __init__(self , description="", name=None, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.name = name
        self.runner = None
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return JobBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = str(value)

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def runner(self) -> JobRunner:
        """"""
        return self.__runner

    @runner.setter
    def runner(self, value: JobRunner):
        """Set runner"""
        self.__runner = value
