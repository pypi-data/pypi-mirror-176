# This an autogenerated file
# 
# Generated with Field
from typing import Dict,Sequence,List
from dmt.blueprint import Blueprint
from .blueprints.field import FieldBlueprint
from numpy import ndarray,asarray
from dmt.namedentity import NamedEntity
from met.nora3.fieldpoint import FieldPoint

class Field(NamedEntity):
    """
    Keyword arguments
    -----------------
    description : str
         (default "")
    name : str
         (default None)
    label : str
         (default None)
    latitude : ndarray
    longitude : ndarray
    points : List[FieldPoint]
    """

    def __init__(self , description="", name=None, label=None, **kwargs):
        super().__init__(**kwargs)
        self.description = description
        self.name = name
        self.label = label
        self.latitude = ndarray(1)
        self.longitude = ndarray(1)
        self.points = list()
        for key, value in kwargs.items():
            if not isinstance(value, Dict):
                setattr(self, key, value)


    @property
    def blueprint(self) -> Blueprint:
        """Return blueprint that this entity represents"""
        return FieldBlueprint()


    @property
    def description(self) -> str:
        """"""
        return self.__description

    @description.setter
    def description(self, value: str):
        """Set description"""
        self.__description = str(value)

    @property
    def name(self) -> str:
        """"""
        return self.__name

    @name.setter
    def name(self, value: str):
        """Set name"""
        self.__name = str(value)

    @property
    def label(self) -> str:
        """"""
        return self.__label

    @label.setter
    def label(self, value: str):
        """Set label"""
        self.__label = str(value)

    @property
    def latitude(self) -> ndarray:
        """"""
        return self.__latitude

    @latitude.setter
    def latitude(self, value: ndarray):
        """Set latitude"""
        self.__latitude = asarray(value)

    @property
    def longitude(self) -> ndarray:
        """"""
        return self.__longitude

    @longitude.setter
    def longitude(self, value: ndarray):
        """Set longitude"""
        self.__longitude = asarray(value)

    @property
    def points(self) -> List[FieldPoint]:
        """"""
        return self.__points

    @points.setter
    def points(self, value: List[FieldPoint]):
        """Set points"""
        if not isinstance(value, Sequence):
            raise Exception("Expected sequense, but was " , type(value))
        self.__points = value
