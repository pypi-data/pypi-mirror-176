from typing import List
import ghidra.framework.model
import ghidra.framework.options
import ghidra.program.model.address
import ghidra.program.model.data
import ghidra.program.model.lang
import ghidra.trace.model
import ghidra.trace.model.bookmark
import ghidra.trace.model.breakpoint
import ghidra.trace.model.context
import ghidra.trace.model.guest
import ghidra.trace.model.listing
import ghidra.trace.model.memory
import ghidra.trace.model.modules
import ghidra.trace.model.program
import ghidra.trace.model.property
import ghidra.trace.model.stack
import ghidra.trace.model.symbol
import ghidra.trace.model.target
import ghidra.trace.model.thread
import ghidra.trace.model.time
import ghidra.trace.util
import ghidra.util
import ghidra.util.task
import java.io
import java.lang
import java.util


class Trace(ghidra.program.model.data.DataTypeManagerDomainObject, object):
    DO_DOMAIN_FILE_CHANGED: int = 2
    DO_OBJECT_CLOSED: int = 6
    DO_OBJECT_ERROR: int = 8
    DO_OBJECT_RENAMED: int = 3
    DO_OBJECT_RESTORED: int = 4
    DO_OBJECT_SAVED: int = 1
    DO_PROPERTY_CHANGED: int = 5
    TRACE_ICON: javax.swing.ImageIcon = images/video-x-generic16.png
    undoLock: object = java.lang.Object@3c46b739




    class TraceStackChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceStackChangeType = ghidra.trace.model.Trace$TraceStackChangeType@e2d5bad
        CHANGED: ghidra.trace.model.Trace.TraceStackChangeType = ghidra.trace.model.Trace$TraceStackChangeType@6a910cdb
        DELETED: ghidra.trace.model.Trace.TraceStackChangeType = ghidra.trace.model.Trace$TraceStackChangeType@686192bb



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceMemoryRegionChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceMemoryRegionChangeType = ghidra.trace.model.Trace$TraceMemoryRegionChangeType@7c591425
        CHANGED: ghidra.trace.model.Trace.TraceMemoryRegionChangeType = ghidra.trace.model.Trace$TraceMemoryRegionChangeType@1d26e9d3
        DELETED: ghidra.trace.model.Trace.TraceMemoryRegionChangeType = ghidra.trace.model.Trace$TraceMemoryRegionChangeType@79b64486
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceMemoryRegionChangeType = ghidra.trace.model.Trace$TraceMemoryRegionChangeType@1d22982e



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceProgramViewListener(object):








        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        def viewCreated(self, __a0: ghidra.trace.model.program.TraceProgramView) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TracePlatformChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TracePlatformChangeType = ghidra.trace.model.Trace$TracePlatformChangeType@20e420df
        DELETED: ghidra.trace.model.Trace.TracePlatformChangeType = ghidra.trace.model.Trace$TracePlatformChangeType@1428f643
        MAPPING_ADDED: ghidra.trace.model.Trace.TracePlatformChangeType = ghidra.trace.model.Trace$TracePlatformChangeType@59d16c6f
        MAPPING_DELETED: ghidra.trace.model.Trace.TracePlatformChangeType = ghidra.trace.model.Trace$TracePlatformChangeType@2e614dbd



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceStaticMappingChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceStaticMappingChangeType = ghidra.trace.model.Trace$TraceStaticMappingChangeType@76f23909
        DELETED: ghidra.trace.model.Trace.TraceStaticMappingChangeType = ghidra.trace.model.Trace$TraceStaticMappingChangeType@77911dfc



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceSymbolChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@4b383d00
        ADDRESS_CHANGED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@4daa0f58
        ASSOCIATION_ADDED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@46607562
        ASSOCIATION_REMOVED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@824a05b
        CHANGED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@358b1f63
        DELETED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@4a8a8ad3
        LIFESPAN_CHANGED: ghidra.trace.util.DefaultTraceChangeType = ghidra.trace.util.DefaultTraceChangeType@2d57d8fa
        PARENT_CHANGED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@4b213099
        RENAMED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@5822b36f
        SET_AS_PRIMARY: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@de7449
        SOURCE_CHANGED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@2bfd1779



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceObjectChangeType(ghidra.trace.util.DefaultTraceChangeType):
        CREATED: ghidra.trace.model.Trace.TraceObjectChangeType = ghidra.trace.model.Trace$TraceObjectChangeType@1f0230c
        DELETED: ghidra.trace.model.Trace.TraceObjectChangeType = ghidra.trace.model.Trace$TraceObjectChangeType@72ff7d26
        LIFE_CHANGED: ghidra.trace.model.Trace.TraceObjectChangeType = ghidra.trace.model.Trace$TraceObjectChangeType@76bf7c71
        VALUE_CREATED: ghidra.trace.model.Trace.TraceObjectChangeType = ghidra.trace.model.Trace$TraceObjectChangeType@2718de87
        VALUE_DELETED: ghidra.trace.model.Trace.TraceObjectChangeType = ghidra.trace.model.Trace$TraceObjectChangeType@a0b62a0
        VALUE_LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceObjectChangeType = ghidra.trace.model.Trace$TraceObjectChangeType@6f327f57



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceCodeChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceCodeChangeType = ghidra.trace.model.Trace$TraceCodeChangeType@5d4678ee
        DATA_TYPE_REPLACED: ghidra.trace.model.Trace.TraceCodeChangeType = ghidra.trace.model.Trace$TraceCodeChangeType@773a828d
        DATA_TYPE_SETTINGS_CHANGED: ghidra.trace.model.Trace.TraceCodeChangeType = ghidra.trace.model.Trace$TraceCodeChangeType@2e87ee5d
        FRAGMENT_CHANGED: ghidra.trace.model.Trace.TraceCodeChangeType = ghidra.trace.model.Trace$TraceCodeChangeType@7f488d76
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceCodeChangeType = ghidra.trace.model.Trace$TraceCodeChangeType@23d64308
        REMOVED: ghidra.trace.model.Trace.TraceCodeChangeType = ghidra.trace.model.Trace$TraceCodeChangeType@66de7d0d



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceFunctionTagChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceFunctionTagChangeType = ghidra.trace.model.Trace$TraceFunctionTagChangeType@3e242180
        CHANGED: ghidra.trace.model.Trace.TraceFunctionTagChangeType = ghidra.trace.model.Trace$TraceFunctionTagChangeType@80ad44b
        DELETED: ghidra.trace.model.Trace.TraceFunctionTagChangeType = ghidra.trace.model.Trace$TraceFunctionTagChangeType@1da9f652



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceMemoryStateChangeType(ghidra.trace.util.DefaultTraceChangeType):
        CHANGED: ghidra.trace.model.Trace.TraceMemoryStateChangeType = ghidra.trace.model.Trace$TraceMemoryStateChangeType@2c703bfb



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceDataTypeChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceDataTypeChangeType = ghidra.trace.model.Trace$TraceDataTypeChangeType@3ad484b9
        CHANGED: ghidra.trace.model.Trace.TraceDataTypeChangeType = ghidra.trace.model.Trace$TraceDataTypeChangeType@618e5537
        DELETED: ghidra.trace.model.Trace.TraceDataTypeChangeType = ghidra.trace.model.Trace$TraceDataTypeChangeType@23c1b50b
        MOVED: ghidra.trace.model.Trace.TraceDataTypeChangeType = ghidra.trace.model.Trace$TraceDataTypeChangeType@727c8e3
        RENAMED: ghidra.trace.model.Trace.TraceDataTypeChangeType = ghidra.trace.model.Trace$TraceDataTypeChangeType@29e04939
        REPLACED: ghidra.trace.model.Trace.TraceDataTypeChangeType = ghidra.trace.model.Trace$TraceDataTypeChangeType@e43ed6b



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceCategoryChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceCategoryChangeType = ghidra.trace.model.Trace$TraceCategoryChangeType@2373c359
        DELETED: ghidra.trace.model.Trace.TraceCategoryChangeType = ghidra.trace.model.Trace$TraceCategoryChangeType@8f1faff
        MOVED: ghidra.trace.model.Trace.TraceCategoryChangeType = ghidra.trace.model.Trace$TraceCategoryChangeType@7efe5905
        RENAMED: ghidra.trace.model.Trace.TraceCategoryChangeType = ghidra.trace.model.Trace$TraceCategoryChangeType@1aaa6704



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceModuleChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceModuleChangeType = ghidra.trace.model.Trace$TraceModuleChangeType@3a60012
        CHANGED: ghidra.trace.model.Trace.TraceModuleChangeType = ghidra.trace.model.Trace$TraceModuleChangeType@448b1f4e
        DELETED: ghidra.trace.model.Trace.TraceModuleChangeType = ghidra.trace.model.Trace$TraceModuleChangeType@d50d29c
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceModuleChangeType = ghidra.trace.model.Trace$TraceModuleChangeType@16a8442



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceOverlaySpaceChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceOverlaySpaceChangeType = ghidra.trace.model.Trace$TraceOverlaySpaceChangeType@35452d83
        DELETED: ghidra.trace.model.Trace.TraceOverlaySpaceChangeType = ghidra.trace.model.Trace$TraceOverlaySpaceChangeType@1484fb00



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceMemoryBytesChangeType(ghidra.trace.util.DefaultTraceChangeType):
        CHANGED: ghidra.trace.model.Trace.TraceMemoryBytesChangeType = ghidra.trace.model.Trace$TraceMemoryBytesChangeType@720c0be7



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceReferenceChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceReferenceChangeType = ghidra.trace.model.Trace$TraceReferenceChangeType@39e679eb
        DELETED: ghidra.trace.model.Trace.TraceReferenceChangeType = ghidra.trace.model.Trace$TraceReferenceChangeType@e268d12
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceReferenceChangeType = ghidra.trace.model.Trace$TraceReferenceChangeType@1c67ec02
        PRIMARY_CHANGED: ghidra.trace.model.Trace.TraceReferenceChangeType = ghidra.trace.model.Trace$TraceReferenceChangeType@61dab82



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceInstructionChangeType(ghidra.trace.util.DefaultTraceChangeType):
        FALL_THROUGH_OVERRIDE_CHANGED: ghidra.trace.model.Trace.TraceInstructionChangeType = ghidra.trace.model.Trace$TraceInstructionChangeType@6838cda8
        FLOW_OVERRIDE_CHANGED: ghidra.trace.model.Trace.TraceInstructionChangeType = ghidra.trace.model.Trace$TraceInstructionChangeType@4b1c3b51



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceSnapshotChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceSnapshotChangeType = ghidra.trace.model.Trace$TraceSnapshotChangeType@73f595dd
        CHANGED: ghidra.trace.model.Trace.TraceSnapshotChangeType = ghidra.trace.model.Trace$TraceSnapshotChangeType@77622dc5
        DELETED: ghidra.trace.model.Trace.TraceSnapshotChangeType = ghidra.trace.model.Trace$TraceSnapshotChangeType@5999eb0c



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceCommentChangeType(ghidra.trace.util.DefaultTraceChangeType):
        EOL_CHANGED: ghidra.trace.model.Trace.TraceCommentChangeType = ghidra.trace.model.Trace$TraceCommentChangeType@641c77f8
        PLATE_CHANGED: ghidra.trace.model.Trace.TraceCommentChangeType = ghidra.trace.model.Trace$TraceCommentChangeType@52c5b48d
        POST_CHANGED: ghidra.trace.model.Trace.TraceCommentChangeType = ghidra.trace.model.Trace$TraceCommentChangeType@79712cb
        PRE_CHANGED: ghidra.trace.model.Trace.TraceCommentChangeType = ghidra.trace.model.Trace$TraceCommentChangeType@3b18463b
        REPEATABLE_CHANGED: ghidra.trace.model.Trace.TraceCommentChangeType = ghidra.trace.model.Trace$TraceCommentChangeType@2d4f0915
        type: int







        @staticmethod
        def byType(__a0: int) -> ghidra.trace.model.Trace.TraceCommentChangeType: ...

        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceSectionChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceSectionChangeType = ghidra.trace.model.Trace$TraceSectionChangeType@6c91f96a
        CHANGED: ghidra.trace.model.Trace.TraceSectionChangeType = ghidra.trace.model.Trace$TraceSectionChangeType@2c31184d
        DELETED: ghidra.trace.model.Trace.TraceSectionChangeType = ghidra.trace.model.Trace$TraceSectionChangeType@138f564a



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceBookmarkChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceBookmarkChangeType = ghidra.trace.model.Trace$TraceBookmarkChangeType@594f6651
        CHANGED: ghidra.trace.model.Trace.TraceBookmarkChangeType = ghidra.trace.model.Trace$TraceBookmarkChangeType@4b9b3dc5
        DELETED: ghidra.trace.model.Trace.TraceBookmarkChangeType = ghidra.trace.model.Trace$TraceBookmarkChangeType@4176e870
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceBookmarkChangeType = ghidra.trace.model.Trace$TraceBookmarkChangeType@4b280fe4
        TYPE_ADDED: ghidra.trace.model.Trace.TraceBookmarkChangeType = ghidra.trace.model.Trace$TraceBookmarkChangeType@224f1ffa



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceCompositeDataChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceCompositeDataChangeType = ghidra.trace.model.Trace$TraceCompositeDataChangeType@7e3a2946
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceCompositeDataChangeType = ghidra.trace.model.Trace$TraceCompositeDataChangeType@75664f21
        REMOVED: ghidra.trace.model.Trace.TraceCompositeDataChangeType = ghidra.trace.model.Trace$TraceCompositeDataChangeType@5c65a53e



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceBreakpointChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceBreakpointChangeType = ghidra.trace.model.Trace$TraceBreakpointChangeType@569ee345
        CHANGED: ghidra.trace.model.Trace.TraceBreakpointChangeType = ghidra.trace.model.Trace$TraceBreakpointChangeType@30a1b50c
        DELETED: ghidra.trace.model.Trace.TraceBreakpointChangeType = ghidra.trace.model.Trace$TraceBreakpointChangeType@1ffeda47
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceBreakpointChangeType = ghidra.trace.model.Trace$TraceBreakpointChangeType@6e43c0d3



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceSourceArchiveChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceSourceArchiveChangeType = ghidra.trace.model.Trace$TraceSourceArchiveChangeType@537fba8c
        CHANGED: ghidra.trace.model.Trace.TraceSourceArchiveChangeType = ghidra.trace.model.Trace$TraceSourceArchiveChangeType@26ff69f
        DELETED: ghidra.trace.model.Trace.TraceSourceArchiveChangeType = ghidra.trace.model.Trace$TraceSourceArchiveChangeType@72daeb59



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceThreadChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceThreadChangeType = ghidra.trace.model.Trace$TraceThreadChangeType@5d2b2f2c
        CHANGED: ghidra.trace.model.Trace.TraceThreadChangeType = ghidra.trace.model.Trace$TraceThreadChangeType@14e3a548
        DELETED: ghidra.trace.model.Trace.TraceThreadChangeType = ghidra.trace.model.Trace$TraceThreadChangeType@314604ae
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceThreadChangeType = ghidra.trace.model.Trace$TraceThreadChangeType@1fc373d0



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceFunctionChangeType(ghidra.trace.util.DefaultTraceChangeType):
        CHANGED: ghidra.trace.model.Trace.TraceFunctionChangeType = ghidra.trace.model.Trace$TraceFunctionChangeType@55891563
        CHANGED_BODY: ghidra.trace.model.Trace.TraceFunctionChangeType = ghidra.trace.model.Trace$TraceFunctionChangeType@10946415
        CHANGED_CALL_FIXUP: ghidra.trace.model.Trace.TraceFunctionChangeType = ghidra.trace.model.Trace$TraceFunctionChangeType@27393b38
        CHANGED_INLINE: ghidra.trace.model.Trace.TraceFunctionChangeType = ghidra.trace.model.Trace$TraceFunctionChangeType@70472349
        CHANGED_NORETURN: ghidra.trace.model.Trace.TraceFunctionChangeType = ghidra.trace.model.Trace$TraceFunctionChangeType@51d0b1f1
        CHANGED_PARAMETERS: ghidra.trace.model.Trace.TraceFunctionChangeType = ghidra.trace.model.Trace$TraceFunctionChangeType@5586a6a8
        CHANGED_PURGE: ghidra.trace.model.Trace.TraceFunctionChangeType = ghidra.trace.model.Trace$TraceFunctionChangeType@59202e14
        CHANGED_RETURN: ghidra.trace.model.Trace.TraceFunctionChangeType = ghidra.trace.model.Trace$TraceFunctionChangeType@284fe3db
        CHANGED_THUNK: ghidra.trace.model.Trace.TraceFunctionChangeType = ghidra.trace.model.Trace$TraceFunctionChangeType@441f0a5e
        TAG_APPLIED: ghidra.trace.model.Trace.TraceFunctionChangeType = ghidra.trace.model.Trace$TraceFunctionChangeType@6ead09fd
        TAG_REMOVED: ghidra.trace.model.Trace.TraceFunctionChangeType = ghidra.trace.model.Trace$TraceFunctionChangeType@14be4176



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...







    def addCloseListener(self, __a0: ghidra.framework.model.DomainObjectClosedListener) -> None: ...

    def addConsumer(self, __a0: object) -> bool: ...

    def addListener(self, __a0: ghidra.framework.model.DomainObjectListener) -> None: ...

    def addProgramViewListener(self, __a0: ghidra.trace.model.Trace.TraceProgramViewListener) -> None: ...

    def addSynchronizedDomainObject(self, __a0: ghidra.framework.model.DomainObject) -> None: ...

    def addTransactionListener(self, __a0: ghidra.framework.model.TransactionListener) -> None: ...

    def canLock(self) -> bool: ...

    def canRedo(self) -> bool: ...

    def canSave(self) -> bool: ...

    def canUndo(self) -> bool: ...

    def clearUndo(self) -> None: ...

    def createPrivateEventQueue(self, __a0: ghidra.framework.model.DomainObjectListener, __a1: int) -> ghidra.framework.model.EventQueueID: ...

    def createProgramView(self, __a0: long) -> ghidra.trace.model.program.TraceVariableSnapProgramView: ...

    def createTimeViewport(self) -> ghidra.trace.model.TraceTimeViewport: ...

    def endTransaction(self, __a0: int, __a1: bool) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def flushEvents(self) -> None: ...

    def flushPrivateEventQueue(self, __a0: ghidra.framework.model.EventQueueID) -> None: ...

    def forceLock(self, __a0: bool, __a1: unicode) -> None: ...

    def getAddressPropertyManager(self) -> ghidra.trace.model.property.TraceAddressPropertyManager: ...

    def getAllProgramViews(self) -> java.util.Collection: ...

    def getBaseAddressFactory(self) -> ghidra.program.model.address.AddressFactory: ...

    def getBaseCompilerSpec(self) -> ghidra.program.model.lang.CompilerSpec: ...

    def getBaseLanguage(self) -> ghidra.program.model.lang.Language: ...

    def getBookmarkManager(self) -> ghidra.trace.model.bookmark.TraceBookmarkManager: ...

    def getBreakpointManager(self) -> ghidra.trace.model.breakpoint.TraceBreakpointManager: ...

    def getClass(self) -> java.lang.Class: ...

    def getCodeManager(self) -> ghidra.trace.model.listing.TraceCodeManager: ...

    def getConsumerList(self) -> java.util.ArrayList: ...

    def getCurrentTransaction(self) -> ghidra.framework.model.Transaction: ...

    def getDataTypeManager(self) -> ghidra.program.model.data.DataTypeManager: ...

    def getDescription(self) -> unicode: ...

    def getDomainFile(self) -> ghidra.framework.model.DomainFile: ...

    def getEquateManager(self) -> ghidra.trace.model.symbol.TraceEquateManager: ...

    def getFixedProgramView(self, __a0: long) -> ghidra.trace.model.program.TraceProgramView: ...

    def getMemoryManager(self) -> ghidra.trace.model.memory.TraceMemoryManager: ...

    def getMetadata(self) -> java.util.Map: ...

    def getModificationNumber(self) -> long: ...

    def getModuleManager(self) -> ghidra.trace.model.modules.TraceModuleManager: ...

    def getName(self) -> unicode: ...

    def getObjectManager(self) -> ghidra.trace.model.target.TraceObjectManager: ...

    def getOptions(self, __a0: unicode) -> ghidra.framework.options.Options: ...

    def getOptionsNames(self) -> List[object]: ...

    def getPlatformManager(self) -> ghidra.trace.model.guest.TracePlatformManager: ...

    def getProgramView(self) -> ghidra.trace.model.program.TraceVariableSnapProgramView: ...

    def getRedoName(self) -> unicode: ...

    def getReferenceManager(self) -> ghidra.trace.model.symbol.TraceReferenceManager: ...

    def getRegisterContextManager(self) -> ghidra.trace.model.context.TraceRegisterContextManager: ...

    def getStackManager(self) -> ghidra.trace.model.stack.TraceStackManager: ...

    def getStaticMappingManager(self) -> ghidra.trace.model.modules.TraceStaticMappingManager: ...

    def getSymbolManager(self) -> ghidra.trace.model.symbol.TraceSymbolManager: ...

    def getSynchronizedDomainObjects(self) -> List[ghidra.framework.model.DomainObject]: ...

    def getThreadManager(self) -> ghidra.trace.model.thread.TraceThreadManager: ...

    def getTimeManager(self) -> ghidra.trace.model.time.TraceTimeManager: ...

    def getUndoName(self) -> unicode: ...

    def hasExclusiveAccess(self) -> bool: ...

    def hasTerminatedTransaction(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isChangeable(self) -> bool: ...

    def isChanged(self) -> bool: ...

    def isClosed(self) -> bool: ...

    def isLocked(self) -> bool: ...

    def isSendingEvents(self) -> bool: ...

    def isTemporary(self) -> bool: ...

    def isUsedBy(self, __a0: object) -> bool: ...

    def lock(self, __a0: unicode) -> bool: ...

    def lockRead(self) -> ghidra.util.LockHold: ...

    def lockWrite(self) -> ghidra.util.LockHold: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def redo(self) -> None: ...

    def release(self, __a0: object) -> None: ...

    def releaseSynchronizedDomainObject(self) -> None: ...

    def removeCloseListener(self, __a0: ghidra.framework.model.DomainObjectClosedListener) -> None: ...

    def removeListener(self, __a0: ghidra.framework.model.DomainObjectListener) -> None: ...

    def removePrivateEventQueue(self, __a0: ghidra.framework.model.EventQueueID) -> bool: ...

    def removeProgramViewListener(self, __a0: ghidra.trace.model.Trace.TraceProgramViewListener) -> None: ...

    def removeTransactionListener(self, __a0: ghidra.framework.model.TransactionListener) -> None: ...

    def save(self, __a0: unicode, __a1: ghidra.util.task.TaskMonitor) -> None: ...

    def saveToPackedFile(self, __a0: java.io.File, __a1: ghidra.util.task.TaskMonitor) -> None: ...

    def setEventsEnabled(self, __a0: bool) -> None: ...

    def setName(self, __a0: unicode) -> None: ...

    def setTemporary(self, __a0: bool) -> None: ...

    @overload
    def startTransaction(self, __a0: unicode) -> int: ...

    @overload
    def startTransaction(self, __a0: unicode, __a1: ghidra.framework.model.AbortedTransactionListener) -> int: ...

    def toString(self) -> unicode: ...

    def undo(self) -> None: ...

    def unlock(self) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def addressPropertyManager(self) -> ghidra.trace.model.property.TraceAddressPropertyManager: ...

    @property
    def allProgramViews(self) -> java.util.Collection: ...

    @property
    def baseAddressFactory(self) -> ghidra.program.model.address.AddressFactory: ...

    @property
    def baseCompilerSpec(self) -> ghidra.program.model.lang.CompilerSpec: ...

    @property
    def baseLanguage(self) -> ghidra.program.model.lang.Language: ...

    @property
    def bookmarkManager(self) -> ghidra.trace.model.bookmark.TraceBookmarkManager: ...

    @property
    def breakpointManager(self) -> ghidra.trace.model.breakpoint.TraceBreakpointManager: ...

    @property
    def changeable(self) -> bool: ...

    @property
    def changed(self) -> bool: ...

    @property
    def closed(self) -> bool: ...

    @property
    def codeManager(self) -> ghidra.trace.model.listing.TraceCodeManager: ...

    @property
    def consumerList(self) -> java.util.ArrayList: ...

    @property
    def currentTransaction(self) -> ghidra.framework.model.Transaction: ...

    @property
    def dataTypeManager(self) -> ghidra.trace.model.data.TraceBasedDataTypeManager: ...

    @property
    def description(self) -> unicode: ...

    @property
    def domainFile(self) -> ghidra.framework.model.DomainFile: ...

    @property
    def equateManager(self) -> ghidra.trace.model.symbol.TraceEquateManager: ...

    @property
    def eventsEnabled(self) -> None: ...  # No getter available.

    @eventsEnabled.setter
    def eventsEnabled(self, value: bool) -> None: ...

    @property
    def locked(self) -> bool: ...

    @property
    def memoryManager(self) -> ghidra.trace.model.memory.TraceMemoryManager: ...

    @property
    def metadata(self) -> java.util.Map: ...

    @property
    def modificationNumber(self) -> long: ...

    @property
    def moduleManager(self) -> ghidra.trace.model.modules.TraceModuleManager: ...

    @property
    def name(self) -> unicode: ...

    @name.setter
    def name(self, value: unicode) -> None: ...

    @property
    def objectManager(self) -> ghidra.trace.model.target.TraceObjectManager: ...

    @property
    def optionsNames(self) -> List[object]: ...

    @property
    def platformManager(self) -> ghidra.trace.model.guest.TracePlatformManager: ...

    @property
    def programView(self) -> ghidra.trace.model.program.TraceVariableSnapProgramView: ...

    @property
    def redoName(self) -> unicode: ...

    @property
    def referenceManager(self) -> ghidra.trace.model.symbol.TraceReferenceManager: ...

    @property
    def registerContextManager(self) -> ghidra.trace.model.context.TraceRegisterContextManager: ...

    @property
    def sendingEvents(self) -> bool: ...

    @property
    def stackManager(self) -> ghidra.trace.model.stack.TraceStackManager: ...

    @property
    def staticMappingManager(self) -> ghidra.trace.model.modules.TraceStaticMappingManager: ...

    @property
    def symbolManager(self) -> ghidra.trace.model.symbol.TraceSymbolManager: ...

    @property
    def synchronizedDomainObjects(self) -> List[ghidra.framework.model.DomainObject]: ...

    @property
    def temporary(self) -> bool: ...

    @temporary.setter
    def temporary(self, value: bool) -> None: ...

    @property
    def threadManager(self) -> ghidra.trace.model.thread.TraceThreadManager: ...

    @property
    def timeManager(self) -> ghidra.trace.model.time.TraceTimeManager: ...

    @property
    def undoName(self) -> unicode: ...