# Generated from /home/sergey/PycharmProjects/pywebidl2/grammar/WebIDLParser.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,90,834,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
        2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,
        7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,
        2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,
        7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,78,
        2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
        7,85,2,86,7,86,2,87,7,87,1,0,3,0,178,8,0,1,0,1,0,1,1,4,1,183,8,1,
        11,1,12,1,184,1,2,3,2,188,8,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,
        3,3,3,199,8,3,1,4,1,4,1,4,1,4,3,4,205,8,4,1,5,1,5,3,5,209,8,5,1,
        6,1,6,3,6,213,8,6,1,6,1,6,5,6,217,8,6,10,6,12,6,220,9,6,1,6,1,6,
        1,6,1,7,1,7,1,7,1,7,1,8,1,8,3,8,231,8,8,1,9,1,9,1,9,5,9,236,8,9,
        10,9,12,9,239,9,9,1,9,1,9,1,9,1,10,3,10,245,8,10,1,10,1,10,1,11,
        1,11,3,11,251,8,11,1,12,3,12,254,8,12,1,12,1,12,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,268,8,13,1,14,1,14,1,14,1,
        15,1,15,1,15,1,15,5,15,277,8,15,10,15,12,15,280,9,15,1,15,1,15,1,
        15,1,16,3,16,286,8,16,1,16,1,16,1,17,1,17,1,17,1,17,3,17,294,8,17,
        1,17,3,17,297,8,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,
        1,19,5,19,309,8,19,10,19,12,19,312,9,19,1,19,1,19,3,19,316,8,19,
        1,20,3,20,319,8,20,1,20,1,20,1,21,1,21,3,21,325,8,21,1,22,1,22,1,
        22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,3,23,337,8,23,1,24,1,24,1,
        24,1,25,1,25,1,25,3,25,345,8,25,1,26,1,26,1,27,1,27,1,27,1,28,1,
        28,1,28,1,28,1,28,1,29,1,29,3,29,359,8,29,1,30,1,30,1,30,1,30,1,
        30,1,30,1,30,3,30,368,8,30,1,31,3,31,371,8,31,1,31,1,31,1,32,1,32,
        1,32,1,33,3,33,379,8,33,1,33,1,33,3,33,383,8,33,1,33,1,33,1,33,1,
        34,1,34,3,34,390,8,34,1,35,1,35,1,36,1,36,1,36,5,36,397,8,36,10,
        36,12,36,400,9,36,1,37,3,37,403,8,37,1,37,1,37,1,38,1,38,1,38,1,
        38,3,38,411,8,38,1,38,1,38,3,38,415,8,38,1,38,1,38,3,38,419,8,38,
        1,39,1,39,3,39,423,8,39,1,40,1,40,1,40,3,40,428,8,40,1,40,1,40,1,
        40,1,41,1,41,1,41,3,41,436,8,41,1,42,3,42,439,8,42,1,42,1,42,3,42,
        443,8,42,1,43,1,43,1,43,1,44,3,44,449,8,44,1,44,1,44,3,44,453,8,
        44,1,45,1,45,1,45,1,45,1,45,3,45,460,8,45,1,45,1,45,1,45,1,45,1,
        45,1,45,1,45,1,45,1,45,3,45,471,8,45,1,45,1,45,3,45,475,8,45,1,45,
        1,45,3,45,479,8,45,1,46,1,46,3,46,483,8,46,1,46,1,46,1,47,1,47,1,
        48,3,48,490,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,
        49,1,50,3,50,503,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,51,3,51,512,
        8,51,1,51,1,51,1,51,1,51,5,51,518,8,51,10,51,12,51,521,9,51,1,51,
        1,51,1,51,1,52,3,52,527,8,52,1,52,1,52,1,53,1,53,1,53,3,53,534,8,
        53,1,54,1,54,1,54,3,54,539,8,54,1,54,1,54,5,54,543,8,54,10,54,12,
        54,546,9,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,5,54,555,8,54,10,
        54,12,54,558,9,54,1,54,1,54,3,54,562,8,54,1,55,3,55,565,8,55,1,55,
        1,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,577,8,56,1,56,
        1,56,3,56,581,8,56,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,
        3,58,592,8,58,5,58,594,8,58,10,58,12,58,597,9,58,1,58,1,58,1,58,
        1,59,1,59,1,59,1,59,1,59,3,59,607,8,59,1,59,1,59,1,59,1,60,1,60,
        1,60,1,60,1,60,1,61,1,61,1,61,3,61,620,8,61,3,61,622,8,61,1,62,3,
        62,625,8,62,1,62,1,62,1,63,1,63,1,63,1,63,5,63,633,8,63,10,63,12,
        63,636,9,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,
        64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,
        64,3,64,662,8,64,1,65,1,65,1,65,5,65,667,8,65,10,65,12,65,670,9,
        65,1,66,1,66,1,67,1,67,3,67,676,8,67,1,68,1,68,3,68,680,8,68,1,68,
        1,68,3,68,684,8,68,1,68,1,68,3,68,688,8,68,1,69,1,69,1,69,1,69,4,
        69,694,8,69,11,69,12,69,695,1,69,1,69,1,70,3,70,701,8,70,1,70,1,
        70,3,70,705,8,70,1,70,3,70,708,8,70,1,70,1,70,3,70,712,8,70,1,70,
        1,70,3,70,716,8,70,3,70,718,8,70,1,71,1,71,1,71,1,71,1,71,1,72,1,
        72,1,72,1,72,1,72,1,72,1,72,3,72,732,8,72,1,73,1,73,1,73,1,73,1,
        73,3,73,739,8,73,1,74,1,74,3,74,743,8,74,1,75,1,75,1,75,1,75,1,75,
        1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,77,3,77,758,8,77,1,77,1,77,
        1,78,1,78,1,79,3,79,765,8,79,1,79,1,79,1,80,1,80,1,80,3,80,772,8,
        80,3,80,774,8,80,1,81,1,81,1,82,1,82,1,83,1,83,1,84,1,84,1,85,1,
        85,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,
        86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,
        86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,
        86,1,86,1,86,1,86,1,86,1,86,3,86,830,8,86,1,87,1,87,1,87,0,0,88,
        0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
        46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
        90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
        126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
        158,160,162,164,166,168,170,172,174,0,9,2,0,20,20,58,58,3,0,28,28,
        36,36,61,61,3,0,35,35,50,50,59,59,2,0,31,31,34,34,3,0,24,24,30,30,
        70,70,1,0,72,82,2,0,33,33,66,66,4,0,37,37,44,44,47,47,84,84,13,0,
        20,21,25,29,32,32,36,36,38,41,43,43,45,46,54,54,56,56,58,58,60,61,
        63,64,67,68,909,0,177,1,0,0,0,2,182,1,0,0,0,4,187,1,0,0,0,6,198,
        1,0,0,0,8,204,1,0,0,0,10,208,1,0,0,0,12,210,1,0,0,0,14,224,1,0,0,
        0,16,230,1,0,0,0,18,232,1,0,0,0,20,244,1,0,0,0,22,250,1,0,0,0,24,
        253,1,0,0,0,26,267,1,0,0,0,28,269,1,0,0,0,30,272,1,0,0,0,32,285,
        1,0,0,0,34,296,1,0,0,0,36,298,1,0,0,0,38,315,1,0,0,0,40,318,1,0,
        0,0,42,324,1,0,0,0,44,326,1,0,0,0,46,336,1,0,0,0,48,338,1,0,0,0,
        50,344,1,0,0,0,52,346,1,0,0,0,54,348,1,0,0,0,56,351,1,0,0,0,58,358,
        1,0,0,0,60,367,1,0,0,0,62,370,1,0,0,0,64,374,1,0,0,0,66,378,1,0,
        0,0,68,389,1,0,0,0,70,391,1,0,0,0,72,393,1,0,0,0,74,402,1,0,0,0,
        76,418,1,0,0,0,78,422,1,0,0,0,80,424,1,0,0,0,82,432,1,0,0,0,84,442,
        1,0,0,0,86,444,1,0,0,0,88,452,1,0,0,0,90,478,1,0,0,0,92,480,1,0,
        0,0,94,486,1,0,0,0,96,489,1,0,0,0,98,499,1,0,0,0,100,502,1,0,0,0,
        102,511,1,0,0,0,104,526,1,0,0,0,106,533,1,0,0,0,108,561,1,0,0,0,
        110,564,1,0,0,0,112,580,1,0,0,0,114,582,1,0,0,0,116,585,1,0,0,0,
        118,601,1,0,0,0,120,611,1,0,0,0,122,621,1,0,0,0,124,624,1,0,0,0,
        126,628,1,0,0,0,128,661,1,0,0,0,130,663,1,0,0,0,132,671,1,0,0,0,
        134,675,1,0,0,0,136,687,1,0,0,0,138,689,1,0,0,0,140,717,1,0,0,0,
        142,719,1,0,0,0,144,731,1,0,0,0,146,738,1,0,0,0,148,742,1,0,0,0,
        150,744,1,0,0,0,152,749,1,0,0,0,154,757,1,0,0,0,156,761,1,0,0,0,
        158,764,1,0,0,0,160,773,1,0,0,0,162,775,1,0,0,0,164,777,1,0,0,0,
        166,779,1,0,0,0,168,781,1,0,0,0,170,783,1,0,0,0,172,829,1,0,0,0,
        174,831,1,0,0,0,176,178,3,2,1,0,177,176,1,0,0,0,177,178,1,0,0,0,
        178,179,1,0,0,0,179,180,5,0,0,1,180,1,1,0,0,0,181,183,3,4,2,0,182,
        181,1,0,0,0,183,184,1,0,0,0,184,182,1,0,0,0,184,185,1,0,0,0,185,
        3,1,0,0,0,186,188,3,126,63,0,187,186,1,0,0,0,187,188,1,0,0,0,188,
        189,1,0,0,0,189,190,3,6,3,0,190,5,1,0,0,0,191,199,3,8,4,0,192,199,
        3,102,51,0,193,199,3,14,7,0,194,199,3,108,54,0,195,199,3,116,58,
        0,196,199,3,120,60,0,197,199,3,36,18,0,198,191,1,0,0,0,198,192,1,
        0,0,0,198,193,1,0,0,0,198,194,1,0,0,0,198,195,1,0,0,0,198,196,1,
        0,0,0,198,197,1,0,0,0,199,7,1,0,0,0,200,201,5,25,0,0,201,205,3,38,
        19,0,202,203,5,40,0,0,203,205,3,10,5,0,204,200,1,0,0,0,204,202,1,
        0,0,0,205,9,1,0,0,0,206,209,3,12,6,0,207,209,3,30,15,0,208,206,1,
        0,0,0,208,207,1,0,0,0,209,11,1,0,0,0,210,212,5,89,0,0,211,213,3,
        28,14,0,212,211,1,0,0,0,212,213,1,0,0,0,213,214,1,0,0,0,214,218,
        5,9,0,0,215,217,3,20,10,0,216,215,1,0,0,0,217,220,1,0,0,0,218,216,
        1,0,0,0,218,219,1,0,0,0,219,221,1,0,0,0,220,218,1,0,0,0,221,222,
        5,10,0,0,222,223,5,14,0,0,223,13,1,0,0,0,224,225,5,54,0,0,225,226,
        5,40,0,0,226,227,3,16,8,0,227,15,1,0,0,0,228,231,3,18,9,0,229,231,
        3,30,15,0,230,228,1,0,0,0,230,229,1,0,0,0,231,17,1,0,0,0,232,233,
        5,89,0,0,233,237,5,9,0,0,234,236,3,24,12,0,235,234,1,0,0,0,236,239,
        1,0,0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,240,1,0,0,0,239,237,
        1,0,0,0,240,241,5,10,0,0,241,242,5,14,0,0,242,19,1,0,0,0,243,245,
        3,126,63,0,244,243,1,0,0,0,244,245,1,0,0,0,245,246,1,0,0,0,246,247,
        3,22,11,0,247,21,1,0,0,0,248,251,3,26,13,0,249,251,3,80,40,0,250,
        248,1,0,0,0,250,249,1,0,0,0,251,23,1,0,0,0,252,254,3,126,63,0,253,
        252,1,0,0,0,253,254,1,0,0,0,254,255,1,0,0,0,255,256,3,26,13,0,256,
        25,1,0,0,0,257,268,3,44,22,0,258,268,3,62,31,0,259,268,3,82,41,0,
        260,268,3,86,43,0,261,268,3,90,45,0,262,268,3,48,24,0,263,268,3,
        52,26,0,264,268,3,94,47,0,265,268,3,98,49,0,266,268,3,54,27,0,267,
        257,1,0,0,0,267,258,1,0,0,0,267,259,1,0,0,0,267,260,1,0,0,0,267,
        261,1,0,0,0,267,262,1,0,0,0,267,263,1,0,0,0,267,264,1,0,0,0,267,
        265,1,0,0,0,267,266,1,0,0,0,268,27,1,0,0,0,269,270,5,15,0,0,270,
        271,5,89,0,0,271,29,1,0,0,0,272,273,5,45,0,0,273,274,5,89,0,0,274,
        278,5,9,0,0,275,277,3,32,16,0,276,275,1,0,0,0,277,280,1,0,0,0,278,
        276,1,0,0,0,278,279,1,0,0,0,279,281,1,0,0,0,280,278,1,0,0,0,281,
        282,5,10,0,0,282,283,5,14,0,0,283,31,1,0,0,0,284,286,3,126,63,0,
        285,284,1,0,0,0,285,286,1,0,0,0,286,287,1,0,0,0,287,288,3,34,17,
        0,288,33,1,0,0,0,289,297,3,44,22,0,290,297,3,64,32,0,291,297,3,82,
        41,0,292,294,5,56,0,0,293,292,1,0,0,0,293,294,1,0,0,0,294,295,1,
        0,0,0,295,297,3,56,28,0,296,289,1,0,0,0,296,290,1,0,0,0,296,291,
        1,0,0,0,296,293,1,0,0,0,297,35,1,0,0,0,298,299,5,89,0,0,299,300,
        5,38,0,0,300,301,5,89,0,0,301,302,5,14,0,0,302,37,1,0,0,0,303,316,
        3,118,59,0,304,305,5,40,0,0,305,306,5,89,0,0,306,310,5,9,0,0,307,
        309,3,40,20,0,308,307,1,0,0,0,309,312,1,0,0,0,310,308,1,0,0,0,310,
        311,1,0,0,0,311,313,1,0,0,0,312,310,1,0,0,0,313,314,5,10,0,0,314,
        316,5,14,0,0,315,303,1,0,0,0,315,304,1,0,0,0,316,39,1,0,0,0,317,
        319,3,126,63,0,318,317,1,0,0,0,318,319,1,0,0,0,319,320,1,0,0,0,320,
        321,3,42,21,0,321,41,1,0,0,0,322,325,3,44,22,0,323,325,3,64,32,0,
        324,322,1,0,0,0,324,323,1,0,0,0,325,43,1,0,0,0,326,327,5,26,0,0,
        327,328,3,148,74,0,328,329,5,89,0,0,329,330,5,3,0,0,330,331,3,46,
        23,0,331,332,5,14,0,0,332,45,1,0,0,0,333,337,3,166,83,0,334,337,
        3,168,84,0,335,337,5,83,0,0,336,333,1,0,0,0,336,334,1,0,0,0,336,
        335,1,0,0,0,337,47,1,0,0,0,338,339,5,56,0,0,339,340,3,50,25,0,340,
        49,1,0,0,0,341,345,3,56,28,0,342,345,3,96,48,0,343,345,3,100,50,
        0,344,341,1,0,0,0,344,342,1,0,0,0,344,343,1,0,0,0,345,51,1,0,0,0,
        346,347,3,56,28,0,347,53,1,0,0,0,348,349,5,39,0,0,349,350,3,56,28,
        0,350,55,1,0,0,0,351,352,5,21,0,0,352,353,3,124,62,0,353,354,3,58,
        29,0,354,355,5,14,0,0,355,57,1,0,0,0,356,359,7,0,0,0,357,359,5,89,
        0,0,358,356,1,0,0,0,358,357,1,0,0,0,359,59,1,0,0,0,360,368,3,46,
        23,0,361,368,5,85,0,0,362,363,5,7,0,0,363,368,5,8,0,0,364,365,5,
        9,0,0,365,368,5,10,0,0,366,368,5,48,0,0,367,360,1,0,0,0,367,361,
        1,0,0,0,367,362,1,0,0,0,367,364,1,0,0,0,367,366,1,0,0,0,368,61,1,
        0,0,0,369,371,7,1,0,0,370,369,1,0,0,0,370,371,1,0,0,0,371,372,1,
        0,0,0,372,373,3,64,32,0,373,63,1,0,0,0,374,375,3,134,67,0,375,376,
        3,66,33,0,376,65,1,0,0,0,377,379,3,68,34,0,378,377,1,0,0,0,378,379,
        1,0,0,0,379,380,1,0,0,0,380,382,5,5,0,0,381,383,3,72,36,0,382,381,
        1,0,0,0,382,383,1,0,0,0,383,384,1,0,0,0,384,385,5,6,0,0,385,386,
        5,14,0,0,386,67,1,0,0,0,387,390,3,70,35,0,388,390,5,89,0,0,389,387,
        1,0,0,0,389,388,1,0,0,0,390,69,1,0,0,0,391,392,5,38,0,0,392,71,1,
        0,0,0,393,398,3,74,37,0,394,395,5,13,0,0,395,397,3,74,37,0,396,394,
        1,0,0,0,397,400,1,0,0,0,398,396,1,0,0,0,398,399,1,0,0,0,399,73,1,
        0,0,0,400,398,1,0,0,0,401,403,3,126,63,0,402,401,1,0,0,0,402,403,
        1,0,0,0,403,404,1,0,0,0,404,405,3,76,38,0,405,75,1,0,0,0,406,407,
        5,52,0,0,407,408,3,124,62,0,408,410,3,78,39,0,409,411,3,114,57,0,
        410,409,1,0,0,0,410,411,1,0,0,0,411,419,1,0,0,0,412,414,3,122,61,
        0,413,415,5,17,0,0,414,413,1,0,0,0,414,415,1,0,0,0,415,416,1,0,0,
        0,416,417,3,78,39,0,417,419,1,0,0,0,418,406,1,0,0,0,418,412,1,0,
        0,0,419,77,1,0,0,0,420,423,3,174,87,0,421,423,5,89,0,0,422,420,1,
        0,0,0,422,421,1,0,0,0,423,79,1,0,0,0,424,425,5,27,0,0,425,427,5,
        5,0,0,426,428,3,72,36,0,427,426,1,0,0,0,427,428,1,0,0,0,428,429,
        1,0,0,0,429,430,5,6,0,0,430,431,5,14,0,0,431,81,1,0,0,0,432,435,
        5,64,0,0,433,436,3,84,42,0,434,436,5,14,0,0,435,433,1,0,0,0,435,
        434,1,0,0,0,436,83,1,0,0,0,437,439,5,56,0,0,438,437,1,0,0,0,438,
        439,1,0,0,0,439,440,1,0,0,0,440,443,3,56,28,0,441,443,3,64,32,0,
        442,438,1,0,0,0,442,441,1,0,0,0,443,85,1,0,0,0,444,445,5,63,0,0,
        445,446,3,88,44,0,446,87,1,0,0,0,447,449,5,56,0,0,448,447,1,0,0,
        0,448,449,1,0,0,0,449,450,1,0,0,0,450,453,3,56,28,0,451,453,3,64,
        32,0,452,448,1,0,0,0,452,451,1,0,0,0,453,89,1,0,0,0,454,455,5,41,
        0,0,455,456,5,11,0,0,456,459,3,124,62,0,457,458,5,13,0,0,458,460,
        3,124,62,0,459,457,1,0,0,0,459,460,1,0,0,0,460,461,1,0,0,0,461,462,
        5,12,0,0,462,463,5,14,0,0,463,479,1,0,0,0,464,465,5,20,0,0,465,466,
        5,41,0,0,466,467,5,11,0,0,467,470,3,124,62,0,468,469,5,13,0,0,469,
        471,3,124,62,0,470,468,1,0,0,0,470,471,1,0,0,0,471,472,1,0,0,0,472,
        474,5,12,0,0,473,475,3,92,46,0,474,473,1,0,0,0,474,475,1,0,0,0,475,
        476,1,0,0,0,476,477,5,14,0,0,477,479,1,0,0,0,478,454,1,0,0,0,478,
        464,1,0,0,0,479,91,1,0,0,0,480,482,5,5,0,0,481,483,3,72,36,0,482,
        481,1,0,0,0,482,483,1,0,0,0,483,484,1,0,0,0,484,485,5,6,0,0,485,
        93,1,0,0,0,486,487,3,96,48,0,487,95,1,0,0,0,488,490,5,56,0,0,489,
        488,1,0,0,0,489,490,1,0,0,0,490,491,1,0,0,0,491,492,5,43,0,0,492,
        493,5,11,0,0,493,494,3,124,62,0,494,495,5,13,0,0,495,496,3,124,62,
        0,496,497,5,12,0,0,497,498,5,14,0,0,498,97,1,0,0,0,499,500,3,100,
        50,0,500,99,1,0,0,0,501,503,5,56,0,0,502,501,1,0,0,0,502,503,1,0,
        0,0,503,504,1,0,0,0,504,505,5,60,0,0,505,506,5,11,0,0,506,507,3,
        124,62,0,507,508,5,12,0,0,508,509,5,14,0,0,509,101,1,0,0,0,510,512,
        5,54,0,0,511,510,1,0,0,0,511,512,1,0,0,0,512,513,1,0,0,0,513,514,
        5,46,0,0,514,515,5,89,0,0,515,519,5,9,0,0,516,518,3,104,52,0,517,
        516,1,0,0,0,518,521,1,0,0,0,519,517,1,0,0,0,519,520,1,0,0,0,520,
        522,1,0,0,0,521,519,1,0,0,0,522,523,5,10,0,0,523,524,5,14,0,0,524,
        103,1,0,0,0,525,527,3,126,63,0,526,525,1,0,0,0,526,527,1,0,0,0,527,
        528,1,0,0,0,528,529,3,106,53,0,529,105,1,0,0,0,530,534,3,64,32,0,
        531,532,5,56,0,0,532,534,3,56,28,0,533,530,1,0,0,0,533,531,1,0,0,
        0,534,107,1,0,0,0,535,536,5,29,0,0,536,538,5,89,0,0,537,539,3,28,
        14,0,538,537,1,0,0,0,538,539,1,0,0,0,539,540,1,0,0,0,540,544,5,9,
        0,0,541,543,3,110,55,0,542,541,1,0,0,0,543,546,1,0,0,0,544,542,1,
        0,0,0,544,545,1,0,0,0,545,547,1,0,0,0,546,544,1,0,0,0,547,548,5,
        10,0,0,548,562,5,14,0,0,549,550,5,54,0,0,550,551,5,29,0,0,551,552,
        5,89,0,0,552,556,5,9,0,0,553,555,3,110,55,0,554,553,1,0,0,0,555,
        558,1,0,0,0,556,554,1,0,0,0,556,557,1,0,0,0,557,559,1,0,0,0,558,
        556,1,0,0,0,559,560,5,10,0,0,560,562,5,14,0,0,561,535,1,0,0,0,561,
        549,1,0,0,0,562,109,1,0,0,0,563,565,3,126,63,0,564,563,1,0,0,0,564,
        565,1,0,0,0,565,566,1,0,0,0,566,567,3,112,56,0,567,111,1,0,0,0,568,
        569,5,58,0,0,569,570,3,124,62,0,570,571,5,89,0,0,571,572,5,14,0,
        0,572,581,1,0,0,0,573,574,3,122,61,0,574,576,5,89,0,0,575,577,3,
        114,57,0,576,575,1,0,0,0,576,577,1,0,0,0,577,578,1,0,0,0,578,579,
        5,14,0,0,579,581,1,0,0,0,580,568,1,0,0,0,580,573,1,0,0,0,581,113,
        1,0,0,0,582,583,5,3,0,0,583,584,3,60,30,0,584,115,1,0,0,0,585,586,
        5,32,0,0,586,587,5,89,0,0,587,588,5,9,0,0,588,595,5,85,0,0,589,591,
        5,13,0,0,590,592,5,85,0,0,591,590,1,0,0,0,591,592,1,0,0,0,592,594,
        1,0,0,0,593,589,1,0,0,0,594,597,1,0,0,0,595,593,1,0,0,0,595,596,
        1,0,0,0,596,598,1,0,0,0,597,595,1,0,0,0,598,599,5,10,0,0,599,600,
        5,14,0,0,600,117,1,0,0,0,601,602,5,89,0,0,602,603,5,3,0,0,603,604,
        3,134,67,0,604,606,5,5,0,0,605,607,3,72,36,0,606,605,1,0,0,0,606,
        607,1,0,0,0,607,608,1,0,0,0,608,609,5,6,0,0,609,610,5,14,0,0,610,
        119,1,0,0,0,611,612,5,67,0,0,612,613,3,124,62,0,613,614,5,89,0,0,
        614,615,5,14,0,0,615,121,1,0,0,0,616,622,3,136,68,0,617,619,3,138,
        69,0,618,620,3,170,85,0,619,618,1,0,0,0,619,620,1,0,0,0,620,622,
        1,0,0,0,621,616,1,0,0,0,621,617,1,0,0,0,622,123,1,0,0,0,623,625,
        3,126,63,0,624,623,1,0,0,0,624,625,1,0,0,0,625,626,1,0,0,0,626,627,
        3,122,61,0,627,125,1,0,0,0,628,629,5,7,0,0,629,634,3,128,64,0,630,
        631,5,13,0,0,631,633,3,128,64,0,632,630,1,0,0,0,633,636,1,0,0,0,
        634,632,1,0,0,0,634,635,1,0,0,0,635,637,1,0,0,0,636,634,1,0,0,0,
        637,638,5,8,0,0,638,127,1,0,0,0,639,662,5,89,0,0,640,641,5,89,0,
        0,641,642,5,3,0,0,642,643,5,5,0,0,643,644,3,130,65,0,644,645,5,6,
        0,0,645,662,1,0,0,0,646,647,5,89,0,0,647,648,5,3,0,0,648,649,5,89,
        0,0,649,650,5,5,0,0,650,651,3,72,36,0,651,652,5,6,0,0,652,662,1,
        0,0,0,653,654,5,89,0,0,654,655,5,3,0,0,655,662,3,132,66,0,656,657,
        5,89,0,0,657,658,5,5,0,0,658,659,3,72,36,0,659,660,5,6,0,0,660,662,
        1,0,0,0,661,639,1,0,0,0,661,640,1,0,0,0,661,646,1,0,0,0,661,653,
        1,0,0,0,661,656,1,0,0,0,662,129,1,0,0,0,663,668,3,132,66,0,664,665,
        5,13,0,0,665,667,3,132,66,0,666,664,1,0,0,0,667,670,1,0,0,0,668,
        666,1,0,0,0,668,669,1,0,0,0,669,131,1,0,0,0,670,668,1,0,0,0,671,
        672,3,172,86,0,672,133,1,0,0,0,673,676,3,122,61,0,674,676,5,71,0,
        0,675,673,1,0,0,0,675,674,1,0,0,0,676,135,1,0,0,0,677,679,3,144,
        72,0,678,680,3,170,85,0,679,678,1,0,0,0,679,680,1,0,0,0,680,688,
        1,0,0,0,681,683,3,142,71,0,682,684,3,170,85,0,683,682,1,0,0,0,683,
        684,1,0,0,0,684,688,1,0,0,0,685,688,3,150,75,0,686,688,5,19,0,0,
        687,677,1,0,0,0,687,681,1,0,0,0,687,685,1,0,0,0,687,686,1,0,0,0,
        688,137,1,0,0,0,689,690,5,5,0,0,690,693,3,140,70,0,691,692,5,53,
        0,0,692,694,3,140,70,0,693,691,1,0,0,0,694,695,1,0,0,0,695,693,1,
        0,0,0,695,696,1,0,0,0,696,697,1,0,0,0,697,698,5,6,0,0,698,139,1,
        0,0,0,699,701,3,126,63,0,700,699,1,0,0,0,700,701,1,0,0,0,701,702,
        1,0,0,0,702,704,3,144,72,0,703,705,3,170,85,0,704,703,1,0,0,0,704,
        705,1,0,0,0,705,718,1,0,0,0,706,708,3,126,63,0,707,706,1,0,0,0,707,
        708,1,0,0,0,708,709,1,0,0,0,709,711,3,142,71,0,710,712,3,170,85,
        0,711,710,1,0,0,0,711,712,1,0,0,0,712,718,1,0,0,0,713,715,3,138,
        69,0,714,716,3,170,85,0,715,714,1,0,0,0,715,716,1,0,0,0,716,718,
        1,0,0,0,717,700,1,0,0,0,717,707,1,0,0,0,717,713,1,0,0,0,718,141,
        1,0,0,0,719,720,7,2,0,0,720,721,5,11,0,0,721,722,3,124,62,0,722,
        723,5,12,0,0,723,143,1,0,0,0,724,732,3,146,73,0,725,732,3,162,81,
        0,726,732,3,164,82,0,727,732,3,152,76,0,728,732,5,89,0,0,729,732,
        5,49,0,0,730,732,5,65,0,0,731,724,1,0,0,0,731,725,1,0,0,0,731,726,
        1,0,0,0,731,727,1,0,0,0,731,728,1,0,0,0,731,729,1,0,0,0,731,730,
        1,0,0,0,732,145,1,0,0,0,733,739,3,158,79,0,734,739,3,154,77,0,735,
        739,5,22,0,0,736,739,5,23,0,0,737,739,5,51,0,0,738,733,1,0,0,0,738,
        734,1,0,0,0,738,735,1,0,0,0,738,736,1,0,0,0,738,737,1,0,0,0,739,
        147,1,0,0,0,740,743,3,146,73,0,741,743,5,89,0,0,742,740,1,0,0,0,
        742,741,1,0,0,0,743,149,1,0,0,0,744,745,5,55,0,0,745,746,5,11,0,
        0,746,747,3,134,67,0,747,748,5,12,0,0,748,151,1,0,0,0,749,750,5,
        57,0,0,750,751,5,11,0,0,751,752,3,162,81,0,752,753,5,13,0,0,753,
        754,3,124,62,0,754,755,5,12,0,0,755,153,1,0,0,0,756,758,5,68,0,0,
        757,756,1,0,0,0,757,758,1,0,0,0,758,759,1,0,0,0,759,760,3,156,78,
        0,760,155,1,0,0,0,761,762,7,3,0,0,762,157,1,0,0,0,763,765,5,69,0,
        0,764,763,1,0,0,0,764,765,1,0,0,0,765,766,1,0,0,0,766,767,3,160,
        80,0,767,159,1,0,0,0,768,774,5,62,0,0,769,771,5,42,0,0,770,772,5,
        42,0,0,771,770,1,0,0,0,771,772,1,0,0,0,772,774,1,0,0,0,773,768,1,
        0,0,0,773,769,1,0,0,0,774,161,1,0,0,0,775,776,7,4,0,0,776,163,1,
        0,0,0,777,778,7,5,0,0,778,165,1,0,0,0,779,780,7,6,0,0,780,167,1,
        0,0,0,781,782,7,7,0,0,782,169,1,0,0,0,783,784,5,4,0,0,784,171,1,
        0,0,0,785,830,5,83,0,0,786,830,5,84,0,0,787,830,5,89,0,0,788,830,
        5,85,0,0,789,830,5,90,0,0,790,830,5,16,0,0,791,830,5,44,0,0,792,
        830,5,18,0,0,793,830,5,17,0,0,794,830,5,15,0,0,795,830,5,14,0,0,
        796,830,5,11,0,0,797,830,5,3,0,0,798,830,5,12,0,0,799,830,5,4,0,
        0,800,830,5,24,0,0,801,830,5,30,0,0,802,830,5,35,0,0,803,830,5,37,
        0,0,804,830,5,47,0,0,805,830,5,50,0,0,806,830,5,55,0,0,807,830,5,
        70,0,0,808,830,5,19,0,0,809,830,5,22,0,0,810,830,5,23,0,0,811,830,
        5,31,0,0,812,830,5,33,0,0,813,830,5,34,0,0,814,830,5,42,0,0,815,
        830,5,48,0,0,816,830,5,49,0,0,817,830,5,51,0,0,818,830,5,53,0,0,
        819,830,5,52,0,0,820,830,5,57,0,0,821,830,5,59,0,0,822,830,5,62,
        0,0,823,830,5,65,0,0,824,830,5,66,0,0,825,830,5,69,0,0,826,830,5,
        71,0,0,827,830,3,174,87,0,828,830,3,164,82,0,829,785,1,0,0,0,829,
        786,1,0,0,0,829,787,1,0,0,0,829,788,1,0,0,0,829,789,1,0,0,0,829,
        790,1,0,0,0,829,791,1,0,0,0,829,792,1,0,0,0,829,793,1,0,0,0,829,
        794,1,0,0,0,829,795,1,0,0,0,829,796,1,0,0,0,829,797,1,0,0,0,829,
        798,1,0,0,0,829,799,1,0,0,0,829,800,1,0,0,0,829,801,1,0,0,0,829,
        802,1,0,0,0,829,803,1,0,0,0,829,804,1,0,0,0,829,805,1,0,0,0,829,
        806,1,0,0,0,829,807,1,0,0,0,829,808,1,0,0,0,829,809,1,0,0,0,829,
        810,1,0,0,0,829,811,1,0,0,0,829,812,1,0,0,0,829,813,1,0,0,0,829,
        814,1,0,0,0,829,815,1,0,0,0,829,816,1,0,0,0,829,817,1,0,0,0,829,
        818,1,0,0,0,829,819,1,0,0,0,829,820,1,0,0,0,829,821,1,0,0,0,829,
        822,1,0,0,0,829,823,1,0,0,0,829,824,1,0,0,0,829,825,1,0,0,0,829,
        826,1,0,0,0,829,827,1,0,0,0,829,828,1,0,0,0,830,173,1,0,0,0,831,
        832,7,8,0,0,832,175,1,0,0,0,88,177,184,187,198,204,208,212,218,230,
        237,244,250,253,267,278,285,293,296,310,315,318,324,336,344,358,
        367,370,378,382,389,398,402,410,414,418,422,427,435,438,442,448,
        452,459,470,474,478,482,489,502,511,519,526,533,538,544,556,561,
        564,576,580,591,595,606,619,621,624,634,661,668,675,679,683,687,
        695,700,704,707,711,715,717,731,738,742,757,764,771,773,829
    ]

class WebIDLParser ( Parser ):

    grammarFileName = "WebIDLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "'='", "'?'", 
                     "'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", "'>'", 
                     "','", "';'", "':'", "'-'", "'...'", "'.'", "'any'", 
                     "'async'", "'attribute'", "'boolean'", "'byte'", "'ByteString'", 
                     "'callback'", "'const'", "'constructor'", "'deleter'", 
                     "'dictionary'", "'DOMString'", "'double'", "'enum'", 
                     "'false'", "'float'", "'FrozenArray'", "'getter'", 
                     "'Infinity'", "'includes'", "'inherit'", "'interface'", 
                     "'iterable'", "'long'", "'maplike'", "'-Infinity'", 
                     "'mixin'", "'namespace'", "'NaN'", "'null'", "'object'", 
                     "'ObservableArray'", "'octet'", "'optional'", "'or'", 
                     "'partial'", "'Promise'", "'readonly'", "'record'", 
                     "'required'", "'sequence'", "'setlike'", "'setter'", 
                     "'short'", "'static'", "'stringifier'", "'symbol'", 
                     "'true'", "'typedef'", "'unrestricted'", "'unsigned'", 
                     "'USVString'", "'void'", "'ArrayBuffer'", "'DataView'", 
                     "'Int8Array'", "'Int16Array'", "'Int32Array'", "'Uint8Array'", 
                     "'Uint16Array'", "'Uint32Array'", "'Uint8ClampedArray'", 
                     "'Float32Array'", "'Float64Array'" ]

    symbolicNames = [ "<INVALID>", "WHITESPACE", "COMMENT", "EQUAL_SYMBOL", 
                      "QUESTION_SYMBOL", "LEFT_PAREN", "RIGHT_PAREN", "LEFT_BRACKET", 
                      "RIGHT_BRACKET", "LEFT_BRACE", "RIGHT_BRACE", "LEFT_ANGLE", 
                      "RIGHT_ANGLE", "COMMA", "SEMI", "COLON", "MINUS", 
                      "ELLIPSIS", "DOT", "ANY", "ASYNC", "ATTRIBUTE", "BOOLEAN", 
                      "BYTE", "BYTE_STRING", "CALLBACK", "CONST", "CONSTRUCTOR", 
                      "DELETER", "DICTIONARY", "DOM_STRING", "DOUBLE", "ENUM", 
                      "FALSE", "FLOAT", "FROZEN_ARRAY", "GETTER", "INFINITY", 
                      "INCLUDES", "INHERIT", "INTERFACE", "ITERABLE", "LONG", 
                      "MAPLIKE", "MINUS_INFINITY", "MIXIN", "NAMESPACE", 
                      "NAN", "NULL", "OBJECT", "OBSERVABLE_ARRAY", "OCTET", 
                      "OPTIONAL", "OR", "PARTIAL", "PROMISE", "READONLY", 
                      "RECORD", "REQUIRED", "SEQUENCE", "SETLIKE", "SETTER", 
                      "SHORT", "STATIC", "STRINGIFIER", "SYMBOL", "TRUE", 
                      "TYPEDEF", "UNRESTRICTED", "UNSIGNED", "USV_STRING", 
                      "VOID", "ARRAY_BUFFER", "DATA_VIEW", "INT_8_ARRAY", 
                      "INT_16_ARRAY", "INT_32_ARRAY", "UINT_8_ARRAY", "UINT_16_ARRAY", 
                      "UINT_32_ARRAY", "UINT_8_CLAMPED_ARRAY", "FLOAT_32_ARRAY", 
                      "FLOAT_64_ARRAY", "IntegerLiteral", "DecimalLiteral", 
                      "StringLiteral", "HexIntegerLiteral", "OctalIntegerLiteral", 
                      "DecimalIntegerLiteral", "IDENTIFIER", "OTHER" ]

    RULE_webIDL = 0
    RULE_definitions = 1
    RULE_extendedDefinition = 2
    RULE_definition = 3
    RULE_callbackOrInterfaceOrMixin = 4
    RULE_interfaceOrMixin = 5
    RULE_interfaceRest = 6
    RULE_partial = 7
    RULE_partialInterfaceOrPartialMixin = 8
    RULE_partialInterfaceRest = 9
    RULE_interfaceMembers = 10
    RULE_interfaceMember = 11
    RULE_partialInterfaceMembers = 12
    RULE_partialInterfaceMember = 13
    RULE_inheritance = 14
    RULE_mixinRest = 15
    RULE_mixinMembers = 16
    RULE_mixinMember = 17
    RULE_includesStatement = 18
    RULE_callbackRestOrInterface = 19
    RULE_callbackInterfaceMembers = 20
    RULE_callbackInterfaceMember = 21
    RULE_const_ = 22
    RULE_constValue = 23
    RULE_readOnlyMember = 24
    RULE_readOnlyMemberRest = 25
    RULE_readWriteAttribute = 26
    RULE_inheritAttribute = 27
    RULE_attributeRest = 28
    RULE_attributeName = 29
    RULE_defaultValue = 30
    RULE_operation = 31
    RULE_regularOperation = 32
    RULE_operationRest = 33
    RULE_operationName = 34
    RULE_operationNameKeyword = 35
    RULE_argumentList = 36
    RULE_argument = 37
    RULE_argumentRest = 38
    RULE_argumentName = 39
    RULE_constructor = 40
    RULE_stringifier = 41
    RULE_stringifierRest = 42
    RULE_staticMember = 43
    RULE_staticMemberRest = 44
    RULE_iterable = 45
    RULE_optionalArgumentList = 46
    RULE_readWriteMaplike = 47
    RULE_maplikeRest = 48
    RULE_readWriteSetlike = 49
    RULE_setlikeRest = 50
    RULE_namespace = 51
    RULE_namespaceMembers = 52
    RULE_namespaceMember = 53
    RULE_dictionary = 54
    RULE_dictionaryMembers = 55
    RULE_dictionaryMember = 56
    RULE_default_ = 57
    RULE_enum_ = 58
    RULE_callbackRest = 59
    RULE_typedef = 60
    RULE_type_ = 61
    RULE_typeWithExtendedAttributes = 62
    RULE_extendedAttributeList = 63
    RULE_extendedAttribute = 64
    RULE_identifierList = 65
    RULE_identifier = 66
    RULE_returnType = 67
    RULE_singleType = 68
    RULE_unionType = 69
    RULE_unionMemberType = 70
    RULE_genericType = 71
    RULE_distinguishableType = 72
    RULE_primitiveType = 73
    RULE_constType = 74
    RULE_promiseType = 75
    RULE_recordType = 76
    RULE_unrestrictedFloatType = 77
    RULE_floatType = 78
    RULE_unsignedIntegerType = 79
    RULE_integerType = 80
    RULE_stringType = 81
    RULE_bufferRelatedType = 82
    RULE_booleanLiteral = 83
    RULE_floatLiteral = 84
    RULE_null_ = 85
    RULE_other = 86
    RULE_argumentNameKeyword = 87

    ruleNames =  [ "webIDL", "definitions", "extendedDefinition", "definition", 
                   "callbackOrInterfaceOrMixin", "interfaceOrMixin", "interfaceRest", 
                   "partial", "partialInterfaceOrPartialMixin", "partialInterfaceRest", 
                   "interfaceMembers", "interfaceMember", "partialInterfaceMembers", 
                   "partialInterfaceMember", "inheritance", "mixinRest", 
                   "mixinMembers", "mixinMember", "includesStatement", "callbackRestOrInterface", 
                   "callbackInterfaceMembers", "callbackInterfaceMember", 
                   "const_", "constValue", "readOnlyMember", "readOnlyMemberRest", 
                   "readWriteAttribute", "inheritAttribute", "attributeRest", 
                   "attributeName", "defaultValue", "operation", "regularOperation", 
                   "operationRest", "operationName", "operationNameKeyword", 
                   "argumentList", "argument", "argumentRest", "argumentName", 
                   "constructor", "stringifier", "stringifierRest", "staticMember", 
                   "staticMemberRest", "iterable", "optionalArgumentList", 
                   "readWriteMaplike", "maplikeRest", "readWriteSetlike", 
                   "setlikeRest", "namespace", "namespaceMembers", "namespaceMember", 
                   "dictionary", "dictionaryMembers", "dictionaryMember", 
                   "default_", "enum_", "callbackRest", "typedef", "type_", 
                   "typeWithExtendedAttributes", "extendedAttributeList", 
                   "extendedAttribute", "identifierList", "identifier", 
                   "returnType", "singleType", "unionType", "unionMemberType", 
                   "genericType", "distinguishableType", "primitiveType", 
                   "constType", "promiseType", "recordType", "unrestrictedFloatType", 
                   "floatType", "unsignedIntegerType", "integerType", "stringType", 
                   "bufferRelatedType", "booleanLiteral", "floatLiteral", 
                   "null_", "other", "argumentNameKeyword" ]

    EOF = Token.EOF
    WHITESPACE=1
    COMMENT=2
    EQUAL_SYMBOL=3
    QUESTION_SYMBOL=4
    LEFT_PAREN=5
    RIGHT_PAREN=6
    LEFT_BRACKET=7
    RIGHT_BRACKET=8
    LEFT_BRACE=9
    RIGHT_BRACE=10
    LEFT_ANGLE=11
    RIGHT_ANGLE=12
    COMMA=13
    SEMI=14
    COLON=15
    MINUS=16
    ELLIPSIS=17
    DOT=18
    ANY=19
    ASYNC=20
    ATTRIBUTE=21
    BOOLEAN=22
    BYTE=23
    BYTE_STRING=24
    CALLBACK=25
    CONST=26
    CONSTRUCTOR=27
    DELETER=28
    DICTIONARY=29
    DOM_STRING=30
    DOUBLE=31
    ENUM=32
    FALSE=33
    FLOAT=34
    FROZEN_ARRAY=35
    GETTER=36
    INFINITY=37
    INCLUDES=38
    INHERIT=39
    INTERFACE=40
    ITERABLE=41
    LONG=42
    MAPLIKE=43
    MINUS_INFINITY=44
    MIXIN=45
    NAMESPACE=46
    NAN=47
    NULL=48
    OBJECT=49
    OBSERVABLE_ARRAY=50
    OCTET=51
    OPTIONAL=52
    OR=53
    PARTIAL=54
    PROMISE=55
    READONLY=56
    RECORD=57
    REQUIRED=58
    SEQUENCE=59
    SETLIKE=60
    SETTER=61
    SHORT=62
    STATIC=63
    STRINGIFIER=64
    SYMBOL=65
    TRUE=66
    TYPEDEF=67
    UNRESTRICTED=68
    UNSIGNED=69
    USV_STRING=70
    VOID=71
    ARRAY_BUFFER=72
    DATA_VIEW=73
    INT_8_ARRAY=74
    INT_16_ARRAY=75
    INT_32_ARRAY=76
    UINT_8_ARRAY=77
    UINT_16_ARRAY=78
    UINT_32_ARRAY=79
    UINT_8_CLAMPED_ARRAY=80
    FLOAT_32_ARRAY=81
    FLOAT_64_ARRAY=82
    IntegerLiteral=83
    DecimalLiteral=84
    StringLiteral=85
    HexIntegerLiteral=86
    OctalIntegerLiteral=87
    DecimalIntegerLiteral=88
    IDENTIFIER=89
    OTHER=90

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class WebIDLContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(WebIDLParser.EOF, 0)

        def definitions(self):
            return self.getTypedRuleContext(WebIDLParser.DefinitionsContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_webIDL

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWebIDL" ):
                return visitor.visitWebIDL(self)
            else:
                return visitor.visitChildren(self)




    def webIDL(self):

        localctx = WebIDLParser.WebIDLContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_webIDL)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WebIDLParser.LEFT_BRACKET) | (1 << WebIDLParser.CALLBACK) | (1 << WebIDLParser.DICTIONARY) | (1 << WebIDLParser.ENUM) | (1 << WebIDLParser.INTERFACE) | (1 << WebIDLParser.NAMESPACE) | (1 << WebIDLParser.PARTIAL))) != 0) or _la==WebIDLParser.TYPEDEF or _la==WebIDLParser.IDENTIFIER:
                self.state = 176
                self.definitions()


            self.state = 179
            self.match(WebIDLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefinitionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def extendedDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WebIDLParser.ExtendedDefinitionContext)
            else:
                return self.getTypedRuleContext(WebIDLParser.ExtendedDefinitionContext,i)


        def getRuleIndex(self):
            return WebIDLParser.RULE_definitions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefinitions" ):
                return visitor.visitDefinitions(self)
            else:
                return visitor.visitChildren(self)




    def definitions(self):

        localctx = WebIDLParser.DefinitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_definitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 182 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 181
                self.extendedDefinition()
                self.state = 184 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WebIDLParser.LEFT_BRACKET) | (1 << WebIDLParser.CALLBACK) | (1 << WebIDLParser.DICTIONARY) | (1 << WebIDLParser.ENUM) | (1 << WebIDLParser.INTERFACE) | (1 << WebIDLParser.NAMESPACE) | (1 << WebIDLParser.PARTIAL))) != 0) or _la==WebIDLParser.TYPEDEF or _la==WebIDLParser.IDENTIFIER):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtendedDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def definition(self):
            return self.getTypedRuleContext(WebIDLParser.DefinitionContext,0)


        def extendedAttributeList(self):
            return self.getTypedRuleContext(WebIDLParser.ExtendedAttributeListContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_extendedDefinition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtendedDefinition" ):
                return visitor.visitExtendedDefinition(self)
            else:
                return visitor.visitChildren(self)




    def extendedDefinition(self):

        localctx = WebIDLParser.ExtendedDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_extendedDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WebIDLParser.LEFT_BRACKET:
                self.state = 186
                self.extendedAttributeList()


            self.state = 189
            self.definition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def callbackOrInterfaceOrMixin(self):
            return self.getTypedRuleContext(WebIDLParser.CallbackOrInterfaceOrMixinContext,0)


        def namespace(self):
            return self.getTypedRuleContext(WebIDLParser.NamespaceContext,0)


        def partial(self):
            return self.getTypedRuleContext(WebIDLParser.PartialContext,0)


        def dictionary(self):
            return self.getTypedRuleContext(WebIDLParser.DictionaryContext,0)


        def enum_(self):
            return self.getTypedRuleContext(WebIDLParser.Enum_Context,0)


        def typedef(self):
            return self.getTypedRuleContext(WebIDLParser.TypedefContext,0)


        def includesStatement(self):
            return self.getTypedRuleContext(WebIDLParser.IncludesStatementContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_definition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefinition" ):
                return visitor.visitDefinition(self)
            else:
                return visitor.visitChildren(self)




    def definition(self):

        localctx = WebIDLParser.DefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_definition)
        try:
            self.state = 198
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 191
                self.callbackOrInterfaceOrMixin()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 192
                self.namespace()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 193
                self.partial()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 194
                self.dictionary()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 195
                self.enum_()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 196
                self.typedef()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 197
                self.includesStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallbackOrInterfaceOrMixinContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALLBACK(self):
            return self.getToken(WebIDLParser.CALLBACK, 0)

        def callbackRestOrInterface(self):
            return self.getTypedRuleContext(WebIDLParser.CallbackRestOrInterfaceContext,0)


        def INTERFACE(self):
            return self.getToken(WebIDLParser.INTERFACE, 0)

        def interfaceOrMixin(self):
            return self.getTypedRuleContext(WebIDLParser.InterfaceOrMixinContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_callbackOrInterfaceOrMixin

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallbackOrInterfaceOrMixin" ):
                return visitor.visitCallbackOrInterfaceOrMixin(self)
            else:
                return visitor.visitChildren(self)




    def callbackOrInterfaceOrMixin(self):

        localctx = WebIDLParser.CallbackOrInterfaceOrMixinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_callbackOrInterfaceOrMixin)
        try:
            self.state = 204
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WebIDLParser.CALLBACK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 200
                self.match(WebIDLParser.CALLBACK)
                self.state = 201
                self.callbackRestOrInterface()
                pass
            elif token in [WebIDLParser.INTERFACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 202
                self.match(WebIDLParser.INTERFACE)
                self.state = 203
                self.interfaceOrMixin()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceOrMixinContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceRest(self):
            return self.getTypedRuleContext(WebIDLParser.InterfaceRestContext,0)


        def mixinRest(self):
            return self.getTypedRuleContext(WebIDLParser.MixinRestContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_interfaceOrMixin

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceOrMixin" ):
                return visitor.visitInterfaceOrMixin(self)
            else:
                return visitor.visitChildren(self)




    def interfaceOrMixin(self):

        localctx = WebIDLParser.InterfaceOrMixinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_interfaceOrMixin)
        try:
            self.state = 208
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WebIDLParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 206
                self.interfaceRest()
                pass
            elif token in [WebIDLParser.MIXIN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 207
                self.mixinRest()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(WebIDLParser.IDENTIFIER, 0)

        def LEFT_BRACE(self):
            return self.getToken(WebIDLParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(WebIDLParser.RIGHT_BRACE, 0)

        def SEMI(self):
            return self.getToken(WebIDLParser.SEMI, 0)

        def inheritance(self):
            return self.getTypedRuleContext(WebIDLParser.InheritanceContext,0)


        def interfaceMembers(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WebIDLParser.InterfaceMembersContext)
            else:
                return self.getTypedRuleContext(WebIDLParser.InterfaceMembersContext,i)


        def getRuleIndex(self):
            return WebIDLParser.RULE_interfaceRest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceRest" ):
                return visitor.visitInterfaceRest(self)
            else:
                return visitor.visitChildren(self)




    def interfaceRest(self):

        localctx = WebIDLParser.InterfaceRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_interfaceRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 210
            self.match(WebIDLParser.IDENTIFIER)
            self.state = 212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WebIDLParser.COLON:
                self.state = 211
                self.inheritance()


            self.state = 214
            self.match(WebIDLParser.LEFT_BRACE)
            self.state = 218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WebIDLParser.LEFT_PAREN) | (1 << WebIDLParser.LEFT_BRACKET) | (1 << WebIDLParser.ANY) | (1 << WebIDLParser.ASYNC) | (1 << WebIDLParser.ATTRIBUTE) | (1 << WebIDLParser.BOOLEAN) | (1 << WebIDLParser.BYTE) | (1 << WebIDLParser.BYTE_STRING) | (1 << WebIDLParser.CONST) | (1 << WebIDLParser.CONSTRUCTOR) | (1 << WebIDLParser.DELETER) | (1 << WebIDLParser.DOM_STRING) | (1 << WebIDLParser.DOUBLE) | (1 << WebIDLParser.FLOAT) | (1 << WebIDLParser.FROZEN_ARRAY) | (1 << WebIDLParser.GETTER) | (1 << WebIDLParser.INHERIT) | (1 << WebIDLParser.ITERABLE) | (1 << WebIDLParser.LONG) | (1 << WebIDLParser.MAPLIKE) | (1 << WebIDLParser.OBJECT) | (1 << WebIDLParser.OBSERVABLE_ARRAY) | (1 << WebIDLParser.OCTET) | (1 << WebIDLParser.PROMISE) | (1 << WebIDLParser.READONLY) | (1 << WebIDLParser.RECORD) | (1 << WebIDLParser.SEQUENCE) | (1 << WebIDLParser.SETLIKE) | (1 << WebIDLParser.SETTER) | (1 << WebIDLParser.SHORT) | (1 << WebIDLParser.STATIC))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (WebIDLParser.STRINGIFIER - 64)) | (1 << (WebIDLParser.SYMBOL - 64)) | (1 << (WebIDLParser.UNRESTRICTED - 64)) | (1 << (WebIDLParser.UNSIGNED - 64)) | (1 << (WebIDLParser.USV_STRING - 64)) | (1 << (WebIDLParser.VOID - 64)) | (1 << (WebIDLParser.ARRAY_BUFFER - 64)) | (1 << (WebIDLParser.DATA_VIEW - 64)) | (1 << (WebIDLParser.INT_8_ARRAY - 64)) | (1 << (WebIDLParser.INT_16_ARRAY - 64)) | (1 << (WebIDLParser.INT_32_ARRAY - 64)) | (1 << (WebIDLParser.UINT_8_ARRAY - 64)) | (1 << (WebIDLParser.UINT_16_ARRAY - 64)) | (1 << (WebIDLParser.UINT_32_ARRAY - 64)) | (1 << (WebIDLParser.UINT_8_CLAMPED_ARRAY - 64)) | (1 << (WebIDLParser.FLOAT_32_ARRAY - 64)) | (1 << (WebIDLParser.FLOAT_64_ARRAY - 64)) | (1 << (WebIDLParser.IDENTIFIER - 64)))) != 0):
                self.state = 215
                self.interfaceMembers()
                self.state = 220
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 221
            self.match(WebIDLParser.RIGHT_BRACE)
            self.state = 222
            self.match(WebIDLParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartialContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTIAL(self):
            return self.getToken(WebIDLParser.PARTIAL, 0)

        def INTERFACE(self):
            return self.getToken(WebIDLParser.INTERFACE, 0)

        def partialInterfaceOrPartialMixin(self):
            return self.getTypedRuleContext(WebIDLParser.PartialInterfaceOrPartialMixinContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_partial

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartial" ):
                return visitor.visitPartial(self)
            else:
                return visitor.visitChildren(self)




    def partial(self):

        localctx = WebIDLParser.PartialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_partial)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 224
            self.match(WebIDLParser.PARTIAL)
            self.state = 225
            self.match(WebIDLParser.INTERFACE)
            self.state = 226
            self.partialInterfaceOrPartialMixin()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartialInterfaceOrPartialMixinContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partialInterfaceRest(self):
            return self.getTypedRuleContext(WebIDLParser.PartialInterfaceRestContext,0)


        def mixinRest(self):
            return self.getTypedRuleContext(WebIDLParser.MixinRestContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_partialInterfaceOrPartialMixin

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartialInterfaceOrPartialMixin" ):
                return visitor.visitPartialInterfaceOrPartialMixin(self)
            else:
                return visitor.visitChildren(self)




    def partialInterfaceOrPartialMixin(self):

        localctx = WebIDLParser.PartialInterfaceOrPartialMixinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_partialInterfaceOrPartialMixin)
        try:
            self.state = 230
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WebIDLParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 228
                self.partialInterfaceRest()
                pass
            elif token in [WebIDLParser.MIXIN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 229
                self.mixinRest()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartialInterfaceRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(WebIDLParser.IDENTIFIER, 0)

        def LEFT_BRACE(self):
            return self.getToken(WebIDLParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(WebIDLParser.RIGHT_BRACE, 0)

        def SEMI(self):
            return self.getToken(WebIDLParser.SEMI, 0)

        def partialInterfaceMembers(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WebIDLParser.PartialInterfaceMembersContext)
            else:
                return self.getTypedRuleContext(WebIDLParser.PartialInterfaceMembersContext,i)


        def getRuleIndex(self):
            return WebIDLParser.RULE_partialInterfaceRest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartialInterfaceRest" ):
                return visitor.visitPartialInterfaceRest(self)
            else:
                return visitor.visitChildren(self)




    def partialInterfaceRest(self):

        localctx = WebIDLParser.PartialInterfaceRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_partialInterfaceRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 232
            self.match(WebIDLParser.IDENTIFIER)
            self.state = 233
            self.match(WebIDLParser.LEFT_BRACE)
            self.state = 237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WebIDLParser.LEFT_PAREN) | (1 << WebIDLParser.LEFT_BRACKET) | (1 << WebIDLParser.ANY) | (1 << WebIDLParser.ASYNC) | (1 << WebIDLParser.ATTRIBUTE) | (1 << WebIDLParser.BOOLEAN) | (1 << WebIDLParser.BYTE) | (1 << WebIDLParser.BYTE_STRING) | (1 << WebIDLParser.CONST) | (1 << WebIDLParser.DELETER) | (1 << WebIDLParser.DOM_STRING) | (1 << WebIDLParser.DOUBLE) | (1 << WebIDLParser.FLOAT) | (1 << WebIDLParser.FROZEN_ARRAY) | (1 << WebIDLParser.GETTER) | (1 << WebIDLParser.INHERIT) | (1 << WebIDLParser.ITERABLE) | (1 << WebIDLParser.LONG) | (1 << WebIDLParser.MAPLIKE) | (1 << WebIDLParser.OBJECT) | (1 << WebIDLParser.OBSERVABLE_ARRAY) | (1 << WebIDLParser.OCTET) | (1 << WebIDLParser.PROMISE) | (1 << WebIDLParser.READONLY) | (1 << WebIDLParser.RECORD) | (1 << WebIDLParser.SEQUENCE) | (1 << WebIDLParser.SETLIKE) | (1 << WebIDLParser.SETTER) | (1 << WebIDLParser.SHORT) | (1 << WebIDLParser.STATIC))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (WebIDLParser.STRINGIFIER - 64)) | (1 << (WebIDLParser.SYMBOL - 64)) | (1 << (WebIDLParser.UNRESTRICTED - 64)) | (1 << (WebIDLParser.UNSIGNED - 64)) | (1 << (WebIDLParser.USV_STRING - 64)) | (1 << (WebIDLParser.VOID - 64)) | (1 << (WebIDLParser.ARRAY_BUFFER - 64)) | (1 << (WebIDLParser.DATA_VIEW - 64)) | (1 << (WebIDLParser.INT_8_ARRAY - 64)) | (1 << (WebIDLParser.INT_16_ARRAY - 64)) | (1 << (WebIDLParser.INT_32_ARRAY - 64)) | (1 << (WebIDLParser.UINT_8_ARRAY - 64)) | (1 << (WebIDLParser.UINT_16_ARRAY - 64)) | (1 << (WebIDLParser.UINT_32_ARRAY - 64)) | (1 << (WebIDLParser.UINT_8_CLAMPED_ARRAY - 64)) | (1 << (WebIDLParser.FLOAT_32_ARRAY - 64)) | (1 << (WebIDLParser.FLOAT_64_ARRAY - 64)) | (1 << (WebIDLParser.IDENTIFIER - 64)))) != 0):
                self.state = 234
                self.partialInterfaceMembers()
                self.state = 239
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 240
            self.match(WebIDLParser.RIGHT_BRACE)
            self.state = 241
            self.match(WebIDLParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMembersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceMember(self):
            return self.getTypedRuleContext(WebIDLParser.InterfaceMemberContext,0)


        def extendedAttributeList(self):
            return self.getTypedRuleContext(WebIDLParser.ExtendedAttributeListContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_interfaceMembers

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceMembers" ):
                return visitor.visitInterfaceMembers(self)
            else:
                return visitor.visitChildren(self)




    def interfaceMembers(self):

        localctx = WebIDLParser.InterfaceMembersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_interfaceMembers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WebIDLParser.LEFT_BRACKET:
                self.state = 243
                self.extendedAttributeList()


            self.state = 246
            self.interfaceMember()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partialInterfaceMember(self):
            return self.getTypedRuleContext(WebIDLParser.PartialInterfaceMemberContext,0)


        def constructor(self):
            return self.getTypedRuleContext(WebIDLParser.ConstructorContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_interfaceMember

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceMember" ):
                return visitor.visitInterfaceMember(self)
            else:
                return visitor.visitChildren(self)




    def interfaceMember(self):

        localctx = WebIDLParser.InterfaceMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_interfaceMember)
        try:
            self.state = 250
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WebIDLParser.LEFT_PAREN, WebIDLParser.ANY, WebIDLParser.ASYNC, WebIDLParser.ATTRIBUTE, WebIDLParser.BOOLEAN, WebIDLParser.BYTE, WebIDLParser.BYTE_STRING, WebIDLParser.CONST, WebIDLParser.DELETER, WebIDLParser.DOM_STRING, WebIDLParser.DOUBLE, WebIDLParser.FLOAT, WebIDLParser.FROZEN_ARRAY, WebIDLParser.GETTER, WebIDLParser.INHERIT, WebIDLParser.ITERABLE, WebIDLParser.LONG, WebIDLParser.MAPLIKE, WebIDLParser.OBJECT, WebIDLParser.OBSERVABLE_ARRAY, WebIDLParser.OCTET, WebIDLParser.PROMISE, WebIDLParser.READONLY, WebIDLParser.RECORD, WebIDLParser.SEQUENCE, WebIDLParser.SETLIKE, WebIDLParser.SETTER, WebIDLParser.SHORT, WebIDLParser.STATIC, WebIDLParser.STRINGIFIER, WebIDLParser.SYMBOL, WebIDLParser.UNRESTRICTED, WebIDLParser.UNSIGNED, WebIDLParser.USV_STRING, WebIDLParser.VOID, WebIDLParser.ARRAY_BUFFER, WebIDLParser.DATA_VIEW, WebIDLParser.INT_8_ARRAY, WebIDLParser.INT_16_ARRAY, WebIDLParser.INT_32_ARRAY, WebIDLParser.UINT_8_ARRAY, WebIDLParser.UINT_16_ARRAY, WebIDLParser.UINT_32_ARRAY, WebIDLParser.UINT_8_CLAMPED_ARRAY, WebIDLParser.FLOAT_32_ARRAY, WebIDLParser.FLOAT_64_ARRAY, WebIDLParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 248
                self.partialInterfaceMember()
                pass
            elif token in [WebIDLParser.CONSTRUCTOR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 249
                self.constructor()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartialInterfaceMembersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partialInterfaceMember(self):
            return self.getTypedRuleContext(WebIDLParser.PartialInterfaceMemberContext,0)


        def extendedAttributeList(self):
            return self.getTypedRuleContext(WebIDLParser.ExtendedAttributeListContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_partialInterfaceMembers

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartialInterfaceMembers" ):
                return visitor.visitPartialInterfaceMembers(self)
            else:
                return visitor.visitChildren(self)




    def partialInterfaceMembers(self):

        localctx = WebIDLParser.PartialInterfaceMembersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_partialInterfaceMembers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WebIDLParser.LEFT_BRACKET:
                self.state = 252
                self.extendedAttributeList()


            self.state = 255
            self.partialInterfaceMember()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartialInterfaceMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def const_(self):
            return self.getTypedRuleContext(WebIDLParser.Const_Context,0)


        def operation(self):
            return self.getTypedRuleContext(WebIDLParser.OperationContext,0)


        def stringifier(self):
            return self.getTypedRuleContext(WebIDLParser.StringifierContext,0)


        def staticMember(self):
            return self.getTypedRuleContext(WebIDLParser.StaticMemberContext,0)


        def iterable(self):
            return self.getTypedRuleContext(WebIDLParser.IterableContext,0)


        def readOnlyMember(self):
            return self.getTypedRuleContext(WebIDLParser.ReadOnlyMemberContext,0)


        def readWriteAttribute(self):
            return self.getTypedRuleContext(WebIDLParser.ReadWriteAttributeContext,0)


        def readWriteMaplike(self):
            return self.getTypedRuleContext(WebIDLParser.ReadWriteMaplikeContext,0)


        def readWriteSetlike(self):
            return self.getTypedRuleContext(WebIDLParser.ReadWriteSetlikeContext,0)


        def inheritAttribute(self):
            return self.getTypedRuleContext(WebIDLParser.InheritAttributeContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_partialInterfaceMember

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartialInterfaceMember" ):
                return visitor.visitPartialInterfaceMember(self)
            else:
                return visitor.visitChildren(self)




    def partialInterfaceMember(self):

        localctx = WebIDLParser.PartialInterfaceMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_partialInterfaceMember)
        try:
            self.state = 267
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 257
                self.const_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 258
                self.operation()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 259
                self.stringifier()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 260
                self.staticMember()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 261
                self.iterable()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 262
                self.readOnlyMember()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 263
                self.readWriteAttribute()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 264
                self.readWriteMaplike()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 265
                self.readWriteSetlike()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 266
                self.inheritAttribute()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InheritanceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(WebIDLParser.COLON, 0)

        def IDENTIFIER(self):
            return self.getToken(WebIDLParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_inheritance

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInheritance" ):
                return visitor.visitInheritance(self)
            else:
                return visitor.visitChildren(self)




    def inheritance(self):

        localctx = WebIDLParser.InheritanceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_inheritance)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 269
            self.match(WebIDLParser.COLON)
            self.state = 270
            self.match(WebIDLParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MixinRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MIXIN(self):
            return self.getToken(WebIDLParser.MIXIN, 0)

        def IDENTIFIER(self):
            return self.getToken(WebIDLParser.IDENTIFIER, 0)

        def LEFT_BRACE(self):
            return self.getToken(WebIDLParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(WebIDLParser.RIGHT_BRACE, 0)

        def SEMI(self):
            return self.getToken(WebIDLParser.SEMI, 0)

        def mixinMembers(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WebIDLParser.MixinMembersContext)
            else:
                return self.getTypedRuleContext(WebIDLParser.MixinMembersContext,i)


        def getRuleIndex(self):
            return WebIDLParser.RULE_mixinRest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMixinRest" ):
                return visitor.visitMixinRest(self)
            else:
                return visitor.visitChildren(self)




    def mixinRest(self):

        localctx = WebIDLParser.MixinRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_mixinRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self.match(WebIDLParser.MIXIN)
            self.state = 273
            self.match(WebIDLParser.IDENTIFIER)
            self.state = 274
            self.match(WebIDLParser.LEFT_BRACE)
            self.state = 278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WebIDLParser.LEFT_PAREN) | (1 << WebIDLParser.LEFT_BRACKET) | (1 << WebIDLParser.ANY) | (1 << WebIDLParser.ATTRIBUTE) | (1 << WebIDLParser.BOOLEAN) | (1 << WebIDLParser.BYTE) | (1 << WebIDLParser.BYTE_STRING) | (1 << WebIDLParser.CONST) | (1 << WebIDLParser.DOM_STRING) | (1 << WebIDLParser.DOUBLE) | (1 << WebIDLParser.FLOAT) | (1 << WebIDLParser.FROZEN_ARRAY) | (1 << WebIDLParser.LONG) | (1 << WebIDLParser.OBJECT) | (1 << WebIDLParser.OBSERVABLE_ARRAY) | (1 << WebIDLParser.OCTET) | (1 << WebIDLParser.PROMISE) | (1 << WebIDLParser.READONLY) | (1 << WebIDLParser.RECORD) | (1 << WebIDLParser.SEQUENCE) | (1 << WebIDLParser.SHORT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (WebIDLParser.STRINGIFIER - 64)) | (1 << (WebIDLParser.SYMBOL - 64)) | (1 << (WebIDLParser.UNRESTRICTED - 64)) | (1 << (WebIDLParser.UNSIGNED - 64)) | (1 << (WebIDLParser.USV_STRING - 64)) | (1 << (WebIDLParser.VOID - 64)) | (1 << (WebIDLParser.ARRAY_BUFFER - 64)) | (1 << (WebIDLParser.DATA_VIEW - 64)) | (1 << (WebIDLParser.INT_8_ARRAY - 64)) | (1 << (WebIDLParser.INT_16_ARRAY - 64)) | (1 << (WebIDLParser.INT_32_ARRAY - 64)) | (1 << (WebIDLParser.UINT_8_ARRAY - 64)) | (1 << (WebIDLParser.UINT_16_ARRAY - 64)) | (1 << (WebIDLParser.UINT_32_ARRAY - 64)) | (1 << (WebIDLParser.UINT_8_CLAMPED_ARRAY - 64)) | (1 << (WebIDLParser.FLOAT_32_ARRAY - 64)) | (1 << (WebIDLParser.FLOAT_64_ARRAY - 64)) | (1 << (WebIDLParser.IDENTIFIER - 64)))) != 0):
                self.state = 275
                self.mixinMembers()
                self.state = 280
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 281
            self.match(WebIDLParser.RIGHT_BRACE)
            self.state = 282
            self.match(WebIDLParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MixinMembersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mixinMember(self):
            return self.getTypedRuleContext(WebIDLParser.MixinMemberContext,0)


        def extendedAttributeList(self):
            return self.getTypedRuleContext(WebIDLParser.ExtendedAttributeListContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_mixinMembers

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMixinMembers" ):
                return visitor.visitMixinMembers(self)
            else:
                return visitor.visitChildren(self)




    def mixinMembers(self):

        localctx = WebIDLParser.MixinMembersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_mixinMembers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WebIDLParser.LEFT_BRACKET:
                self.state = 284
                self.extendedAttributeList()


            self.state = 287
            self.mixinMember()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MixinMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def const_(self):
            return self.getTypedRuleContext(WebIDLParser.Const_Context,0)


        def regularOperation(self):
            return self.getTypedRuleContext(WebIDLParser.RegularOperationContext,0)


        def stringifier(self):
            return self.getTypedRuleContext(WebIDLParser.StringifierContext,0)


        def attributeRest(self):
            return self.getTypedRuleContext(WebIDLParser.AttributeRestContext,0)


        def READONLY(self):
            return self.getToken(WebIDLParser.READONLY, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_mixinMember

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMixinMember" ):
                return visitor.visitMixinMember(self)
            else:
                return visitor.visitChildren(self)




    def mixinMember(self):

        localctx = WebIDLParser.MixinMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_mixinMember)
        self._la = 0 # Token type
        try:
            self.state = 296
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WebIDLParser.CONST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 289
                self.const_()
                pass
            elif token in [WebIDLParser.LEFT_PAREN, WebIDLParser.ANY, WebIDLParser.BOOLEAN, WebIDLParser.BYTE, WebIDLParser.BYTE_STRING, WebIDLParser.DOM_STRING, WebIDLParser.DOUBLE, WebIDLParser.FLOAT, WebIDLParser.FROZEN_ARRAY, WebIDLParser.LONG, WebIDLParser.OBJECT, WebIDLParser.OBSERVABLE_ARRAY, WebIDLParser.OCTET, WebIDLParser.PROMISE, WebIDLParser.RECORD, WebIDLParser.SEQUENCE, WebIDLParser.SHORT, WebIDLParser.SYMBOL, WebIDLParser.UNRESTRICTED, WebIDLParser.UNSIGNED, WebIDLParser.USV_STRING, WebIDLParser.VOID, WebIDLParser.ARRAY_BUFFER, WebIDLParser.DATA_VIEW, WebIDLParser.INT_8_ARRAY, WebIDLParser.INT_16_ARRAY, WebIDLParser.INT_32_ARRAY, WebIDLParser.UINT_8_ARRAY, WebIDLParser.UINT_16_ARRAY, WebIDLParser.UINT_32_ARRAY, WebIDLParser.UINT_8_CLAMPED_ARRAY, WebIDLParser.FLOAT_32_ARRAY, WebIDLParser.FLOAT_64_ARRAY, WebIDLParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 290
                self.regularOperation()
                pass
            elif token in [WebIDLParser.STRINGIFIER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 291
                self.stringifier()
                pass
            elif token in [WebIDLParser.ATTRIBUTE, WebIDLParser.READONLY]:
                self.enterOuterAlt(localctx, 4)
                self.state = 293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WebIDLParser.READONLY:
                    self.state = 292
                    self.match(WebIDLParser.READONLY)


                self.state = 295
                self.attributeRest()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncludesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.target = None # Token
            self.includes = None # Token

        def INCLUDES(self):
            return self.getToken(WebIDLParser.INCLUDES, 0)

        def SEMI(self):
            return self.getToken(WebIDLParser.SEMI, 0)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(WebIDLParser.IDENTIFIER)
            else:
                return self.getToken(WebIDLParser.IDENTIFIER, i)

        def getRuleIndex(self):
            return WebIDLParser.RULE_includesStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncludesStatement" ):
                return visitor.visitIncludesStatement(self)
            else:
                return visitor.visitChildren(self)




    def includesStatement(self):

        localctx = WebIDLParser.IncludesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_includesStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 298
            localctx.target = self.match(WebIDLParser.IDENTIFIER)
            self.state = 299
            self.match(WebIDLParser.INCLUDES)
            self.state = 300
            localctx.includes = self.match(WebIDLParser.IDENTIFIER)
            self.state = 301
            self.match(WebIDLParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallbackRestOrInterfaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def callbackRest(self):
            return self.getTypedRuleContext(WebIDLParser.CallbackRestContext,0)


        def INTERFACE(self):
            return self.getToken(WebIDLParser.INTERFACE, 0)

        def IDENTIFIER(self):
            return self.getToken(WebIDLParser.IDENTIFIER, 0)

        def LEFT_BRACE(self):
            return self.getToken(WebIDLParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(WebIDLParser.RIGHT_BRACE, 0)

        def SEMI(self):
            return self.getToken(WebIDLParser.SEMI, 0)

        def callbackInterfaceMembers(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WebIDLParser.CallbackInterfaceMembersContext)
            else:
                return self.getTypedRuleContext(WebIDLParser.CallbackInterfaceMembersContext,i)


        def getRuleIndex(self):
            return WebIDLParser.RULE_callbackRestOrInterface

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallbackRestOrInterface" ):
                return visitor.visitCallbackRestOrInterface(self)
            else:
                return visitor.visitChildren(self)




    def callbackRestOrInterface(self):

        localctx = WebIDLParser.CallbackRestOrInterfaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_callbackRestOrInterface)
        self._la = 0 # Token type
        try:
            self.state = 315
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WebIDLParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 303
                self.callbackRest()
                pass
            elif token in [WebIDLParser.INTERFACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 304
                self.match(WebIDLParser.INTERFACE)
                self.state = 305
                self.match(WebIDLParser.IDENTIFIER)
                self.state = 306
                self.match(WebIDLParser.LEFT_BRACE)
                self.state = 310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WebIDLParser.LEFT_PAREN) | (1 << WebIDLParser.LEFT_BRACKET) | (1 << WebIDLParser.ANY) | (1 << WebIDLParser.BOOLEAN) | (1 << WebIDLParser.BYTE) | (1 << WebIDLParser.BYTE_STRING) | (1 << WebIDLParser.CONST) | (1 << WebIDLParser.DOM_STRING) | (1 << WebIDLParser.DOUBLE) | (1 << WebIDLParser.FLOAT) | (1 << WebIDLParser.FROZEN_ARRAY) | (1 << WebIDLParser.LONG) | (1 << WebIDLParser.OBJECT) | (1 << WebIDLParser.OBSERVABLE_ARRAY) | (1 << WebIDLParser.OCTET) | (1 << WebIDLParser.PROMISE) | (1 << WebIDLParser.RECORD) | (1 << WebIDLParser.SEQUENCE) | (1 << WebIDLParser.SHORT))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (WebIDLParser.SYMBOL - 65)) | (1 << (WebIDLParser.UNRESTRICTED - 65)) | (1 << (WebIDLParser.UNSIGNED - 65)) | (1 << (WebIDLParser.USV_STRING - 65)) | (1 << (WebIDLParser.VOID - 65)) | (1 << (WebIDLParser.ARRAY_BUFFER - 65)) | (1 << (WebIDLParser.DATA_VIEW - 65)) | (1 << (WebIDLParser.INT_8_ARRAY - 65)) | (1 << (WebIDLParser.INT_16_ARRAY - 65)) | (1 << (WebIDLParser.INT_32_ARRAY - 65)) | (1 << (WebIDLParser.UINT_8_ARRAY - 65)) | (1 << (WebIDLParser.UINT_16_ARRAY - 65)) | (1 << (WebIDLParser.UINT_32_ARRAY - 65)) | (1 << (WebIDLParser.UINT_8_CLAMPED_ARRAY - 65)) | (1 << (WebIDLParser.FLOAT_32_ARRAY - 65)) | (1 << (WebIDLParser.FLOAT_64_ARRAY - 65)) | (1 << (WebIDLParser.IDENTIFIER - 65)))) != 0):
                    self.state = 307
                    self.callbackInterfaceMembers()
                    self.state = 312
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 313
                self.match(WebIDLParser.RIGHT_BRACE)
                self.state = 314
                self.match(WebIDLParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallbackInterfaceMembersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def callbackInterfaceMember(self):
            return self.getTypedRuleContext(WebIDLParser.CallbackInterfaceMemberContext,0)


        def extendedAttributeList(self):
            return self.getTypedRuleContext(WebIDLParser.ExtendedAttributeListContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_callbackInterfaceMembers

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallbackInterfaceMembers" ):
                return visitor.visitCallbackInterfaceMembers(self)
            else:
                return visitor.visitChildren(self)




    def callbackInterfaceMembers(self):

        localctx = WebIDLParser.CallbackInterfaceMembersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_callbackInterfaceMembers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WebIDLParser.LEFT_BRACKET:
                self.state = 317
                self.extendedAttributeList()


            self.state = 320
            self.callbackInterfaceMember()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallbackInterfaceMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def const_(self):
            return self.getTypedRuleContext(WebIDLParser.Const_Context,0)


        def regularOperation(self):
            return self.getTypedRuleContext(WebIDLParser.RegularOperationContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_callbackInterfaceMember

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallbackInterfaceMember" ):
                return visitor.visitCallbackInterfaceMember(self)
            else:
                return visitor.visitChildren(self)




    def callbackInterfaceMember(self):

        localctx = WebIDLParser.CallbackInterfaceMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_callbackInterfaceMember)
        try:
            self.state = 324
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WebIDLParser.CONST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 322
                self.const_()
                pass
            elif token in [WebIDLParser.LEFT_PAREN, WebIDLParser.ANY, WebIDLParser.BOOLEAN, WebIDLParser.BYTE, WebIDLParser.BYTE_STRING, WebIDLParser.DOM_STRING, WebIDLParser.DOUBLE, WebIDLParser.FLOAT, WebIDLParser.FROZEN_ARRAY, WebIDLParser.LONG, WebIDLParser.OBJECT, WebIDLParser.OBSERVABLE_ARRAY, WebIDLParser.OCTET, WebIDLParser.PROMISE, WebIDLParser.RECORD, WebIDLParser.SEQUENCE, WebIDLParser.SHORT, WebIDLParser.SYMBOL, WebIDLParser.UNRESTRICTED, WebIDLParser.UNSIGNED, WebIDLParser.USV_STRING, WebIDLParser.VOID, WebIDLParser.ARRAY_BUFFER, WebIDLParser.DATA_VIEW, WebIDLParser.INT_8_ARRAY, WebIDLParser.INT_16_ARRAY, WebIDLParser.INT_32_ARRAY, WebIDLParser.UINT_8_ARRAY, WebIDLParser.UINT_16_ARRAY, WebIDLParser.UINT_32_ARRAY, WebIDLParser.UINT_8_CLAMPED_ARRAY, WebIDLParser.FLOAT_32_ARRAY, WebIDLParser.FLOAT_64_ARRAY, WebIDLParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 323
                self.regularOperation()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Const_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(WebIDLParser.CONST, 0)

        def constType(self):
            return self.getTypedRuleContext(WebIDLParser.ConstTypeContext,0)


        def IDENTIFIER(self):
            return self.getToken(WebIDLParser.IDENTIFIER, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(WebIDLParser.EQUAL_SYMBOL, 0)

        def constValue(self):
            return self.getTypedRuleContext(WebIDLParser.ConstValueContext,0)


        def SEMI(self):
            return self.getToken(WebIDLParser.SEMI, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_const_

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConst_" ):
                return visitor.visitConst_(self)
            else:
                return visitor.visitChildren(self)




    def const_(self):

        localctx = WebIDLParser.Const_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_const_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self.match(WebIDLParser.CONST)
            self.state = 327
            self.constType()
            self.state = 328
            self.match(WebIDLParser.IDENTIFIER)
            self.state = 329
            self.match(WebIDLParser.EQUAL_SYMBOL)
            self.state = 330
            self.constValue()
            self.state = 331
            self.match(WebIDLParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanLiteral(self):
            return self.getTypedRuleContext(WebIDLParser.BooleanLiteralContext,0)


        def floatLiteral(self):
            return self.getTypedRuleContext(WebIDLParser.FloatLiteralContext,0)


        def IntegerLiteral(self):
            return self.getToken(WebIDLParser.IntegerLiteral, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_constValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstValue" ):
                return visitor.visitConstValue(self)
            else:
                return visitor.visitChildren(self)




    def constValue(self):

        localctx = WebIDLParser.ConstValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_constValue)
        try:
            self.state = 336
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WebIDLParser.FALSE, WebIDLParser.TRUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 333
                self.booleanLiteral()
                pass
            elif token in [WebIDLParser.INFINITY, WebIDLParser.MINUS_INFINITY, WebIDLParser.NAN, WebIDLParser.DecimalLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 334
                self.floatLiteral()
                pass
            elif token in [WebIDLParser.IntegerLiteral]:
                self.enterOuterAlt(localctx, 3)
                self.state = 335
                self.match(WebIDLParser.IntegerLiteral)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReadOnlyMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READONLY(self):
            return self.getToken(WebIDLParser.READONLY, 0)

        def readOnlyMemberRest(self):
            return self.getTypedRuleContext(WebIDLParser.ReadOnlyMemberRestContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_readOnlyMember

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReadOnlyMember" ):
                return visitor.visitReadOnlyMember(self)
            else:
                return visitor.visitChildren(self)




    def readOnlyMember(self):

        localctx = WebIDLParser.ReadOnlyMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_readOnlyMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self.match(WebIDLParser.READONLY)
            self.state = 339
            self.readOnlyMemberRest()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReadOnlyMemberRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributeRest(self):
            return self.getTypedRuleContext(WebIDLParser.AttributeRestContext,0)


        def maplikeRest(self):
            return self.getTypedRuleContext(WebIDLParser.MaplikeRestContext,0)


        def setlikeRest(self):
            return self.getTypedRuleContext(WebIDLParser.SetlikeRestContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_readOnlyMemberRest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReadOnlyMemberRest" ):
                return visitor.visitReadOnlyMemberRest(self)
            else:
                return visitor.visitChildren(self)




    def readOnlyMemberRest(self):

        localctx = WebIDLParser.ReadOnlyMemberRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_readOnlyMemberRest)
        try:
            self.state = 344
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 341
                self.attributeRest()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 342
                self.maplikeRest()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 343
                self.setlikeRest()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReadWriteAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributeRest(self):
            return self.getTypedRuleContext(WebIDLParser.AttributeRestContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_readWriteAttribute

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReadWriteAttribute" ):
                return visitor.visitReadWriteAttribute(self)
            else:
                return visitor.visitChildren(self)




    def readWriteAttribute(self):

        localctx = WebIDLParser.ReadWriteAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_readWriteAttribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            self.attributeRest()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InheritAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INHERIT(self):
            return self.getToken(WebIDLParser.INHERIT, 0)

        def attributeRest(self):
            return self.getTypedRuleContext(WebIDLParser.AttributeRestContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_inheritAttribute

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInheritAttribute" ):
                return visitor.visitInheritAttribute(self)
            else:
                return visitor.visitChildren(self)




    def inheritAttribute(self):

        localctx = WebIDLParser.InheritAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_inheritAttribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            self.match(WebIDLParser.INHERIT)
            self.state = 349
            self.attributeRest()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE(self):
            return self.getToken(WebIDLParser.ATTRIBUTE, 0)

        def typeWithExtendedAttributes(self):
            return self.getTypedRuleContext(WebIDLParser.TypeWithExtendedAttributesContext,0)


        def attributeName(self):
            return self.getTypedRuleContext(WebIDLParser.AttributeNameContext,0)


        def SEMI(self):
            return self.getToken(WebIDLParser.SEMI, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_attributeRest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributeRest" ):
                return visitor.visitAttributeRest(self)
            else:
                return visitor.visitChildren(self)




    def attributeRest(self):

        localctx = WebIDLParser.AttributeRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_attributeRest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 351
            self.match(WebIDLParser.ATTRIBUTE)
            self.state = 352
            self.typeWithExtendedAttributes()
            self.state = 353
            self.attributeName()
            self.state = 354
            self.match(WebIDLParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.attributeNameKeyword = None # Token

        def ASYNC(self):
            return self.getToken(WebIDLParser.ASYNC, 0)

        def REQUIRED(self):
            return self.getToken(WebIDLParser.REQUIRED, 0)

        def IDENTIFIER(self):
            return self.getToken(WebIDLParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_attributeName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributeName" ):
                return visitor.visitAttributeName(self)
            else:
                return visitor.visitChildren(self)




    def attributeName(self):

        localctx = WebIDLParser.AttributeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_attributeName)
        self._la = 0 # Token type
        try:
            self.state = 358
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WebIDLParser.ASYNC, WebIDLParser.REQUIRED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 356
                localctx.attributeNameKeyword = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==WebIDLParser.ASYNC or _la==WebIDLParser.REQUIRED):
                    localctx.attributeNameKeyword = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [WebIDLParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 357
                self.match(WebIDLParser.IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constValue(self):
            return self.getTypedRuleContext(WebIDLParser.ConstValueContext,0)


        def StringLiteral(self):
            return self.getToken(WebIDLParser.StringLiteral, 0)

        def LEFT_BRACKET(self):
            return self.getToken(WebIDLParser.LEFT_BRACKET, 0)

        def RIGHT_BRACKET(self):
            return self.getToken(WebIDLParser.RIGHT_BRACKET, 0)

        def LEFT_BRACE(self):
            return self.getToken(WebIDLParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(WebIDLParser.RIGHT_BRACE, 0)

        def NULL(self):
            return self.getToken(WebIDLParser.NULL, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_defaultValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultValue" ):
                return visitor.visitDefaultValue(self)
            else:
                return visitor.visitChildren(self)




    def defaultValue(self):

        localctx = WebIDLParser.DefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_defaultValue)
        try:
            self.state = 367
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WebIDLParser.FALSE, WebIDLParser.INFINITY, WebIDLParser.MINUS_INFINITY, WebIDLParser.NAN, WebIDLParser.TRUE, WebIDLParser.IntegerLiteral, WebIDLParser.DecimalLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 360
                self.constValue()
                pass
            elif token in [WebIDLParser.StringLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 361
                self.match(WebIDLParser.StringLiteral)
                pass
            elif token in [WebIDLParser.LEFT_BRACKET]:
                self.enterOuterAlt(localctx, 3)
                self.state = 362
                self.match(WebIDLParser.LEFT_BRACKET)
                self.state = 363
                self.match(WebIDLParser.RIGHT_BRACKET)
                pass
            elif token in [WebIDLParser.LEFT_BRACE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 364
                self.match(WebIDLParser.LEFT_BRACE)
                self.state = 365
                self.match(WebIDLParser.RIGHT_BRACE)
                pass
            elif token in [WebIDLParser.NULL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 366
                self.match(WebIDLParser.NULL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.special = None # Token

        def regularOperation(self):
            return self.getTypedRuleContext(WebIDLParser.RegularOperationContext,0)


        def GETTER(self):
            return self.getToken(WebIDLParser.GETTER, 0)

        def SETTER(self):
            return self.getToken(WebIDLParser.SETTER, 0)

        def DELETER(self):
            return self.getToken(WebIDLParser.DELETER, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_operation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperation" ):
                return visitor.visitOperation(self)
            else:
                return visitor.visitChildren(self)




    def operation(self):

        localctx = WebIDLParser.OperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WebIDLParser.DELETER) | (1 << WebIDLParser.GETTER) | (1 << WebIDLParser.SETTER))) != 0):
                self.state = 369
                localctx.special = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WebIDLParser.DELETER) | (1 << WebIDLParser.GETTER) | (1 << WebIDLParser.SETTER))) != 0)):
                    localctx.special = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 372
            self.regularOperation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RegularOperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def returnType(self):
            return self.getTypedRuleContext(WebIDLParser.ReturnTypeContext,0)


        def operationRest(self):
            return self.getTypedRuleContext(WebIDLParser.OperationRestContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_regularOperation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRegularOperation" ):
                return visitor.visitRegularOperation(self)
            else:
                return visitor.visitChildren(self)




    def regularOperation(self):

        localctx = WebIDLParser.RegularOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_regularOperation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 374
            self.returnType()
            self.state = 375
            self.operationRest()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperationRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(WebIDLParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(WebIDLParser.RIGHT_PAREN, 0)

        def SEMI(self):
            return self.getToken(WebIDLParser.SEMI, 0)

        def operationName(self):
            return self.getTypedRuleContext(WebIDLParser.OperationNameContext,0)


        def argumentList(self):
            return self.getTypedRuleContext(WebIDLParser.ArgumentListContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_operationRest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperationRest" ):
                return visitor.visitOperationRest(self)
            else:
                return visitor.visitChildren(self)




    def operationRest(self):

        localctx = WebIDLParser.OperationRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_operationRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WebIDLParser.INCLUDES or _la==WebIDLParser.IDENTIFIER:
                self.state = 377
                self.operationName()


            self.state = 380
            self.match(WebIDLParser.LEFT_PAREN)
            self.state = 382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WebIDLParser.LEFT_PAREN) | (1 << WebIDLParser.LEFT_BRACKET) | (1 << WebIDLParser.ANY) | (1 << WebIDLParser.BOOLEAN) | (1 << WebIDLParser.BYTE) | (1 << WebIDLParser.BYTE_STRING) | (1 << WebIDLParser.DOM_STRING) | (1 << WebIDLParser.DOUBLE) | (1 << WebIDLParser.FLOAT) | (1 << WebIDLParser.FROZEN_ARRAY) | (1 << WebIDLParser.LONG) | (1 << WebIDLParser.OBJECT) | (1 << WebIDLParser.OBSERVABLE_ARRAY) | (1 << WebIDLParser.OCTET) | (1 << WebIDLParser.OPTIONAL) | (1 << WebIDLParser.PROMISE) | (1 << WebIDLParser.RECORD) | (1 << WebIDLParser.SEQUENCE) | (1 << WebIDLParser.SHORT))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (WebIDLParser.SYMBOL - 65)) | (1 << (WebIDLParser.UNRESTRICTED - 65)) | (1 << (WebIDLParser.UNSIGNED - 65)) | (1 << (WebIDLParser.USV_STRING - 65)) | (1 << (WebIDLParser.ARRAY_BUFFER - 65)) | (1 << (WebIDLParser.DATA_VIEW - 65)) | (1 << (WebIDLParser.INT_8_ARRAY - 65)) | (1 << (WebIDLParser.INT_16_ARRAY - 65)) | (1 << (WebIDLParser.INT_32_ARRAY - 65)) | (1 << (WebIDLParser.UINT_8_ARRAY - 65)) | (1 << (WebIDLParser.UINT_16_ARRAY - 65)) | (1 << (WebIDLParser.UINT_32_ARRAY - 65)) | (1 << (WebIDLParser.UINT_8_CLAMPED_ARRAY - 65)) | (1 << (WebIDLParser.FLOAT_32_ARRAY - 65)) | (1 << (WebIDLParser.FLOAT_64_ARRAY - 65)) | (1 << (WebIDLParser.IDENTIFIER - 65)))) != 0):
                self.state = 381
                self.argumentList()


            self.state = 384
            self.match(WebIDLParser.RIGHT_PAREN)
            self.state = 385
            self.match(WebIDLParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperationNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operationNameKeyword(self):
            return self.getTypedRuleContext(WebIDLParser.OperationNameKeywordContext,0)


        def IDENTIFIER(self):
            return self.getToken(WebIDLParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_operationName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperationName" ):
                return visitor.visitOperationName(self)
            else:
                return visitor.visitChildren(self)




    def operationName(self):

        localctx = WebIDLParser.OperationNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_operationName)
        try:
            self.state = 389
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WebIDLParser.INCLUDES]:
                self.enterOuterAlt(localctx, 1)
                self.state = 387
                self.operationNameKeyword()
                pass
            elif token in [WebIDLParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 388
                self.match(WebIDLParser.IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperationNameKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCLUDES(self):
            return self.getToken(WebIDLParser.INCLUDES, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_operationNameKeyword

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperationNameKeyword" ):
                return visitor.visitOperationNameKeyword(self)
            else:
                return visitor.visitChildren(self)




    def operationNameKeyword(self):

        localctx = WebIDLParser.OperationNameKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_operationNameKeyword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 391
            self.match(WebIDLParser.INCLUDES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WebIDLParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(WebIDLParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(WebIDLParser.COMMA)
            else:
                return self.getToken(WebIDLParser.COMMA, i)

        def getRuleIndex(self):
            return WebIDLParser.RULE_argumentList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentList" ):
                return visitor.visitArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def argumentList(self):

        localctx = WebIDLParser.ArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_argumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self.argument()
            self.state = 398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WebIDLParser.COMMA:
                self.state = 394
                self.match(WebIDLParser.COMMA)
                self.state = 395
                self.argument()
                self.state = 400
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argumentRest(self):
            return self.getTypedRuleContext(WebIDLParser.ArgumentRestContext,0)


        def extendedAttributeList(self):
            return self.getTypedRuleContext(WebIDLParser.ExtendedAttributeListContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_argument

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = WebIDLParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WebIDLParser.LEFT_BRACKET:
                self.state = 401
                self.extendedAttributeList()


            self.state = 404
            self.argumentRest()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONAL(self):
            return self.getToken(WebIDLParser.OPTIONAL, 0)

        def typeWithExtendedAttributes(self):
            return self.getTypedRuleContext(WebIDLParser.TypeWithExtendedAttributesContext,0)


        def argumentName(self):
            return self.getTypedRuleContext(WebIDLParser.ArgumentNameContext,0)


        def default_(self):
            return self.getTypedRuleContext(WebIDLParser.Default_Context,0)


        def type_(self):
            return self.getTypedRuleContext(WebIDLParser.Type_Context,0)


        def ELLIPSIS(self):
            return self.getToken(WebIDLParser.ELLIPSIS, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_argumentRest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentRest" ):
                return visitor.visitArgumentRest(self)
            else:
                return visitor.visitChildren(self)




    def argumentRest(self):

        localctx = WebIDLParser.ArgumentRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_argumentRest)
        self._la = 0 # Token type
        try:
            self.state = 418
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WebIDLParser.OPTIONAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 406
                self.match(WebIDLParser.OPTIONAL)
                self.state = 407
                self.typeWithExtendedAttributes()
                self.state = 408
                self.argumentName()
                self.state = 410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WebIDLParser.EQUAL_SYMBOL:
                    self.state = 409
                    self.default_()


                pass
            elif token in [WebIDLParser.LEFT_PAREN, WebIDLParser.ANY, WebIDLParser.BOOLEAN, WebIDLParser.BYTE, WebIDLParser.BYTE_STRING, WebIDLParser.DOM_STRING, WebIDLParser.DOUBLE, WebIDLParser.FLOAT, WebIDLParser.FROZEN_ARRAY, WebIDLParser.LONG, WebIDLParser.OBJECT, WebIDLParser.OBSERVABLE_ARRAY, WebIDLParser.OCTET, WebIDLParser.PROMISE, WebIDLParser.RECORD, WebIDLParser.SEQUENCE, WebIDLParser.SHORT, WebIDLParser.SYMBOL, WebIDLParser.UNRESTRICTED, WebIDLParser.UNSIGNED, WebIDLParser.USV_STRING, WebIDLParser.ARRAY_BUFFER, WebIDLParser.DATA_VIEW, WebIDLParser.INT_8_ARRAY, WebIDLParser.INT_16_ARRAY, WebIDLParser.INT_32_ARRAY, WebIDLParser.UINT_8_ARRAY, WebIDLParser.UINT_16_ARRAY, WebIDLParser.UINT_32_ARRAY, WebIDLParser.UINT_8_CLAMPED_ARRAY, WebIDLParser.FLOAT_32_ARRAY, WebIDLParser.FLOAT_64_ARRAY, WebIDLParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 412
                self.type_()
                self.state = 414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WebIDLParser.ELLIPSIS:
                    self.state = 413
                    self.match(WebIDLParser.ELLIPSIS)


                self.state = 416
                self.argumentName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argumentNameKeyword(self):
            return self.getTypedRuleContext(WebIDLParser.ArgumentNameKeywordContext,0)


        def IDENTIFIER(self):
            return self.getToken(WebIDLParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_argumentName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentName" ):
                return visitor.visitArgumentName(self)
            else:
                return visitor.visitChildren(self)




    def argumentName(self):

        localctx = WebIDLParser.ArgumentNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_argumentName)
        try:
            self.state = 422
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WebIDLParser.ASYNC, WebIDLParser.ATTRIBUTE, WebIDLParser.CALLBACK, WebIDLParser.CONST, WebIDLParser.CONSTRUCTOR, WebIDLParser.DELETER, WebIDLParser.DICTIONARY, WebIDLParser.ENUM, WebIDLParser.GETTER, WebIDLParser.INCLUDES, WebIDLParser.INHERIT, WebIDLParser.INTERFACE, WebIDLParser.ITERABLE, WebIDLParser.MAPLIKE, WebIDLParser.MIXIN, WebIDLParser.NAMESPACE, WebIDLParser.PARTIAL, WebIDLParser.READONLY, WebIDLParser.REQUIRED, WebIDLParser.SETLIKE, WebIDLParser.SETTER, WebIDLParser.STATIC, WebIDLParser.STRINGIFIER, WebIDLParser.TYPEDEF, WebIDLParser.UNRESTRICTED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 420
                self.argumentNameKeyword()
                pass
            elif token in [WebIDLParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 421
                self.match(WebIDLParser.IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRUCTOR(self):
            return self.getToken(WebIDLParser.CONSTRUCTOR, 0)

        def LEFT_PAREN(self):
            return self.getToken(WebIDLParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(WebIDLParser.RIGHT_PAREN, 0)

        def SEMI(self):
            return self.getToken(WebIDLParser.SEMI, 0)

        def argumentList(self):
            return self.getTypedRuleContext(WebIDLParser.ArgumentListContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_constructor

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructor" ):
                return visitor.visitConstructor(self)
            else:
                return visitor.visitChildren(self)




    def constructor(self):

        localctx = WebIDLParser.ConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_constructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            self.match(WebIDLParser.CONSTRUCTOR)
            self.state = 425
            self.match(WebIDLParser.LEFT_PAREN)
            self.state = 427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WebIDLParser.LEFT_PAREN) | (1 << WebIDLParser.LEFT_BRACKET) | (1 << WebIDLParser.ANY) | (1 << WebIDLParser.BOOLEAN) | (1 << WebIDLParser.BYTE) | (1 << WebIDLParser.BYTE_STRING) | (1 << WebIDLParser.DOM_STRING) | (1 << WebIDLParser.DOUBLE) | (1 << WebIDLParser.FLOAT) | (1 << WebIDLParser.FROZEN_ARRAY) | (1 << WebIDLParser.LONG) | (1 << WebIDLParser.OBJECT) | (1 << WebIDLParser.OBSERVABLE_ARRAY) | (1 << WebIDLParser.OCTET) | (1 << WebIDLParser.OPTIONAL) | (1 << WebIDLParser.PROMISE) | (1 << WebIDLParser.RECORD) | (1 << WebIDLParser.SEQUENCE) | (1 << WebIDLParser.SHORT))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (WebIDLParser.SYMBOL - 65)) | (1 << (WebIDLParser.UNRESTRICTED - 65)) | (1 << (WebIDLParser.UNSIGNED - 65)) | (1 << (WebIDLParser.USV_STRING - 65)) | (1 << (WebIDLParser.ARRAY_BUFFER - 65)) | (1 << (WebIDLParser.DATA_VIEW - 65)) | (1 << (WebIDLParser.INT_8_ARRAY - 65)) | (1 << (WebIDLParser.INT_16_ARRAY - 65)) | (1 << (WebIDLParser.INT_32_ARRAY - 65)) | (1 << (WebIDLParser.UINT_8_ARRAY - 65)) | (1 << (WebIDLParser.UINT_16_ARRAY - 65)) | (1 << (WebIDLParser.UINT_32_ARRAY - 65)) | (1 << (WebIDLParser.UINT_8_CLAMPED_ARRAY - 65)) | (1 << (WebIDLParser.FLOAT_32_ARRAY - 65)) | (1 << (WebIDLParser.FLOAT_64_ARRAY - 65)) | (1 << (WebIDLParser.IDENTIFIER - 65)))) != 0):
                self.state = 426
                self.argumentList()


            self.state = 429
            self.match(WebIDLParser.RIGHT_PAREN)
            self.state = 430
            self.match(WebIDLParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRINGIFIER(self):
            return self.getToken(WebIDLParser.STRINGIFIER, 0)

        def stringifierRest(self):
            return self.getTypedRuleContext(WebIDLParser.StringifierRestContext,0)


        def SEMI(self):
            return self.getToken(WebIDLParser.SEMI, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_stringifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringifier" ):
                return visitor.visitStringifier(self)
            else:
                return visitor.visitChildren(self)




    def stringifier(self):

        localctx = WebIDLParser.StringifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_stringifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432
            self.match(WebIDLParser.STRINGIFIER)
            self.state = 435
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WebIDLParser.LEFT_PAREN, WebIDLParser.ANY, WebIDLParser.ATTRIBUTE, WebIDLParser.BOOLEAN, WebIDLParser.BYTE, WebIDLParser.BYTE_STRING, WebIDLParser.DOM_STRING, WebIDLParser.DOUBLE, WebIDLParser.FLOAT, WebIDLParser.FROZEN_ARRAY, WebIDLParser.LONG, WebIDLParser.OBJECT, WebIDLParser.OBSERVABLE_ARRAY, WebIDLParser.OCTET, WebIDLParser.PROMISE, WebIDLParser.READONLY, WebIDLParser.RECORD, WebIDLParser.SEQUENCE, WebIDLParser.SHORT, WebIDLParser.SYMBOL, WebIDLParser.UNRESTRICTED, WebIDLParser.UNSIGNED, WebIDLParser.USV_STRING, WebIDLParser.VOID, WebIDLParser.ARRAY_BUFFER, WebIDLParser.DATA_VIEW, WebIDLParser.INT_8_ARRAY, WebIDLParser.INT_16_ARRAY, WebIDLParser.INT_32_ARRAY, WebIDLParser.UINT_8_ARRAY, WebIDLParser.UINT_16_ARRAY, WebIDLParser.UINT_32_ARRAY, WebIDLParser.UINT_8_CLAMPED_ARRAY, WebIDLParser.FLOAT_32_ARRAY, WebIDLParser.FLOAT_64_ARRAY, WebIDLParser.IDENTIFIER]:
                self.state = 433
                self.stringifierRest()
                pass
            elif token in [WebIDLParser.SEMI]:
                self.state = 434
                self.match(WebIDLParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringifierRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributeRest(self):
            return self.getTypedRuleContext(WebIDLParser.AttributeRestContext,0)


        def READONLY(self):
            return self.getToken(WebIDLParser.READONLY, 0)

        def regularOperation(self):
            return self.getTypedRuleContext(WebIDLParser.RegularOperationContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_stringifierRest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringifierRest" ):
                return visitor.visitStringifierRest(self)
            else:
                return visitor.visitChildren(self)




    def stringifierRest(self):

        localctx = WebIDLParser.StringifierRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_stringifierRest)
        self._la = 0 # Token type
        try:
            self.state = 442
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WebIDLParser.ATTRIBUTE, WebIDLParser.READONLY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WebIDLParser.READONLY:
                    self.state = 437
                    self.match(WebIDLParser.READONLY)


                self.state = 440
                self.attributeRest()
                pass
            elif token in [WebIDLParser.LEFT_PAREN, WebIDLParser.ANY, WebIDLParser.BOOLEAN, WebIDLParser.BYTE, WebIDLParser.BYTE_STRING, WebIDLParser.DOM_STRING, WebIDLParser.DOUBLE, WebIDLParser.FLOAT, WebIDLParser.FROZEN_ARRAY, WebIDLParser.LONG, WebIDLParser.OBJECT, WebIDLParser.OBSERVABLE_ARRAY, WebIDLParser.OCTET, WebIDLParser.PROMISE, WebIDLParser.RECORD, WebIDLParser.SEQUENCE, WebIDLParser.SHORT, WebIDLParser.SYMBOL, WebIDLParser.UNRESTRICTED, WebIDLParser.UNSIGNED, WebIDLParser.USV_STRING, WebIDLParser.VOID, WebIDLParser.ARRAY_BUFFER, WebIDLParser.DATA_VIEW, WebIDLParser.INT_8_ARRAY, WebIDLParser.INT_16_ARRAY, WebIDLParser.INT_32_ARRAY, WebIDLParser.UINT_8_ARRAY, WebIDLParser.UINT_16_ARRAY, WebIDLParser.UINT_32_ARRAY, WebIDLParser.UINT_8_CLAMPED_ARRAY, WebIDLParser.FLOAT_32_ARRAY, WebIDLParser.FLOAT_64_ARRAY, WebIDLParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 441
                self.regularOperation()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STATIC(self):
            return self.getToken(WebIDLParser.STATIC, 0)

        def staticMemberRest(self):
            return self.getTypedRuleContext(WebIDLParser.StaticMemberRestContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_staticMember

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStaticMember" ):
                return visitor.visitStaticMember(self)
            else:
                return visitor.visitChildren(self)




    def staticMember(self):

        localctx = WebIDLParser.StaticMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_staticMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444
            self.match(WebIDLParser.STATIC)
            self.state = 445
            self.staticMemberRest()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticMemberRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributeRest(self):
            return self.getTypedRuleContext(WebIDLParser.AttributeRestContext,0)


        def READONLY(self):
            return self.getToken(WebIDLParser.READONLY, 0)

        def regularOperation(self):
            return self.getTypedRuleContext(WebIDLParser.RegularOperationContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_staticMemberRest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStaticMemberRest" ):
                return visitor.visitStaticMemberRest(self)
            else:
                return visitor.visitChildren(self)




    def staticMemberRest(self):

        localctx = WebIDLParser.StaticMemberRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_staticMemberRest)
        self._la = 0 # Token type
        try:
            self.state = 452
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WebIDLParser.ATTRIBUTE, WebIDLParser.READONLY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 448
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WebIDLParser.READONLY:
                    self.state = 447
                    self.match(WebIDLParser.READONLY)


                self.state = 450
                self.attributeRest()
                pass
            elif token in [WebIDLParser.LEFT_PAREN, WebIDLParser.ANY, WebIDLParser.BOOLEAN, WebIDLParser.BYTE, WebIDLParser.BYTE_STRING, WebIDLParser.DOM_STRING, WebIDLParser.DOUBLE, WebIDLParser.FLOAT, WebIDLParser.FROZEN_ARRAY, WebIDLParser.LONG, WebIDLParser.OBJECT, WebIDLParser.OBSERVABLE_ARRAY, WebIDLParser.OCTET, WebIDLParser.PROMISE, WebIDLParser.RECORD, WebIDLParser.SEQUENCE, WebIDLParser.SHORT, WebIDLParser.SYMBOL, WebIDLParser.UNRESTRICTED, WebIDLParser.UNSIGNED, WebIDLParser.USV_STRING, WebIDLParser.VOID, WebIDLParser.ARRAY_BUFFER, WebIDLParser.DATA_VIEW, WebIDLParser.INT_8_ARRAY, WebIDLParser.INT_16_ARRAY, WebIDLParser.INT_32_ARRAY, WebIDLParser.UINT_8_ARRAY, WebIDLParser.UINT_16_ARRAY, WebIDLParser.UINT_32_ARRAY, WebIDLParser.UINT_8_CLAMPED_ARRAY, WebIDLParser.FLOAT_32_ARRAY, WebIDLParser.FLOAT_64_ARRAY, WebIDLParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 451
                self.regularOperation()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ITERABLE(self):
            return self.getToken(WebIDLParser.ITERABLE, 0)

        def LEFT_ANGLE(self):
            return self.getToken(WebIDLParser.LEFT_ANGLE, 0)

        def typeWithExtendedAttributes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WebIDLParser.TypeWithExtendedAttributesContext)
            else:
                return self.getTypedRuleContext(WebIDLParser.TypeWithExtendedAttributesContext,i)


        def RIGHT_ANGLE(self):
            return self.getToken(WebIDLParser.RIGHT_ANGLE, 0)

        def SEMI(self):
            return self.getToken(WebIDLParser.SEMI, 0)

        def COMMA(self):
            return self.getToken(WebIDLParser.COMMA, 0)

        def ASYNC(self):
            return self.getToken(WebIDLParser.ASYNC, 0)

        def optionalArgumentList(self):
            return self.getTypedRuleContext(WebIDLParser.OptionalArgumentListContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_iterable

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterable" ):
                return visitor.visitIterable(self)
            else:
                return visitor.visitChildren(self)




    def iterable(self):

        localctx = WebIDLParser.IterableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_iterable)
        self._la = 0 # Token type
        try:
            self.state = 478
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WebIDLParser.ITERABLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 454
                self.match(WebIDLParser.ITERABLE)
                self.state = 455
                self.match(WebIDLParser.LEFT_ANGLE)
                self.state = 456
                self.typeWithExtendedAttributes()
                self.state = 459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WebIDLParser.COMMA:
                    self.state = 457
                    self.match(WebIDLParser.COMMA)
                    self.state = 458
                    self.typeWithExtendedAttributes()


                self.state = 461
                self.match(WebIDLParser.RIGHT_ANGLE)
                self.state = 462
                self.match(WebIDLParser.SEMI)
                pass
            elif token in [WebIDLParser.ASYNC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 464
                self.match(WebIDLParser.ASYNC)
                self.state = 465
                self.match(WebIDLParser.ITERABLE)
                self.state = 466
                self.match(WebIDLParser.LEFT_ANGLE)
                self.state = 467
                self.typeWithExtendedAttributes()
                self.state = 470
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WebIDLParser.COMMA:
                    self.state = 468
                    self.match(WebIDLParser.COMMA)
                    self.state = 469
                    self.typeWithExtendedAttributes()


                self.state = 472
                self.match(WebIDLParser.RIGHT_ANGLE)
                self.state = 474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WebIDLParser.LEFT_PAREN:
                    self.state = 473
                    self.optionalArgumentList()


                self.state = 476
                self.match(WebIDLParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(WebIDLParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(WebIDLParser.RIGHT_PAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(WebIDLParser.ArgumentListContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_optionalArgumentList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionalArgumentList" ):
                return visitor.visitOptionalArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def optionalArgumentList(self):

        localctx = WebIDLParser.OptionalArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_optionalArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480
            self.match(WebIDLParser.LEFT_PAREN)
            self.state = 482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WebIDLParser.LEFT_PAREN) | (1 << WebIDLParser.LEFT_BRACKET) | (1 << WebIDLParser.ANY) | (1 << WebIDLParser.BOOLEAN) | (1 << WebIDLParser.BYTE) | (1 << WebIDLParser.BYTE_STRING) | (1 << WebIDLParser.DOM_STRING) | (1 << WebIDLParser.DOUBLE) | (1 << WebIDLParser.FLOAT) | (1 << WebIDLParser.FROZEN_ARRAY) | (1 << WebIDLParser.LONG) | (1 << WebIDLParser.OBJECT) | (1 << WebIDLParser.OBSERVABLE_ARRAY) | (1 << WebIDLParser.OCTET) | (1 << WebIDLParser.OPTIONAL) | (1 << WebIDLParser.PROMISE) | (1 << WebIDLParser.RECORD) | (1 << WebIDLParser.SEQUENCE) | (1 << WebIDLParser.SHORT))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (WebIDLParser.SYMBOL - 65)) | (1 << (WebIDLParser.UNRESTRICTED - 65)) | (1 << (WebIDLParser.UNSIGNED - 65)) | (1 << (WebIDLParser.USV_STRING - 65)) | (1 << (WebIDLParser.ARRAY_BUFFER - 65)) | (1 << (WebIDLParser.DATA_VIEW - 65)) | (1 << (WebIDLParser.INT_8_ARRAY - 65)) | (1 << (WebIDLParser.INT_16_ARRAY - 65)) | (1 << (WebIDLParser.INT_32_ARRAY - 65)) | (1 << (WebIDLParser.UINT_8_ARRAY - 65)) | (1 << (WebIDLParser.UINT_16_ARRAY - 65)) | (1 << (WebIDLParser.UINT_32_ARRAY - 65)) | (1 << (WebIDLParser.UINT_8_CLAMPED_ARRAY - 65)) | (1 << (WebIDLParser.FLOAT_32_ARRAY - 65)) | (1 << (WebIDLParser.FLOAT_64_ARRAY - 65)) | (1 << (WebIDLParser.IDENTIFIER - 65)))) != 0):
                self.state = 481
                self.argumentList()


            self.state = 484
            self.match(WebIDLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReadWriteMaplikeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maplikeRest(self):
            return self.getTypedRuleContext(WebIDLParser.MaplikeRestContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_readWriteMaplike

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReadWriteMaplike" ):
                return visitor.visitReadWriteMaplike(self)
            else:
                return visitor.visitChildren(self)




    def readWriteMaplike(self):

        localctx = WebIDLParser.ReadWriteMaplikeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_readWriteMaplike)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self.maplikeRest()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaplikeRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAPLIKE(self):
            return self.getToken(WebIDLParser.MAPLIKE, 0)

        def LEFT_ANGLE(self):
            return self.getToken(WebIDLParser.LEFT_ANGLE, 0)

        def typeWithExtendedAttributes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WebIDLParser.TypeWithExtendedAttributesContext)
            else:
                return self.getTypedRuleContext(WebIDLParser.TypeWithExtendedAttributesContext,i)


        def COMMA(self):
            return self.getToken(WebIDLParser.COMMA, 0)

        def RIGHT_ANGLE(self):
            return self.getToken(WebIDLParser.RIGHT_ANGLE, 0)

        def SEMI(self):
            return self.getToken(WebIDLParser.SEMI, 0)

        def READONLY(self):
            return self.getToken(WebIDLParser.READONLY, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_maplikeRest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaplikeRest" ):
                return visitor.visitMaplikeRest(self)
            else:
                return visitor.visitChildren(self)




    def maplikeRest(self):

        localctx = WebIDLParser.MaplikeRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_maplikeRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WebIDLParser.READONLY:
                self.state = 488
                self.match(WebIDLParser.READONLY)


            self.state = 491
            self.match(WebIDLParser.MAPLIKE)
            self.state = 492
            self.match(WebIDLParser.LEFT_ANGLE)
            self.state = 493
            self.typeWithExtendedAttributes()
            self.state = 494
            self.match(WebIDLParser.COMMA)
            self.state = 495
            self.typeWithExtendedAttributes()
            self.state = 496
            self.match(WebIDLParser.RIGHT_ANGLE)
            self.state = 497
            self.match(WebIDLParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReadWriteSetlikeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def setlikeRest(self):
            return self.getTypedRuleContext(WebIDLParser.SetlikeRestContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_readWriteSetlike

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReadWriteSetlike" ):
                return visitor.visitReadWriteSetlike(self)
            else:
                return visitor.visitChildren(self)




    def readWriteSetlike(self):

        localctx = WebIDLParser.ReadWriteSetlikeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_readWriteSetlike)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 499
            self.setlikeRest()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetlikeRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETLIKE(self):
            return self.getToken(WebIDLParser.SETLIKE, 0)

        def LEFT_ANGLE(self):
            return self.getToken(WebIDLParser.LEFT_ANGLE, 0)

        def typeWithExtendedAttributes(self):
            return self.getTypedRuleContext(WebIDLParser.TypeWithExtendedAttributesContext,0)


        def RIGHT_ANGLE(self):
            return self.getToken(WebIDLParser.RIGHT_ANGLE, 0)

        def SEMI(self):
            return self.getToken(WebIDLParser.SEMI, 0)

        def READONLY(self):
            return self.getToken(WebIDLParser.READONLY, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_setlikeRest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetlikeRest" ):
                return visitor.visitSetlikeRest(self)
            else:
                return visitor.visitChildren(self)




    def setlikeRest(self):

        localctx = WebIDLParser.SetlikeRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_setlikeRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WebIDLParser.READONLY:
                self.state = 501
                self.match(WebIDLParser.READONLY)


            self.state = 504
            self.match(WebIDLParser.SETLIKE)
            self.state = 505
            self.match(WebIDLParser.LEFT_ANGLE)
            self.state = 506
            self.typeWithExtendedAttributes()
            self.state = 507
            self.match(WebIDLParser.RIGHT_ANGLE)
            self.state = 508
            self.match(WebIDLParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAMESPACE(self):
            return self.getToken(WebIDLParser.NAMESPACE, 0)

        def IDENTIFIER(self):
            return self.getToken(WebIDLParser.IDENTIFIER, 0)

        def LEFT_BRACE(self):
            return self.getToken(WebIDLParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(WebIDLParser.RIGHT_BRACE, 0)

        def SEMI(self):
            return self.getToken(WebIDLParser.SEMI, 0)

        def PARTIAL(self):
            return self.getToken(WebIDLParser.PARTIAL, 0)

        def namespaceMembers(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WebIDLParser.NamespaceMembersContext)
            else:
                return self.getTypedRuleContext(WebIDLParser.NamespaceMembersContext,i)


        def getRuleIndex(self):
            return WebIDLParser.RULE_namespace

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespace" ):
                return visitor.visitNamespace(self)
            else:
                return visitor.visitChildren(self)




    def namespace(self):

        localctx = WebIDLParser.NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_namespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WebIDLParser.PARTIAL:
                self.state = 510
                self.match(WebIDLParser.PARTIAL)


            self.state = 513
            self.match(WebIDLParser.NAMESPACE)
            self.state = 514
            self.match(WebIDLParser.IDENTIFIER)
            self.state = 515
            self.match(WebIDLParser.LEFT_BRACE)
            self.state = 519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WebIDLParser.LEFT_PAREN) | (1 << WebIDLParser.LEFT_BRACKET) | (1 << WebIDLParser.ANY) | (1 << WebIDLParser.BOOLEAN) | (1 << WebIDLParser.BYTE) | (1 << WebIDLParser.BYTE_STRING) | (1 << WebIDLParser.DOM_STRING) | (1 << WebIDLParser.DOUBLE) | (1 << WebIDLParser.FLOAT) | (1 << WebIDLParser.FROZEN_ARRAY) | (1 << WebIDLParser.LONG) | (1 << WebIDLParser.OBJECT) | (1 << WebIDLParser.OBSERVABLE_ARRAY) | (1 << WebIDLParser.OCTET) | (1 << WebIDLParser.PROMISE) | (1 << WebIDLParser.READONLY) | (1 << WebIDLParser.RECORD) | (1 << WebIDLParser.SEQUENCE) | (1 << WebIDLParser.SHORT))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (WebIDLParser.SYMBOL - 65)) | (1 << (WebIDLParser.UNRESTRICTED - 65)) | (1 << (WebIDLParser.UNSIGNED - 65)) | (1 << (WebIDLParser.USV_STRING - 65)) | (1 << (WebIDLParser.VOID - 65)) | (1 << (WebIDLParser.ARRAY_BUFFER - 65)) | (1 << (WebIDLParser.DATA_VIEW - 65)) | (1 << (WebIDLParser.INT_8_ARRAY - 65)) | (1 << (WebIDLParser.INT_16_ARRAY - 65)) | (1 << (WebIDLParser.INT_32_ARRAY - 65)) | (1 << (WebIDLParser.UINT_8_ARRAY - 65)) | (1 << (WebIDLParser.UINT_16_ARRAY - 65)) | (1 << (WebIDLParser.UINT_32_ARRAY - 65)) | (1 << (WebIDLParser.UINT_8_CLAMPED_ARRAY - 65)) | (1 << (WebIDLParser.FLOAT_32_ARRAY - 65)) | (1 << (WebIDLParser.FLOAT_64_ARRAY - 65)) | (1 << (WebIDLParser.IDENTIFIER - 65)))) != 0):
                self.state = 516
                self.namespaceMembers()
                self.state = 521
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 522
            self.match(WebIDLParser.RIGHT_BRACE)
            self.state = 523
            self.match(WebIDLParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespaceMembersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespaceMember(self):
            return self.getTypedRuleContext(WebIDLParser.NamespaceMemberContext,0)


        def extendedAttributeList(self):
            return self.getTypedRuleContext(WebIDLParser.ExtendedAttributeListContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_namespaceMembers

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespaceMembers" ):
                return visitor.visitNamespaceMembers(self)
            else:
                return visitor.visitChildren(self)




    def namespaceMembers(self):

        localctx = WebIDLParser.NamespaceMembersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_namespaceMembers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WebIDLParser.LEFT_BRACKET:
                self.state = 525
                self.extendedAttributeList()


            self.state = 528
            self.namespaceMember()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespaceMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regularOperation(self):
            return self.getTypedRuleContext(WebIDLParser.RegularOperationContext,0)


        def READONLY(self):
            return self.getToken(WebIDLParser.READONLY, 0)

        def attributeRest(self):
            return self.getTypedRuleContext(WebIDLParser.AttributeRestContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_namespaceMember

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespaceMember" ):
                return visitor.visitNamespaceMember(self)
            else:
                return visitor.visitChildren(self)




    def namespaceMember(self):

        localctx = WebIDLParser.NamespaceMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_namespaceMember)
        try:
            self.state = 533
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WebIDLParser.LEFT_PAREN, WebIDLParser.ANY, WebIDLParser.BOOLEAN, WebIDLParser.BYTE, WebIDLParser.BYTE_STRING, WebIDLParser.DOM_STRING, WebIDLParser.DOUBLE, WebIDLParser.FLOAT, WebIDLParser.FROZEN_ARRAY, WebIDLParser.LONG, WebIDLParser.OBJECT, WebIDLParser.OBSERVABLE_ARRAY, WebIDLParser.OCTET, WebIDLParser.PROMISE, WebIDLParser.RECORD, WebIDLParser.SEQUENCE, WebIDLParser.SHORT, WebIDLParser.SYMBOL, WebIDLParser.UNRESTRICTED, WebIDLParser.UNSIGNED, WebIDLParser.USV_STRING, WebIDLParser.VOID, WebIDLParser.ARRAY_BUFFER, WebIDLParser.DATA_VIEW, WebIDLParser.INT_8_ARRAY, WebIDLParser.INT_16_ARRAY, WebIDLParser.INT_32_ARRAY, WebIDLParser.UINT_8_ARRAY, WebIDLParser.UINT_16_ARRAY, WebIDLParser.UINT_32_ARRAY, WebIDLParser.UINT_8_CLAMPED_ARRAY, WebIDLParser.FLOAT_32_ARRAY, WebIDLParser.FLOAT_64_ARRAY, WebIDLParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 530
                self.regularOperation()
                pass
            elif token in [WebIDLParser.READONLY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 531
                self.match(WebIDLParser.READONLY)
                self.state = 532
                self.attributeRest()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictionaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DICTIONARY(self):
            return self.getToken(WebIDLParser.DICTIONARY, 0)

        def IDENTIFIER(self):
            return self.getToken(WebIDLParser.IDENTIFIER, 0)

        def LEFT_BRACE(self):
            return self.getToken(WebIDLParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(WebIDLParser.RIGHT_BRACE, 0)

        def SEMI(self):
            return self.getToken(WebIDLParser.SEMI, 0)

        def inheritance(self):
            return self.getTypedRuleContext(WebIDLParser.InheritanceContext,0)


        def dictionaryMembers(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WebIDLParser.DictionaryMembersContext)
            else:
                return self.getTypedRuleContext(WebIDLParser.DictionaryMembersContext,i)


        def PARTIAL(self):
            return self.getToken(WebIDLParser.PARTIAL, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_dictionary

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictionary" ):
                return visitor.visitDictionary(self)
            else:
                return visitor.visitChildren(self)




    def dictionary(self):

        localctx = WebIDLParser.DictionaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_dictionary)
        self._la = 0 # Token type
        try:
            self.state = 561
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WebIDLParser.DICTIONARY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 535
                self.match(WebIDLParser.DICTIONARY)
                self.state = 536
                self.match(WebIDLParser.IDENTIFIER)
                self.state = 538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WebIDLParser.COLON:
                    self.state = 537
                    self.inheritance()


                self.state = 540
                self.match(WebIDLParser.LEFT_BRACE)
                self.state = 544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WebIDLParser.LEFT_PAREN) | (1 << WebIDLParser.LEFT_BRACKET) | (1 << WebIDLParser.ANY) | (1 << WebIDLParser.BOOLEAN) | (1 << WebIDLParser.BYTE) | (1 << WebIDLParser.BYTE_STRING) | (1 << WebIDLParser.DOM_STRING) | (1 << WebIDLParser.DOUBLE) | (1 << WebIDLParser.FLOAT) | (1 << WebIDLParser.FROZEN_ARRAY) | (1 << WebIDLParser.LONG) | (1 << WebIDLParser.OBJECT) | (1 << WebIDLParser.OBSERVABLE_ARRAY) | (1 << WebIDLParser.OCTET) | (1 << WebIDLParser.PROMISE) | (1 << WebIDLParser.RECORD) | (1 << WebIDLParser.REQUIRED) | (1 << WebIDLParser.SEQUENCE) | (1 << WebIDLParser.SHORT))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (WebIDLParser.SYMBOL - 65)) | (1 << (WebIDLParser.UNRESTRICTED - 65)) | (1 << (WebIDLParser.UNSIGNED - 65)) | (1 << (WebIDLParser.USV_STRING - 65)) | (1 << (WebIDLParser.ARRAY_BUFFER - 65)) | (1 << (WebIDLParser.DATA_VIEW - 65)) | (1 << (WebIDLParser.INT_8_ARRAY - 65)) | (1 << (WebIDLParser.INT_16_ARRAY - 65)) | (1 << (WebIDLParser.INT_32_ARRAY - 65)) | (1 << (WebIDLParser.UINT_8_ARRAY - 65)) | (1 << (WebIDLParser.UINT_16_ARRAY - 65)) | (1 << (WebIDLParser.UINT_32_ARRAY - 65)) | (1 << (WebIDLParser.UINT_8_CLAMPED_ARRAY - 65)) | (1 << (WebIDLParser.FLOAT_32_ARRAY - 65)) | (1 << (WebIDLParser.FLOAT_64_ARRAY - 65)) | (1 << (WebIDLParser.IDENTIFIER - 65)))) != 0):
                    self.state = 541
                    self.dictionaryMembers()
                    self.state = 546
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 547
                self.match(WebIDLParser.RIGHT_BRACE)
                self.state = 548
                self.match(WebIDLParser.SEMI)
                pass
            elif token in [WebIDLParser.PARTIAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 549
                self.match(WebIDLParser.PARTIAL)
                self.state = 550
                self.match(WebIDLParser.DICTIONARY)
                self.state = 551
                self.match(WebIDLParser.IDENTIFIER)
                self.state = 552
                self.match(WebIDLParser.LEFT_BRACE)
                self.state = 556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WebIDLParser.LEFT_PAREN) | (1 << WebIDLParser.LEFT_BRACKET) | (1 << WebIDLParser.ANY) | (1 << WebIDLParser.BOOLEAN) | (1 << WebIDLParser.BYTE) | (1 << WebIDLParser.BYTE_STRING) | (1 << WebIDLParser.DOM_STRING) | (1 << WebIDLParser.DOUBLE) | (1 << WebIDLParser.FLOAT) | (1 << WebIDLParser.FROZEN_ARRAY) | (1 << WebIDLParser.LONG) | (1 << WebIDLParser.OBJECT) | (1 << WebIDLParser.OBSERVABLE_ARRAY) | (1 << WebIDLParser.OCTET) | (1 << WebIDLParser.PROMISE) | (1 << WebIDLParser.RECORD) | (1 << WebIDLParser.REQUIRED) | (1 << WebIDLParser.SEQUENCE) | (1 << WebIDLParser.SHORT))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (WebIDLParser.SYMBOL - 65)) | (1 << (WebIDLParser.UNRESTRICTED - 65)) | (1 << (WebIDLParser.UNSIGNED - 65)) | (1 << (WebIDLParser.USV_STRING - 65)) | (1 << (WebIDLParser.ARRAY_BUFFER - 65)) | (1 << (WebIDLParser.DATA_VIEW - 65)) | (1 << (WebIDLParser.INT_8_ARRAY - 65)) | (1 << (WebIDLParser.INT_16_ARRAY - 65)) | (1 << (WebIDLParser.INT_32_ARRAY - 65)) | (1 << (WebIDLParser.UINT_8_ARRAY - 65)) | (1 << (WebIDLParser.UINT_16_ARRAY - 65)) | (1 << (WebIDLParser.UINT_32_ARRAY - 65)) | (1 << (WebIDLParser.UINT_8_CLAMPED_ARRAY - 65)) | (1 << (WebIDLParser.FLOAT_32_ARRAY - 65)) | (1 << (WebIDLParser.FLOAT_64_ARRAY - 65)) | (1 << (WebIDLParser.IDENTIFIER - 65)))) != 0):
                    self.state = 553
                    self.dictionaryMembers()
                    self.state = 558
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 559
                self.match(WebIDLParser.RIGHT_BRACE)
                self.state = 560
                self.match(WebIDLParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictionaryMembersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dictionaryMember(self):
            return self.getTypedRuleContext(WebIDLParser.DictionaryMemberContext,0)


        def extendedAttributeList(self):
            return self.getTypedRuleContext(WebIDLParser.ExtendedAttributeListContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_dictionaryMembers

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictionaryMembers" ):
                return visitor.visitDictionaryMembers(self)
            else:
                return visitor.visitChildren(self)




    def dictionaryMembers(self):

        localctx = WebIDLParser.DictionaryMembersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_dictionaryMembers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WebIDLParser.LEFT_BRACKET:
                self.state = 563
                self.extendedAttributeList()


            self.state = 566
            self.dictionaryMember()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictionaryMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REQUIRED(self):
            return self.getToken(WebIDLParser.REQUIRED, 0)

        def typeWithExtendedAttributes(self):
            return self.getTypedRuleContext(WebIDLParser.TypeWithExtendedAttributesContext,0)


        def IDENTIFIER(self):
            return self.getToken(WebIDLParser.IDENTIFIER, 0)

        def SEMI(self):
            return self.getToken(WebIDLParser.SEMI, 0)

        def type_(self):
            return self.getTypedRuleContext(WebIDLParser.Type_Context,0)


        def default_(self):
            return self.getTypedRuleContext(WebIDLParser.Default_Context,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_dictionaryMember

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictionaryMember" ):
                return visitor.visitDictionaryMember(self)
            else:
                return visitor.visitChildren(self)




    def dictionaryMember(self):

        localctx = WebIDLParser.DictionaryMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_dictionaryMember)
        self._la = 0 # Token type
        try:
            self.state = 580
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WebIDLParser.REQUIRED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 568
                self.match(WebIDLParser.REQUIRED)
                self.state = 569
                self.typeWithExtendedAttributes()
                self.state = 570
                self.match(WebIDLParser.IDENTIFIER)
                self.state = 571
                self.match(WebIDLParser.SEMI)
                pass
            elif token in [WebIDLParser.LEFT_PAREN, WebIDLParser.ANY, WebIDLParser.BOOLEAN, WebIDLParser.BYTE, WebIDLParser.BYTE_STRING, WebIDLParser.DOM_STRING, WebIDLParser.DOUBLE, WebIDLParser.FLOAT, WebIDLParser.FROZEN_ARRAY, WebIDLParser.LONG, WebIDLParser.OBJECT, WebIDLParser.OBSERVABLE_ARRAY, WebIDLParser.OCTET, WebIDLParser.PROMISE, WebIDLParser.RECORD, WebIDLParser.SEQUENCE, WebIDLParser.SHORT, WebIDLParser.SYMBOL, WebIDLParser.UNRESTRICTED, WebIDLParser.UNSIGNED, WebIDLParser.USV_STRING, WebIDLParser.ARRAY_BUFFER, WebIDLParser.DATA_VIEW, WebIDLParser.INT_8_ARRAY, WebIDLParser.INT_16_ARRAY, WebIDLParser.INT_32_ARRAY, WebIDLParser.UINT_8_ARRAY, WebIDLParser.UINT_16_ARRAY, WebIDLParser.UINT_32_ARRAY, WebIDLParser.UINT_8_CLAMPED_ARRAY, WebIDLParser.FLOAT_32_ARRAY, WebIDLParser.FLOAT_64_ARRAY, WebIDLParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 573
                self.type_()
                self.state = 574
                self.match(WebIDLParser.IDENTIFIER)
                self.state = 576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WebIDLParser.EQUAL_SYMBOL:
                    self.state = 575
                    self.default_()


                self.state = 578
                self.match(WebIDLParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL_SYMBOL(self):
            return self.getToken(WebIDLParser.EQUAL_SYMBOL, 0)

        def defaultValue(self):
            return self.getTypedRuleContext(WebIDLParser.DefaultValueContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_default_

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefault_" ):
                return visitor.visitDefault_(self)
            else:
                return visitor.visitChildren(self)




    def default_(self):

        localctx = WebIDLParser.Default_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_default_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            self.match(WebIDLParser.EQUAL_SYMBOL)
            self.state = 583
            self.defaultValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(WebIDLParser.ENUM, 0)

        def IDENTIFIER(self):
            return self.getToken(WebIDLParser.IDENTIFIER, 0)

        def LEFT_BRACE(self):
            return self.getToken(WebIDLParser.LEFT_BRACE, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(WebIDLParser.StringLiteral)
            else:
                return self.getToken(WebIDLParser.StringLiteral, i)

        def RIGHT_BRACE(self):
            return self.getToken(WebIDLParser.RIGHT_BRACE, 0)

        def SEMI(self):
            return self.getToken(WebIDLParser.SEMI, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(WebIDLParser.COMMA)
            else:
                return self.getToken(WebIDLParser.COMMA, i)

        def getRuleIndex(self):
            return WebIDLParser.RULE_enum_

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum_" ):
                return visitor.visitEnum_(self)
            else:
                return visitor.visitChildren(self)




    def enum_(self):

        localctx = WebIDLParser.Enum_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_enum_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 585
            self.match(WebIDLParser.ENUM)
            self.state = 586
            self.match(WebIDLParser.IDENTIFIER)
            self.state = 587
            self.match(WebIDLParser.LEFT_BRACE)
            self.state = 588
            self.match(WebIDLParser.StringLiteral)
            self.state = 595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WebIDLParser.COMMA:
                self.state = 589
                self.match(WebIDLParser.COMMA)
                self.state = 591
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WebIDLParser.StringLiteral:
                    self.state = 590
                    self.match(WebIDLParser.StringLiteral)


                self.state = 597
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 598
            self.match(WebIDLParser.RIGHT_BRACE)
            self.state = 599
            self.match(WebIDLParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallbackRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(WebIDLParser.IDENTIFIER, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(WebIDLParser.EQUAL_SYMBOL, 0)

        def returnType(self):
            return self.getTypedRuleContext(WebIDLParser.ReturnTypeContext,0)


        def LEFT_PAREN(self):
            return self.getToken(WebIDLParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(WebIDLParser.RIGHT_PAREN, 0)

        def SEMI(self):
            return self.getToken(WebIDLParser.SEMI, 0)

        def argumentList(self):
            return self.getTypedRuleContext(WebIDLParser.ArgumentListContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_callbackRest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallbackRest" ):
                return visitor.visitCallbackRest(self)
            else:
                return visitor.visitChildren(self)




    def callbackRest(self):

        localctx = WebIDLParser.CallbackRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_callbackRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            self.match(WebIDLParser.IDENTIFIER)
            self.state = 602
            self.match(WebIDLParser.EQUAL_SYMBOL)
            self.state = 603
            self.returnType()
            self.state = 604
            self.match(WebIDLParser.LEFT_PAREN)
            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WebIDLParser.LEFT_PAREN) | (1 << WebIDLParser.LEFT_BRACKET) | (1 << WebIDLParser.ANY) | (1 << WebIDLParser.BOOLEAN) | (1 << WebIDLParser.BYTE) | (1 << WebIDLParser.BYTE_STRING) | (1 << WebIDLParser.DOM_STRING) | (1 << WebIDLParser.DOUBLE) | (1 << WebIDLParser.FLOAT) | (1 << WebIDLParser.FROZEN_ARRAY) | (1 << WebIDLParser.LONG) | (1 << WebIDLParser.OBJECT) | (1 << WebIDLParser.OBSERVABLE_ARRAY) | (1 << WebIDLParser.OCTET) | (1 << WebIDLParser.OPTIONAL) | (1 << WebIDLParser.PROMISE) | (1 << WebIDLParser.RECORD) | (1 << WebIDLParser.SEQUENCE) | (1 << WebIDLParser.SHORT))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (WebIDLParser.SYMBOL - 65)) | (1 << (WebIDLParser.UNRESTRICTED - 65)) | (1 << (WebIDLParser.UNSIGNED - 65)) | (1 << (WebIDLParser.USV_STRING - 65)) | (1 << (WebIDLParser.ARRAY_BUFFER - 65)) | (1 << (WebIDLParser.DATA_VIEW - 65)) | (1 << (WebIDLParser.INT_8_ARRAY - 65)) | (1 << (WebIDLParser.INT_16_ARRAY - 65)) | (1 << (WebIDLParser.INT_32_ARRAY - 65)) | (1 << (WebIDLParser.UINT_8_ARRAY - 65)) | (1 << (WebIDLParser.UINT_16_ARRAY - 65)) | (1 << (WebIDLParser.UINT_32_ARRAY - 65)) | (1 << (WebIDLParser.UINT_8_CLAMPED_ARRAY - 65)) | (1 << (WebIDLParser.FLOAT_32_ARRAY - 65)) | (1 << (WebIDLParser.FLOAT_64_ARRAY - 65)) | (1 << (WebIDLParser.IDENTIFIER - 65)))) != 0):
                self.state = 605
                self.argumentList()


            self.state = 608
            self.match(WebIDLParser.RIGHT_PAREN)
            self.state = 609
            self.match(WebIDLParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPEDEF(self):
            return self.getToken(WebIDLParser.TYPEDEF, 0)

        def typeWithExtendedAttributes(self):
            return self.getTypedRuleContext(WebIDLParser.TypeWithExtendedAttributesContext,0)


        def IDENTIFIER(self):
            return self.getToken(WebIDLParser.IDENTIFIER, 0)

        def SEMI(self):
            return self.getToken(WebIDLParser.SEMI, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_typedef

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedef" ):
                return visitor.visitTypedef(self)
            else:
                return visitor.visitChildren(self)




    def typedef(self):

        localctx = WebIDLParser.TypedefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_typedef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 611
            self.match(WebIDLParser.TYPEDEF)
            self.state = 612
            self.typeWithExtendedAttributes()
            self.state = 613
            self.match(WebIDLParser.IDENTIFIER)
            self.state = 614
            self.match(WebIDLParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleType(self):
            return self.getTypedRuleContext(WebIDLParser.SingleTypeContext,0)


        def unionType(self):
            return self.getTypedRuleContext(WebIDLParser.UnionTypeContext,0)


        def null_(self):
            return self.getTypedRuleContext(WebIDLParser.Null_Context,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_type_

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_" ):
                return visitor.visitType_(self)
            else:
                return visitor.visitChildren(self)




    def type_(self):

        localctx = WebIDLParser.Type_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_type_)
        self._la = 0 # Token type
        try:
            self.state = 621
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WebIDLParser.ANY, WebIDLParser.BOOLEAN, WebIDLParser.BYTE, WebIDLParser.BYTE_STRING, WebIDLParser.DOM_STRING, WebIDLParser.DOUBLE, WebIDLParser.FLOAT, WebIDLParser.FROZEN_ARRAY, WebIDLParser.LONG, WebIDLParser.OBJECT, WebIDLParser.OBSERVABLE_ARRAY, WebIDLParser.OCTET, WebIDLParser.PROMISE, WebIDLParser.RECORD, WebIDLParser.SEQUENCE, WebIDLParser.SHORT, WebIDLParser.SYMBOL, WebIDLParser.UNRESTRICTED, WebIDLParser.UNSIGNED, WebIDLParser.USV_STRING, WebIDLParser.ARRAY_BUFFER, WebIDLParser.DATA_VIEW, WebIDLParser.INT_8_ARRAY, WebIDLParser.INT_16_ARRAY, WebIDLParser.INT_32_ARRAY, WebIDLParser.UINT_8_ARRAY, WebIDLParser.UINT_16_ARRAY, WebIDLParser.UINT_32_ARRAY, WebIDLParser.UINT_8_CLAMPED_ARRAY, WebIDLParser.FLOAT_32_ARRAY, WebIDLParser.FLOAT_64_ARRAY, WebIDLParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 616
                self.singleType()
                pass
            elif token in [WebIDLParser.LEFT_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 617
                self.unionType()
                self.state = 619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WebIDLParser.QUESTION_SYMBOL:
                    self.state = 618
                    self.null_()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeWithExtendedAttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(WebIDLParser.Type_Context,0)


        def extendedAttributeList(self):
            return self.getTypedRuleContext(WebIDLParser.ExtendedAttributeListContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_typeWithExtendedAttributes

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeWithExtendedAttributes" ):
                return visitor.visitTypeWithExtendedAttributes(self)
            else:
                return visitor.visitChildren(self)




    def typeWithExtendedAttributes(self):

        localctx = WebIDLParser.TypeWithExtendedAttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_typeWithExtendedAttributes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WebIDLParser.LEFT_BRACKET:
                self.state = 623
                self.extendedAttributeList()


            self.state = 626
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtendedAttributeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACKET(self):
            return self.getToken(WebIDLParser.LEFT_BRACKET, 0)

        def extendedAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WebIDLParser.ExtendedAttributeContext)
            else:
                return self.getTypedRuleContext(WebIDLParser.ExtendedAttributeContext,i)


        def RIGHT_BRACKET(self):
            return self.getToken(WebIDLParser.RIGHT_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(WebIDLParser.COMMA)
            else:
                return self.getToken(WebIDLParser.COMMA, i)

        def getRuleIndex(self):
            return WebIDLParser.RULE_extendedAttributeList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtendedAttributeList" ):
                return visitor.visitExtendedAttributeList(self)
            else:
                return visitor.visitChildren(self)




    def extendedAttributeList(self):

        localctx = WebIDLParser.ExtendedAttributeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_extendedAttributeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.match(WebIDLParser.LEFT_BRACKET)
            self.state = 629
            self.extendedAttribute()
            self.state = 634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WebIDLParser.COMMA:
                self.state = 630
                self.match(WebIDLParser.COMMA)
                self.state = 631
                self.extendedAttribute()
                self.state = 636
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 637
            self.match(WebIDLParser.RIGHT_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtendedAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return WebIDLParser.RULE_extendedAttribute

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExtendedAttributeIdentListContext(ExtendedAttributeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a WebIDLParser.ExtendedAttributeContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def EQUAL_SYMBOL(self):
            return self.getToken(WebIDLParser.EQUAL_SYMBOL, 0)
        def LEFT_PAREN(self):
            return self.getToken(WebIDLParser.LEFT_PAREN, 0)
        def identifierList(self):
            return self.getTypedRuleContext(WebIDLParser.IdentifierListContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(WebIDLParser.RIGHT_PAREN, 0)
        def IDENTIFIER(self):
            return self.getToken(WebIDLParser.IDENTIFIER, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtendedAttributeIdentList" ):
                return visitor.visitExtendedAttributeIdentList(self)
            else:
                return visitor.visitChildren(self)


    class ExtendedAttributeNamedArgListContext(ExtendedAttributeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a WebIDLParser.ExtendedAttributeContext
            super().__init__(parser)
            self.name = None # Token
            self.rhs = None # Token
            self.copyFrom(ctx)

        def EQUAL_SYMBOL(self):
            return self.getToken(WebIDLParser.EQUAL_SYMBOL, 0)
        def LEFT_PAREN(self):
            return self.getToken(WebIDLParser.LEFT_PAREN, 0)
        def argumentList(self):
            return self.getTypedRuleContext(WebIDLParser.ArgumentListContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(WebIDLParser.RIGHT_PAREN, 0)
        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(WebIDLParser.IDENTIFIER)
            else:
                return self.getToken(WebIDLParser.IDENTIFIER, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtendedAttributeNamedArgList" ):
                return visitor.visitExtendedAttributeNamedArgList(self)
            else:
                return visitor.visitChildren(self)


    class ExtendedAttributeArgListContext(ExtendedAttributeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a WebIDLParser.ExtendedAttributeContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def LEFT_PAREN(self):
            return self.getToken(WebIDLParser.LEFT_PAREN, 0)
        def argumentList(self):
            return self.getTypedRuleContext(WebIDLParser.ArgumentListContext,0)

        def RIGHT_PAREN(self):
            return self.getToken(WebIDLParser.RIGHT_PAREN, 0)
        def IDENTIFIER(self):
            return self.getToken(WebIDLParser.IDENTIFIER, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtendedAttributeArgList" ):
                return visitor.visitExtendedAttributeArgList(self)
            else:
                return visitor.visitChildren(self)


    class ExtendedAttributeIdentContext(ExtendedAttributeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a WebIDLParser.ExtendedAttributeContext
            super().__init__(parser)
            self.name = None # Token
            self.rhs = None # IdentifierContext
            self.copyFrom(ctx)

        def EQUAL_SYMBOL(self):
            return self.getToken(WebIDLParser.EQUAL_SYMBOL, 0)
        def IDENTIFIER(self):
            return self.getToken(WebIDLParser.IDENTIFIER, 0)
        def identifier(self):
            return self.getTypedRuleContext(WebIDLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtendedAttributeIdent" ):
                return visitor.visitExtendedAttributeIdent(self)
            else:
                return visitor.visitChildren(self)


    class ExtendedAttributeNoArgsContext(ExtendedAttributeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a WebIDLParser.ExtendedAttributeContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(WebIDLParser.IDENTIFIER, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtendedAttributeNoArgs" ):
                return visitor.visitExtendedAttributeNoArgs(self)
            else:
                return visitor.visitChildren(self)



    def extendedAttribute(self):

        localctx = WebIDLParser.ExtendedAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_extendedAttribute)
        try:
            self.state = 661
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                localctx = WebIDLParser.ExtendedAttributeNoArgsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 639
                localctx.name = self.match(WebIDLParser.IDENTIFIER)
                pass

            elif la_ == 2:
                localctx = WebIDLParser.ExtendedAttributeIdentListContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 640
                localctx.name = self.match(WebIDLParser.IDENTIFIER)
                self.state = 641
                self.match(WebIDLParser.EQUAL_SYMBOL)
                self.state = 642
                self.match(WebIDLParser.LEFT_PAREN)
                self.state = 643
                self.identifierList()
                self.state = 644
                self.match(WebIDLParser.RIGHT_PAREN)
                pass

            elif la_ == 3:
                localctx = WebIDLParser.ExtendedAttributeNamedArgListContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 646
                localctx.name = self.match(WebIDLParser.IDENTIFIER)
                self.state = 647
                self.match(WebIDLParser.EQUAL_SYMBOL)
                self.state = 648
                localctx.rhs = self.match(WebIDLParser.IDENTIFIER)
                self.state = 649
                self.match(WebIDLParser.LEFT_PAREN)
                self.state = 650
                self.argumentList()
                self.state = 651
                self.match(WebIDLParser.RIGHT_PAREN)
                pass

            elif la_ == 4:
                localctx = WebIDLParser.ExtendedAttributeIdentContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 653
                localctx.name = self.match(WebIDLParser.IDENTIFIER)
                self.state = 654
                self.match(WebIDLParser.EQUAL_SYMBOL)
                self.state = 655
                localctx.rhs = self.identifier()
                pass

            elif la_ == 5:
                localctx = WebIDLParser.ExtendedAttributeArgListContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 656
                localctx.name = self.match(WebIDLParser.IDENTIFIER)
                self.state = 657
                self.match(WebIDLParser.LEFT_PAREN)
                self.state = 658
                self.argumentList()
                self.state = 659
                self.match(WebIDLParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WebIDLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(WebIDLParser.IdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(WebIDLParser.COMMA)
            else:
                return self.getToken(WebIDLParser.COMMA, i)

        def getRuleIndex(self):
            return WebIDLParser.RULE_identifierList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = WebIDLParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.identifier()
            self.state = 668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WebIDLParser.COMMA:
                self.state = 664
                self.match(WebIDLParser.COMMA)
                self.state = 665
                self.identifier()
                self.state = 670
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def other(self):
            return self.getTypedRuleContext(WebIDLParser.OtherContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_identifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = WebIDLParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.other()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(WebIDLParser.Type_Context,0)


        def VOID(self):
            return self.getToken(WebIDLParser.VOID, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_returnType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnType" ):
                return visitor.visitReturnType(self)
            else:
                return visitor.visitChildren(self)




    def returnType(self):

        localctx = WebIDLParser.ReturnTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_returnType)
        try:
            self.state = 675
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WebIDLParser.LEFT_PAREN, WebIDLParser.ANY, WebIDLParser.BOOLEAN, WebIDLParser.BYTE, WebIDLParser.BYTE_STRING, WebIDLParser.DOM_STRING, WebIDLParser.DOUBLE, WebIDLParser.FLOAT, WebIDLParser.FROZEN_ARRAY, WebIDLParser.LONG, WebIDLParser.OBJECT, WebIDLParser.OBSERVABLE_ARRAY, WebIDLParser.OCTET, WebIDLParser.PROMISE, WebIDLParser.RECORD, WebIDLParser.SEQUENCE, WebIDLParser.SHORT, WebIDLParser.SYMBOL, WebIDLParser.UNRESTRICTED, WebIDLParser.UNSIGNED, WebIDLParser.USV_STRING, WebIDLParser.ARRAY_BUFFER, WebIDLParser.DATA_VIEW, WebIDLParser.INT_8_ARRAY, WebIDLParser.INT_16_ARRAY, WebIDLParser.INT_32_ARRAY, WebIDLParser.UINT_8_ARRAY, WebIDLParser.UINT_16_ARRAY, WebIDLParser.UINT_32_ARRAY, WebIDLParser.UINT_8_CLAMPED_ARRAY, WebIDLParser.FLOAT_32_ARRAY, WebIDLParser.FLOAT_64_ARRAY, WebIDLParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 673
                self.type_()
                pass
            elif token in [WebIDLParser.VOID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 674
                self.match(WebIDLParser.VOID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def distinguishableType(self):
            return self.getTypedRuleContext(WebIDLParser.DistinguishableTypeContext,0)


        def null_(self):
            return self.getTypedRuleContext(WebIDLParser.Null_Context,0)


        def genericType(self):
            return self.getTypedRuleContext(WebIDLParser.GenericTypeContext,0)


        def promiseType(self):
            return self.getTypedRuleContext(WebIDLParser.PromiseTypeContext,0)


        def ANY(self):
            return self.getToken(WebIDLParser.ANY, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_singleType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleType" ):
                return visitor.visitSingleType(self)
            else:
                return visitor.visitChildren(self)




    def singleType(self):

        localctx = WebIDLParser.SingleTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_singleType)
        self._la = 0 # Token type
        try:
            self.state = 687
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WebIDLParser.BOOLEAN, WebIDLParser.BYTE, WebIDLParser.BYTE_STRING, WebIDLParser.DOM_STRING, WebIDLParser.DOUBLE, WebIDLParser.FLOAT, WebIDLParser.LONG, WebIDLParser.OBJECT, WebIDLParser.OCTET, WebIDLParser.RECORD, WebIDLParser.SHORT, WebIDLParser.SYMBOL, WebIDLParser.UNRESTRICTED, WebIDLParser.UNSIGNED, WebIDLParser.USV_STRING, WebIDLParser.ARRAY_BUFFER, WebIDLParser.DATA_VIEW, WebIDLParser.INT_8_ARRAY, WebIDLParser.INT_16_ARRAY, WebIDLParser.INT_32_ARRAY, WebIDLParser.UINT_8_ARRAY, WebIDLParser.UINT_16_ARRAY, WebIDLParser.UINT_32_ARRAY, WebIDLParser.UINT_8_CLAMPED_ARRAY, WebIDLParser.FLOAT_32_ARRAY, WebIDLParser.FLOAT_64_ARRAY, WebIDLParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 677
                self.distinguishableType()
                self.state = 679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WebIDLParser.QUESTION_SYMBOL:
                    self.state = 678
                    self.null_()


                pass
            elif token in [WebIDLParser.FROZEN_ARRAY, WebIDLParser.OBSERVABLE_ARRAY, WebIDLParser.SEQUENCE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 681
                self.genericType()
                self.state = 683
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WebIDLParser.QUESTION_SYMBOL:
                    self.state = 682
                    self.null_()


                pass
            elif token in [WebIDLParser.PROMISE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 685
                self.promiseType()
                pass
            elif token in [WebIDLParser.ANY]:
                self.enterOuterAlt(localctx, 4)
                self.state = 686
                self.match(WebIDLParser.ANY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_PAREN(self):
            return self.getToken(WebIDLParser.LEFT_PAREN, 0)

        def unionMemberType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WebIDLParser.UnionMemberTypeContext)
            else:
                return self.getTypedRuleContext(WebIDLParser.UnionMemberTypeContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(WebIDLParser.RIGHT_PAREN, 0)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(WebIDLParser.OR)
            else:
                return self.getToken(WebIDLParser.OR, i)

        def getRuleIndex(self):
            return WebIDLParser.RULE_unionType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionType" ):
                return visitor.visitUnionType(self)
            else:
                return visitor.visitChildren(self)




    def unionType(self):

        localctx = WebIDLParser.UnionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_unionType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            self.match(WebIDLParser.LEFT_PAREN)
            self.state = 690
            self.unionMemberType()
            self.state = 693 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 691
                self.match(WebIDLParser.OR)
                self.state = 692
                self.unionMemberType()
                self.state = 695 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WebIDLParser.OR):
                    break

            self.state = 697
            self.match(WebIDLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionMemberTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def distinguishableType(self):
            return self.getTypedRuleContext(WebIDLParser.DistinguishableTypeContext,0)


        def extendedAttributeList(self):
            return self.getTypedRuleContext(WebIDLParser.ExtendedAttributeListContext,0)


        def null_(self):
            return self.getTypedRuleContext(WebIDLParser.Null_Context,0)


        def genericType(self):
            return self.getTypedRuleContext(WebIDLParser.GenericTypeContext,0)


        def unionType(self):
            return self.getTypedRuleContext(WebIDLParser.UnionTypeContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_unionMemberType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionMemberType" ):
                return visitor.visitUnionMemberType(self)
            else:
                return visitor.visitChildren(self)




    def unionMemberType(self):

        localctx = WebIDLParser.UnionMemberTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_unionMemberType)
        self._la = 0 # Token type
        try:
            self.state = 717
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WebIDLParser.LEFT_BRACKET:
                    self.state = 699
                    self.extendedAttributeList()


                self.state = 702
                self.distinguishableType()
                self.state = 704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WebIDLParser.QUESTION_SYMBOL:
                    self.state = 703
                    self.null_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WebIDLParser.LEFT_BRACKET:
                    self.state = 706
                    self.extendedAttributeList()


                self.state = 709
                self.genericType()
                self.state = 711
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WebIDLParser.QUESTION_SYMBOL:
                    self.state = 710
                    self.null_()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 713
                self.unionType()
                self.state = 715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WebIDLParser.QUESTION_SYMBOL:
                    self.state = 714
                    self.null_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.generic = None # Token

        def LEFT_ANGLE(self):
            return self.getToken(WebIDLParser.LEFT_ANGLE, 0)

        def typeWithExtendedAttributes(self):
            return self.getTypedRuleContext(WebIDLParser.TypeWithExtendedAttributesContext,0)


        def RIGHT_ANGLE(self):
            return self.getToken(WebIDLParser.RIGHT_ANGLE, 0)

        def SEQUENCE(self):
            return self.getToken(WebIDLParser.SEQUENCE, 0)

        def FROZEN_ARRAY(self):
            return self.getToken(WebIDLParser.FROZEN_ARRAY, 0)

        def OBSERVABLE_ARRAY(self):
            return self.getToken(WebIDLParser.OBSERVABLE_ARRAY, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_genericType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericType" ):
                return visitor.visitGenericType(self)
            else:
                return visitor.visitChildren(self)




    def genericType(self):

        localctx = WebIDLParser.GenericTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_genericType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            localctx.generic = self._input.LT(1)
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WebIDLParser.FROZEN_ARRAY) | (1 << WebIDLParser.OBSERVABLE_ARRAY) | (1 << WebIDLParser.SEQUENCE))) != 0)):
                localctx.generic = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 720
            self.match(WebIDLParser.LEFT_ANGLE)
            self.state = 721
            self.typeWithExtendedAttributes()
            self.state = 722
            self.match(WebIDLParser.RIGHT_ANGLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DistinguishableTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitiveType(self):
            return self.getTypedRuleContext(WebIDLParser.PrimitiveTypeContext,0)


        def stringType(self):
            return self.getTypedRuleContext(WebIDLParser.StringTypeContext,0)


        def bufferRelatedType(self):
            return self.getTypedRuleContext(WebIDLParser.BufferRelatedTypeContext,0)


        def recordType(self):
            return self.getTypedRuleContext(WebIDLParser.RecordTypeContext,0)


        def IDENTIFIER(self):
            return self.getToken(WebIDLParser.IDENTIFIER, 0)

        def OBJECT(self):
            return self.getToken(WebIDLParser.OBJECT, 0)

        def SYMBOL(self):
            return self.getToken(WebIDLParser.SYMBOL, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_distinguishableType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDistinguishableType" ):
                return visitor.visitDistinguishableType(self)
            else:
                return visitor.visitChildren(self)




    def distinguishableType(self):

        localctx = WebIDLParser.DistinguishableTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_distinguishableType)
        try:
            self.state = 731
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WebIDLParser.BOOLEAN, WebIDLParser.BYTE, WebIDLParser.DOUBLE, WebIDLParser.FLOAT, WebIDLParser.LONG, WebIDLParser.OCTET, WebIDLParser.SHORT, WebIDLParser.UNRESTRICTED, WebIDLParser.UNSIGNED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 724
                self.primitiveType()
                pass
            elif token in [WebIDLParser.BYTE_STRING, WebIDLParser.DOM_STRING, WebIDLParser.USV_STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 725
                self.stringType()
                pass
            elif token in [WebIDLParser.ARRAY_BUFFER, WebIDLParser.DATA_VIEW, WebIDLParser.INT_8_ARRAY, WebIDLParser.INT_16_ARRAY, WebIDLParser.INT_32_ARRAY, WebIDLParser.UINT_8_ARRAY, WebIDLParser.UINT_16_ARRAY, WebIDLParser.UINT_32_ARRAY, WebIDLParser.UINT_8_CLAMPED_ARRAY, WebIDLParser.FLOAT_32_ARRAY, WebIDLParser.FLOAT_64_ARRAY]:
                self.enterOuterAlt(localctx, 3)
                self.state = 726
                self.bufferRelatedType()
                pass
            elif token in [WebIDLParser.RECORD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 727
                self.recordType()
                pass
            elif token in [WebIDLParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 5)
                self.state = 728
                self.match(WebIDLParser.IDENTIFIER)
                pass
            elif token in [WebIDLParser.OBJECT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 729
                self.match(WebIDLParser.OBJECT)
                pass
            elif token in [WebIDLParser.SYMBOL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 730
                self.match(WebIDLParser.SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimitiveTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsignedIntegerType(self):
            return self.getTypedRuleContext(WebIDLParser.UnsignedIntegerTypeContext,0)


        def unrestrictedFloatType(self):
            return self.getTypedRuleContext(WebIDLParser.UnrestrictedFloatTypeContext,0)


        def BOOLEAN(self):
            return self.getToken(WebIDLParser.BOOLEAN, 0)

        def BYTE(self):
            return self.getToken(WebIDLParser.BYTE, 0)

        def OCTET(self):
            return self.getToken(WebIDLParser.OCTET, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_primitiveType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimitiveType" ):
                return visitor.visitPrimitiveType(self)
            else:
                return visitor.visitChildren(self)




    def primitiveType(self):

        localctx = WebIDLParser.PrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_primitiveType)
        try:
            self.state = 738
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WebIDLParser.LONG, WebIDLParser.SHORT, WebIDLParser.UNSIGNED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 733
                self.unsignedIntegerType()
                pass
            elif token in [WebIDLParser.DOUBLE, WebIDLParser.FLOAT, WebIDLParser.UNRESTRICTED]:
                self.enterOuterAlt(localctx, 2)
                self.state = 734
                self.unrestrictedFloatType()
                pass
            elif token in [WebIDLParser.BOOLEAN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 735
                self.match(WebIDLParser.BOOLEAN)
                pass
            elif token in [WebIDLParser.BYTE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 736
                self.match(WebIDLParser.BYTE)
                pass
            elif token in [WebIDLParser.OCTET]:
                self.enterOuterAlt(localctx, 5)
                self.state = 737
                self.match(WebIDLParser.OCTET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitiveType(self):
            return self.getTypedRuleContext(WebIDLParser.PrimitiveTypeContext,0)


        def IDENTIFIER(self):
            return self.getToken(WebIDLParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_constType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstType" ):
                return visitor.visitConstType(self)
            else:
                return visitor.visitChildren(self)




    def constType(self):

        localctx = WebIDLParser.ConstTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_constType)
        try:
            self.state = 742
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WebIDLParser.BOOLEAN, WebIDLParser.BYTE, WebIDLParser.DOUBLE, WebIDLParser.FLOAT, WebIDLParser.LONG, WebIDLParser.OCTET, WebIDLParser.SHORT, WebIDLParser.UNRESTRICTED, WebIDLParser.UNSIGNED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 740
                self.primitiveType()
                pass
            elif token in [WebIDLParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 741
                self.match(WebIDLParser.IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PromiseTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROMISE(self):
            return self.getToken(WebIDLParser.PROMISE, 0)

        def LEFT_ANGLE(self):
            return self.getToken(WebIDLParser.LEFT_ANGLE, 0)

        def returnType(self):
            return self.getTypedRuleContext(WebIDLParser.ReturnTypeContext,0)


        def RIGHT_ANGLE(self):
            return self.getToken(WebIDLParser.RIGHT_ANGLE, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_promiseType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPromiseType" ):
                return visitor.visitPromiseType(self)
            else:
                return visitor.visitChildren(self)




    def promiseType(self):

        localctx = WebIDLParser.PromiseTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_promiseType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            self.match(WebIDLParser.PROMISE)
            self.state = 745
            self.match(WebIDLParser.LEFT_ANGLE)
            self.state = 746
            self.returnType()
            self.state = 747
            self.match(WebIDLParser.RIGHT_ANGLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECORD(self):
            return self.getToken(WebIDLParser.RECORD, 0)

        def LEFT_ANGLE(self):
            return self.getToken(WebIDLParser.LEFT_ANGLE, 0)

        def stringType(self):
            return self.getTypedRuleContext(WebIDLParser.StringTypeContext,0)


        def COMMA(self):
            return self.getToken(WebIDLParser.COMMA, 0)

        def typeWithExtendedAttributes(self):
            return self.getTypedRuleContext(WebIDLParser.TypeWithExtendedAttributesContext,0)


        def RIGHT_ANGLE(self):
            return self.getToken(WebIDLParser.RIGHT_ANGLE, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_recordType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordType" ):
                return visitor.visitRecordType(self)
            else:
                return visitor.visitChildren(self)




    def recordType(self):

        localctx = WebIDLParser.RecordTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_recordType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            self.match(WebIDLParser.RECORD)
            self.state = 750
            self.match(WebIDLParser.LEFT_ANGLE)
            self.state = 751
            self.stringType()
            self.state = 752
            self.match(WebIDLParser.COMMA)
            self.state = 753
            self.typeWithExtendedAttributes()
            self.state = 754
            self.match(WebIDLParser.RIGHT_ANGLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnrestrictedFloatTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def floatType(self):
            return self.getTypedRuleContext(WebIDLParser.FloatTypeContext,0)


        def UNRESTRICTED(self):
            return self.getToken(WebIDLParser.UNRESTRICTED, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_unrestrictedFloatType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnrestrictedFloatType" ):
                return visitor.visitUnrestrictedFloatType(self)
            else:
                return visitor.visitChildren(self)




    def unrestrictedFloatType(self):

        localctx = WebIDLParser.UnrestrictedFloatTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_unrestrictedFloatType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WebIDLParser.UNRESTRICTED:
                self.state = 756
                self.match(WebIDLParser.UNRESTRICTED)


            self.state = 759
            self.floatType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT(self):
            return self.getToken(WebIDLParser.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(WebIDLParser.DOUBLE, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_floatType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatType" ):
                return visitor.visitFloatType(self)
            else:
                return visitor.visitChildren(self)




    def floatType(self):

        localctx = WebIDLParser.FloatTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_floatType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 761
            _la = self._input.LA(1)
            if not(_la==WebIDLParser.DOUBLE or _la==WebIDLParser.FLOAT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsignedIntegerTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerType(self):
            return self.getTypedRuleContext(WebIDLParser.IntegerTypeContext,0)


        def UNSIGNED(self):
            return self.getToken(WebIDLParser.UNSIGNED, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_unsignedIntegerType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsignedIntegerType" ):
                return visitor.visitUnsignedIntegerType(self)
            else:
                return visitor.visitChildren(self)




    def unsignedIntegerType(self):

        localctx = WebIDLParser.UnsignedIntegerTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_unsignedIntegerType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WebIDLParser.UNSIGNED:
                self.state = 763
                self.match(WebIDLParser.UNSIGNED)


            self.state = 766
            self.integerType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHORT(self):
            return self.getToken(WebIDLParser.SHORT, 0)

        def LONG(self, i:int=None):
            if i is None:
                return self.getTokens(WebIDLParser.LONG)
            else:
                return self.getToken(WebIDLParser.LONG, i)

        def getRuleIndex(self):
            return WebIDLParser.RULE_integerType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerType" ):
                return visitor.visitIntegerType(self)
            else:
                return visitor.visitChildren(self)




    def integerType(self):

        localctx = WebIDLParser.IntegerTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_integerType)
        self._la = 0 # Token type
        try:
            self.state = 773
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WebIDLParser.SHORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 768
                self.match(WebIDLParser.SHORT)
                pass
            elif token in [WebIDLParser.LONG]:
                self.enterOuterAlt(localctx, 2)
                self.state = 769
                self.match(WebIDLParser.LONG)
                self.state = 771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WebIDLParser.LONG:
                    self.state = 770
                    self.match(WebIDLParser.LONG)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BYTE_STRING(self):
            return self.getToken(WebIDLParser.BYTE_STRING, 0)

        def DOM_STRING(self):
            return self.getToken(WebIDLParser.DOM_STRING, 0)

        def USV_STRING(self):
            return self.getToken(WebIDLParser.USV_STRING, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_stringType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringType" ):
                return visitor.visitStringType(self)
            else:
                return visitor.visitChildren(self)




    def stringType(self):

        localctx = WebIDLParser.StringTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_stringType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            _la = self._input.LA(1)
            if not(((((_la - 24)) & ~0x3f) == 0 and ((1 << (_la - 24)) & ((1 << (WebIDLParser.BYTE_STRING - 24)) | (1 << (WebIDLParser.DOM_STRING - 24)) | (1 << (WebIDLParser.USV_STRING - 24)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BufferRelatedTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY_BUFFER(self):
            return self.getToken(WebIDLParser.ARRAY_BUFFER, 0)

        def DATA_VIEW(self):
            return self.getToken(WebIDLParser.DATA_VIEW, 0)

        def INT_8_ARRAY(self):
            return self.getToken(WebIDLParser.INT_8_ARRAY, 0)

        def INT_16_ARRAY(self):
            return self.getToken(WebIDLParser.INT_16_ARRAY, 0)

        def INT_32_ARRAY(self):
            return self.getToken(WebIDLParser.INT_32_ARRAY, 0)

        def UINT_8_ARRAY(self):
            return self.getToken(WebIDLParser.UINT_8_ARRAY, 0)

        def UINT_16_ARRAY(self):
            return self.getToken(WebIDLParser.UINT_16_ARRAY, 0)

        def UINT_32_ARRAY(self):
            return self.getToken(WebIDLParser.UINT_32_ARRAY, 0)

        def UINT_8_CLAMPED_ARRAY(self):
            return self.getToken(WebIDLParser.UINT_8_CLAMPED_ARRAY, 0)

        def FLOAT_32_ARRAY(self):
            return self.getToken(WebIDLParser.FLOAT_32_ARRAY, 0)

        def FLOAT_64_ARRAY(self):
            return self.getToken(WebIDLParser.FLOAT_64_ARRAY, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_bufferRelatedType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBufferRelatedType" ):
                return visitor.visitBufferRelatedType(self)
            else:
                return visitor.visitChildren(self)




    def bufferRelatedType(self):

        localctx = WebIDLParser.BufferRelatedTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_bufferRelatedType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            _la = self._input.LA(1)
            if not(((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (WebIDLParser.ARRAY_BUFFER - 72)) | (1 << (WebIDLParser.DATA_VIEW - 72)) | (1 << (WebIDLParser.INT_8_ARRAY - 72)) | (1 << (WebIDLParser.INT_16_ARRAY - 72)) | (1 << (WebIDLParser.INT_32_ARRAY - 72)) | (1 << (WebIDLParser.UINT_8_ARRAY - 72)) | (1 << (WebIDLParser.UINT_16_ARRAY - 72)) | (1 << (WebIDLParser.UINT_32_ARRAY - 72)) | (1 << (WebIDLParser.UINT_8_CLAMPED_ARRAY - 72)) | (1 << (WebIDLParser.FLOAT_32_ARRAY - 72)) | (1 << (WebIDLParser.FLOAT_64_ARRAY - 72)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(WebIDLParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(WebIDLParser.FALSE, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_booleanLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteral(self):

        localctx = WebIDLParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            _la = self._input.LA(1)
            if not(_la==WebIDLParser.FALSE or _la==WebIDLParser.TRUE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecimalLiteral(self):
            return self.getToken(WebIDLParser.DecimalLiteral, 0)

        def MINUS_INFINITY(self):
            return self.getToken(WebIDLParser.MINUS_INFINITY, 0)

        def INFINITY(self):
            return self.getToken(WebIDLParser.INFINITY, 0)

        def NAN(self):
            return self.getToken(WebIDLParser.NAN, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_floatLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatLiteral" ):
                return visitor.visitFloatLiteral(self)
            else:
                return visitor.visitChildren(self)




    def floatLiteral(self):

        localctx = WebIDLParser.FloatLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_floatLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            _la = self._input.LA(1)
            if not(((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (WebIDLParser.INFINITY - 37)) | (1 << (WebIDLParser.MINUS_INFINITY - 37)) | (1 << (WebIDLParser.NAN - 37)) | (1 << (WebIDLParser.DecimalLiteral - 37)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Null_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUESTION_SYMBOL(self):
            return self.getToken(WebIDLParser.QUESTION_SYMBOL, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_null_

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNull_" ):
                return visitor.visitNull_(self)
            else:
                return visitor.visitChildren(self)




    def null_(self):

        localctx = WebIDLParser.Null_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_null_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 783
            self.match(WebIDLParser.QUESTION_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OtherContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntegerLiteral(self):
            return self.getToken(WebIDLParser.IntegerLiteral, 0)

        def DecimalLiteral(self):
            return self.getToken(WebIDLParser.DecimalLiteral, 0)

        def IDENTIFIER(self):
            return self.getToken(WebIDLParser.IDENTIFIER, 0)

        def StringLiteral(self):
            return self.getToken(WebIDLParser.StringLiteral, 0)

        def OTHER(self):
            return self.getToken(WebIDLParser.OTHER, 0)

        def MINUS(self):
            return self.getToken(WebIDLParser.MINUS, 0)

        def MINUS_INFINITY(self):
            return self.getToken(WebIDLParser.MINUS_INFINITY, 0)

        def DOT(self):
            return self.getToken(WebIDLParser.DOT, 0)

        def ELLIPSIS(self):
            return self.getToken(WebIDLParser.ELLIPSIS, 0)

        def COLON(self):
            return self.getToken(WebIDLParser.COLON, 0)

        def SEMI(self):
            return self.getToken(WebIDLParser.SEMI, 0)

        def LEFT_ANGLE(self):
            return self.getToken(WebIDLParser.LEFT_ANGLE, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(WebIDLParser.EQUAL_SYMBOL, 0)

        def RIGHT_ANGLE(self):
            return self.getToken(WebIDLParser.RIGHT_ANGLE, 0)

        def QUESTION_SYMBOL(self):
            return self.getToken(WebIDLParser.QUESTION_SYMBOL, 0)

        def BYTE_STRING(self):
            return self.getToken(WebIDLParser.BYTE_STRING, 0)

        def DOM_STRING(self):
            return self.getToken(WebIDLParser.DOM_STRING, 0)

        def FROZEN_ARRAY(self):
            return self.getToken(WebIDLParser.FROZEN_ARRAY, 0)

        def INFINITY(self):
            return self.getToken(WebIDLParser.INFINITY, 0)

        def NAN(self):
            return self.getToken(WebIDLParser.NAN, 0)

        def OBSERVABLE_ARRAY(self):
            return self.getToken(WebIDLParser.OBSERVABLE_ARRAY, 0)

        def PROMISE(self):
            return self.getToken(WebIDLParser.PROMISE, 0)

        def USV_STRING(self):
            return self.getToken(WebIDLParser.USV_STRING, 0)

        def ANY(self):
            return self.getToken(WebIDLParser.ANY, 0)

        def BOOLEAN(self):
            return self.getToken(WebIDLParser.BOOLEAN, 0)

        def BYTE(self):
            return self.getToken(WebIDLParser.BYTE, 0)

        def DOUBLE(self):
            return self.getToken(WebIDLParser.DOUBLE, 0)

        def FALSE(self):
            return self.getToken(WebIDLParser.FALSE, 0)

        def FLOAT(self):
            return self.getToken(WebIDLParser.FLOAT, 0)

        def LONG(self):
            return self.getToken(WebIDLParser.LONG, 0)

        def NULL(self):
            return self.getToken(WebIDLParser.NULL, 0)

        def OBJECT(self):
            return self.getToken(WebIDLParser.OBJECT, 0)

        def OCTET(self):
            return self.getToken(WebIDLParser.OCTET, 0)

        def OR(self):
            return self.getToken(WebIDLParser.OR, 0)

        def OPTIONAL(self):
            return self.getToken(WebIDLParser.OPTIONAL, 0)

        def RECORD(self):
            return self.getToken(WebIDLParser.RECORD, 0)

        def SEQUENCE(self):
            return self.getToken(WebIDLParser.SEQUENCE, 0)

        def SHORT(self):
            return self.getToken(WebIDLParser.SHORT, 0)

        def SYMBOL(self):
            return self.getToken(WebIDLParser.SYMBOL, 0)

        def TRUE(self):
            return self.getToken(WebIDLParser.TRUE, 0)

        def UNSIGNED(self):
            return self.getToken(WebIDLParser.UNSIGNED, 0)

        def VOID(self):
            return self.getToken(WebIDLParser.VOID, 0)

        def argumentNameKeyword(self):
            return self.getTypedRuleContext(WebIDLParser.ArgumentNameKeywordContext,0)


        def bufferRelatedType(self):
            return self.getTypedRuleContext(WebIDLParser.BufferRelatedTypeContext,0)


        def getRuleIndex(self):
            return WebIDLParser.RULE_other

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOther" ):
                return visitor.visitOther(self)
            else:
                return visitor.visitChildren(self)




    def other(self):

        localctx = WebIDLParser.OtherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_other)
        try:
            self.state = 829
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WebIDLParser.IntegerLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 785
                self.match(WebIDLParser.IntegerLiteral)
                pass
            elif token in [WebIDLParser.DecimalLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 786
                self.match(WebIDLParser.DecimalLiteral)
                pass
            elif token in [WebIDLParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 787
                self.match(WebIDLParser.IDENTIFIER)
                pass
            elif token in [WebIDLParser.StringLiteral]:
                self.enterOuterAlt(localctx, 4)
                self.state = 788
                self.match(WebIDLParser.StringLiteral)
                pass
            elif token in [WebIDLParser.OTHER]:
                self.enterOuterAlt(localctx, 5)
                self.state = 789
                self.match(WebIDLParser.OTHER)
                pass
            elif token in [WebIDLParser.MINUS]:
                self.enterOuterAlt(localctx, 6)
                self.state = 790
                self.match(WebIDLParser.MINUS)
                pass
            elif token in [WebIDLParser.MINUS_INFINITY]:
                self.enterOuterAlt(localctx, 7)
                self.state = 791
                self.match(WebIDLParser.MINUS_INFINITY)
                pass
            elif token in [WebIDLParser.DOT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 792
                self.match(WebIDLParser.DOT)
                pass
            elif token in [WebIDLParser.ELLIPSIS]:
                self.enterOuterAlt(localctx, 9)
                self.state = 793
                self.match(WebIDLParser.ELLIPSIS)
                pass
            elif token in [WebIDLParser.COLON]:
                self.enterOuterAlt(localctx, 10)
                self.state = 794
                self.match(WebIDLParser.COLON)
                pass
            elif token in [WebIDLParser.SEMI]:
                self.enterOuterAlt(localctx, 11)
                self.state = 795
                self.match(WebIDLParser.SEMI)
                pass
            elif token in [WebIDLParser.LEFT_ANGLE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 796
                self.match(WebIDLParser.LEFT_ANGLE)
                pass
            elif token in [WebIDLParser.EQUAL_SYMBOL]:
                self.enterOuterAlt(localctx, 13)
                self.state = 797
                self.match(WebIDLParser.EQUAL_SYMBOL)
                pass
            elif token in [WebIDLParser.RIGHT_ANGLE]:
                self.enterOuterAlt(localctx, 14)
                self.state = 798
                self.match(WebIDLParser.RIGHT_ANGLE)
                pass
            elif token in [WebIDLParser.QUESTION_SYMBOL]:
                self.enterOuterAlt(localctx, 15)
                self.state = 799
                self.match(WebIDLParser.QUESTION_SYMBOL)
                pass
            elif token in [WebIDLParser.BYTE_STRING]:
                self.enterOuterAlt(localctx, 16)
                self.state = 800
                self.match(WebIDLParser.BYTE_STRING)
                pass
            elif token in [WebIDLParser.DOM_STRING]:
                self.enterOuterAlt(localctx, 17)
                self.state = 801
                self.match(WebIDLParser.DOM_STRING)
                pass
            elif token in [WebIDLParser.FROZEN_ARRAY]:
                self.enterOuterAlt(localctx, 18)
                self.state = 802
                self.match(WebIDLParser.FROZEN_ARRAY)
                pass
            elif token in [WebIDLParser.INFINITY]:
                self.enterOuterAlt(localctx, 19)
                self.state = 803
                self.match(WebIDLParser.INFINITY)
                pass
            elif token in [WebIDLParser.NAN]:
                self.enterOuterAlt(localctx, 20)
                self.state = 804
                self.match(WebIDLParser.NAN)
                pass
            elif token in [WebIDLParser.OBSERVABLE_ARRAY]:
                self.enterOuterAlt(localctx, 21)
                self.state = 805
                self.match(WebIDLParser.OBSERVABLE_ARRAY)
                pass
            elif token in [WebIDLParser.PROMISE]:
                self.enterOuterAlt(localctx, 22)
                self.state = 806
                self.match(WebIDLParser.PROMISE)
                pass
            elif token in [WebIDLParser.USV_STRING]:
                self.enterOuterAlt(localctx, 23)
                self.state = 807
                self.match(WebIDLParser.USV_STRING)
                pass
            elif token in [WebIDLParser.ANY]:
                self.enterOuterAlt(localctx, 24)
                self.state = 808
                self.match(WebIDLParser.ANY)
                pass
            elif token in [WebIDLParser.BOOLEAN]:
                self.enterOuterAlt(localctx, 25)
                self.state = 809
                self.match(WebIDLParser.BOOLEAN)
                pass
            elif token in [WebIDLParser.BYTE]:
                self.enterOuterAlt(localctx, 26)
                self.state = 810
                self.match(WebIDLParser.BYTE)
                pass
            elif token in [WebIDLParser.DOUBLE]:
                self.enterOuterAlt(localctx, 27)
                self.state = 811
                self.match(WebIDLParser.DOUBLE)
                pass
            elif token in [WebIDLParser.FALSE]:
                self.enterOuterAlt(localctx, 28)
                self.state = 812
                self.match(WebIDLParser.FALSE)
                pass
            elif token in [WebIDLParser.FLOAT]:
                self.enterOuterAlt(localctx, 29)
                self.state = 813
                self.match(WebIDLParser.FLOAT)
                pass
            elif token in [WebIDLParser.LONG]:
                self.enterOuterAlt(localctx, 30)
                self.state = 814
                self.match(WebIDLParser.LONG)
                pass
            elif token in [WebIDLParser.NULL]:
                self.enterOuterAlt(localctx, 31)
                self.state = 815
                self.match(WebIDLParser.NULL)
                pass
            elif token in [WebIDLParser.OBJECT]:
                self.enterOuterAlt(localctx, 32)
                self.state = 816
                self.match(WebIDLParser.OBJECT)
                pass
            elif token in [WebIDLParser.OCTET]:
                self.enterOuterAlt(localctx, 33)
                self.state = 817
                self.match(WebIDLParser.OCTET)
                pass
            elif token in [WebIDLParser.OR]:
                self.enterOuterAlt(localctx, 34)
                self.state = 818
                self.match(WebIDLParser.OR)
                pass
            elif token in [WebIDLParser.OPTIONAL]:
                self.enterOuterAlt(localctx, 35)
                self.state = 819
                self.match(WebIDLParser.OPTIONAL)
                pass
            elif token in [WebIDLParser.RECORD]:
                self.enterOuterAlt(localctx, 36)
                self.state = 820
                self.match(WebIDLParser.RECORD)
                pass
            elif token in [WebIDLParser.SEQUENCE]:
                self.enterOuterAlt(localctx, 37)
                self.state = 821
                self.match(WebIDLParser.SEQUENCE)
                pass
            elif token in [WebIDLParser.SHORT]:
                self.enterOuterAlt(localctx, 38)
                self.state = 822
                self.match(WebIDLParser.SHORT)
                pass
            elif token in [WebIDLParser.SYMBOL]:
                self.enterOuterAlt(localctx, 39)
                self.state = 823
                self.match(WebIDLParser.SYMBOL)
                pass
            elif token in [WebIDLParser.TRUE]:
                self.enterOuterAlt(localctx, 40)
                self.state = 824
                self.match(WebIDLParser.TRUE)
                pass
            elif token in [WebIDLParser.UNSIGNED]:
                self.enterOuterAlt(localctx, 41)
                self.state = 825
                self.match(WebIDLParser.UNSIGNED)
                pass
            elif token in [WebIDLParser.VOID]:
                self.enterOuterAlt(localctx, 42)
                self.state = 826
                self.match(WebIDLParser.VOID)
                pass
            elif token in [WebIDLParser.ASYNC, WebIDLParser.ATTRIBUTE, WebIDLParser.CALLBACK, WebIDLParser.CONST, WebIDLParser.CONSTRUCTOR, WebIDLParser.DELETER, WebIDLParser.DICTIONARY, WebIDLParser.ENUM, WebIDLParser.GETTER, WebIDLParser.INCLUDES, WebIDLParser.INHERIT, WebIDLParser.INTERFACE, WebIDLParser.ITERABLE, WebIDLParser.MAPLIKE, WebIDLParser.MIXIN, WebIDLParser.NAMESPACE, WebIDLParser.PARTIAL, WebIDLParser.READONLY, WebIDLParser.REQUIRED, WebIDLParser.SETLIKE, WebIDLParser.SETTER, WebIDLParser.STATIC, WebIDLParser.STRINGIFIER, WebIDLParser.TYPEDEF, WebIDLParser.UNRESTRICTED]:
                self.enterOuterAlt(localctx, 43)
                self.state = 827
                self.argumentNameKeyword()
                pass
            elif token in [WebIDLParser.ARRAY_BUFFER, WebIDLParser.DATA_VIEW, WebIDLParser.INT_8_ARRAY, WebIDLParser.INT_16_ARRAY, WebIDLParser.INT_32_ARRAY, WebIDLParser.UINT_8_ARRAY, WebIDLParser.UINT_16_ARRAY, WebIDLParser.UINT_32_ARRAY, WebIDLParser.UINT_8_CLAMPED_ARRAY, WebIDLParser.FLOAT_32_ARRAY, WebIDLParser.FLOAT_64_ARRAY]:
                self.enterOuterAlt(localctx, 44)
                self.state = 828
                self.bufferRelatedType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentNameKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(WebIDLParser.ASYNC, 0)

        def ATTRIBUTE(self):
            return self.getToken(WebIDLParser.ATTRIBUTE, 0)

        def CALLBACK(self):
            return self.getToken(WebIDLParser.CALLBACK, 0)

        def CONST(self):
            return self.getToken(WebIDLParser.CONST, 0)

        def CONSTRUCTOR(self):
            return self.getToken(WebIDLParser.CONSTRUCTOR, 0)

        def DELETER(self):
            return self.getToken(WebIDLParser.DELETER, 0)

        def DICTIONARY(self):
            return self.getToken(WebIDLParser.DICTIONARY, 0)

        def ENUM(self):
            return self.getToken(WebIDLParser.ENUM, 0)

        def GETTER(self):
            return self.getToken(WebIDLParser.GETTER, 0)

        def INCLUDES(self):
            return self.getToken(WebIDLParser.INCLUDES, 0)

        def INHERIT(self):
            return self.getToken(WebIDLParser.INHERIT, 0)

        def INTERFACE(self):
            return self.getToken(WebIDLParser.INTERFACE, 0)

        def ITERABLE(self):
            return self.getToken(WebIDLParser.ITERABLE, 0)

        def MAPLIKE(self):
            return self.getToken(WebIDLParser.MAPLIKE, 0)

        def MIXIN(self):
            return self.getToken(WebIDLParser.MIXIN, 0)

        def NAMESPACE(self):
            return self.getToken(WebIDLParser.NAMESPACE, 0)

        def PARTIAL(self):
            return self.getToken(WebIDLParser.PARTIAL, 0)

        def READONLY(self):
            return self.getToken(WebIDLParser.READONLY, 0)

        def REQUIRED(self):
            return self.getToken(WebIDLParser.REQUIRED, 0)

        def SETLIKE(self):
            return self.getToken(WebIDLParser.SETLIKE, 0)

        def SETTER(self):
            return self.getToken(WebIDLParser.SETTER, 0)

        def STATIC(self):
            return self.getToken(WebIDLParser.STATIC, 0)

        def STRINGIFIER(self):
            return self.getToken(WebIDLParser.STRINGIFIER, 0)

        def TYPEDEF(self):
            return self.getToken(WebIDLParser.TYPEDEF, 0)

        def UNRESTRICTED(self):
            return self.getToken(WebIDLParser.UNRESTRICTED, 0)

        def getRuleIndex(self):
            return WebIDLParser.RULE_argumentNameKeyword

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentNameKeyword" ):
                return visitor.visitArgumentNameKeyword(self)
            else:
                return visitor.visitChildren(self)




    def argumentNameKeyword(self):

        localctx = WebIDLParser.ArgumentNameKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_argumentNameKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            _la = self._input.LA(1)
            if not(((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (WebIDLParser.ASYNC - 20)) | (1 << (WebIDLParser.ATTRIBUTE - 20)) | (1 << (WebIDLParser.CALLBACK - 20)) | (1 << (WebIDLParser.CONST - 20)) | (1 << (WebIDLParser.CONSTRUCTOR - 20)) | (1 << (WebIDLParser.DELETER - 20)) | (1 << (WebIDLParser.DICTIONARY - 20)) | (1 << (WebIDLParser.ENUM - 20)) | (1 << (WebIDLParser.GETTER - 20)) | (1 << (WebIDLParser.INCLUDES - 20)) | (1 << (WebIDLParser.INHERIT - 20)) | (1 << (WebIDLParser.INTERFACE - 20)) | (1 << (WebIDLParser.ITERABLE - 20)) | (1 << (WebIDLParser.MAPLIKE - 20)) | (1 << (WebIDLParser.MIXIN - 20)) | (1 << (WebIDLParser.NAMESPACE - 20)) | (1 << (WebIDLParser.PARTIAL - 20)) | (1 << (WebIDLParser.READONLY - 20)) | (1 << (WebIDLParser.REQUIRED - 20)) | (1 << (WebIDLParser.SETLIKE - 20)) | (1 << (WebIDLParser.SETTER - 20)) | (1 << (WebIDLParser.STATIC - 20)) | (1 << (WebIDLParser.STRINGIFIER - 20)) | (1 << (WebIDLParser.TYPEDEF - 20)) | (1 << (WebIDLParser.UNRESTRICTED - 20)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





