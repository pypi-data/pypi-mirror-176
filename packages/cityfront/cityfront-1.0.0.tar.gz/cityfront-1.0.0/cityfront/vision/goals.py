"""DO NOT EDIT THIS FILE!

This file is auto generated by github rest api discription.
See https://github.com/github/rest-api-description for more information.
"""


from typing import TYPE_CHECKING, Union, overload

from cityfront.utils import UNSET, Unset, exclude_unset
from pydantic import BaseModel, parse_obj_as

from .models import (CreateGoal, GoalById, HTTPValidationError,
                     StdResponseGoal, UpsertGoal)
from .types import (BaseGoalType, CoordinatesType, CreateGoalType,
                    GoalByIdType, UpsertGoalType, VisionApiSchemasSizeType)

if TYPE_CHECKING:
    from cityfront import AppWrite
    from cityfront.response import Response

class GoalsClient:
    def __init__(self, appwrite: "AppWrite"):
        self._appwrite = appwrite

    @overload
    def create_goal_goals_create_post(
        self,
        


        *,
        data: CreateGoalType

    ) -> "Response[StdResponseGoal]":
        ...

    @overload
    def create_goal_goals_create_post(
        self,
        


        *,
        data: Unset = UNSET,
        vision_id: str,
        goal: BaseGoalType,


    ) -> "Response[StdResponseGoal]":
        ...

    def create_goal_goals_create_post(
        self,
        

        *,
        data: Union[Unset, CreateGoalType] = UNSET,
        **kwargs
    ) -> "Response[StdResponseGoal]":
        headers = {}
        url = "/goals/create"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = parse_obj_as(
            CreateGoal,
            json
        )
        json = json.dict(by_alias=True) if isinstance(json, BaseModel) else json


        return self._appwrite.request(
            "POST",
            url,
            json=exclude_unset(json),
            response_model=StdResponseGoal,
            error_models={
                "422": HTTPValidationError,

            },

        )

    @overload
    async def async_create_goal_goals_create_post(
        self,
        


        *,
        data: CreateGoalType

    ) -> "Response[StdResponseGoal]":
        ...

    @overload
    async def async_create_goal_goals_create_post(
        self,
        


        *,
        data: Unset = UNSET,
        vision_id: str,
        goal: BaseGoalType,


    ) -> "Response[StdResponseGoal]":
        ...

    async def async_create_goal_goals_create_post(
        self,
        

        *,
        data: Union[Unset, CreateGoalType] = UNSET,
        **kwargs
    ) -> "Response[StdResponseGoal]":
        url = "/goals/create"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = parse_obj_as(
            CreateGoal,
            json
        )
        json = json.dict(by_alias=True) if isinstance(json, BaseModel) else json


        headers = {}
        return await self._appwrite.arequest(
            "POST",
            url,
            json=exclude_unset(json),
            response_model=StdResponseGoal,
            error_models={
                "422": HTTPValidationError,

            },

        )

    @overload
    def get_goal_goals_get_post(
        self,
        


        *,
        data: GoalByIdType

    ) -> "Response[StdResponseGoal]":
        ...

    @overload
    def get_goal_goals_get_post(
        self,
        


        *,
        data: Unset = UNSET,
        goal_id: str,


    ) -> "Response[StdResponseGoal]":
        ...

    def get_goal_goals_get_post(
        self,
        

        *,
        data: Union[Unset, GoalByIdType] = UNSET,
        **kwargs
    ) -> "Response[StdResponseGoal]":
        headers = {}
        url = "/goals/get"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = parse_obj_as(
            GoalById,
            json
        )
        json = json.dict(by_alias=True) if isinstance(json, BaseModel) else json


        return self._appwrite.request(
            "POST",
            url,
            json=exclude_unset(json),
            response_model=StdResponseGoal,
            error_models={
                "422": HTTPValidationError,

            },

        )

    @overload
    async def async_get_goal_goals_get_post(
        self,
        


        *,
        data: GoalByIdType

    ) -> "Response[StdResponseGoal]":
        ...

    @overload
    async def async_get_goal_goals_get_post(
        self,
        


        *,
        data: Unset = UNSET,
        goal_id: str,


    ) -> "Response[StdResponseGoal]":
        ...

    async def async_get_goal_goals_get_post(
        self,
        

        *,
        data: Union[Unset, GoalByIdType] = UNSET,
        **kwargs
    ) -> "Response[StdResponseGoal]":
        url = "/goals/get"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = parse_obj_as(
            GoalById,
            json
        )
        json = json.dict(by_alias=True) if isinstance(json, BaseModel) else json


        headers = {}
        return await self._appwrite.arequest(
            "POST",
            url,
            json=exclude_unset(json),
            response_model=StdResponseGoal,
            error_models={
                "422": HTTPValidationError,

            },

        )

    @overload
    def update_goal_goals__put(
        self,
        


        *,
        data: UpsertGoalType

    ) -> "Response[StdResponseGoal]":
        ...

    @overload
    def update_goal_goals__put(
        self,
        


        *,
        data: Unset = UNSET,
        name: str,
        description: str,
        url: str,
        coordinates: Union[Unset, CoordinatesType] = UNSET,
        size: Union[Unset, VisionApiSchemasSizeType] = UNSET,
        goal_id: str,


    ) -> "Response[StdResponseGoal]":
        ...

    def update_goal_goals__put(
        self,
        

        *,
        data: Union[Unset, UpsertGoalType] = UNSET,
        **kwargs
    ) -> "Response[StdResponseGoal]":
        headers = {}
        url = "/goals/"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = parse_obj_as(
            UpsertGoal,
            json
        )
        json = json.dict(by_alias=True) if isinstance(json, BaseModel) else json


        return self._appwrite.request(
            "PUT",
            url,
            json=exclude_unset(json),
            response_model=StdResponseGoal,
            error_models={
                "422": HTTPValidationError,

            },

        )

    @overload
    async def async_update_goal_goals__put(
        self,
        


        *,
        data: UpsertGoalType

    ) -> "Response[StdResponseGoal]":
        ...

    @overload
    async def async_update_goal_goals__put(
        self,
        


        *,
        data: Unset = UNSET,
        name: str,
        description: str,
        url: str,
        coordinates: Union[Unset, CoordinatesType] = UNSET,
        size: Union[Unset, VisionApiSchemasSizeType] = UNSET,
        goal_id: str,


    ) -> "Response[StdResponseGoal]":
        ...

    async def async_update_goal_goals__put(
        self,
        

        *,
        data: Union[Unset, UpsertGoalType] = UNSET,
        **kwargs
    ) -> "Response[StdResponseGoal]":
        url = "/goals/"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = parse_obj_as(
            UpsertGoal,
            json
        )
        json = json.dict(by_alias=True) if isinstance(json, BaseModel) else json


        headers = {}
        return await self._appwrite.arequest(
            "PUT",
            url,
            json=exclude_unset(json),
            response_model=StdResponseGoal,
            error_models={
                "422": HTTPValidationError,

            },

        )

    @overload
    def delete_goal_goals__delete(
        self,
        


        *,
        data: GoalByIdType

    ) -> "Response[StdResponseGoal]":
        ...

    @overload
    def delete_goal_goals__delete(
        self,
        


        *,
        data: Unset = UNSET,
        goal_id: str,


    ) -> "Response[StdResponseGoal]":
        ...

    def delete_goal_goals__delete(
        self,
        

        *,
        data: Union[Unset, GoalByIdType] = UNSET,
        **kwargs
    ) -> "Response[StdResponseGoal]":
        headers = {}
        url = "/goals/"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = parse_obj_as(
            GoalById,
            json
        )
        json = json.dict(by_alias=True) if isinstance(json, BaseModel) else json


        return self._appwrite.request(
            "DELETE",
            url,
            json=exclude_unset(json),
            response_model=StdResponseGoal,
            error_models={
                "422": HTTPValidationError,

            },

        )

    @overload
    async def async_delete_goal_goals__delete(
        self,
        


        *,
        data: GoalByIdType

    ) -> "Response[StdResponseGoal]":
        ...

    @overload
    async def async_delete_goal_goals__delete(
        self,
        


        *,
        data: Unset = UNSET,
        goal_id: str,


    ) -> "Response[StdResponseGoal]":
        ...

    async def async_delete_goal_goals__delete(
        self,
        

        *,
        data: Union[Unset, GoalByIdType] = UNSET,
        **kwargs
    ) -> "Response[StdResponseGoal]":
        url = "/goals/"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = parse_obj_as(
            GoalById,
            json
        )
        json = json.dict(by_alias=True) if isinstance(json, BaseModel) else json


        headers = {}
        return await self._appwrite.arequest(
            "DELETE",
            url,
            json=exclude_unset(json),
            response_model=StdResponseGoal,
            error_models={
                "422": HTTPValidationError,

            },

        )

