"""DO NOT EDIT THIS FILE!

This file is auto generated by github rest api discription.
See https://github.com/github/rest-api-description for more information.
"""


from typing import TYPE_CHECKING, List, Union, overload

from cityfront.utils import UNSET, Unset, exclude_unset
from pydantic import BaseModel, parse_obj_as

from .models import (CreateVision, HTTPValidationError,
                     StdResponseListPrismaModelsVisionBoard,
                     StdResponseVisionBoard, UpdateVision, VisionDetailsById,
                     VisionsByUserRef)
from .types import (CreateVisionType, UpdateVisionType, UpsertGoalType,
                    VisionDetailsByIdType, VisionsByUserRefType)

if TYPE_CHECKING:
    from cityfront import AppWrite
    from cityfront.response import Response

class VisionBoardClient:
    def __init__(self, appwrite: "AppWrite"):
        self._appwrite = appwrite

    @overload
    def get_vision_boards_vision__post(
        self,
        


        *,
        data: VisionsByUserRefType

    ) -> "Response[StdResponseListPrismaModelsVisionBoard]":
        ...

    @overload
    def get_vision_boards_vision__post(
        self,
        


        *,
        data: Unset = UNSET,
        user_ref: str,


    ) -> "Response[StdResponseListPrismaModelsVisionBoard]":
        ...

    def get_vision_boards_vision__post(
        self,
        

        *,
        data: Union[Unset, VisionsByUserRefType] = UNSET,
        **kwargs
    ) -> "Response[StdResponseListPrismaModelsVisionBoard]":
        headers = {}
        url = "/vision/"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = parse_obj_as(
            VisionsByUserRef,
            json
        )
        json = json.dict(by_alias=True) if isinstance(json, BaseModel) else json


        return self._appwrite.request(
            "POST",
            url,
            json=exclude_unset(json),
            response_model=StdResponseListPrismaModelsVisionBoard,
            error_models={
                "422": HTTPValidationError,

            },

        )

    @overload
    async def async_get_vision_boards_vision__post(
        self,
        


        *,
        data: VisionsByUserRefType

    ) -> "Response[StdResponseListPrismaModelsVisionBoard]":
        ...

    @overload
    async def async_get_vision_boards_vision__post(
        self,
        


        *,
        data: Unset = UNSET,
        user_ref: str,


    ) -> "Response[StdResponseListPrismaModelsVisionBoard]":
        ...

    async def async_get_vision_boards_vision__post(
        self,
        

        *,
        data: Union[Unset, VisionsByUserRefType] = UNSET,
        **kwargs
    ) -> "Response[StdResponseListPrismaModelsVisionBoard]":
        url = "/vision/"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = parse_obj_as(
            VisionsByUserRef,
            json
        )
        json = json.dict(by_alias=True) if isinstance(json, BaseModel) else json


        headers = {}
        return await self._appwrite.arequest(
            "POST",
            url,
            json=exclude_unset(json),
            response_model=StdResponseListPrismaModelsVisionBoard,
            error_models={
                "422": HTTPValidationError,

            },

        )

    @overload
    def get_details_vision_details_post(
        self,
        


        *,
        data: VisionDetailsByIdType

    ) -> "Response[StdResponseVisionBoard]":
        ...

    @overload
    def get_details_vision_details_post(
        self,
        


        *,
        data: Unset = UNSET,
        vision_id: str,


    ) -> "Response[StdResponseVisionBoard]":
        ...

    def get_details_vision_details_post(
        self,
        

        *,
        data: Union[Unset, VisionDetailsByIdType] = UNSET,
        **kwargs
    ) -> "Response[StdResponseVisionBoard]":
        headers = {}
        url = "/vision/details"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = parse_obj_as(
            VisionDetailsById,
            json
        )
        json = json.dict(by_alias=True) if isinstance(json, BaseModel) else json


        return self._appwrite.request(
            "POST",
            url,
            json=exclude_unset(json),
            response_model=StdResponseVisionBoard,
            error_models={
                "422": HTTPValidationError,

            },

        )

    @overload
    async def async_get_details_vision_details_post(
        self,
        


        *,
        data: VisionDetailsByIdType

    ) -> "Response[StdResponseVisionBoard]":
        ...

    @overload
    async def async_get_details_vision_details_post(
        self,
        


        *,
        data: Unset = UNSET,
        vision_id: str,


    ) -> "Response[StdResponseVisionBoard]":
        ...

    async def async_get_details_vision_details_post(
        self,
        

        *,
        data: Union[Unset, VisionDetailsByIdType] = UNSET,
        **kwargs
    ) -> "Response[StdResponseVisionBoard]":
        url = "/vision/details"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = parse_obj_as(
            VisionDetailsById,
            json
        )
        json = json.dict(by_alias=True) if isinstance(json, BaseModel) else json


        headers = {}
        return await self._appwrite.arequest(
            "POST",
            url,
            json=exclude_unset(json),
            response_model=StdResponseVisionBoard,
            error_models={
                "422": HTTPValidationError,

            },

        )

    @overload
    def create_vision_vision_create_post(
        self,
        


        *,
        data: CreateVisionType

    ) -> "Response[StdResponseVisionBoard]":
        ...

    @overload
    def create_vision_vision_create_post(
        self,
        


        *,
        data: Unset = UNSET,
        id: Union[Unset, str] = UNSET,
        name: str,
        description: str,
        user_id: int,
        img_url: Union[Unset, str] = UNSET,
        user_ref: str,


    ) -> "Response[StdResponseVisionBoard]":
        ...

    def create_vision_vision_create_post(
        self,
        

        *,
        data: Union[Unset, CreateVisionType] = UNSET,
        **kwargs
    ) -> "Response[StdResponseVisionBoard]":
        headers = {}
        url = "/vision/create"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = parse_obj_as(
            CreateVision,
            json
        )
        json = json.dict(by_alias=True) if isinstance(json, BaseModel) else json


        return self._appwrite.request(
            "POST",
            url,
            json=exclude_unset(json),
            response_model=StdResponseVisionBoard,
            error_models={
                "422": HTTPValidationError,

            },

        )

    @overload
    async def async_create_vision_vision_create_post(
        self,
        


        *,
        data: CreateVisionType

    ) -> "Response[StdResponseVisionBoard]":
        ...

    @overload
    async def async_create_vision_vision_create_post(
        self,
        


        *,
        data: Unset = UNSET,
        id: Union[Unset, str] = UNSET,
        name: str,
        description: str,
        user_id: int,
        img_url: Union[Unset, str] = UNSET,
        user_ref: str,


    ) -> "Response[StdResponseVisionBoard]":
        ...

    async def async_create_vision_vision_create_post(
        self,
        

        *,
        data: Union[Unset, CreateVisionType] = UNSET,
        **kwargs
    ) -> "Response[StdResponseVisionBoard]":
        url = "/vision/create"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = parse_obj_as(
            CreateVision,
            json
        )
        json = json.dict(by_alias=True) if isinstance(json, BaseModel) else json


        headers = {}
        return await self._appwrite.arequest(
            "POST",
            url,
            json=exclude_unset(json),
            response_model=StdResponseVisionBoard,
            error_models={
                "422": HTTPValidationError,

            },

        )

    @overload
    def update_vision_vision_update_put(
        self,
        


        *,
        data: UpdateVisionType

    ) -> "Response[StdResponseVisionBoard]":
        ...

    @overload
    def update_vision_vision_update_put(
        self,
        


        *,
        data: Unset = UNSET,
        vision_id: str,
        name: Union[Unset, str] = UNSET,
        description: Union[Unset, str] = UNSET,
        img_url: Union[Unset, str] = UNSET,
        goals: Union[Unset, List[UpsertGoalType]] = [],


    ) -> "Response[StdResponseVisionBoard]":
        ...

    def update_vision_vision_update_put(
        self,
        

        *,
        data: Union[Unset, UpdateVisionType] = UNSET,
        **kwargs
    ) -> "Response[StdResponseVisionBoard]":
        headers = {}
        url = "/vision/update"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = parse_obj_as(
            UpdateVision,
            json
        )
        json = json.dict(by_alias=True) if isinstance(json, BaseModel) else json


        return self._appwrite.request(
            "PUT",
            url,
            json=exclude_unset(json),
            response_model=StdResponseVisionBoard,
            error_models={
                "422": HTTPValidationError,

            },

        )

    @overload
    async def async_update_vision_vision_update_put(
        self,
        


        *,
        data: UpdateVisionType

    ) -> "Response[StdResponseVisionBoard]":
        ...

    @overload
    async def async_update_vision_vision_update_put(
        self,
        


        *,
        data: Unset = UNSET,
        vision_id: str,
        name: Union[Unset, str] = UNSET,
        description: Union[Unset, str] = UNSET,
        img_url: Union[Unset, str] = UNSET,
        goals: Union[Unset, List[UpsertGoalType]] = [],


    ) -> "Response[StdResponseVisionBoard]":
        ...

    async def async_update_vision_vision_update_put(
        self,
        

        *,
        data: Union[Unset, UpdateVisionType] = UNSET,
        **kwargs
    ) -> "Response[StdResponseVisionBoard]":
        url = "/vision/update"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = parse_obj_as(
            UpdateVision,
            json
        )
        json = json.dict(by_alias=True) if isinstance(json, BaseModel) else json


        headers = {}
        return await self._appwrite.arequest(
            "PUT",
            url,
            json=exclude_unset(json),
            response_model=StdResponseVisionBoard,
            error_models={
                "422": HTTPValidationError,

            },

        )

