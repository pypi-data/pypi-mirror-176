"""DO NOT EDIT THIS FILE!

This file is auto generated by github rest api discription.
See https://github.com/github/rest-api-description for more information.
"""


from __future__ import annotations

from datetime import datetime
from typing import List, Union

from typing_extensions import NotRequired, TypedDict


class AnswerType(TypedDict):
    """Answer

    Represents a Answer record
    """


    id: int
    answered_at: datetime
    rating: int
    question_id: int
    user_id: int
    question: NotRequired[QuestionType]
    user: NotRequired[UserType]


class QuestionType(TypedDict):
    """Question

    Represents a Question record
    """


    id: int
    question: str
    category: str
    feat_label: str
    answers: NotRequired[List[AnswerType]]


class UserType(TypedDict):
    """User

    Represents a User record
    """


    id: int
    email: str
    name: NotRequired[str]
    fdb_ref: str
    answers: NotRequired[List[AnswerType]]
    vision_board: NotRequired[List[VisionBoardType]]


class VisionBoardType(TypedDict):
    """VisionBoard

    Represents a VisionBoard record
    """


    id: str
    name: str
    description: str
    user_id: int
    goals: NotRequired[List[GoalType]]
    user: NotRequired[UserType]
    img_url: NotRequired[str]


class GoalType(TypedDict):
    """Goal

    Represents a Goal record
    """


    id: str
    name: str
    description: str
    url: str
    vision_id: str
    vision: NotRequired[VisionBoardType]
    top_pos: NotRequired[float]
    bottom_pos: NotRequired[float]
    left_pos: NotRequired[float]
    right_pos: NotRequired[float]
    size_id: NotRequired[str]
    size: NotRequired[PrismaModelsSizeType]
    created_at: datetime
    updated_at: datetime


class PrismaModelsSizeType(TypedDict):
    """Size

    Represents a Size record
    """


    id: str
    height: float
    width: float
    goal: NotRequired[List[GoalType]]


class AnswerQuestionType(TypedDict):
    """AnswerQuestion
    """


    user_ref: str
    answer: int
    question_id: int


class BareImgParamsType(TypedDict):
    """BareImgParams
    """


    query: str
    page: NotRequired[int]


class BaseGoalType(TypedDict):
    """BaseGoal
    """


    name: str
    description: str
    url: str
    coordinates: NotRequired[CoordinatesType]
    size: NotRequired[VisionApiSchemasSizeType]


class CoordinatesType(TypedDict):
    """Coordinates
    """


    top: float
    left: float
    bottom: float
    right: float
    alignment: NotRequired[float]


class VisionApiSchemasSizeType(TypedDict):
    """Size
    """


    height: NotRequired[float]
    width: NotRequired[float]


class CreateGoalType(TypedDict):
    """CreateGoal
    """


    vision_id: str
    goal: BaseGoalType


class CreateVisionType(TypedDict):
    """CreateVision
    """


    id: NotRequired[str]
    name: str
    description: str
    user_id: int
    img_url: NotRequired[str]
    user_ref: str


class GetQuestionType(TypedDict):
    """GetQuestion
    """


    user_ref: str


class GoalByIdType(TypedDict):
    """GoalById
    """


    goal_id: str


class HTTPValidationErrorType(TypedDict):
    """HTTPValidationError
    """


    detail: NotRequired[List[ValidationErrorType]]


class ValidationErrorType(TypedDict):
    """ValidationError
    """


    loc: List[Union[str, int]]
    msg: str
    type: str


class ImagesResultType(TypedDict):
    """ImagesResult

    An image result from a search
    """


    position: NotRequired[int]
    original: NotRequired[str]
    source: NotRequired[str]
    title: NotRequired[str]
    link: NotRequired[str]
    thumbnail: NotRequired[str]


class QuestionStatsType(TypedDict):
    """QuestionStats
    """


    remaining: int
    total: int
    percentage: NotRequired[float]


class SearchInformationType(TypedDict):
    """SearchInformation
    """


    image_results_state: NotRequired[str]


class SearchMetadataType(TypedDict):
    """SearchMetadata
    """


    id: NotRequired[str]
    status: NotRequired[str]
    json_endpoint: NotRequired[str]
    created_at: NotRequired[str]
    processed_at: NotRequired[str]
    google_url: NotRequired[str]
    raw_html_file: NotRequired[str]
    total_time_taken: NotRequired[float]


class SearchParametersType(TypedDict):
    """SearchParameters
    """


    engine: NotRequired[str]
    q: NotRequired[str]
    google_domain: NotRequired[str]
    ijn: NotRequired[str]
    device: NotRequired[str]
    tbm: NotRequired[str]


class SerpImageResultType(TypedDict):
    """SerpImageResult

    The API result call results for an image search.
    """


    search_metadata: NotRequired[SearchMetadataType]
    search_parameters: NotRequired[SearchParametersType]
    search_information: NotRequired[SearchInformationType]
    images_results: NotRequired[List[ImagesResultType]]


class StdResponseGoalType(TypedDict):
    """StdResponse[Goal]
    """


    status: int
    message: str
    data: NotRequired[GoalType]


class StdResponseListPrismaModelsVisionBoardType(TypedDict):
    """StdResponse[List[prisma.models.VisionBoard]]
    """


    status: int
    message: str
    data: NotRequired[List[VisionBoardType]]


class StdResponseVisionBoardType(TypedDict):
    """StdResponse[VisionBoard]
    """


    status: int
    message: str
    data: NotRequired[VisionBoardType]


class UpdateVisionType(TypedDict):
    """UpdateVision
    """


    vision_id: str
    name: NotRequired[str]
    description: NotRequired[str]
    img_url: NotRequired[str]
    goals: NotRequired[List[UpsertGoalType]]


class UpsertGoalType(TypedDict):
    """UpsertGoal
    """


    name: str
    description: str
    url: str
    coordinates: NotRequired[CoordinatesType]
    size: NotRequired[VisionApiSchemasSizeType]
    goal_id: str


class UserDetachedType(TypedDict):
    """UserDetached
    """


    id: int
    email: str
    name: NotRequired[str]
    fdb_ref: str


class VisionDetailsByIdType(TypedDict):
    """VisionDetailsById
    """


    vision_id: str


class VisionsByUserRefType(TypedDict):
    """VisionsByUserRef
    """


    user_ref: str


__all__ = [
  "AnswerType",
  "QuestionType",
  "UserType",
  "VisionBoardType",
  "GoalType",
  "PrismaModelsSizeType",
  "AnswerQuestionType",
  "BareImgParamsType",
  "BaseGoalType",
  "CoordinatesType",
  "VisionApiSchemasSizeType",
  "CreateGoalType",
  "CreateVisionType",
  "GetQuestionType",
  "GoalByIdType",
  "HTTPValidationErrorType",
  "ValidationErrorType",
  "ImagesResultType",
  "QuestionStatsType",
  "SearchInformationType",
  "SearchMetadataType",
  "SearchParametersType",
  "SerpImageResultType",
  "StdResponseGoalType",
  "StdResponseListPrismaModelsVisionBoardType",
  "StdResponseVisionBoardType",
  "UpdateVisionType",
  "UpsertGoalType",
  "UserDetachedType",
  "VisionDetailsByIdType",
  "VisionsByUserRefType",
]
