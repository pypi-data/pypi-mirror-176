"""DO NOT EDIT THIS FILE!

This file is auto generated by github rest api discription.
See https://github.com/github/rest-api-description for more information.
"""


from __future__ import annotations

from typing import Any, List

from typing_extensions import NotRequired, TypedDict


class DocumentListType(TypedDict):
    """documentList

    Documents List
    """

    total: int
    documents: List[DocumentType]


class DocumentType(TypedDict):
    """document

    Document
    """

    id: str
    collection: str
    created_at: int
    updated_at: int
    read: List[str]
    write: List[str]


class CollectionListType(TypedDict):
    """collectionList

    Collections List
    """

    total: int
    collections: List[CollectionType]


class CollectionType(TypedDict):
    """collection

    Collection
    """

    id: str
    created_at: int
    updated_at: int
    read: List[str]
    write: List[str]
    database_id: str
    name: str
    enabled: bool
    permission: str
    attributes: List[Any]
    indexes: List[IndexType]


class IndexType(TypedDict):
    """index

    Index
    """

    key: str
    type: str
    status: str
    attributes: List[str]
    orders: List[str]


class DatabaseListType(TypedDict):
    """databaseList

    Databases List
    """

    total: int
    databases: List[DatabaseType]


class DatabaseType(TypedDict):
    """database

    Database
    """

    id: str
    name: str
    created_at: int
    updated_at: int


class IndexListType(TypedDict):
    """indexList

    Indexes List
    """

    total: int
    indexes: List[IndexType]


class UserListType(TypedDict):
    """userList

    Users List
    """

    total: int
    users: List[UserType]


class UserType(TypedDict):
    """user

    User
    """

    id: str
    created_at: int
    updated_at: int
    name: str
    registration: int
    status: bool
    password_update: int
    email: str
    phone: str
    email_verification: bool
    phone_verification: bool
    prefs: List[UserPropPrefsItemsType]


class UserPropPrefsItemsType(TypedDict):
    """UserPropPrefsItems"""


class SessionListType(TypedDict):
    """sessionList

    Sessions List
    """

    total: int
    sessions: List[SessionType]


class SessionType(TypedDict):
    """session

    Session
    """

    id: str
    created_at: int
    user_id: str
    expire: int
    provider: str
    provider_uid: str
    provider_access_token: str
    provider_access_token_expiry: int
    provider_refresh_token: str
    ip: str
    os_code: str
    os_name: str
    os_version: str
    client_type: str
    client_code: str
    client_name: str
    client_version: str
    client_engine: str
    client_engine_version: str
    device_name: str
    device_brand: str
    device_model: str
    country_code: str
    country_name: str
    current: bool


class LogListType(TypedDict):
    """logList

    Logs List
    """

    total: int
    logs: List[LogType]


class LogType(TypedDict):
    """log

    Log
    """

    event: str
    user_id: str
    user_email: str
    user_name: str
    mode: str
    ip: str
    time: int
    os_code: str
    os_name: str
    os_version: str
    client_type: str
    client_code: str
    client_name: str
    client_version: str
    client_engine: str
    client_engine_version: str
    device_name: str
    device_brand: str
    device_model: str
    country_code: str
    country_name: str


class FileListType(TypedDict):
    """fileList

    Files List
    """

    total: int
    files: List[FileType]


class FileType(TypedDict):
    """file

    File
    """

    id: str
    bucket_id: str
    created_at: int
    updated_at: int
    read: List[str]
    write: List[str]
    name: str
    signature: str
    mime_type: str
    size_original: int
    chunks_total: int
    chunks_uploaded: int


class BucketListType(TypedDict):
    """bucketList

    Buckets List
    """

    total: int
    buckets: List[BucketType]


class BucketType(TypedDict):
    """bucket

    Bucket
    """

    id: str
    created_at: int
    updated_at: int
    read: List[str]
    write: List[str]
    permission: str
    name: str
    enabled: bool
    maximum_file_size: int
    allowed_file_extensions: List[str]
    encryption: bool
    antivirus: bool


class TeamListType(TypedDict):
    """teamList

    Teams List
    """

    total: int
    teams: List[TeamType]


class TeamType(TypedDict):
    """team

    Team
    """

    id: str
    created_at: int
    updated_at: int
    name: str
    total: int


class MembershipListType(TypedDict):
    """membershipList

    Memberships List
    """

    total: int
    memberships: List[MembershipType]


class MembershipType(TypedDict):
    """membership

    Membership
    """

    id: str
    created_at: int
    updated_at: int
    user_id: str
    user_name: str
    user_email: str
    team_id: str
    team_name: str
    invited: int
    joined: int
    confirm: bool
    roles: List[str]


class FunctionListType(TypedDict):
    """functionList

    Functions List
    """

    total: int
    functions: List[FunctionType]


class FunctionType(TypedDict):
    """function

    Function
    """

    id: str
    created_at: int
    updated_at: int
    execute: List[str]
    name: str
    status: str
    runtime: str
    deployment: str
    vars_: FunctionPropVarsType
    events: List[str]
    schedule: str
    schedule_next: int
    schedule_previous: int
    timeout: int


class FunctionPropVarsType(TypedDict):
    """FunctionPropVars

    Function environment variables.
    """


class RuntimeListType(TypedDict):
    """runtimeList

    Runtimes List
    """

    total: int
    runtimes: List[RuntimeType]


class RuntimeType(TypedDict):
    """runtime

    Runtime
    """

    id: str
    name: str
    version: str
    base: str
    image: str
    logo: str
    supports: List[str]


class DeploymentListType(TypedDict):
    """deploymentList

    Deployments List
    """

    total: int
    deployments: List[DeploymentType]


class DeploymentType(TypedDict):
    """deployment

    Deployment
    """

    id: str
    created_at: int
    updated_at: int
    resource_id: str
    resource_type: str
    entrypoint: str
    size: int
    build_id: str
    activate: bool
    status: str
    build_stdout: str
    build_stderr: str


class ExecutionListType(TypedDict):
    """executionList

    Executions List
    """

    total: int
    executions: List[ExecutionType]


class ExecutionType(TypedDict):
    """execution

    Execution
    """

    id: str
    created_at: int
    updated_at: int
    read: List[str]
    function_id: str
    trigger: str
    status: str
    status_code: int
    response: str
    stderr: str
    time: float


class ProjectListType(TypedDict):
    """projectList

    Projects List
    """

    total: int
    projects: List[ProjectType]


class ProjectType(TypedDict):
    """project

    Project
    """

    id: str
    created_at: int
    updated_at: int
    name: str
    description: str
    team_id: str
    logo: str
    url: str
    legal_name: str
    legal_country: str
    legal_state: str
    legal_city: str
    legal_address: str
    legal_tax_id: str
    auth_limit: int
    platforms: List[PlatformType]
    webhooks: List[WebhookType]
    keys: List[KeyType]
    domains: List[DomainType]
    provider_amazon_appid: str
    provider_amazon_secret: str
    provider_apple_appid: str
    provider_apple_secret: str
    provider_auth0_appid: str
    provider_auth0_secret: str
    provider_autodesk_appid: str
    provider_autodesk_secret: str
    provider_bitbucket_appid: str
    provider_bitbucket_secret: str
    provider_bitly_appid: str
    provider_bitly_secret: str
    provider_box_appid: str
    provider_box_secret: str
    provider_dailymotion_appid: str
    provider_dailymotion_secret: str
    provider_discord_appid: str
    provider_discord_secret: str
    provider_dropbox_appid: str
    provider_dropbox_secret: str
    provider_facebook_appid: str
    provider_facebook_secret: str
    provider_github_appid: str
    provider_github_secret: str
    provider_gitlab_appid: str
    provider_gitlab_secret: str
    provider_google_appid: str
    provider_google_secret: str
    provider_linkedin_appid: str
    provider_linkedin_secret: str
    provider_microsoft_appid: str
    provider_microsoft_secret: str
    provider_notion_appid: str
    provider_notion_secret: str
    provider_okta_appid: str
    provider_okta_secret: str
    provider_paypal_appid: str
    provider_paypal_secret: str
    provider_paypal_sandbox_appid: str
    provider_paypal_sandbox_secret: str
    provider_salesforce_appid: str
    provider_salesforce_secret: str
    provider_slack_appid: str
    provider_slack_secret: str
    provider_spotify_appid: str
    provider_spotify_secret: str
    provider_stripe_appid: str
    provider_stripe_secret: str
    provider_tradeshift_appid: str
    provider_tradeshift_secret: str
    provider_tradeshift_box_appid: str
    provider_tradeshift_box_secret: str
    provider_twitch_appid: str
    provider_twitch_secret: str
    provider_wordpress_appid: str
    provider_wordpress_secret: str
    provider_yahoo_appid: str
    provider_yahoo_secret: str
    provider_yammer_appid: str
    provider_yammer_secret: str
    provider_yandex_appid: str
    provider_yandex_secret: str
    provider_zoom_appid: str
    provider_zoom_secret: str
    provider_mock_appid: str
    provider_mock_secret: str
    auth_email_password: bool
    auth_users_auth_magic_u_r_l: bool
    auth_anonymous: bool
    auth_invites: bool
    auth_j_w_t: bool
    auth_phone: bool
    service_status_for_account: bool
    service_status_for_avatars: bool
    service_status_for_databases: bool
    service_status_for_locale: bool
    service_status_for_health: bool
    service_status_for_storage: bool
    service_status_for_teams: bool
    service_status_for_users: bool
    service_status_for_functions: bool


class PlatformType(TypedDict):
    """platform

    Platform
    """

    id: str
    created_at: int
    updated_at: int
    name: str
    type: str
    key: str
    store: str
    hostname: str
    http_user: str
    http_pass: str


class WebhookType(TypedDict):
    """webhook

    Webhook
    """

    id: str
    created_at: int
    updated_at: int
    name: str
    url: str
    events: List[str]
    security: bool
    http_user: str
    http_pass: str
    signature_key: str


class KeyType(TypedDict):
    """key

    Key
    """

    id: str
    created_at: int
    updated_at: int
    name: str
    expire: int
    scopes: List[str]
    secret: str


class DomainType(TypedDict):
    """domain

    Domain
    """

    id: str
    created_at: int
    updated_at: int
    domain: str
    registerable: str
    tld: str
    verification: bool
    certificate_id: str


class WebhookListType(TypedDict):
    """webhookList

    Webhooks List
    """

    total: int
    webhooks: List[WebhookType]


class KeyListType(TypedDict):
    """keyList

    API Keys List
    """

    total: int
    keys: List[KeyType]


class PlatformListType(TypedDict):
    """platformList

    Platforms List
    """

    total: int
    platforms: List[PlatformType]


class DomainListType(TypedDict):
    """domainList

    Domains List
    """

    total: int
    domains: List[DomainType]


class CountryListType(TypedDict):
    """countryList

    Countries List
    """

    total: int
    countries: List[CountryType]


class CountryType(TypedDict):
    """country

    Country
    """

    name: str
    code: str


class ContinentListType(TypedDict):
    """continentList

    Continents List
    """

    total: int
    continents: List[ContinentType]


class ContinentType(TypedDict):
    """continent

    Continent
    """

    name: str
    code: str


class LanguageListType(TypedDict):
    """languageList

    Languages List
    """

    total: int
    languages: List[LanguageType]


class LanguageType(TypedDict):
    """language

    Language
    """

    name: str
    code: str
    native_name: str


class CurrencyListType(TypedDict):
    """currencyList

    Currencies List
    """

    total: int
    currencies: List[CurrencyType]


class CurrencyType(TypedDict):
    """currency

    Currency
    """

    symbol: str
    name: str
    symbol_native: str
    decimal_digits: int
    rounding: float
    code: str
    name_plural: str


class PhoneListType(TypedDict):
    """phoneList

    Phones List
    """

    total: int
    phones: List[PhoneType]


class PhoneType(TypedDict):
    """phone

    Phone
    """

    code: str
    country_code: str
    country_name: str


class MetricListType(TypedDict):
    """metricList

    Metric List
    """

    total: int
    metrics: List[MetricType]


class MetricType(TypedDict):
    """metric

    Metric
    """

    value: int
    timestamp: int


class AttributeListType(TypedDict):
    """attributeList

    Attributes List
    """

    total: int
    attributes: List[Any]


class AttributeStringType(TypedDict):
    """attributeString

    AttributeString
    """

    key: str
    type: str
    status: str
    required: bool
    array: NotRequired[bool]
    size: int
    default: NotRequired[str]


class AttributeIntegerType(TypedDict):
    """attributeInteger

    AttributeInteger
    """

    key: str
    type: str
    status: str
    required: bool
    array: NotRequired[bool]
    min_: NotRequired[int]
    max_: NotRequired[int]
    default: NotRequired[int]


class AttributeFloatType(TypedDict):
    """attributeFloat

    AttributeFloat
    """

    key: str
    type: str
    status: str
    required: bool
    array: NotRequired[bool]
    min_: NotRequired[float]
    max_: NotRequired[float]
    default: NotRequired[float]


class AttributeBooleanType(TypedDict):
    """attributeBoolean

    AttributeBoolean
    """

    key: str
    type: str
    status: str
    required: bool
    array: NotRequired[bool]
    default: NotRequired[bool]


class AttributeEmailType(TypedDict):
    """attributeEmail

    AttributeEmail
    """

    key: str
    type: str
    status: str
    required: bool
    array: NotRequired[bool]
    format_: str
    default: NotRequired[str]


class AttributeEnumType(TypedDict):
    """attributeEnum

    AttributeEnum
    """

    key: str
    type: str
    status: str
    required: bool
    array: NotRequired[bool]
    elements: List[str]
    format_: str
    default: NotRequired[str]


class AttributeIpType(TypedDict):
    """attributeIp

    AttributeIP
    """

    key: str
    type: str
    status: str
    required: bool
    array: NotRequired[bool]
    format_: str
    default: NotRequired[str]


class AttributeUrlType(TypedDict):
    """attributeUrl

    AttributeURL
    """

    key: str
    type: str
    status: str
    required: bool
    array: NotRequired[bool]
    format_: str
    default: NotRequired[str]


class TokenType(TypedDict):
    """token

    Token
    """

    id: str
    created_at: int
    user_id: str
    secret: str
    expire: int


class JwtType(TypedDict):
    """jwt

    JWT
    """

    jwt: str


class LocaleType(TypedDict):
    """locale

    Locale
    """

    ip: str
    country_code: str
    country: str
    continent_code: str
    continent: str
    eu: bool
    currency: str


class HealthAntivirusType(TypedDict):
    """healthAntivirus

    Health Antivirus
    """

    version: str
    status: str


class HealthQueueType(TypedDict):
    """healthQueue

    Health Queue
    """

    size: int


class HealthStatusType(TypedDict):
    """healthStatus

    Health Status
    """

    ping: int
    status: str


class HealthTimeType(TypedDict):
    """healthTime

    Health Time
    """

    remote_time: int
    local_time: int
    diff: int


class UsageDatabasesType(TypedDict):
    """usageDatabases

    UsageDatabases
    """

    range_: str
    databases_count: List[MetricListType]
    documents_count: List[MetricListType]
    collections_count: List[MetricListType]
    databases_create: List[MetricListType]
    databases_read: List[MetricListType]
    databases_update: List[MetricListType]
    databases_delete: List[MetricListType]
    documents_create: List[MetricListType]
    documents_read: List[MetricListType]
    documents_update: List[MetricListType]
    documents_delete: List[MetricListType]
    collections_create: List[MetricListType]
    collections_read: List[MetricListType]
    collections_update: List[MetricListType]
    collections_delete: List[MetricListType]


class UsageDatabaseType(TypedDict):
    """usageDatabase

    UsageDatabase
    """

    range_: str
    documents_count: List[MetricListType]
    collections_count: List[MetricListType]
    documents_create: List[MetricListType]
    documents_read: List[MetricListType]
    documents_update: List[MetricListType]
    documents_delete: List[MetricListType]
    collections_create: List[MetricListType]
    collections_read: List[MetricListType]
    collections_update: List[MetricListType]
    collections_delete: List[MetricListType]


class UsageCollectionType(TypedDict):
    """usageCollection

    UsageCollection
    """

    range_: str
    documents_count: List[MetricListType]
    documents_create: List[MetricListType]
    documents_read: List[MetricListType]
    documents_update: List[MetricListType]
    documents_delete: List[MetricListType]


class UsageUsersType(TypedDict):
    """usageUsers

    UsageUsers
    """

    range_: str
    users_count: List[MetricListType]
    users_create: List[MetricListType]
    users_read: List[MetricListType]
    users_update: List[MetricListType]
    users_delete: List[MetricListType]
    sessions_create: List[MetricListType]
    sessions_provider_create: List[MetricListType]
    sessions_delete: List[MetricListType]


class UsageStorageType(TypedDict):
    """usageStorage

    StorageUsage
    """

    range_: str
    files_storage: List[MetricListType]
    tags_storage: List[MetricListType]
    files_count: List[MetricListType]
    buckets_count: List[MetricListType]
    buckets_create: List[MetricListType]
    buckets_read: List[MetricListType]
    buckets_update: List[MetricListType]
    buckets_delete: List[MetricListType]
    files_create: List[MetricListType]
    files_read: List[MetricListType]
    files_update: List[MetricListType]
    files_delete: List[MetricListType]


class UsageBucketsType(TypedDict):
    """usageBuckets

    UsageBuckets
    """

    range_: str
    files_count: List[MetricListType]
    files_storage: List[MetricListType]
    files_create: List[MetricListType]
    files_read: List[MetricListType]
    files_update: List[MetricListType]
    files_delete: List[MetricListType]


class UsageFunctionsType(TypedDict):
    """usageFunctions

    UsageFunctions
    """

    range_: str
    functions_executions: List[MetricListType]
    functions_failures: List[MetricListType]
    functions_compute: List[MetricListType]


class UsageProjectType(TypedDict):
    """usageProject

    UsageProject
    """

    range_: str
    requests: List[MetricListType]
    network: List[MetricListType]
    functions: List[MetricListType]
    documents: List[MetricListType]
    collections: List[MetricListType]
    users: List[MetricListType]
    storage: List[MetricListType]


class PayloadType(TypedDict):
    """payload"""

    user_id: str
    email: str
    password: str
    name: NotRequired[str]


class Payload1Type(TypedDict):
    """payload1"""

    email: str
    password: str


class Payload2Type(TypedDict):
    """payload2"""

    name: str


class Payload3Type(TypedDict):
    """payload3"""

    password: str
    old_password: NotRequired[str]


class Payload4Type(TypedDict):
    """payload4"""

    number: str
    password: str


class Payload5Type(TypedDict):
    """payload5"""

    prefs: Payload5PropPrefsType


class Payload5PropPrefsType(TypedDict):
    """Payload5PropPrefs

    Prefs key-value JSON object.
    """


class Payload6Type(TypedDict):
    """payload6"""

    email: str
    url: str


class Payload7Type(TypedDict):
    """payload7"""

    user_id: str
    secret: str
    password: str
    password_again: str


class Payload9Type(TypedDict):
    """payload9"""

    user_id: str
    email: str
    url: NotRequired[str]


class Payload10Type(TypedDict):
    """payload10"""

    user_id: str
    secret: str


class Payload11Type(TypedDict):
    """payload11"""

    user_id: str
    number: str


class Payload13Type(TypedDict):
    """payload13"""

    url: str


class Payload16Type(TypedDict):
    """payload16"""

    database_id: str
    name: str


class Payload17Type(TypedDict):
    """payload17"""

    name: str


class Payload18Type(TypedDict):
    """payload18"""

    collection_id: str
    name: str
    permission: str
    read: List[str]
    write: List[str]


class Payload19Type(TypedDict):
    """payload19"""

    name: str
    permission: str
    read: NotRequired[List[str]]
    write: NotRequired[List[str]]
    enabled: NotRequired[bool]


class Payload20Type(TypedDict):
    """payload20"""

    key: str
    required: bool
    default: NotRequired[bool]
    array: NotRequired[bool]


class Payload21Type(TypedDict):
    """payload21"""

    key: str
    required: bool
    default: NotRequired[str]
    array: NotRequired[bool]


class Payload22Type(TypedDict):
    """payload22"""

    key: str
    elements: List[str]
    required: bool
    default: NotRequired[str]
    array: NotRequired[bool]


class Payload23Type(TypedDict):
    """payload23"""

    key: str
    required: bool
    min_: NotRequired[float]
    max_: NotRequired[float]
    default: NotRequired[float]
    array: NotRequired[bool]


class Payload24Type(TypedDict):
    """payload24"""

    key: str
    required: bool
    min_: NotRequired[int]
    max_: NotRequired[int]
    default: NotRequired[int]
    array: NotRequired[bool]


class Payload26Type(TypedDict):
    """payload26"""

    key: str
    size: int
    required: bool
    default: NotRequired[str]
    array: NotRequired[bool]


class Payload28Type(TypedDict):
    """payload28"""

    document_id: str
    data: Payload28PropDataType
    read: NotRequired[List[str]]
    write: NotRequired[List[str]]


class Payload28PropDataType(TypedDict):
    """Payload28PropData

    Document data as JSON object.
    """


class Payload29Type(TypedDict):
    """payload29"""

    data: NotRequired[Payload29PropDataType]
    read: NotRequired[List[str]]
    write: NotRequired[List[str]]


class Payload29PropDataType(TypedDict):
    """Payload29PropData

    Document data as JSON object. Include only attribute and value pairs to be
    updated.
    """


class Payload30Type(TypedDict):
    """payload30"""

    key: str
    type: str
    attributes: List[str]
    orders: NotRequired[List[str]]


class Payload31Type(TypedDict):
    """payload31"""

    function_id: str
    name: str
    execute: List[str]
    runtime: str
    vars_: NotRequired[Payload31PropVarsType]
    events: NotRequired[List[str]]
    schedule: NotRequired[str]
    timeout: NotRequired[int]


class Payload31PropVarsType(TypedDict):
    """Payload31PropVars

    Key-value JSON object that will be passed to the function as environment
    variables.
    """


class Payload32Type(TypedDict):
    """payload32"""

    name: str
    execute: List[str]
    vars_: NotRequired[Payload32PropVarsType]
    events: NotRequired[List[str]]
    schedule: NotRequired[str]
    timeout: NotRequired[int]


class Payload32PropVarsType(TypedDict):
    """Payload32PropVars

    Key-value JSON object that will be passed to the function as environment
    variables.
    """


class Payload33Type(TypedDict):
    """payload33"""

    data: NotRequired[str]
    async_: NotRequired[bool]


class Payload34Type(TypedDict):
    """payload34"""

    project_id: str
    name: str
    team_id: str
    description: NotRequired[str]
    logo: NotRequired[str]
    url: NotRequired[str]
    legal_name: NotRequired[str]
    legal_country: NotRequired[str]
    legal_state: NotRequired[str]
    legal_city: NotRequired[str]
    legal_address: NotRequired[str]
    legal_tax_id: NotRequired[str]


class Payload35Type(TypedDict):
    """payload35"""

    name: str
    description: NotRequired[str]
    logo: NotRequired[str]
    url: NotRequired[str]
    legal_name: NotRequired[str]
    legal_country: NotRequired[str]
    legal_state: NotRequired[str]
    legal_city: NotRequired[str]
    legal_address: NotRequired[str]
    legal_tax_id: NotRequired[str]


class Payload36Type(TypedDict):
    """payload36"""

    password: str


class Payload37Type(TypedDict):
    """payload37"""

    limit: int


class Payload38Type(TypedDict):
    """payload38"""

    status: bool


class Payload39Type(TypedDict):
    """payload39"""

    domain: str


class Payload40Type(TypedDict):
    """payload40"""

    name: str
    scopes: List[str]
    expire: NotRequired[int]


class Payload41Type(TypedDict):
    """payload41"""

    name: str
    scopes: List[str]
    expire: NotRequired[int]


class Payload42Type(TypedDict):
    """payload42"""

    provider: str
    app_id: NotRequired[str]
    secret: NotRequired[str]


class Payload43Type(TypedDict):
    """payload43"""

    type: str
    name: str
    key: NotRequired[str]
    store: NotRequired[str]
    hostname: NotRequired[str]


class Payload44Type(TypedDict):
    """payload44"""

    name: str
    key: NotRequired[str]
    store: NotRequired[str]
    hostname: NotRequired[str]


class Payload45Type(TypedDict):
    """payload45"""

    service: str
    status: bool


class Payload46Type(TypedDict):
    """payload46"""

    name: str
    events: List[str]
    url: str
    security: bool
    http_user: NotRequired[str]
    http_pass: NotRequired[str]


class Payload48Type(TypedDict):
    """payload48"""

    bucket_id: str
    name: str
    permission: str
    read: NotRequired[List[str]]
    write: NotRequired[List[str]]
    enabled: NotRequired[bool]
    maximum_file_size: NotRequired[int]
    allowed_file_extensions: NotRequired[List[str]]
    encryption: NotRequired[bool]
    antivirus: NotRequired[bool]


class Payload49Type(TypedDict):
    """payload49"""

    name: str
    permission: str
    read: NotRequired[List[str]]
    write: NotRequired[List[str]]
    enabled: NotRequired[bool]
    maximum_file_size: NotRequired[int]
    allowed_file_extensions: NotRequired[List[str]]
    encryption: NotRequired[bool]
    antivirus: NotRequired[bool]


class Payload50Type(TypedDict):
    """payload50"""

    read: NotRequired[List[str]]
    write: NotRequired[List[str]]


class Payload51Type(TypedDict):
    """payload51"""

    team_id: str
    name: str
    roles: NotRequired[List[str]]


class Payload52Type(TypedDict):
    """payload52"""

    name: str


class Payload53Type(TypedDict):
    """payload53"""

    email: str
    roles: List[str]
    url: str
    name: NotRequired[str]


class Payload54Type(TypedDict):
    """payload54"""

    roles: List[str]


class Payload55Type(TypedDict):
    """payload55"""

    user_id: str
    secret: str


class Payload56Type(TypedDict):
    """payload56"""

    user_id: str
    email: str
    password: str
    name: NotRequired[str]


class Payload57Type(TypedDict):
    """payload57"""

    email: str


class Payload59Type(TypedDict):
    """payload59"""

    password: str


class Payload60Type(TypedDict):
    """payload60"""

    number: str


class Payload62Type(TypedDict):
    """payload62"""

    status: bool


class Payload63Type(TypedDict):
    """payload63"""

    email_verification: bool


class Payload64Type(TypedDict):
    """payload64"""

    phone_verification: bool


class AccountPrefsGetResponse200Type(TypedDict):
    """AccountPrefsGetResponse200"""


class StorageBucketsBucketIdFilesPostBodyType(TypedDict):
    """StorageBucketsBucketIdFilesPostBody"""

    file_id: str
    file: str
    read: NotRequired[List[str]]
    write: NotRequired[List[str]]


class UsersUserIdPrefsGetResponse200Type(TypedDict):
    """UsersUserIdPrefsGetResponse200"""


class UsersUserIdPrefsPatchResponse200Type(TypedDict):
    """UsersUserIdPrefsPatchResponse200"""


class FunctionsFunctionIdDeploymentsPostBodyType(TypedDict):
    """FunctionsFunctionIdDeploymentsPostBody"""

    entrypoint: str
    code: str
    activate: bool


__all__ = [
    'DocumentListType',
    'DocumentType',
    'CollectionListType',
    'CollectionType',
    'IndexType',
    'DatabaseListType',
    'DatabaseType',
    'IndexListType',
    'UserListType',
    'UserType',
    'UserPropPrefsItemsType',
    'SessionListType',
    'SessionType',
    'LogListType',
    'LogType',
    'FileListType',
    'FileType',
    'BucketListType',
    'BucketType',
    'TeamListType',
    'TeamType',
    'MembershipListType',
    'MembershipType',
    'FunctionListType',
    'FunctionType',
    'FunctionPropVarsType',
    'RuntimeListType',
    'RuntimeType',
    'DeploymentListType',
    'DeploymentType',
    'ExecutionListType',
    'ExecutionType',
    'ProjectListType',
    'ProjectType',
    'PlatformType',
    'WebhookType',
    'KeyType',
    'DomainType',
    'WebhookListType',
    'KeyListType',
    'PlatformListType',
    'DomainListType',
    'CountryListType',
    'CountryType',
    'ContinentListType',
    'ContinentType',
    'LanguageListType',
    'LanguageType',
    'CurrencyListType',
    'CurrencyType',
    'PhoneListType',
    'PhoneType',
    'MetricListType',
    'MetricType',
    'AttributeListType',
    'AttributeStringType',
    'AttributeIntegerType',
    'AttributeFloatType',
    'AttributeBooleanType',
    'AttributeEmailType',
    'AttributeEnumType',
    'AttributeIpType',
    'AttributeUrlType',
    'TokenType',
    'JwtType',
    'LocaleType',
    'HealthAntivirusType',
    'HealthQueueType',
    'HealthStatusType',
    'HealthTimeType',
    'UsageDatabasesType',
    'UsageDatabaseType',
    'UsageCollectionType',
    'UsageUsersType',
    'UsageStorageType',
    'UsageBucketsType',
    'UsageFunctionsType',
    'UsageProjectType',
    'PayloadType',
    'Payload1Type',
    'Payload2Type',
    'Payload3Type',
    'Payload4Type',
    'Payload5Type',
    'Payload5PropPrefsType',
    'Payload6Type',
    'Payload7Type',
    'Payload9Type',
    'Payload10Type',
    'Payload11Type',
    'Payload13Type',
    'Payload16Type',
    'Payload17Type',
    'Payload18Type',
    'Payload19Type',
    'Payload20Type',
    'Payload21Type',
    'Payload22Type',
    'Payload23Type',
    'Payload24Type',
    'Payload26Type',
    'Payload28Type',
    'Payload28PropDataType',
    'Payload29Type',
    'Payload29PropDataType',
    'Payload30Type',
    'Payload31Type',
    'Payload31PropVarsType',
    'Payload32Type',
    'Payload32PropVarsType',
    'Payload33Type',
    'Payload34Type',
    'Payload35Type',
    'Payload36Type',
    'Payload37Type',
    'Payload38Type',
    'Payload39Type',
    'Payload40Type',
    'Payload41Type',
    'Payload42Type',
    'Payload43Type',
    'Payload44Type',
    'Payload45Type',
    'Payload46Type',
    'Payload48Type',
    'Payload49Type',
    'Payload50Type',
    'Payload51Type',
    'Payload52Type',
    'Payload53Type',
    'Payload54Type',
    'Payload55Type',
    'Payload56Type',
    'Payload57Type',
    'Payload59Type',
    'Payload60Type',
    'Payload62Type',
    'Payload63Type',
    'Payload64Type',
    'AccountPrefsGetResponse200Type',
    'StorageBucketsBucketIdFilesPostBodyType',
    'UsersUserIdPrefsGetResponse200Type',
    'UsersUserIdPrefsPatchResponse200Type',
    'FunctionsFunctionIdDeploymentsPostBodyType',
]
