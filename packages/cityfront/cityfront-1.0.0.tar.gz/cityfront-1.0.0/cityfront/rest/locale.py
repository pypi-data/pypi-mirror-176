"""DO NOT EDIT THIS FILE!

This file is auto generated by github rest api discription.
See https://github.com/github/rest-api-description for more information.
"""


from typing import TYPE_CHECKING, Literal, overload

from cityfront.utils import exclude_unset
from pydantic import BaseModel, parse_obj_as

from .models import (ContinentList, CountryList, CurrencyList, LanguageList,
                     Locale, PhoneList)

if TYPE_CHECKING:
    from cityfront import AppWrite
    from cityfront.response import Response


class LocaleClient:
    def __init__(self, appwrite: 'AppWrite'):
        self._appwrite = appwrite

    def locale_get(
        self,
    ) -> 'Response[Locale]':
        headers = {}
        url = '/locale'

        return self._appwrite.request(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=Locale,
        )

    async def async_locale_get(
        self,
    ) -> 'Response[Locale]':
        url = '/locale'

        headers = {}
        return await self._appwrite.arequest(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=Locale,
        )

    def locale_get_continents(
        self,
    ) -> 'Response[ContinentList]':
        headers = {}
        url = '/locale/continents'

        return self._appwrite.request(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=ContinentList,
        )

    async def async_locale_get_continents(
        self,
    ) -> 'Response[ContinentList]':
        url = '/locale/continents'

        headers = {}
        return await self._appwrite.arequest(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=ContinentList,
        )

    def locale_get_countries(
        self,
    ) -> 'Response[CountryList]':
        headers = {}
        url = '/locale/countries'

        return self._appwrite.request(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=CountryList,
        )

    async def async_locale_get_countries(
        self,
    ) -> 'Response[CountryList]':
        url = '/locale/countries'

        headers = {}
        return await self._appwrite.arequest(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=CountryList,
        )

    def locale_get_countries_e_u(
        self,
    ) -> 'Response[CountryList]':
        headers = {}
        url = '/locale/countries/eu'

        return self._appwrite.request(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=CountryList,
        )

    async def async_locale_get_countries_e_u(
        self,
    ) -> 'Response[CountryList]':
        url = '/locale/countries/eu'

        headers = {}
        return await self._appwrite.arequest(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=CountryList,
        )

    def locale_get_countries_phones(
        self,
    ) -> 'Response[PhoneList]':
        headers = {}
        url = '/locale/countries/phones'

        return self._appwrite.request(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=PhoneList,
        )

    async def async_locale_get_countries_phones(
        self,
    ) -> 'Response[PhoneList]':
        url = '/locale/countries/phones'

        headers = {}
        return await self._appwrite.arequest(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=PhoneList,
        )

    def locale_get_currencies(
        self,
    ) -> 'Response[CurrencyList]':
        headers = {}
        url = '/locale/currencies'

        return self._appwrite.request(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=CurrencyList,
        )

    async def async_locale_get_currencies(
        self,
    ) -> 'Response[CurrencyList]':
        url = '/locale/currencies'

        headers = {}
        return await self._appwrite.arequest(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=CurrencyList,
        )

    def locale_get_languages(
        self,
    ) -> 'Response[LanguageList]':
        headers = {}
        url = '/locale/languages'

        return self._appwrite.request(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=LanguageList,
        )

    async def async_locale_get_languages(
        self,
    ) -> 'Response[LanguageList]':
        url = '/locale/languages'

        headers = {}
        return await self._appwrite.arequest(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=LanguageList,
        )
