"""DO NOT EDIT THIS FILE!

This file is auto generated by github rest api discription.
See https://github.com/github/rest-api-description for more information.
"""


from typing import TYPE_CHECKING, Literal, overload

from cityfront.utils import exclude_unset
from pydantic import BaseModel, parse_obj_as

from .models import HealthAntivirus, HealthQueue, HealthStatus, HealthTime

if TYPE_CHECKING:
    from cityfront import AppWrite
    from cityfront.response import Response


class HealthClient:
    def __init__(self, appwrite: 'AppWrite'):
        self._appwrite = appwrite

    def health_get(
        self,
    ) -> 'Response[HealthStatus]':
        headers = {}
        url = '/health'

        return self._appwrite.request(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=HealthStatus,
        )

    async def async_health_get(
        self,
    ) -> 'Response[HealthStatus]':
        url = '/health'

        headers = {}
        return await self._appwrite.arequest(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=HealthStatus,
        )

    def health_get_antivirus(
        self,
    ) -> 'Response[HealthAntivirus]':
        headers = {}
        url = '/health/anti_virus'

        return self._appwrite.request(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=HealthAntivirus,
        )

    async def async_health_get_antivirus(
        self,
    ) -> 'Response[HealthAntivirus]':
        url = '/health/anti_virus'

        headers = {}
        return await self._appwrite.arequest(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=HealthAntivirus,
        )

    def health_get_cache(
        self,
    ) -> 'Response[HealthStatus]':
        headers = {}
        url = '/health/cache'

        return self._appwrite.request(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=HealthStatus,
        )

    async def async_health_get_cache(
        self,
    ) -> 'Response[HealthStatus]':
        url = '/health/cache'

        headers = {}
        return await self._appwrite.arequest(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=HealthStatus,
        )

    def health_get_d_b(
        self,
    ) -> 'Response[HealthStatus]':
        headers = {}
        url = '/health/db'

        return self._appwrite.request(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=HealthStatus,
        )

    async def async_health_get_d_b(
        self,
    ) -> 'Response[HealthStatus]':
        url = '/health/db'

        headers = {}
        return await self._appwrite.arequest(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=HealthStatus,
        )

    def health_get_queue_certificates(
        self,
    ) -> 'Response[HealthQueue]':
        headers = {}
        url = '/health/queue/certificates'

        return self._appwrite.request(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=HealthQueue,
        )

    async def async_health_get_queue_certificates(
        self,
    ) -> 'Response[HealthQueue]':
        url = '/health/queue/certificates'

        headers = {}
        return await self._appwrite.arequest(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=HealthQueue,
        )

    def health_get_queue_functions(
        self,
    ) -> 'Response[HealthQueue]':
        headers = {}
        url = '/health/queue/functions'

        return self._appwrite.request(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=HealthQueue,
        )

    async def async_health_get_queue_functions(
        self,
    ) -> 'Response[HealthQueue]':
        url = '/health/queue/functions'

        headers = {}
        return await self._appwrite.arequest(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=HealthQueue,
        )

    def health_get_queue_logs(
        self,
    ) -> 'Response[HealthQueue]':
        headers = {}
        url = '/health/queue/logs'

        return self._appwrite.request(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=HealthQueue,
        )

    async def async_health_get_queue_logs(
        self,
    ) -> 'Response[HealthQueue]':
        url = '/health/queue/logs'

        headers = {}
        return await self._appwrite.arequest(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=HealthQueue,
        )

    def health_get_queue_webhooks(
        self,
    ) -> 'Response[HealthQueue]':
        headers = {}
        url = '/health/queue/webhooks'

        return self._appwrite.request(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=HealthQueue,
        )

    async def async_health_get_queue_webhooks(
        self,
    ) -> 'Response[HealthQueue]':
        url = '/health/queue/webhooks'

        headers = {}
        return await self._appwrite.arequest(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=HealthQueue,
        )

    def health_get_storage_local(
        self,
    ) -> 'Response[HealthStatus]':
        headers = {}
        url = '/health/storage/local'

        return self._appwrite.request(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=HealthStatus,
        )

    async def async_health_get_storage_local(
        self,
    ) -> 'Response[HealthStatus]':
        url = '/health/storage/local'

        headers = {}
        return await self._appwrite.arequest(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=HealthStatus,
        )

    def health_get_time(
        self,
    ) -> 'Response[HealthTime]':
        headers = {}
        url = '/health/time'

        return self._appwrite.request(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=HealthTime,
        )

    async def async_health_get_time(
        self,
    ) -> 'Response[HealthTime]':
        url = '/health/time'

        headers = {}
        return await self._appwrite.arequest(
            'GET',
            url,
            headers=exclude_unset(headers),
            response_model=HealthTime,
        )
