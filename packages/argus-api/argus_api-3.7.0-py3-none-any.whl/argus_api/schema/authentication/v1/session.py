"""Autogenerated API schema"""
from argus_api import session


accept_session_transfer = {'tags': ['authentication/v1/session'], 'summary': 'Accept transfer of session token from other domain (PUBLIC)', 'description': '', 'operationId': 'putSession', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Encrypted SSO transfer token', 'required': False, 'schema': {'type': 'object', 'properties': {'seed': {'type': 'str', 'readOnly': True}, 'data': {'type': 'str', 'readOnly': True}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'sessionKey': {'type': 'str', 'position': 0, 'description': 'Session wide encryption key for CSRF and other uses'}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'The security level of this session', 'enum': ['ADMINISTRATIVE', 'DEFAULT', 'EXTERNAL']}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'The creation timestamp of this session'}, 'timestamp': {'type': 'int', 'position': 0, 'description': 'The last updated timestamp of this session'}, 'authenticationMethod': {'type': 'str', 'position': 0, 'description': 'The authentication method used for this session', 'enum': ['PASSWORD', 'SIGNATURE', 'SMS', 'RADIUS', 'TOTP', 'OTP', 'APIKEY', 'LDAP', 'IMPERSONATED', 'OPENID']}, 'clientIP': {'type': 'str', 'position': 0, 'description': 'The client IP this session is bound to (as seen from Argus)'}}}}}}, '401': {'description': 'Authentication failed'}}}
clear_session_data = {'tags': ['authentication/v1/session'], 'summary': 'Clear the current sessions sessiondata (PUBLIC)', 'description': '', 'operationId': 'clearSessionData', 'produces': ['application/json'], 'parameters': [], 'responses': {'401': {'description': 'Authentication failed'}}}
delete_session = {'tags': ['authentication/v1/session'], 'summary': 'Invalidate current user session (PUBLIC)', 'description': '', 'operationId': 'deleteSession', 'produces': ['application/json'], 'parameters': [], 'responses': {'default': {'description': 'successful operation'}}}
evict_session = {'tags': ['authentication/v1/session'], 'summary': 'Delete a specific session. The session will be deleted from the authorative cache and flushed from all distributed caches (PUBLIC)', 'description': '', 'operationId': 'evictSession', 'produces': ['application/json'], 'parameters': [{'name': 'sessionIdentifier', 'in': 'path', 'description': 'Session identifier for the session to delete.', 'required': True, 'type': 'str', 'pattern': '.+'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'sessionKey': {'type': 'str', 'position': 0, 'description': 'Session wide encryption key for CSRF and other uses'}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'The security level of this session', 'enum': ['ADMINISTRATIVE', 'DEFAULT', 'EXTERNAL']}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'The creation timestamp of this session'}, 'timestamp': {'type': 'int', 'position': 0, 'description': 'The last updated timestamp of this session'}, 'authenticationMethod': {'type': 'str', 'position': 0, 'description': 'The authentication method used for this session', 'enum': ['PASSWORD', 'SIGNATURE', 'SMS', 'RADIUS', 'TOTP', 'OTP', 'APIKEY', 'LDAP', 'IMPERSONATED', 'OPENID']}, 'clientIP': {'type': 'str', 'position': 0, 'description': 'The client IP this session is bound to (as seen from Argus)'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Session not found'}, '412': {'description': 'Invalid arguments'}}}
get_session = {'tags': ['authentication/v1/session'], 'summary': 'Get session information of current user. If the request specifies a domain, this will also ensure that thecurrent session is bound to the requested domain.  (PUBLIC)', 'description': '', 'operationId': 'getSession', 'produces': ['application/json'], 'parameters': [{'name': 'domain', 'in': 'query', 'description': 'Expected domain for this session.', 'required': False, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'sessionKey': {'type': 'str', 'position': 0, 'description': 'Session wide encryption key for CSRF and other uses'}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'The security level of this session', 'enum': ['ADMINISTRATIVE', 'DEFAULT', 'EXTERNAL']}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'The creation timestamp of this session'}, 'timestamp': {'type': 'int', 'position': 0, 'description': 'The last updated timestamp of this session'}, 'authenticationMethod': {'type': 'str', 'position': 0, 'description': 'The authentication method used for this session', 'enum': ['PASSWORD', 'SIGNATURE', 'SMS', 'RADIUS', 'TOTP', 'OTP', 'APIKEY', 'LDAP', 'IMPERSONATED', 'OPENID']}, 'clientIP': {'type': 'str', 'position': 0, 'description': 'The client IP this session is bound to (as seen from Argus)'}}}}}}, '401': {'description': 'Authentication failed, or session does not belong to expected domain'}}}
get_session_customers = {'tags': ['authentication/v1/session'], 'summary': 'List customers available in this session (PUBLIC)', 'description': '', 'operationId': 'getSessionCustomers', 'produces': ['application/json'], 'parameters': [], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}, 'shortName': {'type': 'string'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'string'}}}}}}}}}}}
get_session_functions = {'tags': ['authentication/v1/session'], 'summary': 'List functions available in this session (PUBLIC)', 'description': '', 'operationId': 'getSessionFunctions', 'produces': ['application/json'], 'parameters': [], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'name': {'type': 'str', 'position': 0, 'description': 'Function name'}, 'description': {'type': 'str', 'position': 0, 'description': 'Function description'}, 'securityLevel': {'type': 'str', 'position': 0, 'description': 'Function security level', 'enum': ['DEFAULT', 'ADMINISTRATIVE', 'EXTERNAL']}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ROLE', 'SYSADM']}}}}}}}}}}