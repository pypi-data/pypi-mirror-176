-- Tests for baseline
-- ------------------------------
-- See cmdline.test for specifics
-- ----------------------------------------

[case testWriteBaseline]
# cmd: mypy --write-baseline --baseline-file a/b --error-summary pkg
[file pkg/a.py]
a
[out]
pkg/a.py:1:1: error: Name "a" is not defined  [name-defined]
Found 1 error (1 new error) in 1 file (checked 1 source file)
Baseline successfully written to a/b
== Return code: 0


-- TODO merge this with the first one?
[case testWriteBaseline2]
# cmd: mypy --write-baseline --baseline-file a/b pkg
# dont-normalize-output:
[file pkg/a.py]
a
[outfile a/b]
{
  "files": {
    "pkg/a.py": [
      {
        "code": "name-defined",
        "column": 0,
        "message": "Name \"a\" is not defined",
        "offset": 1,
        "target": "a"
      }
    ]
  },
  "format": "1.3",
  "targets": [
    "file:pkg"
  ]
}


[case testRewriteBaseline]
# cmd: mypy --write-baseline --error-summary pkg
[file pkg/a.py]
1 + ""
"" + 1
[file .mypy/baseline.json]
{"pkg/a.py": [{"code": "operator", "line": 2, "message": "Unsupported operand types for + (\"str\" and \"int\")"}]}
[out]
pkg/a.py:1:5: error: Unsupported operand types for + ("int" and "str")  [operator]
Found 2 errors (1 new error) in 1 file (checked 1 source file)
Baseline successfully written to .mypy/baseline.json
== Return code: 0
-- TODO merge this with the first one?


[case testRewriteBaseline2]
# cmd: mypy --write-baseline --error-summary pkg
# dont-normalize-output:
[file pkg/a.py]
1 + ""
"" + 1
[file .mypy/baseline.json]
{"pkg/a.py": [{"code": "operator", "line": 2, "message": "Unsupported operand types for + (\"str\" and \"int\")"}]}
[outfile .mypy/baseline.json]
{
  "files": {
    "pkg/a.py": [
      {
        "code": "operator",
        "column": 4,
        "message": "Unsupported operand types for + (\"int\" and \"str\")",
        "offset": 1,
        "target": "a"
      },
      {
        "code": "operator",
        "column": 5,
        "message": "Unsupported operand types for + (\"str\" and \"int\")",
        "offset": 1,
        "target": "a"
      }
    ]
  },
  "format": "1.3",
  "targets": [
    "file:pkg"
  ]
}


[case testRewriteEmpty]
# cmd: mypy --write-baseline --error-summary pkg
[file pkg/a.py]
1 + 1
"" + ""
[file .mypy/baseline.json]
{"pkg/a.py": [{"code": "operator", "line": 2, "message": "Unsupported operand types for + (\"str\" and \"int\")"}]}
[out]
No errors, baseline file removed
Success: no issues found in 1 source file
== Return code: 0


[case testRewriteNoChange]
# cmd: mypy --write-baseline --error-summary pkg
[file pkg/a.py]
a
[file .mypy/baseline.json]
{
"__baseline_metadata__": {"targets": ["file:pkg"]},
"pkg/a.py": [{"code": "name-defined", "column": 0, "line": 1, "message": "Name \"a\" is not defined", "target": "a"}]
}
[out]
Found 1 error (0 new errors) in 1 file (checked 1 source file)
Baseline successfully written to .mypy/baseline.json
== Return code: 0


[case testAutoBaselineRemoves]
# cmd: mypy --error-summary pkg
[file pkg/a.py]
1 + 1
[file .mypy/baseline.json]
{"__baseline_metadata__": {"targets": ["file:pkg"]},
"pkg/a.py": [{"line": 2, "code": "name-defined", "message": "Name \"a\" is not defined"}]
}
[out]
No errors, baseline file removed
Success: no issues found in 1 source file
== Return code: 0


[case testAutoBaselineDoesntActivateWithErrors]
# cmd: mypy --error-summary pkg
[file pkg/a.py]
a
b
[file .mypy/baseline.json]
{"__baseline_metadata__": {"targets": ["file:pkg"]},
"pkg/a.py": [{"line": 2, "code": "name-defined", "message": "Name \"a\" is not defined"}]}
[out]
pkg/a.py:2:1: error: Name "b" is not defined  [name-defined]
Found 1 error in 1 file (checked 1 source file)


[case testAutoBaselineUpdates]
# cmd: mypy --error-summary pkg
[file pkg/a.py]
a
[file .mypy/baseline.json]
{
"__baseline_metadata__": {"targets": ["file:pkg"]},
"pkg/a.py": [{"line": 2, "code": "name-defined", "message": "Name \"a\" is not defined"}]
}
[out]
Baseline successfully updated at .mypy/baseline.json
Success: no issues found in 1 source file
== Return code: 0


[case testAutoBaselineDoesntMessageWhenSame]
# cmd: mypy --error-summary pkg
# dont-normalize-output:
[file pkg/a.py]
a
[file .mypy/baseline.json]
{
"__baseline_metadata__": {"targets": ["file:pkg"]},
"pkg/a.py": [{"code": "name-defined", "column": 0, "line": 1, "message": "Name \"a\" is not defined", "target": "a"}]
}
[outfile .mypy/baseline.json]
{
"__baseline_metadata__": {"targets": ["file:pkg"]},
"pkg/a.py": [{"code": "name-defined", "column": 0, "line": 1, "message": "Name \"a\" is not defined", "target": "a"}]
}


[case testAutoBaselineDoesntMessageWhenSame2]
# cmd: mypy --error-summary pkg
[file pkg/a.py]
a
[file .mypy/baseline.json]
{
"__baseline_metadata__": {"targets": ["file:pkg"]},
"pkg/a.py": [{"code": "name-defined", "column": 0, "line": 1, "message": "Name \"a\" is not defined", "target": "a"}]
}
[out]
Success: no issues found in 1 source file
== Return code: 0


[case testInvalidFormat]
# cmd: mypy --error-summary --baseline-file a/b pkg
[file pkg/a.py]
a
[file a/b]
{"__baseline_metadata__": {"targets": ["file:pkg"]}}
[out]
error: Baseline file 'a/b' has an invalid data format.
Perhaps it was generated with an older version of basedmypy, see `--baseline-format`
== Return code: 2


[case testAutoBaselineDifferentTargets]
# cmd: mypy --error-summary pkg
[file pkg/a.py]
a
[file .mypy/baseline.json]
{
"targets": ["file:pkg/a.py"],
"format": "1.3",
"files": {"pkg/a.py": [{"offset": 2, "code": "name-defined", "message": "Name \"a\" is not defined"}]}
}
[out]
Success: no issues found in 1 source file
== Return code: 0


[case testNoAutoBaseline]
# cmd: mypy --no-auto-baseline --error-summary pkg
[file pkg/a.py]
a
[file .mypy/baseline.json]
{"pkg/a.py": [{"line": 2, "code": "name-defined", "message": "Name \"a\" is not defined"}]}
[out]
Success: no issues found in 1 source file
== Return code: 0


[case testNotFound]
# cmd: mypy --baseline-file a/b --error-summary pkg
[file pkg/a.py]
[out]
error: Baseline file not found at a/b
== Return code: 2


[case testInvalidJSON]
# cmd: mypy --baseline-file a/b --error-summary pkg
[file pkg/a.py]
[file a/b]
hi
[out]
error: Invalid JSON in baseline file a/b
== Return code: 2


[case testBaselineFilter]
# cmd: mypy --error-summary pkg
[file pkg/a.py]
1 + ""
"" + 1
[file .mypy/baseline.json]
{"pkg/a.py": [{"code": "operator", "line": 2, "message": "Unsupported operand types for + (\"str\" and \"int\")"}]}
[out]
pkg/a.py:1:5: error: Unsupported operand types for + ("int" and "str")  [operator]
Found 1 error in 1 file (checked 1 source file)


[case testBlockers]
# cmd: mypy --write-baseline --error-summary main
[file main]
 1
[out]
main:1:2: error: unexpected indent  [syntax]
Found 1 error in 1 file (errors prevented further checking)
== Return code: 2


[case testBaselineFilterLinkedNotes]
# cmd: mypy --error-summary pkg
[file pkg/a.py]
(a, 1 + "")  # type: ignore[name-defined]
[file .mypy/baseline.json]
{
  "files": {
    "pkg/a.py": [
      {"code": "name-defined", "column": 1, "message": "Name \"a\" is not defined", "offset": 1},
      {"code": "operator", "column": 0, "message": "Unsupported operand types for + (\"str\" and \"int\")", "offset": 0}
    ]
  },
  "format": "1.3",
  "targets": [ "file:pkg" ]
}
[out]
Baseline successfully updated at .mypy/baseline.json
Success: no issues found in 1 source file
== Return code: 0


[case testRevealType]
# cmd: mypy --error-summary pkg
[file pkg/main.py]
a: int
reveal_type(a)
[file .mypy/baseline.json]
{"main.py": [{"line": 1, "code": "misc", "message": "test"}]}
[out]
pkg/main.py:2:13: note: Revealed type is "int"
Success: no issues found in 1 source file
== Return code: 0


[case testRevealLocals]
# cmd: mypy --error-summary pkg
[file pkg/main.py]
def foo() -> None:
    a: int
    reveal_locals()  # N:   # N:
[file .mypy/baseline.json]
{"main.py": [{"line": 1, "code": "misc", "message": "test"}]}
[out]
pkg/main.py:3:5: note: Revealed local types are:
pkg/main.py:3:5: note:     a: int
Success: no issues found in 1 source file
== Return code: 0


[case testBaselineFormat1_2]
# cmd: mypy --baseline-format 1.2 --error-summary pkg
[file pkg/main.py]
a: int = ''
b: str = 1
[file .mypy/baseline.json]
{"pkg/main.py": [{"line": 1, "code": "assignment", "message": "Incompatible types in assignment (expression has type \"str\", variable has type \"int\")"}]}
[out]
pkg/main.py:2:10: error: Incompatible types in assignment (expression has type "int", variable has type "str")  [assignment]
Found 1 error in 1 file (checked 1 source file)


[case testBaselineFormat1_3]
# cmd: mypy --baseline-format 1.3 --error-summary pkg
[file pkg/main.py]
a: int = ''
b: str = 1
[file .mypy/baseline.json]
{
  "files": {
    "pkg/main.py": [{"offset": 1, "code": "assignment", "message": "Incompatible types in assignment (expression has type \"str\", variable has type \"int\")"}]
  },
  "format": "1.3",
  "targets": ["file:pkg/main.py"]
}
[out]
pkg/main.py:2:10: error: Incompatible types in assignment (expression has type "int", variable has type "str")  [assignment]
Found 1 error in 1 file (checked 1 source file)


[case testBaselineFormat1_4]
# cmd: mypy  --error-summary pkg
[file pkg/main.py]
a: int = ''
b: str = 1
[file .mypy/baseline.json]
{
  "files": {
    "pkg/main.py": [{"offset": 1, "code": "assignment", "message": "Incompatible types in assignment (expression has type \"str\", variable has type \"int\")"}]
  },
  "format": "1.4",
  "targets": ["file:pkg/main.py"]
}
[out]
Invalid/Unsupported baseline file format: 1.4
== Return code: 2
