{"version":3,"file":"6bd2a85e.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAsEA;;AAtEA;;;;ACGA;;;;;;;;;;;;;;;;;;;;;;ACDA;;;ACsEA;AACA;AACA;;;;;;AAMA;;;;;AAKA;AACA;;AAEA;;;AAGA;;AAIA;;AAEA;;AAIA;;AAGA;;AAEA;;;;;;;AASA;;AAGA;AACA;AACA;;AAEA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAxGA","sources":["webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/components/ha-check-list-item.ts","webpack://home-assistant-frontend/./src/components/ha-list-item.ts","webpack://home-assistant-frontend/./src/panels/config/repairs/ha-config-repairs-dashboard.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public raised = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        box-shadow: var(--ha-card-box-shadow, none);\n        box-sizing: border-box;\n        border-radius: var(--ha-card-border-radius, 12px);\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([raised]) {\n        border: none;\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import { css } from \"lit\";\nimport { CheckListItemBase } from \"@material/mwc-list/mwc-check-list-item-base\";\nimport { styles as controlStyles } from \"@material/mwc-list/mwc-control-list-item.css\";\nimport { styles } from \"@material/mwc-list/mwc-list-item.css\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-check-list-item\")\nexport class HaCheckListItem extends CheckListItemBase {\n  static override styles = [\n    styles,\n    controlStyles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-check-list-item\": HaCheckListItem;\n  }\n}\n","import { ListItemBase } from \"@material/mwc-list/mwc-list-item-base\";\nimport { styles } from \"@material/mwc-list/mwc-list-item.css\";\nimport { css, CSSResultGroup } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-list-item\")\nexport class HaListItem extends ListItemBase {\n  static get styles(): CSSResultGroup {\n    return [\n      styles,\n      css`\n        :host {\n          padding-left: var(--mdc-list-side-padding, 20px);\n          padding-right: var(--mdc-list-side-padding, 20px);\n        }\n        :host([graphic=\"avatar\"]:not([twoLine])),\n        :host([graphic=\"icon\"]:not([twoLine])) {\n          height: 48px;\n        }\n        span.material-icons:first-of-type {\n          margin-inline-start: 0px !important;\n          margin-inline-end: var(\n            --mdc-list-item-graphic-margin,\n            16px\n          ) !important;\n          direction: var(--direction);\n        }\n        span.material-icons:last-of-type {\n          margin-inline-start: auto !important;\n          margin-inline-end: 0px !important;\n          direction: var(--direction);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-list-item\": HaListItem;\n  }\n}\n","import { RequestSelectedDetail } from \"@material/mwc-list/mwc-list-item-base\";\nimport { mdiDotsVertical } from \"@mdi/js\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { shouldHandleRequestSelectedEvent } from \"../../../common/mwc/handle-request-selected-event\";\nimport { navigate } from \"../../../common/navigate\";\nimport { extractSearchParam } from \"../../../common/url/search-params\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-check-list-item\";\nimport {\n  RepairsIssue,\n  severitySort,\n  subscribeRepairsIssueRegistry,\n} from \"../../../data/repairs\";\nimport \"../../../layouts/hass-subpage\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport type { HomeAssistant } from \"../../../types\";\nimport \"./ha-config-repairs\";\nimport { showIntegrationStartupDialog } from \"./show-integration-startup-dialog\";\nimport { showSystemInformationDialog } from \"./show-system-information-dialog\";\n\n@customElement(\"ha-config-repairs-dashboard\")\nclass HaConfigRepairsDashboard extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @state() private _repairsIssues: RepairsIssue[] = [];\n\n  @state() private _showIgnored = false;\n\n  private _getFilteredIssues = memoizeOne(\n    (showIgnored: boolean, repairsIssues: RepairsIssue[]) =>\n      showIgnored\n        ? repairsIssues\n        : repairsIssues.filter((issue) => !issue.ignored)\n  );\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n\n    const searchParam = extractSearchParam(\"dialog\");\n\n    if (searchParam === \"system-health\") {\n      navigate(\"/config/repairs\", { replace: true });\n      showSystemInformationDialog(this);\n    }\n  }\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeRepairsIssueRegistry(this.hass.connection!, (repairs) => {\n        this._repairsIssues = repairs.issues.sort(\n          (a, b) => severitySort[a.severity] - severitySort[b.severity]\n        );\n        const integrations: Set<string> = new Set();\n        for (const issue of this._repairsIssues) {\n          integrations.add(issue.domain);\n        }\n        this.hass.loadBackendTranslation(\"issues\", [...integrations]);\n      }),\n    ];\n  }\n\n  protected render(): TemplateResult {\n    const issues = this._getFilteredIssues(\n      this._showIgnored,\n      this._repairsIssues\n    );\n\n    return html`\n      <hass-subpage\n        back-path=\"/config/system\"\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .header=${this.hass.localize(\"ui.panel.config.repairs.caption\")}\n      >\n        <div slot=\"toolbar-icon\">\n          <ha-button-menu corner=\"BOTTOM_START\" multi>\n            <ha-icon-button\n              slot=\"trigger\"\n              .label=${this.hass.localize(\"ui.common.menu\")}\n              .path=${mdiDotsVertical}\n            ></ha-icon-button>\n            <ha-check-list-item\n              left\n              @request-selected=${this._toggleIgnored}\n              .selected=${this._showIgnored}\n            >\n              ${this.hass.localize(\"ui.panel.config.repairs.show_ignored\")}\n            </ha-check-list-item>\n            <li divider role=\"separator\"></li>\n            ${isComponentLoaded(this.hass, \"system_health\") ||\n            isComponentLoaded(this.hass, \"hassio\")\n              ? html`\n                  <mwc-list-item\n                    @request-selected=${this._showSystemInformationDialog}\n                  >\n                    ${this.hass.localize(\n                      \"ui.panel.config.repairs.system_information\"\n                    )}\n                  </mwc-list-item>\n                `\n              : \"\"}\n            <mwc-list-item\n              @request-selected=${this._showIntegrationStartupDialog}\n            >\n              ${this.hass.localize(\n                \"ui.panel.config.repairs.integration_startup_time\"\n              )}\n            </mwc-list-item>\n          </ha-button-menu>\n        </div>\n        <div class=\"content\">\n          <ha-card outlined>\n            <div class=\"card-content\">\n              ${this._repairsIssues.length\n                ? html`\n                    <ha-config-repairs\n                      .hass=${this.hass}\n                      .narrow=${this.narrow}\n                      .repairsIssues=${issues}\n                    ></ha-config-repairs>\n                  `\n                : html`\n                    <div class=\"no-repairs\">\n                      ${this.hass.localize(\n                        \"ui.panel.config.repairs.no_repairs\"\n                      )}\n                    </div>\n                  `}\n            </div>\n          </ha-card>\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  private _showSystemInformationDialog(\n    ev: CustomEvent<RequestSelectedDetail>\n  ): void {\n    if (!shouldHandleRequestSelectedEvent(ev)) {\n      return;\n    }\n\n    showSystemInformationDialog(this);\n  }\n\n  private _showIntegrationStartupDialog(\n    ev: CustomEvent<RequestSelectedDetail>\n  ): void {\n    if (!shouldHandleRequestSelectedEvent(ev)) {\n      return;\n    }\n\n    showIntegrationStartupDialog(this);\n  }\n\n  private _toggleIgnored(ev: CustomEvent<RequestSelectedDetail>): void {\n    if (ev.detail.source !== \"property\") {\n      return;\n    }\n\n    this._showIgnored = !this._showIgnored;\n  }\n\n  static styles = css`\n    .content {\n      padding: 28px 20px 0;\n      max-width: 1040px;\n      margin: 0 auto;\n    }\n\n    ha-card {\n      max-width: 600px;\n      margin: 0 auto;\n      height: 100%;\n      justify-content: space-between;\n      flex-direction: column;\n      display: flex;\n      margin-bottom: max(24px, env(safe-area-inset-bottom));\n    }\n\n    .card-content {\n      display: flex;\n      justify-content: space-between;\n      flex-direction: column;\n      padding: 0;\n    }\n\n    .no-repairs {\n      padding: 16px;\n    }\n    li[divider] {\n      border-bottom-color: var(--divider-color);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-repairs-dashboard\": HaConfigRepairsDashboard;\n  }\n}\n"],"names":[],"sourceRoot":""}