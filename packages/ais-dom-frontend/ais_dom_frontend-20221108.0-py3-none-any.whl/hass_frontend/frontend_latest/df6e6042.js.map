{"version":3,"file":"df6e6042.js","mappings":";;;;;;AAiDA;AAGA;;;;;AAKA;;;AAKA;;;;;;;;;AASA;AACA;;;AAhCA;;;;;;;;;;;;;AA3BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AAsEA;;AAtEA;AC2BA;;;AAKA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAlBA","sources":["webpack://home-assistant-frontend/./hassio/src/dialogs/backup/dialog-hassio-backup-upload.ts","webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/onboarding/onboarding-restore-backup.ts"],"sourcesContent":["import { mdiClose } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../src/common/dom/fire_event\";\nimport \"../../../../src/components/ha-header-bar\";\nimport \"../../../../src/components/ha-icon-button\";\nimport { HassDialog } from \"../../../../src/dialogs/make-dialog-manager\";\nimport { haStyleDialog } from \"../../../../src/resources/styles\";\nimport type { HomeAssistant } from \"../../../../src/types\";\nimport \"../../components/hassio-upload-backup\";\nimport { HassioBackupUploadDialogParams } from \"./show-dialog-backup-upload\";\n\n@customElement(\"dialog-hassio-backup-upload\")\nexport class DialogHassioBackupUpload\n  extends LitElement\n  implements HassDialog<HassioBackupUploadDialogParams>\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _dialogParams?: HassioBackupUploadDialogParams;\n\n  public async showDialog(\n    dialogParams: HassioBackupUploadDialogParams\n  ): Promise<void> {\n    this._dialogParams = dialogParams;\n    await this.updateComplete;\n  }\n\n  public closeDialog(): void {\n    if (this._dialogParams && !this._dialogParams.onboarding) {\n      if (this._dialogParams.reloadBackup) {\n        this._dialogParams.reloadBackup();\n      }\n    }\n    this._dialogParams = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._dialogParams) {\n      return html``;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        escapeKeyAction\n        hideActions\n        .heading=${this.hass?.localize(\n          \"ui.panel.page-onboarding.restore.upload_backup\"\n        ) || \"Upload backup\"}\n        @closed=${this.closeDialog}\n      >\n        <div slot=\"heading\">\n          <ha-header-bar>\n            <span slot=\"title\"\n              >${this.hass?.localize(\n                \"ui.panel.page-onboarding.restore.upload_backup\"\n              ) || \"Upload backup\"}</span\n            >\n            <ha-icon-button\n              .label=${this.hass?.localize(\"ui.common.close\") || \"Close\"}\n              .path=${mdiClose}\n              slot=\"actionItems\"\n              dialogAction=\"cancel\"\n              dialogInitialFocus\n            ></ha-icon-button>\n          </ha-header-bar>\n        </div>\n        <hassio-upload-backup\n          @backup-uploaded=${this._backupUploaded}\n          .hass=${this.hass}\n        ></hassio-upload-backup>\n      </ha-dialog>\n    `;\n  }\n\n  private _backupUploaded(ev) {\n    const backup = ev.detail.backup;\n    this._dialogParams?.showBackup(backup.slug);\n    this.closeDialog();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-header-bar {\n          --mdc-theme-on-primary: var(--primary-text-color);\n          --mdc-theme-primary: var(--mdc-theme-surface);\n          flex-shrink: 0;\n        }\n        /* overrule the ha-style-dialog max-height on small screens */\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          ha-header-bar {\n            --mdc-theme-primary: var(--app-header-background-color);\n            --mdc-theme-on-primary: var(--app-header-text-color, white);\n          }\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-hassio-backup-upload\": DialogHassioBackupUpload;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public raised = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        box-shadow: var(--ha-card-box-shadow, none);\n        box-sizing: border-box;\n        border-radius: var(--ha-card-border-radius, 12px);\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([raised]) {\n        border: none;\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { showBackupUploadDialog } from \"../../hassio/src/dialogs/backup/show-dialog-backup-upload\";\nimport { showHassioBackupDialog } from \"../../hassio/src/dialogs/backup/show-dialog-hassio-backup\";\nimport type { LocalizeFunc } from \"../common/translations/localize\";\nimport \"../components/ha-card\";\nimport \"../components/ha-ansi-to-html\";\nimport { fetchInstallationType } from \"../data/onboarding\";\nimport { makeDialogManager } from \"../dialogs/make-dialog-manager\";\nimport { ProvideHassLitMixin } from \"../mixins/provide-hass-lit-mixin\";\nimport { haStyle } from \"../resources/styles\";\nimport \"./onboarding-loading\";\n\ndeclare global {\n  interface HASSDomEvents {\n    restoring: undefined;\n  }\n}\n\n@customElement(\"onboarding-restore-backup\")\nclass OnboardingRestoreBackup extends ProvideHassLitMixin(LitElement) {\n  @property() public localize!: LocalizeFunc;\n\n  @property() public language!: string;\n\n  @property({ type: Boolean }) public restoring = false;\n\n  protected render(): TemplateResult {\n    return this.restoring\n      ? html`<ha-card\n          .header=${this.localize(\n            \"ui.panel.page-onboarding.restore.in_progress\"\n          )}\n        >\n          <onboarding-loading></onboarding-loading>\n        </ha-card>`\n      : html`\n          <button class=\"link\" @click=${this._uploadBackup}>\n            ${this.localize(\"ui.panel.page-onboarding.restore.description\")}\n          </button>\n        `;\n  }\n\n  private _uploadBackup(): void {\n    showBackupUploadDialog(this, {\n      showBackup: (slug: string) => this._showBackupDialog(slug),\n      onboarding: true,\n    });\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    makeDialogManager(this, this.shadowRoot!);\n    setInterval(() => this._checkRestoreStatus(), 1000);\n  }\n\n  private async _checkRestoreStatus(): Promise<void> {\n    if (this.restoring) {\n      try {\n        await fetchInstallationType();\n      } catch (err: any) {\n        if ((err as Error).message === \"unauthorized\") {\n          window.location.replace(\"/\");\n        }\n      }\n    }\n  }\n\n  private _showBackupDialog(slug: string): void {\n    showHassioBackupDialog(this, {\n      slug,\n      onboarding: true,\n      localize: this.localize,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .logentry {\n          text-align: center;\n        }\n        ha-card {\n          padding: 4px;\n          margin-top: 8px;\n        }\n        ha-ansi-to-html {\n          display: block;\n          line-height: 22px;\n          padding: 0 8px;\n          white-space: pre-wrap;\n        }\n\n        @media all and (min-width: 600px) {\n          ha-card {\n            width: 600px;\n            margin-left: -100px;\n          }\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"onboarding-restore-backup\": OnboardingRestoreBackup;\n  }\n}\n"],"names":[],"sourceRoot":""}