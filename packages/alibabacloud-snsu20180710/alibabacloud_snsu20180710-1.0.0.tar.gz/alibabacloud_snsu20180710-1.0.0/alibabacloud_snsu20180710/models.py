# -*- coding: utf-8 -*-
# This file is auto-generated, don't edit it. Thanks.
from Tea.model import TeaModel
from typing import List, Any, Dict


class AddCidrInVtuneInstanceRequestTagKeyValueModels(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class AddCidrInVtuneInstanceRequest(TeaModel):
    def __init__(
        self,
        ak_proxy: str = None,
        ali_uid: int = None,
        api_name: str = None,
        app_key: str = None,
        caller_bid: str = None,
        caller_bid_login_email: str = None,
        caller_security_transport: bool = None,
        caller_type: str = None,
        caller_uid: int = None,
        caller_uid_login_email: str = None,
        channel: str = None,
        cidrs: List[str] = None,
        client_ip: str = None,
        enable: bool = None,
        from_type: int = None,
        mfa_present: bool = None,
        operator: str = None,
        owner_account: str = None,
        owner_id: int = None,
        owner_id_login_email: str = None,
        prod_code: str = None,
        proxy_caller_ip: str = None,
        proxy_caller_security_transport: bool = None,
        proxy_id: str = None,
        proxy_trust_transport_info: bool = None,
        request_content: str = None,
        request_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        security_token: str = None,
        sms_resource_owner_id: int = None,
        tag_key_1: str = None,
        tag_key_2: str = None,
        tag_key_3: str = None,
        tag_key_4: str = None,
        tag_key_5: str = None,
        tag_key_value_models: List[AddCidrInVtuneInstanceRequestTagKeyValueModels] = None,
        tag_value_1: str = None,
        tag_value_2: str = None,
        tag_value_3: str = None,
        tag_value_4: str = None,
        tag_value_5: str = None,
        token: str = None,
        version: str = None,
        vtune_id: str = None,
    ):
        self.ak_proxy = ak_proxy
        self.ali_uid = ali_uid
        self.api_name = api_name
        self.app_key = app_key
        self.caller_bid = caller_bid
        self.caller_bid_login_email = caller_bid_login_email
        self.caller_security_transport = caller_security_transport
        self.caller_type = caller_type
        self.caller_uid = caller_uid
        self.caller_uid_login_email = caller_uid_login_email
        self.channel = channel
        self.cidrs = cidrs
        self.client_ip = client_ip
        self.enable = enable
        self.from_type = from_type
        self.mfa_present = mfa_present
        self.operator = operator
        self.owner_account = owner_account
        self.owner_id = owner_id
        self.owner_id_login_email = owner_id_login_email
        self.prod_code = prod_code
        self.proxy_caller_ip = proxy_caller_ip
        self.proxy_caller_security_transport = proxy_caller_security_transport
        self.proxy_id = proxy_id
        self.proxy_trust_transport_info = proxy_trust_transport_info
        self.request_content = request_content
        self.request_id = request_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.security_token = security_token
        self.sms_resource_owner_id = sms_resource_owner_id
        self.tag_key_1 = tag_key_1
        self.tag_key_2 = tag_key_2
        self.tag_key_3 = tag_key_3
        self.tag_key_4 = tag_key_4
        self.tag_key_5 = tag_key_5
        self.tag_key_value_models = tag_key_value_models
        self.tag_value_1 = tag_value_1
        self.tag_value_2 = tag_value_2
        self.tag_value_3 = tag_value_3
        self.tag_value_4 = tag_value_4
        self.tag_value_5 = tag_value_5
        self.token = token
        self.version = version
        self.vtune_id = vtune_id

    def validate(self):
        if self.tag_key_value_models:
            for k in self.tag_key_value_models:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ak_proxy is not None:
            result['AkProxy'] = self.ak_proxy
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.caller_bid is not None:
            result['CallerBid'] = self.caller_bid
        if self.caller_bid_login_email is not None:
            result['CallerBidLoginEmail'] = self.caller_bid_login_email
        if self.caller_security_transport is not None:
            result['CallerSecurityTransport'] = self.caller_security_transport
        if self.caller_type is not None:
            result['CallerType'] = self.caller_type
        if self.caller_uid is not None:
            result['CallerUid'] = self.caller_uid
        if self.caller_uid_login_email is not None:
            result['CallerUidLoginEmail'] = self.caller_uid_login_email
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.cidrs is not None:
            result['Cidrs'] = self.cidrs
        if self.client_ip is not None:
            result['ClientIP'] = self.client_ip
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.from_type is not None:
            result['FromType'] = self.from_type
        if self.mfa_present is not None:
            result['MfaPresent'] = self.mfa_present
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.owner_account is not None:
            result['OwnerAccount'] = self.owner_account
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.owner_id_login_email is not None:
            result['OwnerIdLoginEmail'] = self.owner_id_login_email
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.proxy_caller_ip is not None:
            result['ProxyCallerIp'] = self.proxy_caller_ip
        if self.proxy_caller_security_transport is not None:
            result['ProxyCallerSecurityTransport'] = self.proxy_caller_security_transport
        if self.proxy_id is not None:
            result['ProxyId'] = self.proxy_id
        if self.proxy_trust_transport_info is not None:
            result['ProxyTrustTransportInfo'] = self.proxy_trust_transport_info
        if self.request_content is not None:
            result['RequestContent'] = self.request_content
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        if self.sms_resource_owner_id is not None:
            result['SmsResourceOwnerId'] = self.sms_resource_owner_id
        if self.tag_key_1 is not None:
            result['TagKey1'] = self.tag_key_1
        if self.tag_key_2 is not None:
            result['TagKey2'] = self.tag_key_2
        if self.tag_key_3 is not None:
            result['TagKey3'] = self.tag_key_3
        if self.tag_key_4 is not None:
            result['TagKey4'] = self.tag_key_4
        if self.tag_key_5 is not None:
            result['TagKey5'] = self.tag_key_5
        result['TagKeyValueModels'] = []
        if self.tag_key_value_models is not None:
            for k in self.tag_key_value_models:
                result['TagKeyValueModels'].append(k.to_map() if k else None)
        if self.tag_value_1 is not None:
            result['TagValue1'] = self.tag_value_1
        if self.tag_value_2 is not None:
            result['TagValue2'] = self.tag_value_2
        if self.tag_value_3 is not None:
            result['TagValue3'] = self.tag_value_3
        if self.tag_value_4 is not None:
            result['TagValue4'] = self.tag_value_4
        if self.tag_value_5 is not None:
            result['TagValue5'] = self.tag_value_5
        if self.token is not None:
            result['Token'] = self.token
        if self.version is not None:
            result['Version'] = self.version
        if self.vtune_id is not None:
            result['VtuneId'] = self.vtune_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AkProxy') is not None:
            self.ak_proxy = m.get('AkProxy')
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('CallerBid') is not None:
            self.caller_bid = m.get('CallerBid')
        if m.get('CallerBidLoginEmail') is not None:
            self.caller_bid_login_email = m.get('CallerBidLoginEmail')
        if m.get('CallerSecurityTransport') is not None:
            self.caller_security_transport = m.get('CallerSecurityTransport')
        if m.get('CallerType') is not None:
            self.caller_type = m.get('CallerType')
        if m.get('CallerUid') is not None:
            self.caller_uid = m.get('CallerUid')
        if m.get('CallerUidLoginEmail') is not None:
            self.caller_uid_login_email = m.get('CallerUidLoginEmail')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('Cidrs') is not None:
            self.cidrs = m.get('Cidrs')
        if m.get('ClientIP') is not None:
            self.client_ip = m.get('ClientIP')
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('FromType') is not None:
            self.from_type = m.get('FromType')
        if m.get('MfaPresent') is not None:
            self.mfa_present = m.get('MfaPresent')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('OwnerAccount') is not None:
            self.owner_account = m.get('OwnerAccount')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('OwnerIdLoginEmail') is not None:
            self.owner_id_login_email = m.get('OwnerIdLoginEmail')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProxyCallerIp') is not None:
            self.proxy_caller_ip = m.get('ProxyCallerIp')
        if m.get('ProxyCallerSecurityTransport') is not None:
            self.proxy_caller_security_transport = m.get('ProxyCallerSecurityTransport')
        if m.get('ProxyId') is not None:
            self.proxy_id = m.get('ProxyId')
        if m.get('ProxyTrustTransportInfo') is not None:
            self.proxy_trust_transport_info = m.get('ProxyTrustTransportInfo')
        if m.get('RequestContent') is not None:
            self.request_content = m.get('RequestContent')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        if m.get('SmsResourceOwnerId') is not None:
            self.sms_resource_owner_id = m.get('SmsResourceOwnerId')
        if m.get('TagKey1') is not None:
            self.tag_key_1 = m.get('TagKey1')
        if m.get('TagKey2') is not None:
            self.tag_key_2 = m.get('TagKey2')
        if m.get('TagKey3') is not None:
            self.tag_key_3 = m.get('TagKey3')
        if m.get('TagKey4') is not None:
            self.tag_key_4 = m.get('TagKey4')
        if m.get('TagKey5') is not None:
            self.tag_key_5 = m.get('TagKey5')
        self.tag_key_value_models = []
        if m.get('TagKeyValueModels') is not None:
            for k in m.get('TagKeyValueModels'):
                temp_model = AddCidrInVtuneInstanceRequestTagKeyValueModels()
                self.tag_key_value_models.append(temp_model.from_map(k))
        if m.get('TagValue1') is not None:
            self.tag_value_1 = m.get('TagValue1')
        if m.get('TagValue2') is not None:
            self.tag_value_2 = m.get('TagValue2')
        if m.get('TagValue3') is not None:
            self.tag_value_3 = m.get('TagValue3')
        if m.get('TagValue4') is not None:
            self.tag_value_4 = m.get('TagValue4')
        if m.get('TagValue5') is not None:
            self.tag_value_5 = m.get('TagValue5')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        if m.get('VtuneId') is not None:
            self.vtune_id = m.get('VtuneId')
        return self


class AddCidrInVtuneInstanceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        content: Any = None,
        desc: str = None,
        description: str = None,
        request_id: str = None,
        ret_code: int = None,
        success: bool = None,
    ):
        self.code = code
        self.content = content
        self.desc = desc
        self.description = description
        self.request_id = request_id
        self.ret_code = ret_code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.content is not None:
            result['Content'] = self.content
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.description is not None:
            result['Description'] = self.description
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.ret_code is not None:
            result['RetCode'] = self.ret_code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RetCode') is not None:
            self.ret_code = m.get('RetCode')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AddCidrInVtuneInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AddCidrInVtuneInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddCidrInVtuneInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddEPNInstanceRequestTagKeyValueModels(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class AddEPNInstanceRequest(TeaModel):
    def __init__(
        self,
        accelerate: bool = None,
        ak_proxy: str = None,
        ali_uid: int = None,
        api_name: str = None,
        app_key: str = None,
        caller_bid: str = None,
        caller_bid_login_email: str = None,
        caller_security_transport: bool = None,
        caller_type: str = None,
        caller_uid: int = None,
        caller_uid_login_email: str = None,
        channel: str = None,
        client_ip: str = None,
        dscp: int = None,
        enable: bool = None,
        end_time: str = None,
        epn_name: str = None,
        from_type: int = None,
        limit_rx: int = None,
        limit_tx: int = None,
        mfa_present: bool = None,
        operator: str = None,
        owner_account: str = None,
        owner_id: int = None,
        owner_id_login_email: str = None,
        prod_code: str = None,
        proxy_caller_ip: str = None,
        proxy_caller_security_transport: bool = None,
        proxy_id: str = None,
        proxy_trust_transport_info: bool = None,
        request_content: str = None,
        request_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        security: bool = None,
        security_token: str = None,
        sms_resource_owner_id: int = None,
        start_time: str = None,
        tag_key_1: str = None,
        tag_key_2: str = None,
        tag_key_3: str = None,
        tag_key_4: str = None,
        tag_key_5: str = None,
        tag_key_value_models: List[AddEPNInstanceRequestTagKeyValueModels] = None,
        tag_value_1: str = None,
        tag_value_2: str = None,
        tag_value_3: str = None,
        tag_value_4: str = None,
        tag_value_5: str = None,
        token: str = None,
        version: str = None,
    ):
        self.accelerate = accelerate
        self.ak_proxy = ak_proxy
        self.ali_uid = ali_uid
        self.api_name = api_name
        self.app_key = app_key
        self.caller_bid = caller_bid
        self.caller_bid_login_email = caller_bid_login_email
        self.caller_security_transport = caller_security_transport
        self.caller_type = caller_type
        self.caller_uid = caller_uid
        self.caller_uid_login_email = caller_uid_login_email
        self.channel = channel
        self.client_ip = client_ip
        self.dscp = dscp
        self.enable = enable
        self.end_time = end_time
        self.epn_name = epn_name
        self.from_type = from_type
        self.limit_rx = limit_rx
        self.limit_tx = limit_tx
        self.mfa_present = mfa_present
        self.operator = operator
        self.owner_account = owner_account
        self.owner_id = owner_id
        self.owner_id_login_email = owner_id_login_email
        self.prod_code = prod_code
        self.proxy_caller_ip = proxy_caller_ip
        self.proxy_caller_security_transport = proxy_caller_security_transport
        self.proxy_id = proxy_id
        self.proxy_trust_transport_info = proxy_trust_transport_info
        self.request_content = request_content
        self.request_id = request_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.security = security
        self.security_token = security_token
        self.sms_resource_owner_id = sms_resource_owner_id
        self.start_time = start_time
        self.tag_key_1 = tag_key_1
        self.tag_key_2 = tag_key_2
        self.tag_key_3 = tag_key_3
        self.tag_key_4 = tag_key_4
        self.tag_key_5 = tag_key_5
        self.tag_key_value_models = tag_key_value_models
        self.tag_value_1 = tag_value_1
        self.tag_value_2 = tag_value_2
        self.tag_value_3 = tag_value_3
        self.tag_value_4 = tag_value_4
        self.tag_value_5 = tag_value_5
        self.token = token
        self.version = version

    def validate(self):
        if self.tag_key_value_models:
            for k in self.tag_key_value_models:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.accelerate is not None:
            result['Accelerate'] = self.accelerate
        if self.ak_proxy is not None:
            result['AkProxy'] = self.ak_proxy
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.caller_bid is not None:
            result['CallerBid'] = self.caller_bid
        if self.caller_bid_login_email is not None:
            result['CallerBidLoginEmail'] = self.caller_bid_login_email
        if self.caller_security_transport is not None:
            result['CallerSecurityTransport'] = self.caller_security_transport
        if self.caller_type is not None:
            result['CallerType'] = self.caller_type
        if self.caller_uid is not None:
            result['CallerUid'] = self.caller_uid
        if self.caller_uid_login_email is not None:
            result['CallerUidLoginEmail'] = self.caller_uid_login_email
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.client_ip is not None:
            result['ClientIP'] = self.client_ip
        if self.dscp is not None:
            result['Dscp'] = self.dscp
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.epn_name is not None:
            result['EpnName'] = self.epn_name
        if self.from_type is not None:
            result['FromType'] = self.from_type
        if self.limit_rx is not None:
            result['LimitRx'] = self.limit_rx
        if self.limit_tx is not None:
            result['LimitTx'] = self.limit_tx
        if self.mfa_present is not None:
            result['MfaPresent'] = self.mfa_present
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.owner_account is not None:
            result['OwnerAccount'] = self.owner_account
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.owner_id_login_email is not None:
            result['OwnerIdLoginEmail'] = self.owner_id_login_email
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.proxy_caller_ip is not None:
            result['ProxyCallerIp'] = self.proxy_caller_ip
        if self.proxy_caller_security_transport is not None:
            result['ProxyCallerSecurityTransport'] = self.proxy_caller_security_transport
        if self.proxy_id is not None:
            result['ProxyId'] = self.proxy_id
        if self.proxy_trust_transport_info is not None:
            result['ProxyTrustTransportInfo'] = self.proxy_trust_transport_info
        if self.request_content is not None:
            result['RequestContent'] = self.request_content
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.security is not None:
            result['Security'] = self.security
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        if self.sms_resource_owner_id is not None:
            result['SmsResourceOwnerId'] = self.sms_resource_owner_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.tag_key_1 is not None:
            result['TagKey1'] = self.tag_key_1
        if self.tag_key_2 is not None:
            result['TagKey2'] = self.tag_key_2
        if self.tag_key_3 is not None:
            result['TagKey3'] = self.tag_key_3
        if self.tag_key_4 is not None:
            result['TagKey4'] = self.tag_key_4
        if self.tag_key_5 is not None:
            result['TagKey5'] = self.tag_key_5
        result['TagKeyValueModels'] = []
        if self.tag_key_value_models is not None:
            for k in self.tag_key_value_models:
                result['TagKeyValueModels'].append(k.to_map() if k else None)
        if self.tag_value_1 is not None:
            result['TagValue1'] = self.tag_value_1
        if self.tag_value_2 is not None:
            result['TagValue2'] = self.tag_value_2
        if self.tag_value_3 is not None:
            result['TagValue3'] = self.tag_value_3
        if self.tag_value_4 is not None:
            result['TagValue4'] = self.tag_value_4
        if self.tag_value_5 is not None:
            result['TagValue5'] = self.tag_value_5
        if self.token is not None:
            result['Token'] = self.token
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Accelerate') is not None:
            self.accelerate = m.get('Accelerate')
        if m.get('AkProxy') is not None:
            self.ak_proxy = m.get('AkProxy')
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('CallerBid') is not None:
            self.caller_bid = m.get('CallerBid')
        if m.get('CallerBidLoginEmail') is not None:
            self.caller_bid_login_email = m.get('CallerBidLoginEmail')
        if m.get('CallerSecurityTransport') is not None:
            self.caller_security_transport = m.get('CallerSecurityTransport')
        if m.get('CallerType') is not None:
            self.caller_type = m.get('CallerType')
        if m.get('CallerUid') is not None:
            self.caller_uid = m.get('CallerUid')
        if m.get('CallerUidLoginEmail') is not None:
            self.caller_uid_login_email = m.get('CallerUidLoginEmail')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ClientIP') is not None:
            self.client_ip = m.get('ClientIP')
        if m.get('Dscp') is not None:
            self.dscp = m.get('Dscp')
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('EpnName') is not None:
            self.epn_name = m.get('EpnName')
        if m.get('FromType') is not None:
            self.from_type = m.get('FromType')
        if m.get('LimitRx') is not None:
            self.limit_rx = m.get('LimitRx')
        if m.get('LimitTx') is not None:
            self.limit_tx = m.get('LimitTx')
        if m.get('MfaPresent') is not None:
            self.mfa_present = m.get('MfaPresent')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('OwnerAccount') is not None:
            self.owner_account = m.get('OwnerAccount')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('OwnerIdLoginEmail') is not None:
            self.owner_id_login_email = m.get('OwnerIdLoginEmail')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProxyCallerIp') is not None:
            self.proxy_caller_ip = m.get('ProxyCallerIp')
        if m.get('ProxyCallerSecurityTransport') is not None:
            self.proxy_caller_security_transport = m.get('ProxyCallerSecurityTransport')
        if m.get('ProxyId') is not None:
            self.proxy_id = m.get('ProxyId')
        if m.get('ProxyTrustTransportInfo') is not None:
            self.proxy_trust_transport_info = m.get('ProxyTrustTransportInfo')
        if m.get('RequestContent') is not None:
            self.request_content = m.get('RequestContent')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('Security') is not None:
            self.security = m.get('Security')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        if m.get('SmsResourceOwnerId') is not None:
            self.sms_resource_owner_id = m.get('SmsResourceOwnerId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TagKey1') is not None:
            self.tag_key_1 = m.get('TagKey1')
        if m.get('TagKey2') is not None:
            self.tag_key_2 = m.get('TagKey2')
        if m.get('TagKey3') is not None:
            self.tag_key_3 = m.get('TagKey3')
        if m.get('TagKey4') is not None:
            self.tag_key_4 = m.get('TagKey4')
        if m.get('TagKey5') is not None:
            self.tag_key_5 = m.get('TagKey5')
        self.tag_key_value_models = []
        if m.get('TagKeyValueModels') is not None:
            for k in m.get('TagKeyValueModels'):
                temp_model = AddEPNInstanceRequestTagKeyValueModels()
                self.tag_key_value_models.append(temp_model.from_map(k))
        if m.get('TagValue1') is not None:
            self.tag_value_1 = m.get('TagValue1')
        if m.get('TagValue2') is not None:
            self.tag_value_2 = m.get('TagValue2')
        if m.get('TagValue3') is not None:
            self.tag_value_3 = m.get('TagValue3')
        if m.get('TagValue4') is not None:
            self.tag_value_4 = m.get('TagValue4')
        if m.get('TagValue5') is not None:
            self.tag_value_5 = m.get('TagValue5')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class AddEPNInstanceResponseBodyContent(TeaModel):
    def __init__(
        self,
        epn_id: str = None,
    ):
        self.epn_id = epn_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.epn_id is not None:
            result['EpnId'] = self.epn_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EpnId') is not None:
            self.epn_id = m.get('EpnId')
        return self


class AddEPNInstanceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        content: AddEPNInstanceResponseBodyContent = None,
        desc: str = None,
        description: str = None,
        request_id: str = None,
        ret_code: int = None,
        success: bool = None,
    ):
        self.code = code
        self.content = content
        self.desc = desc
        self.description = description
        self.request_id = request_id
        self.ret_code = ret_code
        self.success = success

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.content is not None:
            result['Content'] = self.content.to_map()
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.description is not None:
            result['Description'] = self.description
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.ret_code is not None:
            result['RetCode'] = self.ret_code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Content') is not None:
            temp_model = AddEPNInstanceResponseBodyContent()
            self.content = temp_model.from_map(m['Content'])
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RetCode') is not None:
            self.ret_code = m.get('RetCode')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AddEPNInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AddEPNInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddEPNInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddEvgwInEpnRequestEvgwRegion(TeaModel):
    def __init__(
        self,
        evgw_id: str = None,
        region_id: str = None,
    ):
        self.evgw_id = evgw_id
        self.region_id = region_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.evgw_id is not None:
            result['EvgwId'] = self.evgw_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EvgwId') is not None:
            self.evgw_id = m.get('EvgwId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class AddEvgwInEpnRequestTagKeyValueModels(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class AddEvgwInEpnRequest(TeaModel):
    def __init__(
        self,
        ak_proxy: str = None,
        ali_uid: int = None,
        api_name: str = None,
        app_key: str = None,
        caller_bid: str = None,
        caller_bid_login_email: str = None,
        caller_security_transport: bool = None,
        caller_type: str = None,
        caller_uid: int = None,
        caller_uid_login_email: str = None,
        channel: str = None,
        client_ip: str = None,
        enable: bool = None,
        epn_id: str = None,
        evgw_region: List[AddEvgwInEpnRequestEvgwRegion] = None,
        from_type: int = None,
        mfa_present: bool = None,
        operator: str = None,
        owner_account: str = None,
        owner_id: int = None,
        owner_id_login_email: str = None,
        prod_code: str = None,
        proxy_caller_ip: str = None,
        proxy_caller_security_transport: bool = None,
        proxy_id: str = None,
        proxy_trust_transport_info: bool = None,
        request_content: str = None,
        request_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        security_token: str = None,
        sms_resource_owner_id: int = None,
        tag_key_1: str = None,
        tag_key_2: str = None,
        tag_key_3: str = None,
        tag_key_4: str = None,
        tag_key_5: str = None,
        tag_key_value_models: List[AddEvgwInEpnRequestTagKeyValueModels] = None,
        tag_value_1: str = None,
        tag_value_2: str = None,
        tag_value_3: str = None,
        tag_value_4: str = None,
        tag_value_5: str = None,
        token: str = None,
        version: str = None,
    ):
        self.ak_proxy = ak_proxy
        self.ali_uid = ali_uid
        self.api_name = api_name
        self.app_key = app_key
        self.caller_bid = caller_bid
        self.caller_bid_login_email = caller_bid_login_email
        self.caller_security_transport = caller_security_transport
        self.caller_type = caller_type
        self.caller_uid = caller_uid
        self.caller_uid_login_email = caller_uid_login_email
        self.channel = channel
        self.client_ip = client_ip
        self.enable = enable
        self.epn_id = epn_id
        self.evgw_region = evgw_region
        self.from_type = from_type
        self.mfa_present = mfa_present
        self.operator = operator
        self.owner_account = owner_account
        self.owner_id = owner_id
        self.owner_id_login_email = owner_id_login_email
        self.prod_code = prod_code
        self.proxy_caller_ip = proxy_caller_ip
        self.proxy_caller_security_transport = proxy_caller_security_transport
        self.proxy_id = proxy_id
        self.proxy_trust_transport_info = proxy_trust_transport_info
        self.request_content = request_content
        self.request_id = request_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.security_token = security_token
        self.sms_resource_owner_id = sms_resource_owner_id
        self.tag_key_1 = tag_key_1
        self.tag_key_2 = tag_key_2
        self.tag_key_3 = tag_key_3
        self.tag_key_4 = tag_key_4
        self.tag_key_5 = tag_key_5
        self.tag_key_value_models = tag_key_value_models
        self.tag_value_1 = tag_value_1
        self.tag_value_2 = tag_value_2
        self.tag_value_3 = tag_value_3
        self.tag_value_4 = tag_value_4
        self.tag_value_5 = tag_value_5
        self.token = token
        self.version = version

    def validate(self):
        if self.evgw_region:
            for k in self.evgw_region:
                if k:
                    k.validate()
        if self.tag_key_value_models:
            for k in self.tag_key_value_models:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ak_proxy is not None:
            result['AkProxy'] = self.ak_proxy
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.caller_bid is not None:
            result['CallerBid'] = self.caller_bid
        if self.caller_bid_login_email is not None:
            result['CallerBidLoginEmail'] = self.caller_bid_login_email
        if self.caller_security_transport is not None:
            result['CallerSecurityTransport'] = self.caller_security_transport
        if self.caller_type is not None:
            result['CallerType'] = self.caller_type
        if self.caller_uid is not None:
            result['CallerUid'] = self.caller_uid
        if self.caller_uid_login_email is not None:
            result['CallerUidLoginEmail'] = self.caller_uid_login_email
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.client_ip is not None:
            result['ClientIP'] = self.client_ip
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.epn_id is not None:
            result['EpnId'] = self.epn_id
        result['EvgwRegion'] = []
        if self.evgw_region is not None:
            for k in self.evgw_region:
                result['EvgwRegion'].append(k.to_map() if k else None)
        if self.from_type is not None:
            result['FromType'] = self.from_type
        if self.mfa_present is not None:
            result['MfaPresent'] = self.mfa_present
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.owner_account is not None:
            result['OwnerAccount'] = self.owner_account
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.owner_id_login_email is not None:
            result['OwnerIdLoginEmail'] = self.owner_id_login_email
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.proxy_caller_ip is not None:
            result['ProxyCallerIp'] = self.proxy_caller_ip
        if self.proxy_caller_security_transport is not None:
            result['ProxyCallerSecurityTransport'] = self.proxy_caller_security_transport
        if self.proxy_id is not None:
            result['ProxyId'] = self.proxy_id
        if self.proxy_trust_transport_info is not None:
            result['ProxyTrustTransportInfo'] = self.proxy_trust_transport_info
        if self.request_content is not None:
            result['RequestContent'] = self.request_content
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        if self.sms_resource_owner_id is not None:
            result['SmsResourceOwnerId'] = self.sms_resource_owner_id
        if self.tag_key_1 is not None:
            result['TagKey1'] = self.tag_key_1
        if self.tag_key_2 is not None:
            result['TagKey2'] = self.tag_key_2
        if self.tag_key_3 is not None:
            result['TagKey3'] = self.tag_key_3
        if self.tag_key_4 is not None:
            result['TagKey4'] = self.tag_key_4
        if self.tag_key_5 is not None:
            result['TagKey5'] = self.tag_key_5
        result['TagKeyValueModels'] = []
        if self.tag_key_value_models is not None:
            for k in self.tag_key_value_models:
                result['TagKeyValueModels'].append(k.to_map() if k else None)
        if self.tag_value_1 is not None:
            result['TagValue1'] = self.tag_value_1
        if self.tag_value_2 is not None:
            result['TagValue2'] = self.tag_value_2
        if self.tag_value_3 is not None:
            result['TagValue3'] = self.tag_value_3
        if self.tag_value_4 is not None:
            result['TagValue4'] = self.tag_value_4
        if self.tag_value_5 is not None:
            result['TagValue5'] = self.tag_value_5
        if self.token is not None:
            result['Token'] = self.token
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AkProxy') is not None:
            self.ak_proxy = m.get('AkProxy')
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('CallerBid') is not None:
            self.caller_bid = m.get('CallerBid')
        if m.get('CallerBidLoginEmail') is not None:
            self.caller_bid_login_email = m.get('CallerBidLoginEmail')
        if m.get('CallerSecurityTransport') is not None:
            self.caller_security_transport = m.get('CallerSecurityTransport')
        if m.get('CallerType') is not None:
            self.caller_type = m.get('CallerType')
        if m.get('CallerUid') is not None:
            self.caller_uid = m.get('CallerUid')
        if m.get('CallerUidLoginEmail') is not None:
            self.caller_uid_login_email = m.get('CallerUidLoginEmail')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ClientIP') is not None:
            self.client_ip = m.get('ClientIP')
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('EpnId') is not None:
            self.epn_id = m.get('EpnId')
        self.evgw_region = []
        if m.get('EvgwRegion') is not None:
            for k in m.get('EvgwRegion'):
                temp_model = AddEvgwInEpnRequestEvgwRegion()
                self.evgw_region.append(temp_model.from_map(k))
        if m.get('FromType') is not None:
            self.from_type = m.get('FromType')
        if m.get('MfaPresent') is not None:
            self.mfa_present = m.get('MfaPresent')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('OwnerAccount') is not None:
            self.owner_account = m.get('OwnerAccount')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('OwnerIdLoginEmail') is not None:
            self.owner_id_login_email = m.get('OwnerIdLoginEmail')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProxyCallerIp') is not None:
            self.proxy_caller_ip = m.get('ProxyCallerIp')
        if m.get('ProxyCallerSecurityTransport') is not None:
            self.proxy_caller_security_transport = m.get('ProxyCallerSecurityTransport')
        if m.get('ProxyId') is not None:
            self.proxy_id = m.get('ProxyId')
        if m.get('ProxyTrustTransportInfo') is not None:
            self.proxy_trust_transport_info = m.get('ProxyTrustTransportInfo')
        if m.get('RequestContent') is not None:
            self.request_content = m.get('RequestContent')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        if m.get('SmsResourceOwnerId') is not None:
            self.sms_resource_owner_id = m.get('SmsResourceOwnerId')
        if m.get('TagKey1') is not None:
            self.tag_key_1 = m.get('TagKey1')
        if m.get('TagKey2') is not None:
            self.tag_key_2 = m.get('TagKey2')
        if m.get('TagKey3') is not None:
            self.tag_key_3 = m.get('TagKey3')
        if m.get('TagKey4') is not None:
            self.tag_key_4 = m.get('TagKey4')
        if m.get('TagKey5') is not None:
            self.tag_key_5 = m.get('TagKey5')
        self.tag_key_value_models = []
        if m.get('TagKeyValueModels') is not None:
            for k in m.get('TagKeyValueModels'):
                temp_model = AddEvgwInEpnRequestTagKeyValueModels()
                self.tag_key_value_models.append(temp_model.from_map(k))
        if m.get('TagValue1') is not None:
            self.tag_value_1 = m.get('TagValue1')
        if m.get('TagValue2') is not None:
            self.tag_value_2 = m.get('TagValue2')
        if m.get('TagValue3') is not None:
            self.tag_value_3 = m.get('TagValue3')
        if m.get('TagValue4') is not None:
            self.tag_value_4 = m.get('TagValue4')
        if m.get('TagValue5') is not None:
            self.tag_value_5 = m.get('TagValue5')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class AddEvgwInEpnResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        content: Any = None,
        desc: str = None,
        description: str = None,
        request_id: str = None,
        ret_code: int = None,
        success: bool = None,
    ):
        self.code = code
        self.content = content
        self.desc = desc
        self.description = description
        self.request_id = request_id
        self.ret_code = ret_code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.content is not None:
            result['Content'] = self.content
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.description is not None:
            result['Description'] = self.description
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.ret_code is not None:
            result['RetCode'] = self.ret_code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RetCode') is not None:
            self.ret_code = m.get('RetCode')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AddEvgwInEpnResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AddEvgwInEpnResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddEvgwInEpnResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddEvgwInstanceRequestTagKeyValueModels(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class AddEvgwInstanceRequest(TeaModel):
    def __init__(
        self,
        ak_proxy: str = None,
        ali_uid: int = None,
        api_name: str = None,
        app_key: str = None,
        caller_bid: str = None,
        caller_bid_login_email: str = None,
        caller_security_transport: bool = None,
        caller_type: str = None,
        caller_uid: int = None,
        caller_uid_login_email: str = None,
        channel: str = None,
        client_ip: str = None,
        enable: bool = None,
        evgw_name: str = None,
        from_type: int = None,
        ipsec_psk: str = None,
        mfa_present: bool = None,
        operator: str = None,
        owner_account: str = None,
        owner_id: int = None,
        owner_id_login_email: str = None,
        prod_code: str = None,
        proxy_caller_ip: str = None,
        proxy_caller_security_transport: bool = None,
        proxy_id: str = None,
        proxy_trust_transport_info: bool = None,
        region_id: str = None,
        request_content: str = None,
        request_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        security_token: str = None,
        sms_resource_owner_id: int = None,
        tag_key_1: str = None,
        tag_key_2: str = None,
        tag_key_3: str = None,
        tag_key_4: str = None,
        tag_key_5: str = None,
        tag_key_value_models: List[AddEvgwInstanceRequestTagKeyValueModels] = None,
        tag_value_1: str = None,
        tag_value_2: str = None,
        tag_value_3: str = None,
        tag_value_4: str = None,
        tag_value_5: str = None,
        token: str = None,
        version: str = None,
    ):
        self.ak_proxy = ak_proxy
        self.ali_uid = ali_uid
        self.api_name = api_name
        self.app_key = app_key
        self.caller_bid = caller_bid
        self.caller_bid_login_email = caller_bid_login_email
        self.caller_security_transport = caller_security_transport
        self.caller_type = caller_type
        self.caller_uid = caller_uid
        self.caller_uid_login_email = caller_uid_login_email
        self.channel = channel
        self.client_ip = client_ip
        self.enable = enable
        self.evgw_name = evgw_name
        self.from_type = from_type
        self.ipsec_psk = ipsec_psk
        self.mfa_present = mfa_present
        self.operator = operator
        self.owner_account = owner_account
        self.owner_id = owner_id
        self.owner_id_login_email = owner_id_login_email
        self.prod_code = prod_code
        self.proxy_caller_ip = proxy_caller_ip
        self.proxy_caller_security_transport = proxy_caller_security_transport
        self.proxy_id = proxy_id
        self.proxy_trust_transport_info = proxy_trust_transport_info
        self.region_id = region_id
        self.request_content = request_content
        self.request_id = request_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.security_token = security_token
        self.sms_resource_owner_id = sms_resource_owner_id
        self.tag_key_1 = tag_key_1
        self.tag_key_2 = tag_key_2
        self.tag_key_3 = tag_key_3
        self.tag_key_4 = tag_key_4
        self.tag_key_5 = tag_key_5
        self.tag_key_value_models = tag_key_value_models
        self.tag_value_1 = tag_value_1
        self.tag_value_2 = tag_value_2
        self.tag_value_3 = tag_value_3
        self.tag_value_4 = tag_value_4
        self.tag_value_5 = tag_value_5
        self.token = token
        self.version = version

    def validate(self):
        if self.tag_key_value_models:
            for k in self.tag_key_value_models:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ak_proxy is not None:
            result['AkProxy'] = self.ak_proxy
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.caller_bid is not None:
            result['CallerBid'] = self.caller_bid
        if self.caller_bid_login_email is not None:
            result['CallerBidLoginEmail'] = self.caller_bid_login_email
        if self.caller_security_transport is not None:
            result['CallerSecurityTransport'] = self.caller_security_transport
        if self.caller_type is not None:
            result['CallerType'] = self.caller_type
        if self.caller_uid is not None:
            result['CallerUid'] = self.caller_uid
        if self.caller_uid_login_email is not None:
            result['CallerUidLoginEmail'] = self.caller_uid_login_email
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.client_ip is not None:
            result['ClientIP'] = self.client_ip
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.evgw_name is not None:
            result['EvgwName'] = self.evgw_name
        if self.from_type is not None:
            result['FromType'] = self.from_type
        if self.ipsec_psk is not None:
            result['IpsecPsk'] = self.ipsec_psk
        if self.mfa_present is not None:
            result['MfaPresent'] = self.mfa_present
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.owner_account is not None:
            result['OwnerAccount'] = self.owner_account
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.owner_id_login_email is not None:
            result['OwnerIdLoginEmail'] = self.owner_id_login_email
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.proxy_caller_ip is not None:
            result['ProxyCallerIp'] = self.proxy_caller_ip
        if self.proxy_caller_security_transport is not None:
            result['ProxyCallerSecurityTransport'] = self.proxy_caller_security_transport
        if self.proxy_id is not None:
            result['ProxyId'] = self.proxy_id
        if self.proxy_trust_transport_info is not None:
            result['ProxyTrustTransportInfo'] = self.proxy_trust_transport_info
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.request_content is not None:
            result['RequestContent'] = self.request_content
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        if self.sms_resource_owner_id is not None:
            result['SmsResourceOwnerId'] = self.sms_resource_owner_id
        if self.tag_key_1 is not None:
            result['TagKey1'] = self.tag_key_1
        if self.tag_key_2 is not None:
            result['TagKey2'] = self.tag_key_2
        if self.tag_key_3 is not None:
            result['TagKey3'] = self.tag_key_3
        if self.tag_key_4 is not None:
            result['TagKey4'] = self.tag_key_4
        if self.tag_key_5 is not None:
            result['TagKey5'] = self.tag_key_5
        result['TagKeyValueModels'] = []
        if self.tag_key_value_models is not None:
            for k in self.tag_key_value_models:
                result['TagKeyValueModels'].append(k.to_map() if k else None)
        if self.tag_value_1 is not None:
            result['TagValue1'] = self.tag_value_1
        if self.tag_value_2 is not None:
            result['TagValue2'] = self.tag_value_2
        if self.tag_value_3 is not None:
            result['TagValue3'] = self.tag_value_3
        if self.tag_value_4 is not None:
            result['TagValue4'] = self.tag_value_4
        if self.tag_value_5 is not None:
            result['TagValue5'] = self.tag_value_5
        if self.token is not None:
            result['Token'] = self.token
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AkProxy') is not None:
            self.ak_proxy = m.get('AkProxy')
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('CallerBid') is not None:
            self.caller_bid = m.get('CallerBid')
        if m.get('CallerBidLoginEmail') is not None:
            self.caller_bid_login_email = m.get('CallerBidLoginEmail')
        if m.get('CallerSecurityTransport') is not None:
            self.caller_security_transport = m.get('CallerSecurityTransport')
        if m.get('CallerType') is not None:
            self.caller_type = m.get('CallerType')
        if m.get('CallerUid') is not None:
            self.caller_uid = m.get('CallerUid')
        if m.get('CallerUidLoginEmail') is not None:
            self.caller_uid_login_email = m.get('CallerUidLoginEmail')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ClientIP') is not None:
            self.client_ip = m.get('ClientIP')
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('EvgwName') is not None:
            self.evgw_name = m.get('EvgwName')
        if m.get('FromType') is not None:
            self.from_type = m.get('FromType')
        if m.get('IpsecPsk') is not None:
            self.ipsec_psk = m.get('IpsecPsk')
        if m.get('MfaPresent') is not None:
            self.mfa_present = m.get('MfaPresent')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('OwnerAccount') is not None:
            self.owner_account = m.get('OwnerAccount')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('OwnerIdLoginEmail') is not None:
            self.owner_id_login_email = m.get('OwnerIdLoginEmail')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProxyCallerIp') is not None:
            self.proxy_caller_ip = m.get('ProxyCallerIp')
        if m.get('ProxyCallerSecurityTransport') is not None:
            self.proxy_caller_security_transport = m.get('ProxyCallerSecurityTransport')
        if m.get('ProxyId') is not None:
            self.proxy_id = m.get('ProxyId')
        if m.get('ProxyTrustTransportInfo') is not None:
            self.proxy_trust_transport_info = m.get('ProxyTrustTransportInfo')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('RequestContent') is not None:
            self.request_content = m.get('RequestContent')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        if m.get('SmsResourceOwnerId') is not None:
            self.sms_resource_owner_id = m.get('SmsResourceOwnerId')
        if m.get('TagKey1') is not None:
            self.tag_key_1 = m.get('TagKey1')
        if m.get('TagKey2') is not None:
            self.tag_key_2 = m.get('TagKey2')
        if m.get('TagKey3') is not None:
            self.tag_key_3 = m.get('TagKey3')
        if m.get('TagKey4') is not None:
            self.tag_key_4 = m.get('TagKey4')
        if m.get('TagKey5') is not None:
            self.tag_key_5 = m.get('TagKey5')
        self.tag_key_value_models = []
        if m.get('TagKeyValueModels') is not None:
            for k in m.get('TagKeyValueModels'):
                temp_model = AddEvgwInstanceRequestTagKeyValueModels()
                self.tag_key_value_models.append(temp_model.from_map(k))
        if m.get('TagValue1') is not None:
            self.tag_value_1 = m.get('TagValue1')
        if m.get('TagValue2') is not None:
            self.tag_value_2 = m.get('TagValue2')
        if m.get('TagValue3') is not None:
            self.tag_value_3 = m.get('TagValue3')
        if m.get('TagValue4') is not None:
            self.tag_value_4 = m.get('TagValue4')
        if m.get('TagValue5') is not None:
            self.tag_value_5 = m.get('TagValue5')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class AddEvgwInstanceResponseBodyContent(TeaModel):
    def __init__(
        self,
        evgw_id: str = None,
    ):
        self.evgw_id = evgw_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.evgw_id is not None:
            result['EvgwId'] = self.evgw_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EvgwId') is not None:
            self.evgw_id = m.get('EvgwId')
        return self


class AddEvgwInstanceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        content: AddEvgwInstanceResponseBodyContent = None,
        desc: str = None,
        description: str = None,
        request_id: str = None,
        ret_code: int = None,
        success: bool = None,
    ):
        self.code = code
        self.content = content
        self.desc = desc
        self.description = description
        self.request_id = request_id
        self.ret_code = ret_code
        self.success = success

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.content is not None:
            result['Content'] = self.content.to_map()
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.description is not None:
            result['Description'] = self.description
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.ret_code is not None:
            result['RetCode'] = self.ret_code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Content') is not None:
            temp_model = AddEvgwInstanceResponseBodyContent()
            self.content = temp_model.from_map(m['Content'])
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RetCode') is not None:
            self.ret_code = m.get('RetCode')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AddEvgwInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AddEvgwInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddEvgwInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddVtuneInEvgwRequestTagKeyValueModels(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class AddVtuneInEvgwRequest(TeaModel):
    def __init__(
        self,
        ak_proxy: str = None,
        ali_uid: int = None,
        api_name: str = None,
        app_key: str = None,
        caller_bid: str = None,
        caller_bid_login_email: str = None,
        caller_security_transport: bool = None,
        caller_type: str = None,
        caller_uid: int = None,
        caller_uid_login_email: str = None,
        channel: str = None,
        client_ip: str = None,
        enable: bool = None,
        evgw_id: str = None,
        from_type: int = None,
        mfa_present: bool = None,
        operator: str = None,
        owner_account: str = None,
        owner_id: int = None,
        owner_id_login_email: str = None,
        priority: int = None,
        prod_code: str = None,
        proxy_caller_ip: str = None,
        proxy_caller_security_transport: bool = None,
        proxy_id: str = None,
        proxy_trust_transport_info: bool = None,
        request_content: str = None,
        request_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        security_token: str = None,
        sms_resource_owner_id: int = None,
        tag_key_1: str = None,
        tag_key_2: str = None,
        tag_key_3: str = None,
        tag_key_4: str = None,
        tag_key_5: str = None,
        tag_key_value_models: List[AddVtuneInEvgwRequestTagKeyValueModels] = None,
        tag_value_1: str = None,
        tag_value_2: str = None,
        tag_value_3: str = None,
        tag_value_4: str = None,
        tag_value_5: str = None,
        token: str = None,
        version: str = None,
        vtune_id: str = None,
    ):
        self.ak_proxy = ak_proxy
        self.ali_uid = ali_uid
        self.api_name = api_name
        self.app_key = app_key
        self.caller_bid = caller_bid
        self.caller_bid_login_email = caller_bid_login_email
        self.caller_security_transport = caller_security_transport
        self.caller_type = caller_type
        self.caller_uid = caller_uid
        self.caller_uid_login_email = caller_uid_login_email
        self.channel = channel
        self.client_ip = client_ip
        self.enable = enable
        self.evgw_id = evgw_id
        self.from_type = from_type
        self.mfa_present = mfa_present
        self.operator = operator
        self.owner_account = owner_account
        self.owner_id = owner_id
        self.owner_id_login_email = owner_id_login_email
        self.priority = priority
        self.prod_code = prod_code
        self.proxy_caller_ip = proxy_caller_ip
        self.proxy_caller_security_transport = proxy_caller_security_transport
        self.proxy_id = proxy_id
        self.proxy_trust_transport_info = proxy_trust_transport_info
        self.request_content = request_content
        self.request_id = request_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.security_token = security_token
        self.sms_resource_owner_id = sms_resource_owner_id
        self.tag_key_1 = tag_key_1
        self.tag_key_2 = tag_key_2
        self.tag_key_3 = tag_key_3
        self.tag_key_4 = tag_key_4
        self.tag_key_5 = tag_key_5
        self.tag_key_value_models = tag_key_value_models
        self.tag_value_1 = tag_value_1
        self.tag_value_2 = tag_value_2
        self.tag_value_3 = tag_value_3
        self.tag_value_4 = tag_value_4
        self.tag_value_5 = tag_value_5
        self.token = token
        self.version = version
        self.vtune_id = vtune_id

    def validate(self):
        if self.tag_key_value_models:
            for k in self.tag_key_value_models:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ak_proxy is not None:
            result['AkProxy'] = self.ak_proxy
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.caller_bid is not None:
            result['CallerBid'] = self.caller_bid
        if self.caller_bid_login_email is not None:
            result['CallerBidLoginEmail'] = self.caller_bid_login_email
        if self.caller_security_transport is not None:
            result['CallerSecurityTransport'] = self.caller_security_transport
        if self.caller_type is not None:
            result['CallerType'] = self.caller_type
        if self.caller_uid is not None:
            result['CallerUid'] = self.caller_uid
        if self.caller_uid_login_email is not None:
            result['CallerUidLoginEmail'] = self.caller_uid_login_email
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.client_ip is not None:
            result['ClientIP'] = self.client_ip
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.evgw_id is not None:
            result['EvgwId'] = self.evgw_id
        if self.from_type is not None:
            result['FromType'] = self.from_type
        if self.mfa_present is not None:
            result['MfaPresent'] = self.mfa_present
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.owner_account is not None:
            result['OwnerAccount'] = self.owner_account
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.owner_id_login_email is not None:
            result['OwnerIdLoginEmail'] = self.owner_id_login_email
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.proxy_caller_ip is not None:
            result['ProxyCallerIp'] = self.proxy_caller_ip
        if self.proxy_caller_security_transport is not None:
            result['ProxyCallerSecurityTransport'] = self.proxy_caller_security_transport
        if self.proxy_id is not None:
            result['ProxyId'] = self.proxy_id
        if self.proxy_trust_transport_info is not None:
            result['ProxyTrustTransportInfo'] = self.proxy_trust_transport_info
        if self.request_content is not None:
            result['RequestContent'] = self.request_content
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        if self.sms_resource_owner_id is not None:
            result['SmsResourceOwnerId'] = self.sms_resource_owner_id
        if self.tag_key_1 is not None:
            result['TagKey1'] = self.tag_key_1
        if self.tag_key_2 is not None:
            result['TagKey2'] = self.tag_key_2
        if self.tag_key_3 is not None:
            result['TagKey3'] = self.tag_key_3
        if self.tag_key_4 is not None:
            result['TagKey4'] = self.tag_key_4
        if self.tag_key_5 is not None:
            result['TagKey5'] = self.tag_key_5
        result['TagKeyValueModels'] = []
        if self.tag_key_value_models is not None:
            for k in self.tag_key_value_models:
                result['TagKeyValueModels'].append(k.to_map() if k else None)
        if self.tag_value_1 is not None:
            result['TagValue1'] = self.tag_value_1
        if self.tag_value_2 is not None:
            result['TagValue2'] = self.tag_value_2
        if self.tag_value_3 is not None:
            result['TagValue3'] = self.tag_value_3
        if self.tag_value_4 is not None:
            result['TagValue4'] = self.tag_value_4
        if self.tag_value_5 is not None:
            result['TagValue5'] = self.tag_value_5
        if self.token is not None:
            result['Token'] = self.token
        if self.version is not None:
            result['Version'] = self.version
        if self.vtune_id is not None:
            result['VtuneId'] = self.vtune_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AkProxy') is not None:
            self.ak_proxy = m.get('AkProxy')
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('CallerBid') is not None:
            self.caller_bid = m.get('CallerBid')
        if m.get('CallerBidLoginEmail') is not None:
            self.caller_bid_login_email = m.get('CallerBidLoginEmail')
        if m.get('CallerSecurityTransport') is not None:
            self.caller_security_transport = m.get('CallerSecurityTransport')
        if m.get('CallerType') is not None:
            self.caller_type = m.get('CallerType')
        if m.get('CallerUid') is not None:
            self.caller_uid = m.get('CallerUid')
        if m.get('CallerUidLoginEmail') is not None:
            self.caller_uid_login_email = m.get('CallerUidLoginEmail')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ClientIP') is not None:
            self.client_ip = m.get('ClientIP')
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('EvgwId') is not None:
            self.evgw_id = m.get('EvgwId')
        if m.get('FromType') is not None:
            self.from_type = m.get('FromType')
        if m.get('MfaPresent') is not None:
            self.mfa_present = m.get('MfaPresent')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('OwnerAccount') is not None:
            self.owner_account = m.get('OwnerAccount')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('OwnerIdLoginEmail') is not None:
            self.owner_id_login_email = m.get('OwnerIdLoginEmail')
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProxyCallerIp') is not None:
            self.proxy_caller_ip = m.get('ProxyCallerIp')
        if m.get('ProxyCallerSecurityTransport') is not None:
            self.proxy_caller_security_transport = m.get('ProxyCallerSecurityTransport')
        if m.get('ProxyId') is not None:
            self.proxy_id = m.get('ProxyId')
        if m.get('ProxyTrustTransportInfo') is not None:
            self.proxy_trust_transport_info = m.get('ProxyTrustTransportInfo')
        if m.get('RequestContent') is not None:
            self.request_content = m.get('RequestContent')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        if m.get('SmsResourceOwnerId') is not None:
            self.sms_resource_owner_id = m.get('SmsResourceOwnerId')
        if m.get('TagKey1') is not None:
            self.tag_key_1 = m.get('TagKey1')
        if m.get('TagKey2') is not None:
            self.tag_key_2 = m.get('TagKey2')
        if m.get('TagKey3') is not None:
            self.tag_key_3 = m.get('TagKey3')
        if m.get('TagKey4') is not None:
            self.tag_key_4 = m.get('TagKey4')
        if m.get('TagKey5') is not None:
            self.tag_key_5 = m.get('TagKey5')
        self.tag_key_value_models = []
        if m.get('TagKeyValueModels') is not None:
            for k in m.get('TagKeyValueModels'):
                temp_model = AddVtuneInEvgwRequestTagKeyValueModels()
                self.tag_key_value_models.append(temp_model.from_map(k))
        if m.get('TagValue1') is not None:
            self.tag_value_1 = m.get('TagValue1')
        if m.get('TagValue2') is not None:
            self.tag_value_2 = m.get('TagValue2')
        if m.get('TagValue3') is not None:
            self.tag_value_3 = m.get('TagValue3')
        if m.get('TagValue4') is not None:
            self.tag_value_4 = m.get('TagValue4')
        if m.get('TagValue5') is not None:
            self.tag_value_5 = m.get('TagValue5')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        if m.get('VtuneId') is not None:
            self.vtune_id = m.get('VtuneId')
        return self


class AddVtuneInEvgwResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        content: Any = None,
        desc: str = None,
        description: str = None,
        request_id: str = None,
        ret_code: int = None,
        success: bool = None,
    ):
        self.code = code
        self.content = content
        self.desc = desc
        self.description = description
        self.request_id = request_id
        self.ret_code = ret_code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.content is not None:
            result['Content'] = self.content
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.description is not None:
            result['Description'] = self.description
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.ret_code is not None:
            result['RetCode'] = self.ret_code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RetCode') is not None:
            self.ret_code = m.get('RetCode')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AddVtuneInEvgwResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AddVtuneInEvgwResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddVtuneInEvgwResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddVtuneInstanceRequestTagKeyValueModels(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class AddVtuneInstanceRequest(TeaModel):
    def __init__(
        self,
        ak_proxy: str = None,
        ali_uid: int = None,
        api_name: str = None,
        app_key: str = None,
        caller_bid: str = None,
        caller_bid_login_email: str = None,
        caller_security_transport: bool = None,
        caller_type: str = None,
        caller_uid: int = None,
        caller_uid_login_email: str = None,
        channel: str = None,
        cidrs: List[str] = None,
        client_ip: str = None,
        cpe_id: str = None,
        dhcp: bool = None,
        enable: bool = None,
        enable_bgp: bool = None,
        from_type: int = None,
        limit_rx: int = None,
        limit_tx: int = None,
        mfa_present: bool = None,
        operator: str = None,
        owner_account: str = None,
        owner_id: int = None,
        owner_id_login_email: str = None,
        partner: str = None,
        priority: int = None,
        prod_code: str = None,
        proxy_caller_ip: str = None,
        proxy_caller_security_transport: bool = None,
        proxy_id: str = None,
        proxy_trust_transport_info: bool = None,
        pt_uuid: str = None,
        request_content: str = None,
        request_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        security_token: str = None,
        sms_resource_owner_id: int = None,
        tag_key_1: str = None,
        tag_key_2: str = None,
        tag_key_3: str = None,
        tag_key_4: str = None,
        tag_key_5: str = None,
        tag_key_value_models: List[AddVtuneInstanceRequestTagKeyValueModels] = None,
        tag_value_1: str = None,
        tag_value_2: str = None,
        tag_value_3: str = None,
        tag_value_4: str = None,
        tag_value_5: str = None,
        token: str = None,
        version: str = None,
    ):
        self.ak_proxy = ak_proxy
        self.ali_uid = ali_uid
        self.api_name = api_name
        self.app_key = app_key
        self.caller_bid = caller_bid
        self.caller_bid_login_email = caller_bid_login_email
        self.caller_security_transport = caller_security_transport
        self.caller_type = caller_type
        self.caller_uid = caller_uid
        self.caller_uid_login_email = caller_uid_login_email
        self.channel = channel
        self.cidrs = cidrs
        self.client_ip = client_ip
        self.cpe_id = cpe_id
        self.dhcp = dhcp
        self.enable = enable
        self.enable_bgp = enable_bgp
        self.from_type = from_type
        self.limit_rx = limit_rx
        self.limit_tx = limit_tx
        self.mfa_present = mfa_present
        self.operator = operator
        self.owner_account = owner_account
        self.owner_id = owner_id
        self.owner_id_login_email = owner_id_login_email
        self.partner = partner
        self.priority = priority
        self.prod_code = prod_code
        self.proxy_caller_ip = proxy_caller_ip
        self.proxy_caller_security_transport = proxy_caller_security_transport
        self.proxy_id = proxy_id
        self.proxy_trust_transport_info = proxy_trust_transport_info
        self.pt_uuid = pt_uuid
        self.request_content = request_content
        self.request_id = request_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.security_token = security_token
        self.sms_resource_owner_id = sms_resource_owner_id
        self.tag_key_1 = tag_key_1
        self.tag_key_2 = tag_key_2
        self.tag_key_3 = tag_key_3
        self.tag_key_4 = tag_key_4
        self.tag_key_5 = tag_key_5
        self.tag_key_value_models = tag_key_value_models
        self.tag_value_1 = tag_value_1
        self.tag_value_2 = tag_value_2
        self.tag_value_3 = tag_value_3
        self.tag_value_4 = tag_value_4
        self.tag_value_5 = tag_value_5
        self.token = token
        self.version = version

    def validate(self):
        if self.tag_key_value_models:
            for k in self.tag_key_value_models:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ak_proxy is not None:
            result['AkProxy'] = self.ak_proxy
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.caller_bid is not None:
            result['CallerBid'] = self.caller_bid
        if self.caller_bid_login_email is not None:
            result['CallerBidLoginEmail'] = self.caller_bid_login_email
        if self.caller_security_transport is not None:
            result['CallerSecurityTransport'] = self.caller_security_transport
        if self.caller_type is not None:
            result['CallerType'] = self.caller_type
        if self.caller_uid is not None:
            result['CallerUid'] = self.caller_uid
        if self.caller_uid_login_email is not None:
            result['CallerUidLoginEmail'] = self.caller_uid_login_email
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.cidrs is not None:
            result['Cidrs'] = self.cidrs
        if self.client_ip is not None:
            result['ClientIP'] = self.client_ip
        if self.cpe_id is not None:
            result['CpeId'] = self.cpe_id
        if self.dhcp is not None:
            result['Dhcp'] = self.dhcp
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.enable_bgp is not None:
            result['EnableBgp'] = self.enable_bgp
        if self.from_type is not None:
            result['FromType'] = self.from_type
        if self.limit_rx is not None:
            result['LimitRx'] = self.limit_rx
        if self.limit_tx is not None:
            result['LimitTx'] = self.limit_tx
        if self.mfa_present is not None:
            result['MfaPresent'] = self.mfa_present
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.owner_account is not None:
            result['OwnerAccount'] = self.owner_account
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.owner_id_login_email is not None:
            result['OwnerIdLoginEmail'] = self.owner_id_login_email
        if self.partner is not None:
            result['Partner'] = self.partner
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.proxy_caller_ip is not None:
            result['ProxyCallerIp'] = self.proxy_caller_ip
        if self.proxy_caller_security_transport is not None:
            result['ProxyCallerSecurityTransport'] = self.proxy_caller_security_transport
        if self.proxy_id is not None:
            result['ProxyId'] = self.proxy_id
        if self.proxy_trust_transport_info is not None:
            result['ProxyTrustTransportInfo'] = self.proxy_trust_transport_info
        if self.pt_uuid is not None:
            result['PtUuid'] = self.pt_uuid
        if self.request_content is not None:
            result['RequestContent'] = self.request_content
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        if self.sms_resource_owner_id is not None:
            result['SmsResourceOwnerId'] = self.sms_resource_owner_id
        if self.tag_key_1 is not None:
            result['TagKey1'] = self.tag_key_1
        if self.tag_key_2 is not None:
            result['TagKey2'] = self.tag_key_2
        if self.tag_key_3 is not None:
            result['TagKey3'] = self.tag_key_3
        if self.tag_key_4 is not None:
            result['TagKey4'] = self.tag_key_4
        if self.tag_key_5 is not None:
            result['TagKey5'] = self.tag_key_5
        result['TagKeyValueModels'] = []
        if self.tag_key_value_models is not None:
            for k in self.tag_key_value_models:
                result['TagKeyValueModels'].append(k.to_map() if k else None)
        if self.tag_value_1 is not None:
            result['TagValue1'] = self.tag_value_1
        if self.tag_value_2 is not None:
            result['TagValue2'] = self.tag_value_2
        if self.tag_value_3 is not None:
            result['TagValue3'] = self.tag_value_3
        if self.tag_value_4 is not None:
            result['TagValue4'] = self.tag_value_4
        if self.tag_value_5 is not None:
            result['TagValue5'] = self.tag_value_5
        if self.token is not None:
            result['Token'] = self.token
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AkProxy') is not None:
            self.ak_proxy = m.get('AkProxy')
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('CallerBid') is not None:
            self.caller_bid = m.get('CallerBid')
        if m.get('CallerBidLoginEmail') is not None:
            self.caller_bid_login_email = m.get('CallerBidLoginEmail')
        if m.get('CallerSecurityTransport') is not None:
            self.caller_security_transport = m.get('CallerSecurityTransport')
        if m.get('CallerType') is not None:
            self.caller_type = m.get('CallerType')
        if m.get('CallerUid') is not None:
            self.caller_uid = m.get('CallerUid')
        if m.get('CallerUidLoginEmail') is not None:
            self.caller_uid_login_email = m.get('CallerUidLoginEmail')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('Cidrs') is not None:
            self.cidrs = m.get('Cidrs')
        if m.get('ClientIP') is not None:
            self.client_ip = m.get('ClientIP')
        if m.get('CpeId') is not None:
            self.cpe_id = m.get('CpeId')
        if m.get('Dhcp') is not None:
            self.dhcp = m.get('Dhcp')
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('EnableBgp') is not None:
            self.enable_bgp = m.get('EnableBgp')
        if m.get('FromType') is not None:
            self.from_type = m.get('FromType')
        if m.get('LimitRx') is not None:
            self.limit_rx = m.get('LimitRx')
        if m.get('LimitTx') is not None:
            self.limit_tx = m.get('LimitTx')
        if m.get('MfaPresent') is not None:
            self.mfa_present = m.get('MfaPresent')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('OwnerAccount') is not None:
            self.owner_account = m.get('OwnerAccount')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('OwnerIdLoginEmail') is not None:
            self.owner_id_login_email = m.get('OwnerIdLoginEmail')
        if m.get('Partner') is not None:
            self.partner = m.get('Partner')
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProxyCallerIp') is not None:
            self.proxy_caller_ip = m.get('ProxyCallerIp')
        if m.get('ProxyCallerSecurityTransport') is not None:
            self.proxy_caller_security_transport = m.get('ProxyCallerSecurityTransport')
        if m.get('ProxyId') is not None:
            self.proxy_id = m.get('ProxyId')
        if m.get('ProxyTrustTransportInfo') is not None:
            self.proxy_trust_transport_info = m.get('ProxyTrustTransportInfo')
        if m.get('PtUuid') is not None:
            self.pt_uuid = m.get('PtUuid')
        if m.get('RequestContent') is not None:
            self.request_content = m.get('RequestContent')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        if m.get('SmsResourceOwnerId') is not None:
            self.sms_resource_owner_id = m.get('SmsResourceOwnerId')
        if m.get('TagKey1') is not None:
            self.tag_key_1 = m.get('TagKey1')
        if m.get('TagKey2') is not None:
            self.tag_key_2 = m.get('TagKey2')
        if m.get('TagKey3') is not None:
            self.tag_key_3 = m.get('TagKey3')
        if m.get('TagKey4') is not None:
            self.tag_key_4 = m.get('TagKey4')
        if m.get('TagKey5') is not None:
            self.tag_key_5 = m.get('TagKey5')
        self.tag_key_value_models = []
        if m.get('TagKeyValueModels') is not None:
            for k in m.get('TagKeyValueModels'):
                temp_model = AddVtuneInstanceRequestTagKeyValueModels()
                self.tag_key_value_models.append(temp_model.from_map(k))
        if m.get('TagValue1') is not None:
            self.tag_value_1 = m.get('TagValue1')
        if m.get('TagValue2') is not None:
            self.tag_value_2 = m.get('TagValue2')
        if m.get('TagValue3') is not None:
            self.tag_value_3 = m.get('TagValue3')
        if m.get('TagValue4') is not None:
            self.tag_value_4 = m.get('TagValue4')
        if m.get('TagValue5') is not None:
            self.tag_value_5 = m.get('TagValue5')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class AddVtuneInstanceResponseBodyContent(TeaModel):
    def __init__(
        self,
        vtune_id: str = None,
    ):
        self.vtune_id = vtune_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.vtune_id is not None:
            result['VtuneId'] = self.vtune_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('VtuneId') is not None:
            self.vtune_id = m.get('VtuneId')
        return self


class AddVtuneInstanceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        content: AddVtuneInstanceResponseBodyContent = None,
        desc: str = None,
        description: str = None,
        request_id: str = None,
        ret_code: int = None,
        success: bool = None,
    ):
        self.code = code
        self.content = content
        self.desc = desc
        self.description = description
        self.request_id = request_id
        self.ret_code = ret_code
        self.success = success

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.content is not None:
            result['Content'] = self.content.to_map()
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.description is not None:
            result['Description'] = self.description
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.ret_code is not None:
            result['RetCode'] = self.ret_code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Content') is not None:
            temp_model = AddVtuneInstanceResponseBodyContent()
            self.content = temp_model.from_map(m['Content'])
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RetCode') is not None:
            self.ret_code = m.get('RetCode')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AddVtuneInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AddVtuneInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddVtuneInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CompleteCommodityInfoRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        data: str = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class CompleteCommodityInfoResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CompleteCommodityInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CompleteCommodityInfoResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CompleteCommodityInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateEBIRequestIpInfo(TeaModel):
    def __init__(
        self,
        ip: str = None,
        vlan: int = None,
    ):
        self.ip = ip
        self.vlan = vlan

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.vlan is not None:
            result['Vlan'] = self.vlan
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('Vlan') is not None:
            self.vlan = m.get('Vlan')
        return self


class CreateEBIRequestTagKeyValueModels(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class CreateEBIRequest(TeaModel):
    def __init__(
        self,
        ak_proxy: str = None,
        ali_uid: int = None,
        api_name: str = None,
        app_key: str = None,
        caller_bid_login_email: str = None,
        caller_security_transport: bool = None,
        caller_uid_login_email: str = None,
        channel: str = None,
        client_ip: str = None,
        enable: bool = None,
        exp_info: str = None,
        from_type: int = None,
        gateway: str = None,
        ip_info: List[CreateEBIRequestIpInfo] = None,
        mfa_present: bool = None,
        network_id: str = None,
        operator: str = None,
        owner_account: str = None,
        owner_id: int = None,
        owner_id_login_email: str = None,
        prod_code: str = None,
        proxy_caller_ip: str = None,
        proxy_caller_security_transport: bool = None,
        proxy_id: str = None,
        proxy_trust_transport_info: bool = None,
        region_id: str = None,
        request_content: str = None,
        request_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        security_token: str = None,
        sms_resource_owner_id: int = None,
        tag_key_1: str = None,
        tag_key_2: str = None,
        tag_key_3: str = None,
        tag_key_4: str = None,
        tag_key_5: str = None,
        tag_key_value_models: List[CreateEBIRequestTagKeyValueModels] = None,
        tag_value_1: str = None,
        tag_value_2: str = None,
        tag_value_3: str = None,
        tag_value_4: str = None,
        tag_value_5: str = None,
        token: str = None,
        version: str = None,
    ):
        self.ak_proxy = ak_proxy
        self.ali_uid = ali_uid
        self.api_name = api_name
        self.app_key = app_key
        self.caller_bid_login_email = caller_bid_login_email
        self.caller_security_transport = caller_security_transport
        self.caller_uid_login_email = caller_uid_login_email
        self.channel = channel
        self.client_ip = client_ip
        self.enable = enable
        self.exp_info = exp_info
        self.from_type = from_type
        self.gateway = gateway
        self.ip_info = ip_info
        self.mfa_present = mfa_present
        self.network_id = network_id
        self.operator = operator
        self.owner_account = owner_account
        self.owner_id = owner_id
        self.owner_id_login_email = owner_id_login_email
        self.prod_code = prod_code
        self.proxy_caller_ip = proxy_caller_ip
        self.proxy_caller_security_transport = proxy_caller_security_transport
        self.proxy_id = proxy_id
        self.proxy_trust_transport_info = proxy_trust_transport_info
        self.region_id = region_id
        self.request_content = request_content
        self.request_id = request_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.security_token = security_token
        self.sms_resource_owner_id = sms_resource_owner_id
        self.tag_key_1 = tag_key_1
        self.tag_key_2 = tag_key_2
        self.tag_key_3 = tag_key_3
        self.tag_key_4 = tag_key_4
        self.tag_key_5 = tag_key_5
        self.tag_key_value_models = tag_key_value_models
        self.tag_value_1 = tag_value_1
        self.tag_value_2 = tag_value_2
        self.tag_value_3 = tag_value_3
        self.tag_value_4 = tag_value_4
        self.tag_value_5 = tag_value_5
        self.token = token
        self.version = version

    def validate(self):
        if self.ip_info:
            for k in self.ip_info:
                if k:
                    k.validate()
        if self.tag_key_value_models:
            for k in self.tag_key_value_models:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ak_proxy is not None:
            result['AkProxy'] = self.ak_proxy
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.caller_bid_login_email is not None:
            result['CallerBidLoginEmail'] = self.caller_bid_login_email
        if self.caller_security_transport is not None:
            result['CallerSecurityTransport'] = self.caller_security_transport
        if self.caller_uid_login_email is not None:
            result['CallerUidLoginEmail'] = self.caller_uid_login_email
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.client_ip is not None:
            result['ClientIP'] = self.client_ip
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.exp_info is not None:
            result['ExpInfo'] = self.exp_info
        if self.from_type is not None:
            result['FromType'] = self.from_type
        if self.gateway is not None:
            result['Gateway'] = self.gateway
        result['IpInfo'] = []
        if self.ip_info is not None:
            for k in self.ip_info:
                result['IpInfo'].append(k.to_map() if k else None)
        if self.mfa_present is not None:
            result['MfaPresent'] = self.mfa_present
        if self.network_id is not None:
            result['NetworkId'] = self.network_id
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.owner_account is not None:
            result['OwnerAccount'] = self.owner_account
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.owner_id_login_email is not None:
            result['OwnerIdLoginEmail'] = self.owner_id_login_email
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.proxy_caller_ip is not None:
            result['ProxyCallerIp'] = self.proxy_caller_ip
        if self.proxy_caller_security_transport is not None:
            result['ProxyCallerSecurityTransport'] = self.proxy_caller_security_transport
        if self.proxy_id is not None:
            result['ProxyId'] = self.proxy_id
        if self.proxy_trust_transport_info is not None:
            result['ProxyTrustTransportInfo'] = self.proxy_trust_transport_info
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.request_content is not None:
            result['RequestContent'] = self.request_content
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        if self.sms_resource_owner_id is not None:
            result['SmsResourceOwnerId'] = self.sms_resource_owner_id
        if self.tag_key_1 is not None:
            result['TagKey1'] = self.tag_key_1
        if self.tag_key_2 is not None:
            result['TagKey2'] = self.tag_key_2
        if self.tag_key_3 is not None:
            result['TagKey3'] = self.tag_key_3
        if self.tag_key_4 is not None:
            result['TagKey4'] = self.tag_key_4
        if self.tag_key_5 is not None:
            result['TagKey5'] = self.tag_key_5
        result['TagKeyValueModels'] = []
        if self.tag_key_value_models is not None:
            for k in self.tag_key_value_models:
                result['TagKeyValueModels'].append(k.to_map() if k else None)
        if self.tag_value_1 is not None:
            result['TagValue1'] = self.tag_value_1
        if self.tag_value_2 is not None:
            result['TagValue2'] = self.tag_value_2
        if self.tag_value_3 is not None:
            result['TagValue3'] = self.tag_value_3
        if self.tag_value_4 is not None:
            result['TagValue4'] = self.tag_value_4
        if self.tag_value_5 is not None:
            result['TagValue5'] = self.tag_value_5
        if self.token is not None:
            result['Token'] = self.token
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AkProxy') is not None:
            self.ak_proxy = m.get('AkProxy')
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('CallerBidLoginEmail') is not None:
            self.caller_bid_login_email = m.get('CallerBidLoginEmail')
        if m.get('CallerSecurityTransport') is not None:
            self.caller_security_transport = m.get('CallerSecurityTransport')
        if m.get('CallerUidLoginEmail') is not None:
            self.caller_uid_login_email = m.get('CallerUidLoginEmail')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ClientIP') is not None:
            self.client_ip = m.get('ClientIP')
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('ExpInfo') is not None:
            self.exp_info = m.get('ExpInfo')
        if m.get('FromType') is not None:
            self.from_type = m.get('FromType')
        if m.get('Gateway') is not None:
            self.gateway = m.get('Gateway')
        self.ip_info = []
        if m.get('IpInfo') is not None:
            for k in m.get('IpInfo'):
                temp_model = CreateEBIRequestIpInfo()
                self.ip_info.append(temp_model.from_map(k))
        if m.get('MfaPresent') is not None:
            self.mfa_present = m.get('MfaPresent')
        if m.get('NetworkId') is not None:
            self.network_id = m.get('NetworkId')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('OwnerAccount') is not None:
            self.owner_account = m.get('OwnerAccount')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('OwnerIdLoginEmail') is not None:
            self.owner_id_login_email = m.get('OwnerIdLoginEmail')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProxyCallerIp') is not None:
            self.proxy_caller_ip = m.get('ProxyCallerIp')
        if m.get('ProxyCallerSecurityTransport') is not None:
            self.proxy_caller_security_transport = m.get('ProxyCallerSecurityTransport')
        if m.get('ProxyId') is not None:
            self.proxy_id = m.get('ProxyId')
        if m.get('ProxyTrustTransportInfo') is not None:
            self.proxy_trust_transport_info = m.get('ProxyTrustTransportInfo')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('RequestContent') is not None:
            self.request_content = m.get('RequestContent')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        if m.get('SmsResourceOwnerId') is not None:
            self.sms_resource_owner_id = m.get('SmsResourceOwnerId')
        if m.get('TagKey1') is not None:
            self.tag_key_1 = m.get('TagKey1')
        if m.get('TagKey2') is not None:
            self.tag_key_2 = m.get('TagKey2')
        if m.get('TagKey3') is not None:
            self.tag_key_3 = m.get('TagKey3')
        if m.get('TagKey4') is not None:
            self.tag_key_4 = m.get('TagKey4')
        if m.get('TagKey5') is not None:
            self.tag_key_5 = m.get('TagKey5')
        self.tag_key_value_models = []
        if m.get('TagKeyValueModels') is not None:
            for k in m.get('TagKeyValueModels'):
                temp_model = CreateEBIRequestTagKeyValueModels()
                self.tag_key_value_models.append(temp_model.from_map(k))
        if m.get('TagValue1') is not None:
            self.tag_value_1 = m.get('TagValue1')
        if m.get('TagValue2') is not None:
            self.tag_value_2 = m.get('TagValue2')
        if m.get('TagValue3') is not None:
            self.tag_value_3 = m.get('TagValue3')
        if m.get('TagValue4') is not None:
            self.tag_value_4 = m.get('TagValue4')
        if m.get('TagValue5') is not None:
            self.tag_value_5 = m.get('TagValue5')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class CreateEBIResponseBodyModelContent(TeaModel):
    def __init__(
        self,
        ebi_id: str = None,
        status: str = None,
    ):
        self.ebi_id = ebi_id
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ebi_id is not None:
            result['EbiId'] = self.ebi_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EbiId') is not None:
            self.ebi_id = m.get('EbiId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class CreateEBIResponseBodyModel(TeaModel):
    def __init__(
        self,
        content: CreateEBIResponseBodyModelContent = None,
        description: str = None,
        request_id: str = None,
        ret_code: int = None,
    ):
        self.content = content
        self.description = description
        self.request_id = request_id
        self.ret_code = ret_code

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content.to_map()
        if self.description is not None:
            result['Description'] = self.description
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.ret_code is not None:
            result['RetCode'] = self.ret_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Content') is not None:
            temp_model = CreateEBIResponseBodyModelContent()
            self.content = temp_model.from_map(m['Content'])
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RetCode') is not None:
            self.ret_code = m.get('RetCode')
        return self


class CreateEBIResponseBodyRequestOrderAccountCreditList(TeaModel):
    def __init__(
        self,
        account_id: int = None,
        account_name: str = None,
        credit_balance: int = None,
        cust_id: int = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        remarks: str = None,
    ):
        self.account_id = account_id
        self.account_name = account_name
        self.credit_balance = credit_balance
        self.cust_id = cust_id
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.remarks = remarks

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.account_name is not None:
            result['AccountName'] = self.account_name
        if self.credit_balance is not None:
            result['CreditBalance'] = self.credit_balance
        if self.cust_id is not None:
            result['CustId'] = self.cust_id
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('AccountName') is not None:
            self.account_name = m.get('AccountName')
        if m.get('CreditBalance') is not None:
            self.credit_balance = m.get('CreditBalance')
        if m.get('CustId') is not None:
            self.cust_id = m.get('CustId')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class CreateEBIResponseBodyRequestOrderAccount(TeaModel):
    def __init__(
        self,
        acct_id: int = None,
        acct_name: str = None,
        acct_type: str = None,
        bill_type: int = None,
        control_type: int = None,
        credit_list: List[CreateEBIResponseBodyRequestOrderAccountCreditList] = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        remarks: str = None,
    ):
        self.acct_id = acct_id
        self.acct_name = acct_name
        self.acct_type = acct_type
        self.bill_type = bill_type
        self.control_type = control_type
        self.credit_list = credit_list
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.remarks = remarks

    def validate(self):
        if self.credit_list:
            for k in self.credit_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.acct_id is not None:
            result['AcctId'] = self.acct_id
        if self.acct_name is not None:
            result['AcctName'] = self.acct_name
        if self.acct_type is not None:
            result['AcctType'] = self.acct_type
        if self.bill_type is not None:
            result['BillType'] = self.bill_type
        if self.control_type is not None:
            result['ControlType'] = self.control_type
        result['CreditList'] = []
        if self.credit_list is not None:
            for k in self.credit_list:
                result['CreditList'].append(k.to_map() if k else None)
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AcctId') is not None:
            self.acct_id = m.get('AcctId')
        if m.get('AcctName') is not None:
            self.acct_name = m.get('AcctName')
        if m.get('AcctType') is not None:
            self.acct_type = m.get('AcctType')
        if m.get('BillType') is not None:
            self.bill_type = m.get('BillType')
        if m.get('ControlType') is not None:
            self.control_type = m.get('ControlType')
        self.credit_list = []
        if m.get('CreditList') is not None:
            for k in m.get('CreditList'):
                temp_model = CreateEBIResponseBodyRequestOrderAccountCreditList()
                self.credit_list.append(temp_model.from_map(k))
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class CreateEBIResponseBodyRequestOrderAssetsAttributeList(TeaModel):
    def __init__(
        self,
        attr_group: str = None,
        attr_id: int = None,
        attr_name: str = None,
        attr_text: str = None,
        attr_value: str = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        mapping_code: str = None,
        old_attr_text: str = None,
        old_attr_value: str = None,
        options: int = None,
        remarks: str = None,
        value_expression: str = None,
    ):
        self.attr_group = attr_group
        self.attr_id = attr_id
        self.attr_name = attr_name
        self.attr_text = attr_text
        self.attr_value = attr_value
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.mapping_code = mapping_code
        self.old_attr_text = old_attr_text
        self.old_attr_value = old_attr_value
        self.options = options
        self.remarks = remarks
        self.value_expression = value_expression

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attr_group is not None:
            result['AttrGroup'] = self.attr_group
        if self.attr_id is not None:
            result['AttrId'] = self.attr_id
        if self.attr_name is not None:
            result['AttrName'] = self.attr_name
        if self.attr_text is not None:
            result['AttrText'] = self.attr_text
        if self.attr_value is not None:
            result['AttrValue'] = self.attr_value
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.mapping_code is not None:
            result['MappingCode'] = self.mapping_code
        if self.old_attr_text is not None:
            result['OldAttrText'] = self.old_attr_text
        if self.old_attr_value is not None:
            result['OldAttrValue'] = self.old_attr_value
        if self.options is not None:
            result['Options'] = self.options
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.value_expression is not None:
            result['ValueExpression'] = self.value_expression
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AttrGroup') is not None:
            self.attr_group = m.get('AttrGroup')
        if m.get('AttrId') is not None:
            self.attr_id = m.get('AttrId')
        if m.get('AttrName') is not None:
            self.attr_name = m.get('AttrName')
        if m.get('AttrText') is not None:
            self.attr_text = m.get('AttrText')
        if m.get('AttrValue') is not None:
            self.attr_value = m.get('AttrValue')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('MappingCode') is not None:
            self.mapping_code = m.get('MappingCode')
        if m.get('OldAttrText') is not None:
            self.old_attr_text = m.get('OldAttrText')
        if m.get('OldAttrValue') is not None:
            self.old_attr_value = m.get('OldAttrValue')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ValueExpression') is not None:
            self.value_expression = m.get('ValueExpression')
        return self


class CreateEBIResponseBodyRequestOrderAssets(TeaModel):
    def __init__(
        self,
        active_time: str = None,
        assets_id: int = None,
        assets_name: str = None,
        assets_owner: str = None,
        assets_status: int = None,
        assets_tag: int = None,
        assets_type: int = None,
        attribute_list: List[CreateEBIResponseBodyRequestOrderAssetsAttributeList] = None,
        bill_id: str = None,
        bill_source: str = None,
        channel_id: str = None,
        data_status: int = None,
        destroy_time: str = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        group_path: str = None,
        imsi: str = None,
        ins_status: int = None,
        os_status: str = None,
        os_time: str = None,
        owner_assets_id: int = None,
        password: str = None,
        pre_destroy_time: str = None,
        product_line_code: str = None,
        real_bill_number: str = None,
        remarks: str = None,
        res_code: str = None,
    ):
        self.active_time = active_time
        self.assets_id = assets_id
        self.assets_name = assets_name
        self.assets_owner = assets_owner
        self.assets_status = assets_status
        self.assets_tag = assets_tag
        self.assets_type = assets_type
        self.attribute_list = attribute_list
        self.bill_id = bill_id
        self.bill_source = bill_source
        self.channel_id = channel_id
        self.data_status = data_status
        self.destroy_time = destroy_time
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.group_path = group_path
        self.imsi = imsi
        self.ins_status = ins_status
        self.os_status = os_status
        self.os_time = os_time
        self.owner_assets_id = owner_assets_id
        self.password = password
        self.pre_destroy_time = pre_destroy_time
        self.product_line_code = product_line_code
        self.real_bill_number = real_bill_number
        self.remarks = remarks
        self.res_code = res_code

    def validate(self):
        if self.attribute_list:
            for k in self.attribute_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.active_time is not None:
            result['ActiveTime'] = self.active_time
        if self.assets_id is not None:
            result['AssetsId'] = self.assets_id
        if self.assets_name is not None:
            result['AssetsName'] = self.assets_name
        if self.assets_owner is not None:
            result['AssetsOwner'] = self.assets_owner
        if self.assets_status is not None:
            result['AssetsStatus'] = self.assets_status
        if self.assets_tag is not None:
            result['AssetsTag'] = self.assets_tag
        if self.assets_type is not None:
            result['AssetsType'] = self.assets_type
        result['AttributeList'] = []
        if self.attribute_list is not None:
            for k in self.attribute_list:
                result['AttributeList'].append(k.to_map() if k else None)
        if self.bill_id is not None:
            result['BillId'] = self.bill_id
        if self.bill_source is not None:
            result['BillSource'] = self.bill_source
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.destroy_time is not None:
            result['DestroyTime'] = self.destroy_time
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.group_path is not None:
            result['GroupPath'] = self.group_path
        if self.imsi is not None:
            result['Imsi'] = self.imsi
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.os_status is not None:
            result['OsStatus'] = self.os_status
        if self.os_time is not None:
            result['OsTime'] = self.os_time
        if self.owner_assets_id is not None:
            result['OwnerAssetsId'] = self.owner_assets_id
        if self.password is not None:
            result['Password'] = self.password
        if self.pre_destroy_time is not None:
            result['PreDestroyTime'] = self.pre_destroy_time
        if self.product_line_code is not None:
            result['ProductLineCode'] = self.product_line_code
        if self.real_bill_number is not None:
            result['RealBillNumber'] = self.real_bill_number
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.res_code is not None:
            result['ResCode'] = self.res_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ActiveTime') is not None:
            self.active_time = m.get('ActiveTime')
        if m.get('AssetsId') is not None:
            self.assets_id = m.get('AssetsId')
        if m.get('AssetsName') is not None:
            self.assets_name = m.get('AssetsName')
        if m.get('AssetsOwner') is not None:
            self.assets_owner = m.get('AssetsOwner')
        if m.get('AssetsStatus') is not None:
            self.assets_status = m.get('AssetsStatus')
        if m.get('AssetsTag') is not None:
            self.assets_tag = m.get('AssetsTag')
        if m.get('AssetsType') is not None:
            self.assets_type = m.get('AssetsType')
        self.attribute_list = []
        if m.get('AttributeList') is not None:
            for k in m.get('AttributeList'):
                temp_model = CreateEBIResponseBodyRequestOrderAssetsAttributeList()
                self.attribute_list.append(temp_model.from_map(k))
        if m.get('BillId') is not None:
            self.bill_id = m.get('BillId')
        if m.get('BillSource') is not None:
            self.bill_source = m.get('BillSource')
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('DestroyTime') is not None:
            self.destroy_time = m.get('DestroyTime')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('GroupPath') is not None:
            self.group_path = m.get('GroupPath')
        if m.get('Imsi') is not None:
            self.imsi = m.get('Imsi')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('OsStatus') is not None:
            self.os_status = m.get('OsStatus')
        if m.get('OsTime') is not None:
            self.os_time = m.get('OsTime')
        if m.get('OwnerAssetsId') is not None:
            self.owner_assets_id = m.get('OwnerAssetsId')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('PreDestroyTime') is not None:
            self.pre_destroy_time = m.get('PreDestroyTime')
        if m.get('ProductLineCode') is not None:
            self.product_line_code = m.get('ProductLineCode')
        if m.get('RealBillNumber') is not None:
            self.real_bill_number = m.get('RealBillNumber')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ResCode') is not None:
            self.res_code = m.get('ResCode')
        return self


class CreateEBIResponseBodyRequestOrderBusiOperation(TeaModel):
    def __init__(
        self,
        operation_code: str = None,
        operation_id: int = None,
        operation_name: str = None,
    ):
        self.operation_code = operation_code
        self.operation_id = operation_id
        self.operation_name = operation_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.operation_code is not None:
            result['OperationCode'] = self.operation_code
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.operation_name is not None:
            result['OperationName'] = self.operation_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OperationCode') is not None:
            self.operation_code = m.get('OperationCode')
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('OperationName') is not None:
            self.operation_name = m.get('OperationName')
        return self


class CreateEBIResponseBodyRequestOrderBusiPriceListBusiPriceDetailList(TeaModel):
    def __init__(
        self,
        outer_order_no: str = None,
        paid_amount: int = None,
        payment_mode: str = None,
    ):
        self.outer_order_no = outer_order_no
        self.paid_amount = paid_amount
        self.payment_mode = payment_mode

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.outer_order_no is not None:
            result['OuterOrderNo'] = self.outer_order_no
        if self.paid_amount is not None:
            result['PaidAmount'] = self.paid_amount
        if self.payment_mode is not None:
            result['PaymentMode'] = self.payment_mode
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OuterOrderNo') is not None:
            self.outer_order_no = m.get('OuterOrderNo')
        if m.get('PaidAmount') is not None:
            self.paid_amount = m.get('PaidAmount')
        if m.get('PaymentMode') is not None:
            self.payment_mode = m.get('PaymentMode')
        return self


class CreateEBIResponseBodyRequestOrderBusiPriceList(TeaModel):
    def __init__(
        self,
        alipay_order_no: str = None,
        busi_operation_id: int = None,
        busi_price_detail_list: List[CreateEBIResponseBodyRequestOrderBusiPriceListBusiPriceDetailList] = None,
        offer_id: int = None,
        order_channel: str = None,
        outer_order_no: str = None,
        paid_amount: int = None,
        receivable_amount: int = None,
        subject_id: str = None,
    ):
        self.alipay_order_no = alipay_order_no
        self.busi_operation_id = busi_operation_id
        self.busi_price_detail_list = busi_price_detail_list
        self.offer_id = offer_id
        self.order_channel = order_channel
        self.outer_order_no = outer_order_no
        self.paid_amount = paid_amount
        self.receivable_amount = receivable_amount
        self.subject_id = subject_id

    def validate(self):
        if self.busi_price_detail_list:
            for k in self.busi_price_detail_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alipay_order_no is not None:
            result['AlipayOrderNo'] = self.alipay_order_no
        if self.busi_operation_id is not None:
            result['BusiOperationId'] = self.busi_operation_id
        result['BusiPriceDetailList'] = []
        if self.busi_price_detail_list is not None:
            for k in self.busi_price_detail_list:
                result['BusiPriceDetailList'].append(k.to_map() if k else None)
        if self.offer_id is not None:
            result['OfferId'] = self.offer_id
        if self.order_channel is not None:
            result['OrderChannel'] = self.order_channel
        if self.outer_order_no is not None:
            result['OuterOrderNo'] = self.outer_order_no
        if self.paid_amount is not None:
            result['PaidAmount'] = self.paid_amount
        if self.receivable_amount is not None:
            result['ReceivableAmount'] = self.receivable_amount
        if self.subject_id is not None:
            result['SubjectId'] = self.subject_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlipayOrderNo') is not None:
            self.alipay_order_no = m.get('AlipayOrderNo')
        if m.get('BusiOperationId') is not None:
            self.busi_operation_id = m.get('BusiOperationId')
        self.busi_price_detail_list = []
        if m.get('BusiPriceDetailList') is not None:
            for k in m.get('BusiPriceDetailList'):
                temp_model = CreateEBIResponseBodyRequestOrderBusiPriceListBusiPriceDetailList()
                self.busi_price_detail_list.append(temp_model.from_map(k))
        if m.get('OfferId') is not None:
            self.offer_id = m.get('OfferId')
        if m.get('OrderChannel') is not None:
            self.order_channel = m.get('OrderChannel')
        if m.get('OuterOrderNo') is not None:
            self.outer_order_no = m.get('OuterOrderNo')
        if m.get('PaidAmount') is not None:
            self.paid_amount = m.get('PaidAmount')
        if m.get('ReceivableAmount') is not None:
            self.receivable_amount = m.get('ReceivableAmount')
        if m.get('SubjectId') is not None:
            self.subject_id = m.get('SubjectId')
        return self


class CreateEBIResponseBodyRequestOrderCustomerContracts(TeaModel):
    def __init__(
        self,
        contact_address: str = None,
        contact_name: str = None,
        contact_phone: str = None,
        contact_type: int = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        remarks: str = None,
    ):
        self.contact_address = contact_address
        self.contact_name = contact_name
        self.contact_phone = contact_phone
        self.contact_type = contact_type
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.remarks = remarks

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_address is not None:
            result['ContactAddress'] = self.contact_address
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.contact_phone is not None:
            result['ContactPhone'] = self.contact_phone
        if self.contact_type is not None:
            result['ContactType'] = self.contact_type
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactAddress') is not None:
            self.contact_address = m.get('ContactAddress')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('ContactPhone') is not None:
            self.contact_phone = m.get('ContactPhone')
        if m.get('ContactType') is not None:
            self.contact_type = m.get('ContactType')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class CreateEBIResponseBodyRequestOrderCustomer(TeaModel):
    def __init__(
        self,
        cert_address: str = None,
        cert_effdate: str = None,
        cert_expire: str = None,
        cert_no: str = None,
        cert_type: str = None,
        contracts: List[CreateEBIResponseBodyRequestOrderCustomerContracts] = None,
        cust_id: int = None,
        cust_name: str = None,
        cust_tag: int = None,
        cust_type: str = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gender: int = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        outer_cust_no: str = None,
        remarks: str = None,
        user_bind_type: int = None,
        user_id: int = None,
        user_nick: str = None,
    ):
        self.cert_address = cert_address
        self.cert_effdate = cert_effdate
        self.cert_expire = cert_expire
        self.cert_no = cert_no
        self.cert_type = cert_type
        self.contracts = contracts
        self.cust_id = cust_id
        self.cust_name = cust_name
        self.cust_tag = cust_tag
        self.cust_type = cust_type
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gender = gender
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.outer_cust_no = outer_cust_no
        self.remarks = remarks
        self.user_bind_type = user_bind_type
        self.user_id = user_id
        self.user_nick = user_nick

    def validate(self):
        if self.contracts:
            for k in self.contracts:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cert_address is not None:
            result['CertAddress'] = self.cert_address
        if self.cert_effdate is not None:
            result['CertEffdate'] = self.cert_effdate
        if self.cert_expire is not None:
            result['CertExpire'] = self.cert_expire
        if self.cert_no is not None:
            result['CertNo'] = self.cert_no
        if self.cert_type is not None:
            result['CertType'] = self.cert_type
        result['Contracts'] = []
        if self.contracts is not None:
            for k in self.contracts:
                result['Contracts'].append(k.to_map() if k else None)
        if self.cust_id is not None:
            result['CustId'] = self.cust_id
        if self.cust_name is not None:
            result['CustName'] = self.cust_name
        if self.cust_tag is not None:
            result['CustTag'] = self.cust_tag
        if self.cust_type is not None:
            result['CustType'] = self.cust_type
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gender is not None:
            result['Gender'] = self.gender
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.outer_cust_no is not None:
            result['OuterCustNo'] = self.outer_cust_no
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.user_bind_type is not None:
            result['UserBindType'] = self.user_bind_type
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.user_nick is not None:
            result['UserNick'] = self.user_nick
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CertAddress') is not None:
            self.cert_address = m.get('CertAddress')
        if m.get('CertEffdate') is not None:
            self.cert_effdate = m.get('CertEffdate')
        if m.get('CertExpire') is not None:
            self.cert_expire = m.get('CertExpire')
        if m.get('CertNo') is not None:
            self.cert_no = m.get('CertNo')
        if m.get('CertType') is not None:
            self.cert_type = m.get('CertType')
        self.contracts = []
        if m.get('Contracts') is not None:
            for k in m.get('Contracts'):
                temp_model = CreateEBIResponseBodyRequestOrderCustomerContracts()
                self.contracts.append(temp_model.from_map(k))
        if m.get('CustId') is not None:
            self.cust_id = m.get('CustId')
        if m.get('CustName') is not None:
            self.cust_name = m.get('CustName')
        if m.get('CustTag') is not None:
            self.cust_tag = m.get('CustTag')
        if m.get('CustType') is not None:
            self.cust_type = m.get('CustType')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('Gender') is not None:
            self.gender = m.get('Gender')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('OuterCustNo') is not None:
            self.outer_cust_no = m.get('OuterCustNo')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('UserBindType') is not None:
            self.user_bind_type = m.get('UserBindType')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('UserNick') is not None:
            self.user_nick = m.get('UserNick')
        return self


class CreateEBIResponseBodyRequestOrderOfferListAttributeList(TeaModel):
    def __init__(
        self,
        attr_group: str = None,
        attr_id: int = None,
        attr_name: str = None,
        attr_text: str = None,
        attr_value: str = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        mapping_code: str = None,
        old_attr_text: str = None,
        old_attr_value: str = None,
        options: int = None,
        remarks: str = None,
        value_expression: str = None,
    ):
        self.attr_group = attr_group
        self.attr_id = attr_id
        self.attr_name = attr_name
        self.attr_text = attr_text
        self.attr_value = attr_value
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.mapping_code = mapping_code
        self.old_attr_text = old_attr_text
        self.old_attr_value = old_attr_value
        self.options = options
        self.remarks = remarks
        self.value_expression = value_expression

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attr_group is not None:
            result['AttrGroup'] = self.attr_group
        if self.attr_id is not None:
            result['AttrId'] = self.attr_id
        if self.attr_name is not None:
            result['AttrName'] = self.attr_name
        if self.attr_text is not None:
            result['AttrText'] = self.attr_text
        if self.attr_value is not None:
            result['AttrValue'] = self.attr_value
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.mapping_code is not None:
            result['MappingCode'] = self.mapping_code
        if self.old_attr_text is not None:
            result['OldAttrText'] = self.old_attr_text
        if self.old_attr_value is not None:
            result['OldAttrValue'] = self.old_attr_value
        if self.options is not None:
            result['Options'] = self.options
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.value_expression is not None:
            result['ValueExpression'] = self.value_expression
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AttrGroup') is not None:
            self.attr_group = m.get('AttrGroup')
        if m.get('AttrId') is not None:
            self.attr_id = m.get('AttrId')
        if m.get('AttrName') is not None:
            self.attr_name = m.get('AttrName')
        if m.get('AttrText') is not None:
            self.attr_text = m.get('AttrText')
        if m.get('AttrValue') is not None:
            self.attr_value = m.get('AttrValue')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('MappingCode') is not None:
            self.mapping_code = m.get('MappingCode')
        if m.get('OldAttrText') is not None:
            self.old_attr_text = m.get('OldAttrText')
        if m.get('OldAttrValue') is not None:
            self.old_attr_value = m.get('OldAttrValue')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ValueExpression') is not None:
            self.value_expression = m.get('ValueExpression')
        return self


class CreateEBIResponseBodyRequestOrderOfferListProductAttributeList(TeaModel):
    def __init__(
        self,
        attr_group: str = None,
        attr_id: int = None,
        attr_name: str = None,
        attr_text: str = None,
        attr_value: str = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        mapping_code: str = None,
        old_attr_text: str = None,
        old_attr_value: str = None,
        options: int = None,
        remarks: str = None,
        value_expression: str = None,
    ):
        self.attr_group = attr_group
        self.attr_id = attr_id
        self.attr_name = attr_name
        self.attr_text = attr_text
        self.attr_value = attr_value
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.mapping_code = mapping_code
        self.old_attr_text = old_attr_text
        self.old_attr_value = old_attr_value
        self.options = options
        self.remarks = remarks
        self.value_expression = value_expression

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attr_group is not None:
            result['AttrGroup'] = self.attr_group
        if self.attr_id is not None:
            result['AttrId'] = self.attr_id
        if self.attr_name is not None:
            result['AttrName'] = self.attr_name
        if self.attr_text is not None:
            result['AttrText'] = self.attr_text
        if self.attr_value is not None:
            result['AttrValue'] = self.attr_value
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.mapping_code is not None:
            result['MappingCode'] = self.mapping_code
        if self.old_attr_text is not None:
            result['OldAttrText'] = self.old_attr_text
        if self.old_attr_value is not None:
            result['OldAttrValue'] = self.old_attr_value
        if self.options is not None:
            result['Options'] = self.options
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.value_expression is not None:
            result['ValueExpression'] = self.value_expression
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AttrGroup') is not None:
            self.attr_group = m.get('AttrGroup')
        if m.get('AttrId') is not None:
            self.attr_id = m.get('AttrId')
        if m.get('AttrName') is not None:
            self.attr_name = m.get('AttrName')
        if m.get('AttrText') is not None:
            self.attr_text = m.get('AttrText')
        if m.get('AttrValue') is not None:
            self.attr_value = m.get('AttrValue')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('MappingCode') is not None:
            self.mapping_code = m.get('MappingCode')
        if m.get('OldAttrText') is not None:
            self.old_attr_text = m.get('OldAttrText')
        if m.get('OldAttrValue') is not None:
            self.old_attr_value = m.get('OldAttrValue')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ValueExpression') is not None:
            self.value_expression = m.get('ValueExpression')
        return self


class CreateEBIResponseBodyRequestOrderOfferListProduct(TeaModel):
    def __init__(
        self,
        attribute_list: List[CreateEBIResponseBodyRequestOrderOfferListProductAttributeList] = None,
        data_status: int = None,
        effective_time: str = None,
        effective_type: str = None,
        expire_time: str = None,
        expire_type: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_product_id: int = None,
        ins_status: int = None,
        is_main: str = None,
        open_status: int = None,
        operate_time: str = None,
        operation_id: int = None,
        options: int = None,
        product_id: int = None,
        product_name: str = None,
        product_type: str = None,
        remarks: str = None,
    ):
        self.attribute_list = attribute_list
        self.data_status = data_status
        self.effective_time = effective_time
        self.effective_type = effective_type
        self.expire_time = expire_time
        self.expire_type = expire_type
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_product_id = ins_product_id
        self.ins_status = ins_status
        self.is_main = is_main
        self.open_status = open_status
        self.operate_time = operate_time
        self.operation_id = operation_id
        self.options = options
        self.product_id = product_id
        self.product_name = product_name
        self.product_type = product_type
        self.remarks = remarks

    def validate(self):
        if self.attribute_list:
            for k in self.attribute_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AttributeList'] = []
        if self.attribute_list is not None:
            for k in self.attribute_list:
                result['AttributeList'].append(k.to_map() if k else None)
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.effective_type is not None:
            result['EffectiveType'] = self.effective_type
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.expire_type is not None:
            result['ExpireType'] = self.expire_type
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_product_id is not None:
            result['InsProductId'] = self.ins_product_id
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.is_main is not None:
            result['IsMain'] = self.is_main
        if self.open_status is not None:
            result['OpenStatus'] = self.open_status
        if self.operate_time is not None:
            result['OperateTime'] = self.operate_time
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.options is not None:
            result['Options'] = self.options
        if self.product_id is not None:
            result['ProductId'] = self.product_id
        if self.product_name is not None:
            result['ProductName'] = self.product_name
        if self.product_type is not None:
            result['ProductType'] = self.product_type
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.attribute_list = []
        if m.get('AttributeList') is not None:
            for k in m.get('AttributeList'):
                temp_model = CreateEBIResponseBodyRequestOrderOfferListProductAttributeList()
                self.attribute_list.append(temp_model.from_map(k))
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('EffectiveType') is not None:
            self.effective_type = m.get('EffectiveType')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('ExpireType') is not None:
            self.expire_type = m.get('ExpireType')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsProductId') is not None:
            self.ins_product_id = m.get('InsProductId')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('IsMain') is not None:
            self.is_main = m.get('IsMain')
        if m.get('OpenStatus') is not None:
            self.open_status = m.get('OpenStatus')
        if m.get('OperateTime') is not None:
            self.operate_time = m.get('OperateTime')
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('ProductId') is not None:
            self.product_id = m.get('ProductId')
        if m.get('ProductName') is not None:
            self.product_name = m.get('ProductName')
        if m.get('ProductType') is not None:
            self.product_type = m.get('ProductType')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class CreateEBIResponseBodyRequestOrderOfferList(TeaModel):
    def __init__(
        self,
        attribute_list: List[CreateEBIResponseBodyRequestOrderOfferListAttributeList] = None,
        billing_pkg_id: int = None,
        data_status: int = None,
        eff_param: str = None,
        effective_time: str = None,
        effective_type: str = None,
        exp_param: str = None,
        expire_time: str = None,
        expire_type: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_offer_id: int = None,
        ins_status: int = None,
        offer_id: int = None,
        offer_name: str = None,
        offer_type: str = None,
        old_effective_time: str = None,
        old_ins_offer_id: int = None,
        old_offer_id: int = None,
        operation_id: int = None,
        options: int = None,
        ord_type: str = None,
        product: CreateEBIResponseBodyRequestOrderOfferListProduct = None,
        remarks: str = None,
    ):
        self.attribute_list = attribute_list
        self.billing_pkg_id = billing_pkg_id
        self.data_status = data_status
        self.eff_param = eff_param
        self.effective_time = effective_time
        self.effective_type = effective_type
        self.exp_param = exp_param
        self.expire_time = expire_time
        self.expire_type = expire_type
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_offer_id = ins_offer_id
        self.ins_status = ins_status
        self.offer_id = offer_id
        self.offer_name = offer_name
        self.offer_type = offer_type
        self.old_effective_time = old_effective_time
        self.old_ins_offer_id = old_ins_offer_id
        self.old_offer_id = old_offer_id
        self.operation_id = operation_id
        self.options = options
        self.ord_type = ord_type
        self.product = product
        self.remarks = remarks

    def validate(self):
        if self.attribute_list:
            for k in self.attribute_list:
                if k:
                    k.validate()
        if self.product:
            self.product.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AttributeList'] = []
        if self.attribute_list is not None:
            for k in self.attribute_list:
                result['AttributeList'].append(k.to_map() if k else None)
        if self.billing_pkg_id is not None:
            result['BillingPkgId'] = self.billing_pkg_id
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.eff_param is not None:
            result['EffParam'] = self.eff_param
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.effective_type is not None:
            result['EffectiveType'] = self.effective_type
        if self.exp_param is not None:
            result['ExpParam'] = self.exp_param
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.expire_type is not None:
            result['ExpireType'] = self.expire_type
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_offer_id is not None:
            result['InsOfferId'] = self.ins_offer_id
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.offer_id is not None:
            result['OfferId'] = self.offer_id
        if self.offer_name is not None:
            result['OfferName'] = self.offer_name
        if self.offer_type is not None:
            result['OfferType'] = self.offer_type
        if self.old_effective_time is not None:
            result['OldEffectiveTime'] = self.old_effective_time
        if self.old_ins_offer_id is not None:
            result['OldInsOfferId'] = self.old_ins_offer_id
        if self.old_offer_id is not None:
            result['OldOfferId'] = self.old_offer_id
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.options is not None:
            result['Options'] = self.options
        if self.ord_type is not None:
            result['OrdType'] = self.ord_type
        if self.product is not None:
            result['Product'] = self.product.to_map()
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.attribute_list = []
        if m.get('AttributeList') is not None:
            for k in m.get('AttributeList'):
                temp_model = CreateEBIResponseBodyRequestOrderOfferListAttributeList()
                self.attribute_list.append(temp_model.from_map(k))
        if m.get('BillingPkgId') is not None:
            self.billing_pkg_id = m.get('BillingPkgId')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffParam') is not None:
            self.eff_param = m.get('EffParam')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('EffectiveType') is not None:
            self.effective_type = m.get('EffectiveType')
        if m.get('ExpParam') is not None:
            self.exp_param = m.get('ExpParam')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('ExpireType') is not None:
            self.expire_type = m.get('ExpireType')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsOfferId') is not None:
            self.ins_offer_id = m.get('InsOfferId')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('OfferId') is not None:
            self.offer_id = m.get('OfferId')
        if m.get('OfferName') is not None:
            self.offer_name = m.get('OfferName')
        if m.get('OfferType') is not None:
            self.offer_type = m.get('OfferType')
        if m.get('OldEffectiveTime') is not None:
            self.old_effective_time = m.get('OldEffectiveTime')
        if m.get('OldInsOfferId') is not None:
            self.old_ins_offer_id = m.get('OldInsOfferId')
        if m.get('OldOfferId') is not None:
            self.old_offer_id = m.get('OldOfferId')
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('OrdType') is not None:
            self.ord_type = m.get('OrdType')
        if m.get('Product') is not None:
            temp_model = CreateEBIResponseBodyRequestOrderOfferListProduct()
            self.product = temp_model.from_map(m['Product'])
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class CreateEBIResponseBodyRequestOrderProductListAttributeList(TeaModel):
    def __init__(
        self,
        attr_group: str = None,
        attr_id: int = None,
        attr_name: str = None,
        attr_text: str = None,
        attr_value: str = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        mapping_code: str = None,
        old_attr_text: str = None,
        old_attr_value: str = None,
        options: int = None,
        remarks: str = None,
        value_expression: str = None,
    ):
        self.attr_group = attr_group
        self.attr_id = attr_id
        self.attr_name = attr_name
        self.attr_text = attr_text
        self.attr_value = attr_value
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.mapping_code = mapping_code
        self.old_attr_text = old_attr_text
        self.old_attr_value = old_attr_value
        self.options = options
        self.remarks = remarks
        self.value_expression = value_expression

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attr_group is not None:
            result['AttrGroup'] = self.attr_group
        if self.attr_id is not None:
            result['AttrId'] = self.attr_id
        if self.attr_name is not None:
            result['AttrName'] = self.attr_name
        if self.attr_text is not None:
            result['AttrText'] = self.attr_text
        if self.attr_value is not None:
            result['AttrValue'] = self.attr_value
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.mapping_code is not None:
            result['MappingCode'] = self.mapping_code
        if self.old_attr_text is not None:
            result['OldAttrText'] = self.old_attr_text
        if self.old_attr_value is not None:
            result['OldAttrValue'] = self.old_attr_value
        if self.options is not None:
            result['Options'] = self.options
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.value_expression is not None:
            result['ValueExpression'] = self.value_expression
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AttrGroup') is not None:
            self.attr_group = m.get('AttrGroup')
        if m.get('AttrId') is not None:
            self.attr_id = m.get('AttrId')
        if m.get('AttrName') is not None:
            self.attr_name = m.get('AttrName')
        if m.get('AttrText') is not None:
            self.attr_text = m.get('AttrText')
        if m.get('AttrValue') is not None:
            self.attr_value = m.get('AttrValue')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('MappingCode') is not None:
            self.mapping_code = m.get('MappingCode')
        if m.get('OldAttrText') is not None:
            self.old_attr_text = m.get('OldAttrText')
        if m.get('OldAttrValue') is not None:
            self.old_attr_value = m.get('OldAttrValue')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ValueExpression') is not None:
            self.value_expression = m.get('ValueExpression')
        return self


class CreateEBIResponseBodyRequestOrderProductList(TeaModel):
    def __init__(
        self,
        attribute_list: List[CreateEBIResponseBodyRequestOrderProductListAttributeList] = None,
        data_status: int = None,
        effective_time: str = None,
        effective_type: str = None,
        expire_time: str = None,
        expire_type: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_product_id: int = None,
        ins_status: int = None,
        is_main: str = None,
        open_status: int = None,
        operate_time: str = None,
        operation_id: int = None,
        options: int = None,
        product_id: int = None,
        product_name: str = None,
        product_type: str = None,
        remarks: str = None,
    ):
        self.attribute_list = attribute_list
        self.data_status = data_status
        self.effective_time = effective_time
        self.effective_type = effective_type
        self.expire_time = expire_time
        self.expire_type = expire_type
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_product_id = ins_product_id
        self.ins_status = ins_status
        self.is_main = is_main
        self.open_status = open_status
        self.operate_time = operate_time
        self.operation_id = operation_id
        self.options = options
        self.product_id = product_id
        self.product_name = product_name
        self.product_type = product_type
        self.remarks = remarks

    def validate(self):
        if self.attribute_list:
            for k in self.attribute_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AttributeList'] = []
        if self.attribute_list is not None:
            for k in self.attribute_list:
                result['AttributeList'].append(k.to_map() if k else None)
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.effective_type is not None:
            result['EffectiveType'] = self.effective_type
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.expire_type is not None:
            result['ExpireType'] = self.expire_type
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_product_id is not None:
            result['InsProductId'] = self.ins_product_id
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.is_main is not None:
            result['IsMain'] = self.is_main
        if self.open_status is not None:
            result['OpenStatus'] = self.open_status
        if self.operate_time is not None:
            result['OperateTime'] = self.operate_time
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.options is not None:
            result['Options'] = self.options
        if self.product_id is not None:
            result['ProductId'] = self.product_id
        if self.product_name is not None:
            result['ProductName'] = self.product_name
        if self.product_type is not None:
            result['ProductType'] = self.product_type
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.attribute_list = []
        if m.get('AttributeList') is not None:
            for k in m.get('AttributeList'):
                temp_model = CreateEBIResponseBodyRequestOrderProductListAttributeList()
                self.attribute_list.append(temp_model.from_map(k))
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('EffectiveType') is not None:
            self.effective_type = m.get('EffectiveType')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('ExpireType') is not None:
            self.expire_type = m.get('ExpireType')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsProductId') is not None:
            self.ins_product_id = m.get('InsProductId')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('IsMain') is not None:
            self.is_main = m.get('IsMain')
        if m.get('OpenStatus') is not None:
            self.open_status = m.get('OpenStatus')
        if m.get('OperateTime') is not None:
            self.operate_time = m.get('OperateTime')
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('ProductId') is not None:
            self.product_id = m.get('ProductId')
        if m.get('ProductName') is not None:
            self.product_name = m.get('ProductName')
        if m.get('ProductType') is not None:
            self.product_type = m.get('ProductType')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class CreateEBIResponseBodyRequestOrderRuleList(TeaModel):
    def __init__(
        self,
        act_on_ins_offer_id: int = None,
        act_on_operation_id: int = None,
        act_on_user_id: int = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        message: str = None,
        remarks: str = None,
        result_code: str = None,
        rule_code: str = None,
        rule_id: str = None,
        rule_name: str = None,
        rule_status: str = None,
        trigger_ins_offer_id: int = None,
    ):
        self.act_on_ins_offer_id = act_on_ins_offer_id
        self.act_on_operation_id = act_on_operation_id
        self.act_on_user_id = act_on_user_id
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.message = message
        self.remarks = remarks
        self.result_code = result_code
        self.rule_code = rule_code
        self.rule_id = rule_id
        self.rule_name = rule_name
        self.rule_status = rule_status
        self.trigger_ins_offer_id = trigger_ins_offer_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.act_on_ins_offer_id is not None:
            result['ActOnInsOfferId'] = self.act_on_ins_offer_id
        if self.act_on_operation_id is not None:
            result['ActOnOperationId'] = self.act_on_operation_id
        if self.act_on_user_id is not None:
            result['ActOnUserId'] = self.act_on_user_id
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.message is not None:
            result['Message'] = self.message
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.rule_code is not None:
            result['RuleCode'] = self.rule_code
        if self.rule_id is not None:
            result['RuleId'] = self.rule_id
        if self.rule_name is not None:
            result['RuleName'] = self.rule_name
        if self.rule_status is not None:
            result['RuleStatus'] = self.rule_status
        if self.trigger_ins_offer_id is not None:
            result['TriggerInsOfferId'] = self.trigger_ins_offer_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ActOnInsOfferId') is not None:
            self.act_on_ins_offer_id = m.get('ActOnInsOfferId')
        if m.get('ActOnOperationId') is not None:
            self.act_on_operation_id = m.get('ActOnOperationId')
        if m.get('ActOnUserId') is not None:
            self.act_on_user_id = m.get('ActOnUserId')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('RuleCode') is not None:
            self.rule_code = m.get('RuleCode')
        if m.get('RuleId') is not None:
            self.rule_id = m.get('RuleId')
        if m.get('RuleName') is not None:
            self.rule_name = m.get('RuleName')
        if m.get('RuleStatus') is not None:
            self.rule_status = m.get('RuleStatus')
        if m.get('TriggerInsOfferId') is not None:
            self.trigger_ins_offer_id = m.get('TriggerInsOfferId')
        return self


class CreateEBIResponseBodyRequestOrder(TeaModel):
    def __init__(
        self,
        account: CreateEBIResponseBodyRequestOrderAccount = None,
        assets: CreateEBIResponseBodyRequestOrderAssets = None,
        busi_operation: CreateEBIResponseBodyRequestOrderBusiOperation = None,
        busi_operator: str = None,
        busi_price_list: List[CreateEBIResponseBodyRequestOrderBusiPriceList] = None,
        channel_id: str = None,
        customer: CreateEBIResponseBodyRequestOrderCustomer = None,
        data_status: int = None,
        ext_info: Dict[str, str] = None,
        is_auth: bool = None,
        offer_list: List[CreateEBIResponseBodyRequestOrderOfferList] = None,
        open_completed_time: str = None,
        order_id: int = None,
        order_no: str = None,
        order_serial_id: int = None,
        order_status: str = None,
        order_time: str = None,
        order_type: str = None,
        owner_id: str = None,
        parent_order_id: str = None,
        product_list: List[CreateEBIResponseBodyRequestOrderProductList] = None,
        remarks: str = None,
        rule_list: List[CreateEBIResponseBodyRequestOrderRuleList] = None,
    ):
        self.account = account
        self.assets = assets
        self.busi_operation = busi_operation
        self.busi_operator = busi_operator
        self.busi_price_list = busi_price_list
        self.channel_id = channel_id
        self.customer = customer
        self.data_status = data_status
        self.ext_info = ext_info
        self.is_auth = is_auth
        self.offer_list = offer_list
        self.open_completed_time = open_completed_time
        self.order_id = order_id
        self.order_no = order_no
        self.order_serial_id = order_serial_id
        self.order_status = order_status
        self.order_time = order_time
        self.order_type = order_type
        self.owner_id = owner_id
        self.parent_order_id = parent_order_id
        self.product_list = product_list
        self.remarks = remarks
        self.rule_list = rule_list

    def validate(self):
        if self.account:
            self.account.validate()
        if self.assets:
            self.assets.validate()
        if self.busi_operation:
            self.busi_operation.validate()
        if self.busi_price_list:
            for k in self.busi_price_list:
                if k:
                    k.validate()
        if self.customer:
            self.customer.validate()
        if self.offer_list:
            for k in self.offer_list:
                if k:
                    k.validate()
        if self.product_list:
            for k in self.product_list:
                if k:
                    k.validate()
        if self.rule_list:
            for k in self.rule_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account is not None:
            result['Account'] = self.account.to_map()
        if self.assets is not None:
            result['Assets'] = self.assets.to_map()
        if self.busi_operation is not None:
            result['BusiOperation'] = self.busi_operation.to_map()
        if self.busi_operator is not None:
            result['BusiOperator'] = self.busi_operator
        result['BusiPriceList'] = []
        if self.busi_price_list is not None:
            for k in self.busi_price_list:
                result['BusiPriceList'].append(k.to_map() if k else None)
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.customer is not None:
            result['Customer'] = self.customer.to_map()
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.ext_info is not None:
            result['ExtInfo'] = self.ext_info
        if self.is_auth is not None:
            result['IsAuth'] = self.is_auth
        result['OfferList'] = []
        if self.offer_list is not None:
            for k in self.offer_list:
                result['OfferList'].append(k.to_map() if k else None)
        if self.open_completed_time is not None:
            result['OpenCompletedTime'] = self.open_completed_time
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.order_no is not None:
            result['OrderNo'] = self.order_no
        if self.order_serial_id is not None:
            result['OrderSerialId'] = self.order_serial_id
        if self.order_status is not None:
            result['OrderStatus'] = self.order_status
        if self.order_time is not None:
            result['OrderTime'] = self.order_time
        if self.order_type is not None:
            result['OrderType'] = self.order_type
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.parent_order_id is not None:
            result['ParentOrderId'] = self.parent_order_id
        result['ProductList'] = []
        if self.product_list is not None:
            for k in self.product_list:
                result['ProductList'].append(k.to_map() if k else None)
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        result['RuleList'] = []
        if self.rule_list is not None:
            for k in self.rule_list:
                result['RuleList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Account') is not None:
            temp_model = CreateEBIResponseBodyRequestOrderAccount()
            self.account = temp_model.from_map(m['Account'])
        if m.get('Assets') is not None:
            temp_model = CreateEBIResponseBodyRequestOrderAssets()
            self.assets = temp_model.from_map(m['Assets'])
        if m.get('BusiOperation') is not None:
            temp_model = CreateEBIResponseBodyRequestOrderBusiOperation()
            self.busi_operation = temp_model.from_map(m['BusiOperation'])
        if m.get('BusiOperator') is not None:
            self.busi_operator = m.get('BusiOperator')
        self.busi_price_list = []
        if m.get('BusiPriceList') is not None:
            for k in m.get('BusiPriceList'):
                temp_model = CreateEBIResponseBodyRequestOrderBusiPriceList()
                self.busi_price_list.append(temp_model.from_map(k))
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('Customer') is not None:
            temp_model = CreateEBIResponseBodyRequestOrderCustomer()
            self.customer = temp_model.from_map(m['Customer'])
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('ExtInfo') is not None:
            self.ext_info = m.get('ExtInfo')
        if m.get('IsAuth') is not None:
            self.is_auth = m.get('IsAuth')
        self.offer_list = []
        if m.get('OfferList') is not None:
            for k in m.get('OfferList'):
                temp_model = CreateEBIResponseBodyRequestOrderOfferList()
                self.offer_list.append(temp_model.from_map(k))
        if m.get('OpenCompletedTime') is not None:
            self.open_completed_time = m.get('OpenCompletedTime')
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('OrderNo') is not None:
            self.order_no = m.get('OrderNo')
        if m.get('OrderSerialId') is not None:
            self.order_serial_id = m.get('OrderSerialId')
        if m.get('OrderStatus') is not None:
            self.order_status = m.get('OrderStatus')
        if m.get('OrderTime') is not None:
            self.order_time = m.get('OrderTime')
        if m.get('OrderType') is not None:
            self.order_type = m.get('OrderType')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ParentOrderId') is not None:
            self.parent_order_id = m.get('ParentOrderId')
        self.product_list = []
        if m.get('ProductList') is not None:
            for k in m.get('ProductList'):
                temp_model = CreateEBIResponseBodyRequestOrderProductList()
                self.product_list.append(temp_model.from_map(k))
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        self.rule_list = []
        if m.get('RuleList') is not None:
            for k in m.get('RuleList'):
                temp_model = CreateEBIResponseBodyRequestOrderRuleList()
                self.rule_list.append(temp_model.from_map(k))
        return self


class CreateEBIResponseBodyRequest(TeaModel):
    def __init__(
        self,
        is_sync: bool = None,
        order: CreateEBIResponseBodyRequestOrder = None,
        serial_no: str = None,
    ):
        self.is_sync = is_sync
        self.order = order
        self.serial_no = serial_no

    def validate(self):
        if self.order:
            self.order.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_sync is not None:
            result['IsSync'] = self.is_sync
        if self.order is not None:
            result['Order'] = self.order.to_map()
        if self.serial_no is not None:
            result['SerialNo'] = self.serial_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IsSync') is not None:
            self.is_sync = m.get('IsSync')
        if m.get('Order') is not None:
            temp_model = CreateEBIResponseBodyRequestOrder()
            self.order = temp_model.from_map(m['Order'])
        if m.get('SerialNo') is not None:
            self.serial_no = m.get('SerialNo')
        return self


class CreateEBIResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        desc: str = None,
        model: CreateEBIResponseBodyModel = None,
        query_count: int = None,
        request: CreateEBIResponseBodyRequest = None,
        success: bool = None,
    ):
        self.code = code
        self.desc = desc
        self.model = model
        self.query_count = query_count
        self.request = request
        self.success = success

    def validate(self):
        if self.model:
            self.model.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.model is not None:
            result['Model'] = self.model.to_map()
        if self.query_count is not None:
            result['QueryCount'] = self.query_count
        if self.request is not None:
            result['Request'] = self.request.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Model') is not None:
            temp_model = CreateEBIResponseBodyModel()
            self.model = temp_model.from_map(m['Model'])
        if m.get('QueryCount') is not None:
            self.query_count = m.get('QueryCount')
        if m.get('Request') is not None:
            temp_model = CreateEBIResponseBodyRequest()
            self.request = temp_model.from_map(m['Request'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateEBIResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateEBIResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateEBIResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateOrderCallBackRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        data: str = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class CreateOrderCallBackResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        message: str = None,
        request_id: str = None,
        success: str = None,
        synchro: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id
        self.success = success
        self.synchro = synchro

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.synchro is not None:
            result['Synchro'] = self.synchro
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Synchro') is not None:
            self.synchro = m.get('Synchro')
        return self


class CreateOrderCallBackResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateOrderCallBackResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateOrderCallBackResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteCidrInVtuneInstanceRequestTagKeyValueModels(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class DeleteCidrInVtuneInstanceRequest(TeaModel):
    def __init__(
        self,
        ak_proxy: str = None,
        ali_uid: int = None,
        api_name: str = None,
        app_key: str = None,
        caller_bid: str = None,
        caller_bid_login_email: str = None,
        caller_security_transport: bool = None,
        caller_type: str = None,
        caller_uid: int = None,
        caller_uid_login_email: str = None,
        channel: str = None,
        cidrs: List[str] = None,
        client_ip: str = None,
        enable: bool = None,
        from_type: int = None,
        mfa_present: bool = None,
        operator: str = None,
        owner_account: str = None,
        owner_id: int = None,
        owner_id_login_email: str = None,
        prod_code: str = None,
        proxy_caller_ip: str = None,
        proxy_caller_security_transport: bool = None,
        proxy_id: str = None,
        proxy_trust_transport_info: bool = None,
        request_content: str = None,
        request_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        security_token: str = None,
        sms_resource_owner_id: int = None,
        tag_key_1: str = None,
        tag_key_2: str = None,
        tag_key_3: str = None,
        tag_key_4: str = None,
        tag_key_5: str = None,
        tag_key_value_models: List[DeleteCidrInVtuneInstanceRequestTagKeyValueModels] = None,
        tag_value_1: str = None,
        tag_value_2: str = None,
        tag_value_3: str = None,
        tag_value_4: str = None,
        tag_value_5: str = None,
        token: str = None,
        version: str = None,
        vtune_id: str = None,
    ):
        self.ak_proxy = ak_proxy
        self.ali_uid = ali_uid
        self.api_name = api_name
        self.app_key = app_key
        self.caller_bid = caller_bid
        self.caller_bid_login_email = caller_bid_login_email
        self.caller_security_transport = caller_security_transport
        self.caller_type = caller_type
        self.caller_uid = caller_uid
        self.caller_uid_login_email = caller_uid_login_email
        self.channel = channel
        self.cidrs = cidrs
        self.client_ip = client_ip
        self.enable = enable
        self.from_type = from_type
        self.mfa_present = mfa_present
        self.operator = operator
        self.owner_account = owner_account
        self.owner_id = owner_id
        self.owner_id_login_email = owner_id_login_email
        self.prod_code = prod_code
        self.proxy_caller_ip = proxy_caller_ip
        self.proxy_caller_security_transport = proxy_caller_security_transport
        self.proxy_id = proxy_id
        self.proxy_trust_transport_info = proxy_trust_transport_info
        self.request_content = request_content
        self.request_id = request_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.security_token = security_token
        self.sms_resource_owner_id = sms_resource_owner_id
        self.tag_key_1 = tag_key_1
        self.tag_key_2 = tag_key_2
        self.tag_key_3 = tag_key_3
        self.tag_key_4 = tag_key_4
        self.tag_key_5 = tag_key_5
        self.tag_key_value_models = tag_key_value_models
        self.tag_value_1 = tag_value_1
        self.tag_value_2 = tag_value_2
        self.tag_value_3 = tag_value_3
        self.tag_value_4 = tag_value_4
        self.tag_value_5 = tag_value_5
        self.token = token
        self.version = version
        self.vtune_id = vtune_id

    def validate(self):
        if self.tag_key_value_models:
            for k in self.tag_key_value_models:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ak_proxy is not None:
            result['AkProxy'] = self.ak_proxy
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.caller_bid is not None:
            result['CallerBid'] = self.caller_bid
        if self.caller_bid_login_email is not None:
            result['CallerBidLoginEmail'] = self.caller_bid_login_email
        if self.caller_security_transport is not None:
            result['CallerSecurityTransport'] = self.caller_security_transport
        if self.caller_type is not None:
            result['CallerType'] = self.caller_type
        if self.caller_uid is not None:
            result['CallerUid'] = self.caller_uid
        if self.caller_uid_login_email is not None:
            result['CallerUidLoginEmail'] = self.caller_uid_login_email
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.cidrs is not None:
            result['Cidrs'] = self.cidrs
        if self.client_ip is not None:
            result['ClientIP'] = self.client_ip
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.from_type is not None:
            result['FromType'] = self.from_type
        if self.mfa_present is not None:
            result['MfaPresent'] = self.mfa_present
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.owner_account is not None:
            result['OwnerAccount'] = self.owner_account
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.owner_id_login_email is not None:
            result['OwnerIdLoginEmail'] = self.owner_id_login_email
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.proxy_caller_ip is not None:
            result['ProxyCallerIp'] = self.proxy_caller_ip
        if self.proxy_caller_security_transport is not None:
            result['ProxyCallerSecurityTransport'] = self.proxy_caller_security_transport
        if self.proxy_id is not None:
            result['ProxyId'] = self.proxy_id
        if self.proxy_trust_transport_info is not None:
            result['ProxyTrustTransportInfo'] = self.proxy_trust_transport_info
        if self.request_content is not None:
            result['RequestContent'] = self.request_content
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        if self.sms_resource_owner_id is not None:
            result['SmsResourceOwnerId'] = self.sms_resource_owner_id
        if self.tag_key_1 is not None:
            result['TagKey1'] = self.tag_key_1
        if self.tag_key_2 is not None:
            result['TagKey2'] = self.tag_key_2
        if self.tag_key_3 is not None:
            result['TagKey3'] = self.tag_key_3
        if self.tag_key_4 is not None:
            result['TagKey4'] = self.tag_key_4
        if self.tag_key_5 is not None:
            result['TagKey5'] = self.tag_key_5
        result['TagKeyValueModels'] = []
        if self.tag_key_value_models is not None:
            for k in self.tag_key_value_models:
                result['TagKeyValueModels'].append(k.to_map() if k else None)
        if self.tag_value_1 is not None:
            result['TagValue1'] = self.tag_value_1
        if self.tag_value_2 is not None:
            result['TagValue2'] = self.tag_value_2
        if self.tag_value_3 is not None:
            result['TagValue3'] = self.tag_value_3
        if self.tag_value_4 is not None:
            result['TagValue4'] = self.tag_value_4
        if self.tag_value_5 is not None:
            result['TagValue5'] = self.tag_value_5
        if self.token is not None:
            result['Token'] = self.token
        if self.version is not None:
            result['Version'] = self.version
        if self.vtune_id is not None:
            result['VtuneId'] = self.vtune_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AkProxy') is not None:
            self.ak_proxy = m.get('AkProxy')
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('CallerBid') is not None:
            self.caller_bid = m.get('CallerBid')
        if m.get('CallerBidLoginEmail') is not None:
            self.caller_bid_login_email = m.get('CallerBidLoginEmail')
        if m.get('CallerSecurityTransport') is not None:
            self.caller_security_transport = m.get('CallerSecurityTransport')
        if m.get('CallerType') is not None:
            self.caller_type = m.get('CallerType')
        if m.get('CallerUid') is not None:
            self.caller_uid = m.get('CallerUid')
        if m.get('CallerUidLoginEmail') is not None:
            self.caller_uid_login_email = m.get('CallerUidLoginEmail')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('Cidrs') is not None:
            self.cidrs = m.get('Cidrs')
        if m.get('ClientIP') is not None:
            self.client_ip = m.get('ClientIP')
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('FromType') is not None:
            self.from_type = m.get('FromType')
        if m.get('MfaPresent') is not None:
            self.mfa_present = m.get('MfaPresent')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('OwnerAccount') is not None:
            self.owner_account = m.get('OwnerAccount')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('OwnerIdLoginEmail') is not None:
            self.owner_id_login_email = m.get('OwnerIdLoginEmail')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProxyCallerIp') is not None:
            self.proxy_caller_ip = m.get('ProxyCallerIp')
        if m.get('ProxyCallerSecurityTransport') is not None:
            self.proxy_caller_security_transport = m.get('ProxyCallerSecurityTransport')
        if m.get('ProxyId') is not None:
            self.proxy_id = m.get('ProxyId')
        if m.get('ProxyTrustTransportInfo') is not None:
            self.proxy_trust_transport_info = m.get('ProxyTrustTransportInfo')
        if m.get('RequestContent') is not None:
            self.request_content = m.get('RequestContent')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        if m.get('SmsResourceOwnerId') is not None:
            self.sms_resource_owner_id = m.get('SmsResourceOwnerId')
        if m.get('TagKey1') is not None:
            self.tag_key_1 = m.get('TagKey1')
        if m.get('TagKey2') is not None:
            self.tag_key_2 = m.get('TagKey2')
        if m.get('TagKey3') is not None:
            self.tag_key_3 = m.get('TagKey3')
        if m.get('TagKey4') is not None:
            self.tag_key_4 = m.get('TagKey4')
        if m.get('TagKey5') is not None:
            self.tag_key_5 = m.get('TagKey5')
        self.tag_key_value_models = []
        if m.get('TagKeyValueModels') is not None:
            for k in m.get('TagKeyValueModels'):
                temp_model = DeleteCidrInVtuneInstanceRequestTagKeyValueModels()
                self.tag_key_value_models.append(temp_model.from_map(k))
        if m.get('TagValue1') is not None:
            self.tag_value_1 = m.get('TagValue1')
        if m.get('TagValue2') is not None:
            self.tag_value_2 = m.get('TagValue2')
        if m.get('TagValue3') is not None:
            self.tag_value_3 = m.get('TagValue3')
        if m.get('TagValue4') is not None:
            self.tag_value_4 = m.get('TagValue4')
        if m.get('TagValue5') is not None:
            self.tag_value_5 = m.get('TagValue5')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        if m.get('VtuneId') is not None:
            self.vtune_id = m.get('VtuneId')
        return self


class DeleteCidrInVtuneInstanceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        content: Any = None,
        desc: str = None,
        description: str = None,
        request_id: str = None,
        ret_code: int = None,
        success: bool = None,
    ):
        self.code = code
        self.content = content
        self.desc = desc
        self.description = description
        self.request_id = request_id
        self.ret_code = ret_code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.content is not None:
            result['Content'] = self.content
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.description is not None:
            result['Description'] = self.description
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.ret_code is not None:
            result['RetCode'] = self.ret_code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RetCode') is not None:
            self.ret_code = m.get('RetCode')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteCidrInVtuneInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteCidrInVtuneInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteCidrInVtuneInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteEBIRequestTagKeyValueModels(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class DeleteEBIRequest(TeaModel):
    def __init__(
        self,
        ak_proxy: str = None,
        ali_uid: int = None,
        api_name: str = None,
        app_key: str = None,
        caller_bid_login_email: str = None,
        caller_security_transport: bool = None,
        caller_uid_login_email: str = None,
        channel: str = None,
        client_ip: str = None,
        ebi_id: str = None,
        enable: bool = None,
        from_type: int = None,
        mfa_present: bool = None,
        operator: str = None,
        owner_account: str = None,
        owner_id: int = None,
        owner_id_login_email: str = None,
        prod_code: str = None,
        proxy_caller_ip: str = None,
        proxy_caller_security_transport: bool = None,
        proxy_id: str = None,
        proxy_trust_transport_info: bool = None,
        request_content: str = None,
        request_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        security_token: str = None,
        sms_resource_owner_id: int = None,
        tag_key_1: str = None,
        tag_key_2: str = None,
        tag_key_3: str = None,
        tag_key_4: str = None,
        tag_key_5: str = None,
        tag_key_value_models: List[DeleteEBIRequestTagKeyValueModels] = None,
        tag_value_1: str = None,
        tag_value_2: str = None,
        tag_value_3: str = None,
        tag_value_4: str = None,
        tag_value_5: str = None,
        token: str = None,
        version: str = None,
    ):
        self.ak_proxy = ak_proxy
        self.ali_uid = ali_uid
        self.api_name = api_name
        self.app_key = app_key
        self.caller_bid_login_email = caller_bid_login_email
        self.caller_security_transport = caller_security_transport
        self.caller_uid_login_email = caller_uid_login_email
        self.channel = channel
        self.client_ip = client_ip
        self.ebi_id = ebi_id
        self.enable = enable
        self.from_type = from_type
        self.mfa_present = mfa_present
        self.operator = operator
        self.owner_account = owner_account
        self.owner_id = owner_id
        self.owner_id_login_email = owner_id_login_email
        self.prod_code = prod_code
        self.proxy_caller_ip = proxy_caller_ip
        self.proxy_caller_security_transport = proxy_caller_security_transport
        self.proxy_id = proxy_id
        self.proxy_trust_transport_info = proxy_trust_transport_info
        self.request_content = request_content
        self.request_id = request_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.security_token = security_token
        self.sms_resource_owner_id = sms_resource_owner_id
        self.tag_key_1 = tag_key_1
        self.tag_key_2 = tag_key_2
        self.tag_key_3 = tag_key_3
        self.tag_key_4 = tag_key_4
        self.tag_key_5 = tag_key_5
        self.tag_key_value_models = tag_key_value_models
        self.tag_value_1 = tag_value_1
        self.tag_value_2 = tag_value_2
        self.tag_value_3 = tag_value_3
        self.tag_value_4 = tag_value_4
        self.tag_value_5 = tag_value_5
        self.token = token
        self.version = version

    def validate(self):
        if self.tag_key_value_models:
            for k in self.tag_key_value_models:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ak_proxy is not None:
            result['AkProxy'] = self.ak_proxy
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.caller_bid_login_email is not None:
            result['CallerBidLoginEmail'] = self.caller_bid_login_email
        if self.caller_security_transport is not None:
            result['CallerSecurityTransport'] = self.caller_security_transport
        if self.caller_uid_login_email is not None:
            result['CallerUidLoginEmail'] = self.caller_uid_login_email
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.client_ip is not None:
            result['ClientIP'] = self.client_ip
        if self.ebi_id is not None:
            result['EbiId'] = self.ebi_id
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.from_type is not None:
            result['FromType'] = self.from_type
        if self.mfa_present is not None:
            result['MfaPresent'] = self.mfa_present
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.owner_account is not None:
            result['OwnerAccount'] = self.owner_account
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.owner_id_login_email is not None:
            result['OwnerIdLoginEmail'] = self.owner_id_login_email
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.proxy_caller_ip is not None:
            result['ProxyCallerIp'] = self.proxy_caller_ip
        if self.proxy_caller_security_transport is not None:
            result['ProxyCallerSecurityTransport'] = self.proxy_caller_security_transport
        if self.proxy_id is not None:
            result['ProxyId'] = self.proxy_id
        if self.proxy_trust_transport_info is not None:
            result['ProxyTrustTransportInfo'] = self.proxy_trust_transport_info
        if self.request_content is not None:
            result['RequestContent'] = self.request_content
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        if self.sms_resource_owner_id is not None:
            result['SmsResourceOwnerId'] = self.sms_resource_owner_id
        if self.tag_key_1 is not None:
            result['TagKey1'] = self.tag_key_1
        if self.tag_key_2 is not None:
            result['TagKey2'] = self.tag_key_2
        if self.tag_key_3 is not None:
            result['TagKey3'] = self.tag_key_3
        if self.tag_key_4 is not None:
            result['TagKey4'] = self.tag_key_4
        if self.tag_key_5 is not None:
            result['TagKey5'] = self.tag_key_5
        result['TagKeyValueModels'] = []
        if self.tag_key_value_models is not None:
            for k in self.tag_key_value_models:
                result['TagKeyValueModels'].append(k.to_map() if k else None)
        if self.tag_value_1 is not None:
            result['TagValue1'] = self.tag_value_1
        if self.tag_value_2 is not None:
            result['TagValue2'] = self.tag_value_2
        if self.tag_value_3 is not None:
            result['TagValue3'] = self.tag_value_3
        if self.tag_value_4 is not None:
            result['TagValue4'] = self.tag_value_4
        if self.tag_value_5 is not None:
            result['TagValue5'] = self.tag_value_5
        if self.token is not None:
            result['Token'] = self.token
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AkProxy') is not None:
            self.ak_proxy = m.get('AkProxy')
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('CallerBidLoginEmail') is not None:
            self.caller_bid_login_email = m.get('CallerBidLoginEmail')
        if m.get('CallerSecurityTransport') is not None:
            self.caller_security_transport = m.get('CallerSecurityTransport')
        if m.get('CallerUidLoginEmail') is not None:
            self.caller_uid_login_email = m.get('CallerUidLoginEmail')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ClientIP') is not None:
            self.client_ip = m.get('ClientIP')
        if m.get('EbiId') is not None:
            self.ebi_id = m.get('EbiId')
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('FromType') is not None:
            self.from_type = m.get('FromType')
        if m.get('MfaPresent') is not None:
            self.mfa_present = m.get('MfaPresent')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('OwnerAccount') is not None:
            self.owner_account = m.get('OwnerAccount')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('OwnerIdLoginEmail') is not None:
            self.owner_id_login_email = m.get('OwnerIdLoginEmail')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProxyCallerIp') is not None:
            self.proxy_caller_ip = m.get('ProxyCallerIp')
        if m.get('ProxyCallerSecurityTransport') is not None:
            self.proxy_caller_security_transport = m.get('ProxyCallerSecurityTransport')
        if m.get('ProxyId') is not None:
            self.proxy_id = m.get('ProxyId')
        if m.get('ProxyTrustTransportInfo') is not None:
            self.proxy_trust_transport_info = m.get('ProxyTrustTransportInfo')
        if m.get('RequestContent') is not None:
            self.request_content = m.get('RequestContent')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        if m.get('SmsResourceOwnerId') is not None:
            self.sms_resource_owner_id = m.get('SmsResourceOwnerId')
        if m.get('TagKey1') is not None:
            self.tag_key_1 = m.get('TagKey1')
        if m.get('TagKey2') is not None:
            self.tag_key_2 = m.get('TagKey2')
        if m.get('TagKey3') is not None:
            self.tag_key_3 = m.get('TagKey3')
        if m.get('TagKey4') is not None:
            self.tag_key_4 = m.get('TagKey4')
        if m.get('TagKey5') is not None:
            self.tag_key_5 = m.get('TagKey5')
        self.tag_key_value_models = []
        if m.get('TagKeyValueModels') is not None:
            for k in m.get('TagKeyValueModels'):
                temp_model = DeleteEBIRequestTagKeyValueModels()
                self.tag_key_value_models.append(temp_model.from_map(k))
        if m.get('TagValue1') is not None:
            self.tag_value_1 = m.get('TagValue1')
        if m.get('TagValue2') is not None:
            self.tag_value_2 = m.get('TagValue2')
        if m.get('TagValue3') is not None:
            self.tag_value_3 = m.get('TagValue3')
        if m.get('TagValue4') is not None:
            self.tag_value_4 = m.get('TagValue4')
        if m.get('TagValue5') is not None:
            self.tag_value_5 = m.get('TagValue5')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DeleteEBIResponseBodyModelContent(TeaModel):
    def __init__(
        self,
        ebi_id: str = None,
        status: str = None,
    ):
        self.ebi_id = ebi_id
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ebi_id is not None:
            result['EbiId'] = self.ebi_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EbiId') is not None:
            self.ebi_id = m.get('EbiId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class DeleteEBIResponseBodyModel(TeaModel):
    def __init__(
        self,
        content: DeleteEBIResponseBodyModelContent = None,
        description: str = None,
        request_id: str = None,
        ret_code: int = None,
    ):
        self.content = content
        self.description = description
        self.request_id = request_id
        self.ret_code = ret_code

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content.to_map()
        if self.description is not None:
            result['Description'] = self.description
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.ret_code is not None:
            result['RetCode'] = self.ret_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Content') is not None:
            temp_model = DeleteEBIResponseBodyModelContent()
            self.content = temp_model.from_map(m['Content'])
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RetCode') is not None:
            self.ret_code = m.get('RetCode')
        return self


class DeleteEBIResponseBodyRequestOrderAccountCreditList(TeaModel):
    def __init__(
        self,
        account_id: int = None,
        account_name: str = None,
        credit_balance: int = None,
        cust_id: int = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        remarks: str = None,
    ):
        self.account_id = account_id
        self.account_name = account_name
        self.credit_balance = credit_balance
        self.cust_id = cust_id
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.remarks = remarks

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.account_name is not None:
            result['AccountName'] = self.account_name
        if self.credit_balance is not None:
            result['CreditBalance'] = self.credit_balance
        if self.cust_id is not None:
            result['CustId'] = self.cust_id
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('AccountName') is not None:
            self.account_name = m.get('AccountName')
        if m.get('CreditBalance') is not None:
            self.credit_balance = m.get('CreditBalance')
        if m.get('CustId') is not None:
            self.cust_id = m.get('CustId')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class DeleteEBIResponseBodyRequestOrderAccount(TeaModel):
    def __init__(
        self,
        acct_id: int = None,
        acct_name: str = None,
        acct_type: str = None,
        bill_type: int = None,
        control_type: int = None,
        credit_list: List[DeleteEBIResponseBodyRequestOrderAccountCreditList] = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        remarks: str = None,
    ):
        self.acct_id = acct_id
        self.acct_name = acct_name
        self.acct_type = acct_type
        self.bill_type = bill_type
        self.control_type = control_type
        self.credit_list = credit_list
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.remarks = remarks

    def validate(self):
        if self.credit_list:
            for k in self.credit_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.acct_id is not None:
            result['AcctId'] = self.acct_id
        if self.acct_name is not None:
            result['AcctName'] = self.acct_name
        if self.acct_type is not None:
            result['AcctType'] = self.acct_type
        if self.bill_type is not None:
            result['BillType'] = self.bill_type
        if self.control_type is not None:
            result['ControlType'] = self.control_type
        result['CreditList'] = []
        if self.credit_list is not None:
            for k in self.credit_list:
                result['CreditList'].append(k.to_map() if k else None)
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AcctId') is not None:
            self.acct_id = m.get('AcctId')
        if m.get('AcctName') is not None:
            self.acct_name = m.get('AcctName')
        if m.get('AcctType') is not None:
            self.acct_type = m.get('AcctType')
        if m.get('BillType') is not None:
            self.bill_type = m.get('BillType')
        if m.get('ControlType') is not None:
            self.control_type = m.get('ControlType')
        self.credit_list = []
        if m.get('CreditList') is not None:
            for k in m.get('CreditList'):
                temp_model = DeleteEBIResponseBodyRequestOrderAccountCreditList()
                self.credit_list.append(temp_model.from_map(k))
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class DeleteEBIResponseBodyRequestOrderAssetsAttributeList(TeaModel):
    def __init__(
        self,
        attr_group: str = None,
        attr_id: int = None,
        attr_name: str = None,
        attr_text: str = None,
        attr_value: str = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        mapping_code: str = None,
        old_attr_text: str = None,
        old_attr_value: str = None,
        options: int = None,
        remarks: str = None,
        value_expression: str = None,
    ):
        self.attr_group = attr_group
        self.attr_id = attr_id
        self.attr_name = attr_name
        self.attr_text = attr_text
        self.attr_value = attr_value
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.mapping_code = mapping_code
        self.old_attr_text = old_attr_text
        self.old_attr_value = old_attr_value
        self.options = options
        self.remarks = remarks
        self.value_expression = value_expression

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attr_group is not None:
            result['AttrGroup'] = self.attr_group
        if self.attr_id is not None:
            result['AttrId'] = self.attr_id
        if self.attr_name is not None:
            result['AttrName'] = self.attr_name
        if self.attr_text is not None:
            result['AttrText'] = self.attr_text
        if self.attr_value is not None:
            result['AttrValue'] = self.attr_value
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.mapping_code is not None:
            result['MappingCode'] = self.mapping_code
        if self.old_attr_text is not None:
            result['OldAttrText'] = self.old_attr_text
        if self.old_attr_value is not None:
            result['OldAttrValue'] = self.old_attr_value
        if self.options is not None:
            result['Options'] = self.options
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.value_expression is not None:
            result['ValueExpression'] = self.value_expression
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AttrGroup') is not None:
            self.attr_group = m.get('AttrGroup')
        if m.get('AttrId') is not None:
            self.attr_id = m.get('AttrId')
        if m.get('AttrName') is not None:
            self.attr_name = m.get('AttrName')
        if m.get('AttrText') is not None:
            self.attr_text = m.get('AttrText')
        if m.get('AttrValue') is not None:
            self.attr_value = m.get('AttrValue')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('MappingCode') is not None:
            self.mapping_code = m.get('MappingCode')
        if m.get('OldAttrText') is not None:
            self.old_attr_text = m.get('OldAttrText')
        if m.get('OldAttrValue') is not None:
            self.old_attr_value = m.get('OldAttrValue')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ValueExpression') is not None:
            self.value_expression = m.get('ValueExpression')
        return self


class DeleteEBIResponseBodyRequestOrderAssets(TeaModel):
    def __init__(
        self,
        active_time: str = None,
        assets_id: int = None,
        assets_name: str = None,
        assets_owner: str = None,
        assets_status: int = None,
        assets_tag: int = None,
        assets_type: int = None,
        attribute_list: List[DeleteEBIResponseBodyRequestOrderAssetsAttributeList] = None,
        bill_id: str = None,
        bill_source: str = None,
        channel_id: str = None,
        data_status: int = None,
        destroy_time: str = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        group_path: str = None,
        imsi: str = None,
        ins_status: int = None,
        os_status: str = None,
        os_time: str = None,
        owner_assets_id: int = None,
        password: str = None,
        pre_destroy_time: str = None,
        product_line_code: str = None,
        real_bill_number: str = None,
        remarks: str = None,
        res_code: str = None,
    ):
        self.active_time = active_time
        self.assets_id = assets_id
        self.assets_name = assets_name
        self.assets_owner = assets_owner
        self.assets_status = assets_status
        self.assets_tag = assets_tag
        self.assets_type = assets_type
        self.attribute_list = attribute_list
        self.bill_id = bill_id
        self.bill_source = bill_source
        self.channel_id = channel_id
        self.data_status = data_status
        self.destroy_time = destroy_time
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.group_path = group_path
        self.imsi = imsi
        self.ins_status = ins_status
        self.os_status = os_status
        self.os_time = os_time
        self.owner_assets_id = owner_assets_id
        self.password = password
        self.pre_destroy_time = pre_destroy_time
        self.product_line_code = product_line_code
        self.real_bill_number = real_bill_number
        self.remarks = remarks
        self.res_code = res_code

    def validate(self):
        if self.attribute_list:
            for k in self.attribute_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.active_time is not None:
            result['ActiveTime'] = self.active_time
        if self.assets_id is not None:
            result['AssetsId'] = self.assets_id
        if self.assets_name is not None:
            result['AssetsName'] = self.assets_name
        if self.assets_owner is not None:
            result['AssetsOwner'] = self.assets_owner
        if self.assets_status is not None:
            result['AssetsStatus'] = self.assets_status
        if self.assets_tag is not None:
            result['AssetsTag'] = self.assets_tag
        if self.assets_type is not None:
            result['AssetsType'] = self.assets_type
        result['AttributeList'] = []
        if self.attribute_list is not None:
            for k in self.attribute_list:
                result['AttributeList'].append(k.to_map() if k else None)
        if self.bill_id is not None:
            result['BillId'] = self.bill_id
        if self.bill_source is not None:
            result['BillSource'] = self.bill_source
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.destroy_time is not None:
            result['DestroyTime'] = self.destroy_time
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.group_path is not None:
            result['GroupPath'] = self.group_path
        if self.imsi is not None:
            result['Imsi'] = self.imsi
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.os_status is not None:
            result['OsStatus'] = self.os_status
        if self.os_time is not None:
            result['OsTime'] = self.os_time
        if self.owner_assets_id is not None:
            result['OwnerAssetsId'] = self.owner_assets_id
        if self.password is not None:
            result['Password'] = self.password
        if self.pre_destroy_time is not None:
            result['PreDestroyTime'] = self.pre_destroy_time
        if self.product_line_code is not None:
            result['ProductLineCode'] = self.product_line_code
        if self.real_bill_number is not None:
            result['RealBillNumber'] = self.real_bill_number
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.res_code is not None:
            result['ResCode'] = self.res_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ActiveTime') is not None:
            self.active_time = m.get('ActiveTime')
        if m.get('AssetsId') is not None:
            self.assets_id = m.get('AssetsId')
        if m.get('AssetsName') is not None:
            self.assets_name = m.get('AssetsName')
        if m.get('AssetsOwner') is not None:
            self.assets_owner = m.get('AssetsOwner')
        if m.get('AssetsStatus') is not None:
            self.assets_status = m.get('AssetsStatus')
        if m.get('AssetsTag') is not None:
            self.assets_tag = m.get('AssetsTag')
        if m.get('AssetsType') is not None:
            self.assets_type = m.get('AssetsType')
        self.attribute_list = []
        if m.get('AttributeList') is not None:
            for k in m.get('AttributeList'):
                temp_model = DeleteEBIResponseBodyRequestOrderAssetsAttributeList()
                self.attribute_list.append(temp_model.from_map(k))
        if m.get('BillId') is not None:
            self.bill_id = m.get('BillId')
        if m.get('BillSource') is not None:
            self.bill_source = m.get('BillSource')
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('DestroyTime') is not None:
            self.destroy_time = m.get('DestroyTime')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('GroupPath') is not None:
            self.group_path = m.get('GroupPath')
        if m.get('Imsi') is not None:
            self.imsi = m.get('Imsi')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('OsStatus') is not None:
            self.os_status = m.get('OsStatus')
        if m.get('OsTime') is not None:
            self.os_time = m.get('OsTime')
        if m.get('OwnerAssetsId') is not None:
            self.owner_assets_id = m.get('OwnerAssetsId')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('PreDestroyTime') is not None:
            self.pre_destroy_time = m.get('PreDestroyTime')
        if m.get('ProductLineCode') is not None:
            self.product_line_code = m.get('ProductLineCode')
        if m.get('RealBillNumber') is not None:
            self.real_bill_number = m.get('RealBillNumber')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ResCode') is not None:
            self.res_code = m.get('ResCode')
        return self


class DeleteEBIResponseBodyRequestOrderBusiOperation(TeaModel):
    def __init__(
        self,
        operation_code: str = None,
        operation_id: int = None,
        operation_name: str = None,
    ):
        self.operation_code = operation_code
        self.operation_id = operation_id
        self.operation_name = operation_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.operation_code is not None:
            result['OperationCode'] = self.operation_code
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.operation_name is not None:
            result['OperationName'] = self.operation_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OperationCode') is not None:
            self.operation_code = m.get('OperationCode')
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('OperationName') is not None:
            self.operation_name = m.get('OperationName')
        return self


class DeleteEBIResponseBodyRequestOrderBusiPriceListBusiPriceDetailList(TeaModel):
    def __init__(
        self,
        outer_order_no: str = None,
        paid_amount: int = None,
        payment_mode: str = None,
    ):
        self.outer_order_no = outer_order_no
        self.paid_amount = paid_amount
        self.payment_mode = payment_mode

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.outer_order_no is not None:
            result['OuterOrderNo'] = self.outer_order_no
        if self.paid_amount is not None:
            result['PaidAmount'] = self.paid_amount
        if self.payment_mode is not None:
            result['PaymentMode'] = self.payment_mode
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OuterOrderNo') is not None:
            self.outer_order_no = m.get('OuterOrderNo')
        if m.get('PaidAmount') is not None:
            self.paid_amount = m.get('PaidAmount')
        if m.get('PaymentMode') is not None:
            self.payment_mode = m.get('PaymentMode')
        return self


class DeleteEBIResponseBodyRequestOrderBusiPriceList(TeaModel):
    def __init__(
        self,
        alipay_order_no: str = None,
        busi_operation_id: int = None,
        busi_price_detail_list: List[DeleteEBIResponseBodyRequestOrderBusiPriceListBusiPriceDetailList] = None,
        offer_id: int = None,
        order_channel: str = None,
        outer_order_no: str = None,
        paid_amount: int = None,
        receivable_amount: int = None,
        subject_id: str = None,
    ):
        self.alipay_order_no = alipay_order_no
        self.busi_operation_id = busi_operation_id
        self.busi_price_detail_list = busi_price_detail_list
        self.offer_id = offer_id
        self.order_channel = order_channel
        self.outer_order_no = outer_order_no
        self.paid_amount = paid_amount
        self.receivable_amount = receivable_amount
        self.subject_id = subject_id

    def validate(self):
        if self.busi_price_detail_list:
            for k in self.busi_price_detail_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alipay_order_no is not None:
            result['AlipayOrderNo'] = self.alipay_order_no
        if self.busi_operation_id is not None:
            result['BusiOperationId'] = self.busi_operation_id
        result['BusiPriceDetailList'] = []
        if self.busi_price_detail_list is not None:
            for k in self.busi_price_detail_list:
                result['BusiPriceDetailList'].append(k.to_map() if k else None)
        if self.offer_id is not None:
            result['OfferId'] = self.offer_id
        if self.order_channel is not None:
            result['OrderChannel'] = self.order_channel
        if self.outer_order_no is not None:
            result['OuterOrderNo'] = self.outer_order_no
        if self.paid_amount is not None:
            result['PaidAmount'] = self.paid_amount
        if self.receivable_amount is not None:
            result['ReceivableAmount'] = self.receivable_amount
        if self.subject_id is not None:
            result['SubjectId'] = self.subject_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlipayOrderNo') is not None:
            self.alipay_order_no = m.get('AlipayOrderNo')
        if m.get('BusiOperationId') is not None:
            self.busi_operation_id = m.get('BusiOperationId')
        self.busi_price_detail_list = []
        if m.get('BusiPriceDetailList') is not None:
            for k in m.get('BusiPriceDetailList'):
                temp_model = DeleteEBIResponseBodyRequestOrderBusiPriceListBusiPriceDetailList()
                self.busi_price_detail_list.append(temp_model.from_map(k))
        if m.get('OfferId') is not None:
            self.offer_id = m.get('OfferId')
        if m.get('OrderChannel') is not None:
            self.order_channel = m.get('OrderChannel')
        if m.get('OuterOrderNo') is not None:
            self.outer_order_no = m.get('OuterOrderNo')
        if m.get('PaidAmount') is not None:
            self.paid_amount = m.get('PaidAmount')
        if m.get('ReceivableAmount') is not None:
            self.receivable_amount = m.get('ReceivableAmount')
        if m.get('SubjectId') is not None:
            self.subject_id = m.get('SubjectId')
        return self


class DeleteEBIResponseBodyRequestOrderCustomerContracts(TeaModel):
    def __init__(
        self,
        contact_address: str = None,
        contact_name: str = None,
        contact_phone: str = None,
        contact_type: int = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        remarks: str = None,
    ):
        self.contact_address = contact_address
        self.contact_name = contact_name
        self.contact_phone = contact_phone
        self.contact_type = contact_type
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.remarks = remarks

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_address is not None:
            result['ContactAddress'] = self.contact_address
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.contact_phone is not None:
            result['ContactPhone'] = self.contact_phone
        if self.contact_type is not None:
            result['ContactType'] = self.contact_type
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactAddress') is not None:
            self.contact_address = m.get('ContactAddress')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('ContactPhone') is not None:
            self.contact_phone = m.get('ContactPhone')
        if m.get('ContactType') is not None:
            self.contact_type = m.get('ContactType')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class DeleteEBIResponseBodyRequestOrderCustomer(TeaModel):
    def __init__(
        self,
        cert_address: str = None,
        cert_effdate: str = None,
        cert_expire: str = None,
        cert_no: str = None,
        cert_type: str = None,
        contracts: List[DeleteEBIResponseBodyRequestOrderCustomerContracts] = None,
        cust_id: int = None,
        cust_name: str = None,
        cust_tag: int = None,
        cust_type: str = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gender: int = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        outer_cust_no: str = None,
        remarks: str = None,
        user_bind_type: int = None,
        user_id: int = None,
        user_nick: str = None,
    ):
        self.cert_address = cert_address
        self.cert_effdate = cert_effdate
        self.cert_expire = cert_expire
        self.cert_no = cert_no
        self.cert_type = cert_type
        self.contracts = contracts
        self.cust_id = cust_id
        self.cust_name = cust_name
        self.cust_tag = cust_tag
        self.cust_type = cust_type
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gender = gender
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.outer_cust_no = outer_cust_no
        self.remarks = remarks
        self.user_bind_type = user_bind_type
        self.user_id = user_id
        self.user_nick = user_nick

    def validate(self):
        if self.contracts:
            for k in self.contracts:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cert_address is not None:
            result['CertAddress'] = self.cert_address
        if self.cert_effdate is not None:
            result['CertEffdate'] = self.cert_effdate
        if self.cert_expire is not None:
            result['CertExpire'] = self.cert_expire
        if self.cert_no is not None:
            result['CertNo'] = self.cert_no
        if self.cert_type is not None:
            result['CertType'] = self.cert_type
        result['Contracts'] = []
        if self.contracts is not None:
            for k in self.contracts:
                result['Contracts'].append(k.to_map() if k else None)
        if self.cust_id is not None:
            result['CustId'] = self.cust_id
        if self.cust_name is not None:
            result['CustName'] = self.cust_name
        if self.cust_tag is not None:
            result['CustTag'] = self.cust_tag
        if self.cust_type is not None:
            result['CustType'] = self.cust_type
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gender is not None:
            result['Gender'] = self.gender
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.outer_cust_no is not None:
            result['OuterCustNo'] = self.outer_cust_no
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.user_bind_type is not None:
            result['UserBindType'] = self.user_bind_type
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.user_nick is not None:
            result['UserNick'] = self.user_nick
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CertAddress') is not None:
            self.cert_address = m.get('CertAddress')
        if m.get('CertEffdate') is not None:
            self.cert_effdate = m.get('CertEffdate')
        if m.get('CertExpire') is not None:
            self.cert_expire = m.get('CertExpire')
        if m.get('CertNo') is not None:
            self.cert_no = m.get('CertNo')
        if m.get('CertType') is not None:
            self.cert_type = m.get('CertType')
        self.contracts = []
        if m.get('Contracts') is not None:
            for k in m.get('Contracts'):
                temp_model = DeleteEBIResponseBodyRequestOrderCustomerContracts()
                self.contracts.append(temp_model.from_map(k))
        if m.get('CustId') is not None:
            self.cust_id = m.get('CustId')
        if m.get('CustName') is not None:
            self.cust_name = m.get('CustName')
        if m.get('CustTag') is not None:
            self.cust_tag = m.get('CustTag')
        if m.get('CustType') is not None:
            self.cust_type = m.get('CustType')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('Gender') is not None:
            self.gender = m.get('Gender')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('OuterCustNo') is not None:
            self.outer_cust_no = m.get('OuterCustNo')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('UserBindType') is not None:
            self.user_bind_type = m.get('UserBindType')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('UserNick') is not None:
            self.user_nick = m.get('UserNick')
        return self


class DeleteEBIResponseBodyRequestOrderOfferListAttributeList(TeaModel):
    def __init__(
        self,
        attr_group: str = None,
        attr_id: int = None,
        attr_name: str = None,
        attr_text: str = None,
        attr_value: str = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        mapping_code: str = None,
        old_attr_text: str = None,
        old_attr_value: str = None,
        options: int = None,
        remarks: str = None,
        value_expression: str = None,
    ):
        self.attr_group = attr_group
        self.attr_id = attr_id
        self.attr_name = attr_name
        self.attr_text = attr_text
        self.attr_value = attr_value
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.mapping_code = mapping_code
        self.old_attr_text = old_attr_text
        self.old_attr_value = old_attr_value
        self.options = options
        self.remarks = remarks
        self.value_expression = value_expression

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attr_group is not None:
            result['AttrGroup'] = self.attr_group
        if self.attr_id is not None:
            result['AttrId'] = self.attr_id
        if self.attr_name is not None:
            result['AttrName'] = self.attr_name
        if self.attr_text is not None:
            result['AttrText'] = self.attr_text
        if self.attr_value is not None:
            result['AttrValue'] = self.attr_value
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.mapping_code is not None:
            result['MappingCode'] = self.mapping_code
        if self.old_attr_text is not None:
            result['OldAttrText'] = self.old_attr_text
        if self.old_attr_value is not None:
            result['OldAttrValue'] = self.old_attr_value
        if self.options is not None:
            result['Options'] = self.options
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.value_expression is not None:
            result['ValueExpression'] = self.value_expression
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AttrGroup') is not None:
            self.attr_group = m.get('AttrGroup')
        if m.get('AttrId') is not None:
            self.attr_id = m.get('AttrId')
        if m.get('AttrName') is not None:
            self.attr_name = m.get('AttrName')
        if m.get('AttrText') is not None:
            self.attr_text = m.get('AttrText')
        if m.get('AttrValue') is not None:
            self.attr_value = m.get('AttrValue')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('MappingCode') is not None:
            self.mapping_code = m.get('MappingCode')
        if m.get('OldAttrText') is not None:
            self.old_attr_text = m.get('OldAttrText')
        if m.get('OldAttrValue') is not None:
            self.old_attr_value = m.get('OldAttrValue')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ValueExpression') is not None:
            self.value_expression = m.get('ValueExpression')
        return self


class DeleteEBIResponseBodyRequestOrderOfferListProductAttributeList(TeaModel):
    def __init__(
        self,
        attr_group: str = None,
        attr_id: int = None,
        attr_name: str = None,
        attr_text: str = None,
        attr_value: str = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        mapping_code: str = None,
        old_attr_text: str = None,
        old_attr_value: str = None,
        options: int = None,
        remarks: str = None,
        value_expression: str = None,
    ):
        self.attr_group = attr_group
        self.attr_id = attr_id
        self.attr_name = attr_name
        self.attr_text = attr_text
        self.attr_value = attr_value
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.mapping_code = mapping_code
        self.old_attr_text = old_attr_text
        self.old_attr_value = old_attr_value
        self.options = options
        self.remarks = remarks
        self.value_expression = value_expression

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attr_group is not None:
            result['AttrGroup'] = self.attr_group
        if self.attr_id is not None:
            result['AttrId'] = self.attr_id
        if self.attr_name is not None:
            result['AttrName'] = self.attr_name
        if self.attr_text is not None:
            result['AttrText'] = self.attr_text
        if self.attr_value is not None:
            result['AttrValue'] = self.attr_value
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.mapping_code is not None:
            result['MappingCode'] = self.mapping_code
        if self.old_attr_text is not None:
            result['OldAttrText'] = self.old_attr_text
        if self.old_attr_value is not None:
            result['OldAttrValue'] = self.old_attr_value
        if self.options is not None:
            result['Options'] = self.options
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.value_expression is not None:
            result['ValueExpression'] = self.value_expression
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AttrGroup') is not None:
            self.attr_group = m.get('AttrGroup')
        if m.get('AttrId') is not None:
            self.attr_id = m.get('AttrId')
        if m.get('AttrName') is not None:
            self.attr_name = m.get('AttrName')
        if m.get('AttrText') is not None:
            self.attr_text = m.get('AttrText')
        if m.get('AttrValue') is not None:
            self.attr_value = m.get('AttrValue')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('MappingCode') is not None:
            self.mapping_code = m.get('MappingCode')
        if m.get('OldAttrText') is not None:
            self.old_attr_text = m.get('OldAttrText')
        if m.get('OldAttrValue') is not None:
            self.old_attr_value = m.get('OldAttrValue')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ValueExpression') is not None:
            self.value_expression = m.get('ValueExpression')
        return self


class DeleteEBIResponseBodyRequestOrderOfferListProduct(TeaModel):
    def __init__(
        self,
        attribute_list: List[DeleteEBIResponseBodyRequestOrderOfferListProductAttributeList] = None,
        data_status: int = None,
        effective_time: str = None,
        effective_type: str = None,
        expire_time: str = None,
        expire_type: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_product_id: int = None,
        ins_status: int = None,
        is_main: str = None,
        open_status: int = None,
        operate_time: str = None,
        operation_id: int = None,
        options: int = None,
        product_id: int = None,
        product_name: str = None,
        product_type: str = None,
        remarks: str = None,
    ):
        self.attribute_list = attribute_list
        self.data_status = data_status
        self.effective_time = effective_time
        self.effective_type = effective_type
        self.expire_time = expire_time
        self.expire_type = expire_type
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_product_id = ins_product_id
        self.ins_status = ins_status
        self.is_main = is_main
        self.open_status = open_status
        self.operate_time = operate_time
        self.operation_id = operation_id
        self.options = options
        self.product_id = product_id
        self.product_name = product_name
        self.product_type = product_type
        self.remarks = remarks

    def validate(self):
        if self.attribute_list:
            for k in self.attribute_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AttributeList'] = []
        if self.attribute_list is not None:
            for k in self.attribute_list:
                result['AttributeList'].append(k.to_map() if k else None)
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.effective_type is not None:
            result['EffectiveType'] = self.effective_type
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.expire_type is not None:
            result['ExpireType'] = self.expire_type
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_product_id is not None:
            result['InsProductId'] = self.ins_product_id
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.is_main is not None:
            result['IsMain'] = self.is_main
        if self.open_status is not None:
            result['OpenStatus'] = self.open_status
        if self.operate_time is not None:
            result['OperateTime'] = self.operate_time
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.options is not None:
            result['Options'] = self.options
        if self.product_id is not None:
            result['ProductId'] = self.product_id
        if self.product_name is not None:
            result['ProductName'] = self.product_name
        if self.product_type is not None:
            result['ProductType'] = self.product_type
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.attribute_list = []
        if m.get('AttributeList') is not None:
            for k in m.get('AttributeList'):
                temp_model = DeleteEBIResponseBodyRequestOrderOfferListProductAttributeList()
                self.attribute_list.append(temp_model.from_map(k))
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('EffectiveType') is not None:
            self.effective_type = m.get('EffectiveType')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('ExpireType') is not None:
            self.expire_type = m.get('ExpireType')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsProductId') is not None:
            self.ins_product_id = m.get('InsProductId')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('IsMain') is not None:
            self.is_main = m.get('IsMain')
        if m.get('OpenStatus') is not None:
            self.open_status = m.get('OpenStatus')
        if m.get('OperateTime') is not None:
            self.operate_time = m.get('OperateTime')
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('ProductId') is not None:
            self.product_id = m.get('ProductId')
        if m.get('ProductName') is not None:
            self.product_name = m.get('ProductName')
        if m.get('ProductType') is not None:
            self.product_type = m.get('ProductType')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class DeleteEBIResponseBodyRequestOrderOfferList(TeaModel):
    def __init__(
        self,
        attribute_list: List[DeleteEBIResponseBodyRequestOrderOfferListAttributeList] = None,
        billing_pkg_id: int = None,
        data_status: int = None,
        eff_param: str = None,
        effective_time: str = None,
        effective_type: str = None,
        exp_param: str = None,
        expire_time: str = None,
        expire_type: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_offer_id: int = None,
        ins_status: int = None,
        offer_id: int = None,
        offer_name: str = None,
        offer_type: str = None,
        old_effective_time: str = None,
        old_ins_offer_id: int = None,
        old_offer_id: int = None,
        operation_id: int = None,
        options: int = None,
        ord_type: str = None,
        product: DeleteEBIResponseBodyRequestOrderOfferListProduct = None,
        remarks: str = None,
    ):
        self.attribute_list = attribute_list
        self.billing_pkg_id = billing_pkg_id
        self.data_status = data_status
        self.eff_param = eff_param
        self.effective_time = effective_time
        self.effective_type = effective_type
        self.exp_param = exp_param
        self.expire_time = expire_time
        self.expire_type = expire_type
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_offer_id = ins_offer_id
        self.ins_status = ins_status
        self.offer_id = offer_id
        self.offer_name = offer_name
        self.offer_type = offer_type
        self.old_effective_time = old_effective_time
        self.old_ins_offer_id = old_ins_offer_id
        self.old_offer_id = old_offer_id
        self.operation_id = operation_id
        self.options = options
        self.ord_type = ord_type
        self.product = product
        self.remarks = remarks

    def validate(self):
        if self.attribute_list:
            for k in self.attribute_list:
                if k:
                    k.validate()
        if self.product:
            self.product.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AttributeList'] = []
        if self.attribute_list is not None:
            for k in self.attribute_list:
                result['AttributeList'].append(k.to_map() if k else None)
        if self.billing_pkg_id is not None:
            result['BillingPkgId'] = self.billing_pkg_id
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.eff_param is not None:
            result['EffParam'] = self.eff_param
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.effective_type is not None:
            result['EffectiveType'] = self.effective_type
        if self.exp_param is not None:
            result['ExpParam'] = self.exp_param
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.expire_type is not None:
            result['ExpireType'] = self.expire_type
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_offer_id is not None:
            result['InsOfferId'] = self.ins_offer_id
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.offer_id is not None:
            result['OfferId'] = self.offer_id
        if self.offer_name is not None:
            result['OfferName'] = self.offer_name
        if self.offer_type is not None:
            result['OfferType'] = self.offer_type
        if self.old_effective_time is not None:
            result['OldEffectiveTime'] = self.old_effective_time
        if self.old_ins_offer_id is not None:
            result['OldInsOfferId'] = self.old_ins_offer_id
        if self.old_offer_id is not None:
            result['OldOfferId'] = self.old_offer_id
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.options is not None:
            result['Options'] = self.options
        if self.ord_type is not None:
            result['OrdType'] = self.ord_type
        if self.product is not None:
            result['Product'] = self.product.to_map()
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.attribute_list = []
        if m.get('AttributeList') is not None:
            for k in m.get('AttributeList'):
                temp_model = DeleteEBIResponseBodyRequestOrderOfferListAttributeList()
                self.attribute_list.append(temp_model.from_map(k))
        if m.get('BillingPkgId') is not None:
            self.billing_pkg_id = m.get('BillingPkgId')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffParam') is not None:
            self.eff_param = m.get('EffParam')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('EffectiveType') is not None:
            self.effective_type = m.get('EffectiveType')
        if m.get('ExpParam') is not None:
            self.exp_param = m.get('ExpParam')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('ExpireType') is not None:
            self.expire_type = m.get('ExpireType')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsOfferId') is not None:
            self.ins_offer_id = m.get('InsOfferId')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('OfferId') is not None:
            self.offer_id = m.get('OfferId')
        if m.get('OfferName') is not None:
            self.offer_name = m.get('OfferName')
        if m.get('OfferType') is not None:
            self.offer_type = m.get('OfferType')
        if m.get('OldEffectiveTime') is not None:
            self.old_effective_time = m.get('OldEffectiveTime')
        if m.get('OldInsOfferId') is not None:
            self.old_ins_offer_id = m.get('OldInsOfferId')
        if m.get('OldOfferId') is not None:
            self.old_offer_id = m.get('OldOfferId')
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('OrdType') is not None:
            self.ord_type = m.get('OrdType')
        if m.get('Product') is not None:
            temp_model = DeleteEBIResponseBodyRequestOrderOfferListProduct()
            self.product = temp_model.from_map(m['Product'])
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class DeleteEBIResponseBodyRequestOrderProductListAttributeList(TeaModel):
    def __init__(
        self,
        attr_group: str = None,
        attr_id: int = None,
        attr_name: str = None,
        attr_text: str = None,
        attr_value: str = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        mapping_code: str = None,
        old_attr_text: str = None,
        old_attr_value: str = None,
        options: int = None,
        remarks: str = None,
        value_expression: str = None,
    ):
        self.attr_group = attr_group
        self.attr_id = attr_id
        self.attr_name = attr_name
        self.attr_text = attr_text
        self.attr_value = attr_value
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.mapping_code = mapping_code
        self.old_attr_text = old_attr_text
        self.old_attr_value = old_attr_value
        self.options = options
        self.remarks = remarks
        self.value_expression = value_expression

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attr_group is not None:
            result['AttrGroup'] = self.attr_group
        if self.attr_id is not None:
            result['AttrId'] = self.attr_id
        if self.attr_name is not None:
            result['AttrName'] = self.attr_name
        if self.attr_text is not None:
            result['AttrText'] = self.attr_text
        if self.attr_value is not None:
            result['AttrValue'] = self.attr_value
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.mapping_code is not None:
            result['MappingCode'] = self.mapping_code
        if self.old_attr_text is not None:
            result['OldAttrText'] = self.old_attr_text
        if self.old_attr_value is not None:
            result['OldAttrValue'] = self.old_attr_value
        if self.options is not None:
            result['Options'] = self.options
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.value_expression is not None:
            result['ValueExpression'] = self.value_expression
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AttrGroup') is not None:
            self.attr_group = m.get('AttrGroup')
        if m.get('AttrId') is not None:
            self.attr_id = m.get('AttrId')
        if m.get('AttrName') is not None:
            self.attr_name = m.get('AttrName')
        if m.get('AttrText') is not None:
            self.attr_text = m.get('AttrText')
        if m.get('AttrValue') is not None:
            self.attr_value = m.get('AttrValue')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('MappingCode') is not None:
            self.mapping_code = m.get('MappingCode')
        if m.get('OldAttrText') is not None:
            self.old_attr_text = m.get('OldAttrText')
        if m.get('OldAttrValue') is not None:
            self.old_attr_value = m.get('OldAttrValue')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ValueExpression') is not None:
            self.value_expression = m.get('ValueExpression')
        return self


class DeleteEBIResponseBodyRequestOrderProductList(TeaModel):
    def __init__(
        self,
        attribute_list: List[DeleteEBIResponseBodyRequestOrderProductListAttributeList] = None,
        data_status: int = None,
        effective_time: str = None,
        effective_type: str = None,
        expire_time: str = None,
        expire_type: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_product_id: int = None,
        ins_status: int = None,
        is_main: str = None,
        open_status: int = None,
        operate_time: str = None,
        operation_id: int = None,
        options: int = None,
        product_id: int = None,
        product_name: str = None,
        product_type: str = None,
        remarks: str = None,
    ):
        self.attribute_list = attribute_list
        self.data_status = data_status
        self.effective_time = effective_time
        self.effective_type = effective_type
        self.expire_time = expire_time
        self.expire_type = expire_type
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_product_id = ins_product_id
        self.ins_status = ins_status
        self.is_main = is_main
        self.open_status = open_status
        self.operate_time = operate_time
        self.operation_id = operation_id
        self.options = options
        self.product_id = product_id
        self.product_name = product_name
        self.product_type = product_type
        self.remarks = remarks

    def validate(self):
        if self.attribute_list:
            for k in self.attribute_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AttributeList'] = []
        if self.attribute_list is not None:
            for k in self.attribute_list:
                result['AttributeList'].append(k.to_map() if k else None)
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.effective_type is not None:
            result['EffectiveType'] = self.effective_type
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.expire_type is not None:
            result['ExpireType'] = self.expire_type
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_product_id is not None:
            result['InsProductId'] = self.ins_product_id
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.is_main is not None:
            result['IsMain'] = self.is_main
        if self.open_status is not None:
            result['OpenStatus'] = self.open_status
        if self.operate_time is not None:
            result['OperateTime'] = self.operate_time
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.options is not None:
            result['Options'] = self.options
        if self.product_id is not None:
            result['ProductId'] = self.product_id
        if self.product_name is not None:
            result['ProductName'] = self.product_name
        if self.product_type is not None:
            result['ProductType'] = self.product_type
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.attribute_list = []
        if m.get('AttributeList') is not None:
            for k in m.get('AttributeList'):
                temp_model = DeleteEBIResponseBodyRequestOrderProductListAttributeList()
                self.attribute_list.append(temp_model.from_map(k))
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('EffectiveType') is not None:
            self.effective_type = m.get('EffectiveType')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('ExpireType') is not None:
            self.expire_type = m.get('ExpireType')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsProductId') is not None:
            self.ins_product_id = m.get('InsProductId')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('IsMain') is not None:
            self.is_main = m.get('IsMain')
        if m.get('OpenStatus') is not None:
            self.open_status = m.get('OpenStatus')
        if m.get('OperateTime') is not None:
            self.operate_time = m.get('OperateTime')
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('ProductId') is not None:
            self.product_id = m.get('ProductId')
        if m.get('ProductName') is not None:
            self.product_name = m.get('ProductName')
        if m.get('ProductType') is not None:
            self.product_type = m.get('ProductType')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class DeleteEBIResponseBodyRequestOrderRuleList(TeaModel):
    def __init__(
        self,
        act_on_ins_offer_id: int = None,
        act_on_operation_id: int = None,
        act_on_user_id: int = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        message: str = None,
        remarks: str = None,
        result_code: str = None,
        rule_code: str = None,
        rule_id: str = None,
        rule_name: str = None,
        rule_status: str = None,
        trigger_ins_offer_id: int = None,
    ):
        self.act_on_ins_offer_id = act_on_ins_offer_id
        self.act_on_operation_id = act_on_operation_id
        self.act_on_user_id = act_on_user_id
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.message = message
        self.remarks = remarks
        self.result_code = result_code
        self.rule_code = rule_code
        self.rule_id = rule_id
        self.rule_name = rule_name
        self.rule_status = rule_status
        self.trigger_ins_offer_id = trigger_ins_offer_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.act_on_ins_offer_id is not None:
            result['ActOnInsOfferId'] = self.act_on_ins_offer_id
        if self.act_on_operation_id is not None:
            result['ActOnOperationId'] = self.act_on_operation_id
        if self.act_on_user_id is not None:
            result['ActOnUserId'] = self.act_on_user_id
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.message is not None:
            result['Message'] = self.message
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.rule_code is not None:
            result['RuleCode'] = self.rule_code
        if self.rule_id is not None:
            result['RuleId'] = self.rule_id
        if self.rule_name is not None:
            result['RuleName'] = self.rule_name
        if self.rule_status is not None:
            result['RuleStatus'] = self.rule_status
        if self.trigger_ins_offer_id is not None:
            result['TriggerInsOfferId'] = self.trigger_ins_offer_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ActOnInsOfferId') is not None:
            self.act_on_ins_offer_id = m.get('ActOnInsOfferId')
        if m.get('ActOnOperationId') is not None:
            self.act_on_operation_id = m.get('ActOnOperationId')
        if m.get('ActOnUserId') is not None:
            self.act_on_user_id = m.get('ActOnUserId')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('RuleCode') is not None:
            self.rule_code = m.get('RuleCode')
        if m.get('RuleId') is not None:
            self.rule_id = m.get('RuleId')
        if m.get('RuleName') is not None:
            self.rule_name = m.get('RuleName')
        if m.get('RuleStatus') is not None:
            self.rule_status = m.get('RuleStatus')
        if m.get('TriggerInsOfferId') is not None:
            self.trigger_ins_offer_id = m.get('TriggerInsOfferId')
        return self


class DeleteEBIResponseBodyRequestOrder(TeaModel):
    def __init__(
        self,
        account: DeleteEBIResponseBodyRequestOrderAccount = None,
        assets: DeleteEBIResponseBodyRequestOrderAssets = None,
        busi_operation: DeleteEBIResponseBodyRequestOrderBusiOperation = None,
        busi_operator: str = None,
        busi_price_list: List[DeleteEBIResponseBodyRequestOrderBusiPriceList] = None,
        channel_id: str = None,
        customer: DeleteEBIResponseBodyRequestOrderCustomer = None,
        data_status: int = None,
        ext_info: Dict[str, str] = None,
        is_auth: bool = None,
        offer_list: List[DeleteEBIResponseBodyRequestOrderOfferList] = None,
        open_completed_time: str = None,
        order_id: int = None,
        order_no: str = None,
        order_serial_id: int = None,
        order_status: str = None,
        order_time: str = None,
        order_type: str = None,
        owner_id: str = None,
        parent_order_id: str = None,
        product_list: List[DeleteEBIResponseBodyRequestOrderProductList] = None,
        remarks: str = None,
        rule_list: List[DeleteEBIResponseBodyRequestOrderRuleList] = None,
    ):
        self.account = account
        self.assets = assets
        self.busi_operation = busi_operation
        self.busi_operator = busi_operator
        self.busi_price_list = busi_price_list
        self.channel_id = channel_id
        self.customer = customer
        self.data_status = data_status
        self.ext_info = ext_info
        self.is_auth = is_auth
        self.offer_list = offer_list
        self.open_completed_time = open_completed_time
        self.order_id = order_id
        self.order_no = order_no
        self.order_serial_id = order_serial_id
        self.order_status = order_status
        self.order_time = order_time
        self.order_type = order_type
        self.owner_id = owner_id
        self.parent_order_id = parent_order_id
        self.product_list = product_list
        self.remarks = remarks
        self.rule_list = rule_list

    def validate(self):
        if self.account:
            self.account.validate()
        if self.assets:
            self.assets.validate()
        if self.busi_operation:
            self.busi_operation.validate()
        if self.busi_price_list:
            for k in self.busi_price_list:
                if k:
                    k.validate()
        if self.customer:
            self.customer.validate()
        if self.offer_list:
            for k in self.offer_list:
                if k:
                    k.validate()
        if self.product_list:
            for k in self.product_list:
                if k:
                    k.validate()
        if self.rule_list:
            for k in self.rule_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account is not None:
            result['Account'] = self.account.to_map()
        if self.assets is not None:
            result['Assets'] = self.assets.to_map()
        if self.busi_operation is not None:
            result['BusiOperation'] = self.busi_operation.to_map()
        if self.busi_operator is not None:
            result['BusiOperator'] = self.busi_operator
        result['BusiPriceList'] = []
        if self.busi_price_list is not None:
            for k in self.busi_price_list:
                result['BusiPriceList'].append(k.to_map() if k else None)
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.customer is not None:
            result['Customer'] = self.customer.to_map()
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.ext_info is not None:
            result['ExtInfo'] = self.ext_info
        if self.is_auth is not None:
            result['IsAuth'] = self.is_auth
        result['OfferList'] = []
        if self.offer_list is not None:
            for k in self.offer_list:
                result['OfferList'].append(k.to_map() if k else None)
        if self.open_completed_time is not None:
            result['OpenCompletedTime'] = self.open_completed_time
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.order_no is not None:
            result['OrderNo'] = self.order_no
        if self.order_serial_id is not None:
            result['OrderSerialId'] = self.order_serial_id
        if self.order_status is not None:
            result['OrderStatus'] = self.order_status
        if self.order_time is not None:
            result['OrderTime'] = self.order_time
        if self.order_type is not None:
            result['OrderType'] = self.order_type
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.parent_order_id is not None:
            result['ParentOrderId'] = self.parent_order_id
        result['ProductList'] = []
        if self.product_list is not None:
            for k in self.product_list:
                result['ProductList'].append(k.to_map() if k else None)
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        result['RuleList'] = []
        if self.rule_list is not None:
            for k in self.rule_list:
                result['RuleList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Account') is not None:
            temp_model = DeleteEBIResponseBodyRequestOrderAccount()
            self.account = temp_model.from_map(m['Account'])
        if m.get('Assets') is not None:
            temp_model = DeleteEBIResponseBodyRequestOrderAssets()
            self.assets = temp_model.from_map(m['Assets'])
        if m.get('BusiOperation') is not None:
            temp_model = DeleteEBIResponseBodyRequestOrderBusiOperation()
            self.busi_operation = temp_model.from_map(m['BusiOperation'])
        if m.get('BusiOperator') is not None:
            self.busi_operator = m.get('BusiOperator')
        self.busi_price_list = []
        if m.get('BusiPriceList') is not None:
            for k in m.get('BusiPriceList'):
                temp_model = DeleteEBIResponseBodyRequestOrderBusiPriceList()
                self.busi_price_list.append(temp_model.from_map(k))
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('Customer') is not None:
            temp_model = DeleteEBIResponseBodyRequestOrderCustomer()
            self.customer = temp_model.from_map(m['Customer'])
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('ExtInfo') is not None:
            self.ext_info = m.get('ExtInfo')
        if m.get('IsAuth') is not None:
            self.is_auth = m.get('IsAuth')
        self.offer_list = []
        if m.get('OfferList') is not None:
            for k in m.get('OfferList'):
                temp_model = DeleteEBIResponseBodyRequestOrderOfferList()
                self.offer_list.append(temp_model.from_map(k))
        if m.get('OpenCompletedTime') is not None:
            self.open_completed_time = m.get('OpenCompletedTime')
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('OrderNo') is not None:
            self.order_no = m.get('OrderNo')
        if m.get('OrderSerialId') is not None:
            self.order_serial_id = m.get('OrderSerialId')
        if m.get('OrderStatus') is not None:
            self.order_status = m.get('OrderStatus')
        if m.get('OrderTime') is not None:
            self.order_time = m.get('OrderTime')
        if m.get('OrderType') is not None:
            self.order_type = m.get('OrderType')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ParentOrderId') is not None:
            self.parent_order_id = m.get('ParentOrderId')
        self.product_list = []
        if m.get('ProductList') is not None:
            for k in m.get('ProductList'):
                temp_model = DeleteEBIResponseBodyRequestOrderProductList()
                self.product_list.append(temp_model.from_map(k))
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        self.rule_list = []
        if m.get('RuleList') is not None:
            for k in m.get('RuleList'):
                temp_model = DeleteEBIResponseBodyRequestOrderRuleList()
                self.rule_list.append(temp_model.from_map(k))
        return self


class DeleteEBIResponseBodyRequest(TeaModel):
    def __init__(
        self,
        is_sync: bool = None,
        order: DeleteEBIResponseBodyRequestOrder = None,
        serial_no: str = None,
    ):
        self.is_sync = is_sync
        self.order = order
        self.serial_no = serial_no

    def validate(self):
        if self.order:
            self.order.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_sync is not None:
            result['IsSync'] = self.is_sync
        if self.order is not None:
            result['Order'] = self.order.to_map()
        if self.serial_no is not None:
            result['SerialNo'] = self.serial_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IsSync') is not None:
            self.is_sync = m.get('IsSync')
        if m.get('Order') is not None:
            temp_model = DeleteEBIResponseBodyRequestOrder()
            self.order = temp_model.from_map(m['Order'])
        if m.get('SerialNo') is not None:
            self.serial_no = m.get('SerialNo')
        return self


class DeleteEBIResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        desc: str = None,
        model: DeleteEBIResponseBodyModel = None,
        query_count: int = None,
        request: DeleteEBIResponseBodyRequest = None,
        success: bool = None,
    ):
        self.code = code
        self.desc = desc
        self.model = model
        self.query_count = query_count
        self.request = request
        self.success = success

    def validate(self):
        if self.model:
            self.model.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.model is not None:
            result['Model'] = self.model.to_map()
        if self.query_count is not None:
            result['QueryCount'] = self.query_count
        if self.request is not None:
            result['Request'] = self.request.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Model') is not None:
            temp_model = DeleteEBIResponseBodyModel()
            self.model = temp_model.from_map(m['Model'])
        if m.get('QueryCount') is not None:
            self.query_count = m.get('QueryCount')
        if m.get('Request') is not None:
            temp_model = DeleteEBIResponseBodyRequest()
            self.request = temp_model.from_map(m['Request'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteEBIResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteEBIResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteEBIResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteEpnInstanceRequestTagKeyValueModels(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class DeleteEpnInstanceRequest(TeaModel):
    def __init__(
        self,
        ak_proxy: str = None,
        ali_uid: int = None,
        api_name: str = None,
        app_key: str = None,
        caller_bid: str = None,
        caller_bid_login_email: str = None,
        caller_security_transport: bool = None,
        caller_type: str = None,
        caller_uid: int = None,
        caller_uid_login_email: str = None,
        channel: str = None,
        client_ip: str = None,
        enable: bool = None,
        epn_id: str = None,
        from_type: int = None,
        mfa_present: bool = None,
        operator: str = None,
        owner_account: str = None,
        owner_id: int = None,
        owner_id_login_email: str = None,
        prod_code: str = None,
        proxy_caller_ip: str = None,
        proxy_caller_security_transport: bool = None,
        proxy_id: str = None,
        proxy_trust_transport_info: bool = None,
        request_content: str = None,
        request_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        security_token: str = None,
        sms_resource_owner_id: int = None,
        tag_key_1: str = None,
        tag_key_2: str = None,
        tag_key_3: str = None,
        tag_key_4: str = None,
        tag_key_5: str = None,
        tag_key_value_models: List[DeleteEpnInstanceRequestTagKeyValueModels] = None,
        tag_value_1: str = None,
        tag_value_2: str = None,
        tag_value_3: str = None,
        tag_value_4: str = None,
        tag_value_5: str = None,
        token: str = None,
        version: str = None,
    ):
        self.ak_proxy = ak_proxy
        self.ali_uid = ali_uid
        self.api_name = api_name
        self.app_key = app_key
        self.caller_bid = caller_bid
        self.caller_bid_login_email = caller_bid_login_email
        self.caller_security_transport = caller_security_transport
        self.caller_type = caller_type
        self.caller_uid = caller_uid
        self.caller_uid_login_email = caller_uid_login_email
        self.channel = channel
        self.client_ip = client_ip
        self.enable = enable
        self.epn_id = epn_id
        self.from_type = from_type
        self.mfa_present = mfa_present
        self.operator = operator
        self.owner_account = owner_account
        self.owner_id = owner_id
        self.owner_id_login_email = owner_id_login_email
        self.prod_code = prod_code
        self.proxy_caller_ip = proxy_caller_ip
        self.proxy_caller_security_transport = proxy_caller_security_transport
        self.proxy_id = proxy_id
        self.proxy_trust_transport_info = proxy_trust_transport_info
        self.request_content = request_content
        self.request_id = request_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.security_token = security_token
        self.sms_resource_owner_id = sms_resource_owner_id
        self.tag_key_1 = tag_key_1
        self.tag_key_2 = tag_key_2
        self.tag_key_3 = tag_key_3
        self.tag_key_4 = tag_key_4
        self.tag_key_5 = tag_key_5
        self.tag_key_value_models = tag_key_value_models
        self.tag_value_1 = tag_value_1
        self.tag_value_2 = tag_value_2
        self.tag_value_3 = tag_value_3
        self.tag_value_4 = tag_value_4
        self.tag_value_5 = tag_value_5
        self.token = token
        self.version = version

    def validate(self):
        if self.tag_key_value_models:
            for k in self.tag_key_value_models:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ak_proxy is not None:
            result['AkProxy'] = self.ak_proxy
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.caller_bid is not None:
            result['CallerBid'] = self.caller_bid
        if self.caller_bid_login_email is not None:
            result['CallerBidLoginEmail'] = self.caller_bid_login_email
        if self.caller_security_transport is not None:
            result['CallerSecurityTransport'] = self.caller_security_transport
        if self.caller_type is not None:
            result['CallerType'] = self.caller_type
        if self.caller_uid is not None:
            result['CallerUid'] = self.caller_uid
        if self.caller_uid_login_email is not None:
            result['CallerUidLoginEmail'] = self.caller_uid_login_email
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.client_ip is not None:
            result['ClientIP'] = self.client_ip
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.epn_id is not None:
            result['EpnId'] = self.epn_id
        if self.from_type is not None:
            result['FromType'] = self.from_type
        if self.mfa_present is not None:
            result['MfaPresent'] = self.mfa_present
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.owner_account is not None:
            result['OwnerAccount'] = self.owner_account
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.owner_id_login_email is not None:
            result['OwnerIdLoginEmail'] = self.owner_id_login_email
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.proxy_caller_ip is not None:
            result['ProxyCallerIp'] = self.proxy_caller_ip
        if self.proxy_caller_security_transport is not None:
            result['ProxyCallerSecurityTransport'] = self.proxy_caller_security_transport
        if self.proxy_id is not None:
            result['ProxyId'] = self.proxy_id
        if self.proxy_trust_transport_info is not None:
            result['ProxyTrustTransportInfo'] = self.proxy_trust_transport_info
        if self.request_content is not None:
            result['RequestContent'] = self.request_content
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        if self.sms_resource_owner_id is not None:
            result['SmsResourceOwnerId'] = self.sms_resource_owner_id
        if self.tag_key_1 is not None:
            result['TagKey1'] = self.tag_key_1
        if self.tag_key_2 is not None:
            result['TagKey2'] = self.tag_key_2
        if self.tag_key_3 is not None:
            result['TagKey3'] = self.tag_key_3
        if self.tag_key_4 is not None:
            result['TagKey4'] = self.tag_key_4
        if self.tag_key_5 is not None:
            result['TagKey5'] = self.tag_key_5
        result['TagKeyValueModels'] = []
        if self.tag_key_value_models is not None:
            for k in self.tag_key_value_models:
                result['TagKeyValueModels'].append(k.to_map() if k else None)
        if self.tag_value_1 is not None:
            result['TagValue1'] = self.tag_value_1
        if self.tag_value_2 is not None:
            result['TagValue2'] = self.tag_value_2
        if self.tag_value_3 is not None:
            result['TagValue3'] = self.tag_value_3
        if self.tag_value_4 is not None:
            result['TagValue4'] = self.tag_value_4
        if self.tag_value_5 is not None:
            result['TagValue5'] = self.tag_value_5
        if self.token is not None:
            result['Token'] = self.token
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AkProxy') is not None:
            self.ak_proxy = m.get('AkProxy')
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('CallerBid') is not None:
            self.caller_bid = m.get('CallerBid')
        if m.get('CallerBidLoginEmail') is not None:
            self.caller_bid_login_email = m.get('CallerBidLoginEmail')
        if m.get('CallerSecurityTransport') is not None:
            self.caller_security_transport = m.get('CallerSecurityTransport')
        if m.get('CallerType') is not None:
            self.caller_type = m.get('CallerType')
        if m.get('CallerUid') is not None:
            self.caller_uid = m.get('CallerUid')
        if m.get('CallerUidLoginEmail') is not None:
            self.caller_uid_login_email = m.get('CallerUidLoginEmail')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ClientIP') is not None:
            self.client_ip = m.get('ClientIP')
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('EpnId') is not None:
            self.epn_id = m.get('EpnId')
        if m.get('FromType') is not None:
            self.from_type = m.get('FromType')
        if m.get('MfaPresent') is not None:
            self.mfa_present = m.get('MfaPresent')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('OwnerAccount') is not None:
            self.owner_account = m.get('OwnerAccount')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('OwnerIdLoginEmail') is not None:
            self.owner_id_login_email = m.get('OwnerIdLoginEmail')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProxyCallerIp') is not None:
            self.proxy_caller_ip = m.get('ProxyCallerIp')
        if m.get('ProxyCallerSecurityTransport') is not None:
            self.proxy_caller_security_transport = m.get('ProxyCallerSecurityTransport')
        if m.get('ProxyId') is not None:
            self.proxy_id = m.get('ProxyId')
        if m.get('ProxyTrustTransportInfo') is not None:
            self.proxy_trust_transport_info = m.get('ProxyTrustTransportInfo')
        if m.get('RequestContent') is not None:
            self.request_content = m.get('RequestContent')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        if m.get('SmsResourceOwnerId') is not None:
            self.sms_resource_owner_id = m.get('SmsResourceOwnerId')
        if m.get('TagKey1') is not None:
            self.tag_key_1 = m.get('TagKey1')
        if m.get('TagKey2') is not None:
            self.tag_key_2 = m.get('TagKey2')
        if m.get('TagKey3') is not None:
            self.tag_key_3 = m.get('TagKey3')
        if m.get('TagKey4') is not None:
            self.tag_key_4 = m.get('TagKey4')
        if m.get('TagKey5') is not None:
            self.tag_key_5 = m.get('TagKey5')
        self.tag_key_value_models = []
        if m.get('TagKeyValueModels') is not None:
            for k in m.get('TagKeyValueModels'):
                temp_model = DeleteEpnInstanceRequestTagKeyValueModels()
                self.tag_key_value_models.append(temp_model.from_map(k))
        if m.get('TagValue1') is not None:
            self.tag_value_1 = m.get('TagValue1')
        if m.get('TagValue2') is not None:
            self.tag_value_2 = m.get('TagValue2')
        if m.get('TagValue3') is not None:
            self.tag_value_3 = m.get('TagValue3')
        if m.get('TagValue4') is not None:
            self.tag_value_4 = m.get('TagValue4')
        if m.get('TagValue5') is not None:
            self.tag_value_5 = m.get('TagValue5')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DeleteEpnInstanceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        content: Any = None,
        desc: str = None,
        description: str = None,
        request_id: str = None,
        ret_code: int = None,
        success: bool = None,
    ):
        self.code = code
        self.content = content
        self.desc = desc
        self.description = description
        self.request_id = request_id
        self.ret_code = ret_code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.content is not None:
            result['Content'] = self.content
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.description is not None:
            result['Description'] = self.description
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.ret_code is not None:
            result['RetCode'] = self.ret_code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RetCode') is not None:
            self.ret_code = m.get('RetCode')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteEpnInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteEpnInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteEpnInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteEvgwInEpnRequestEvgwRegion(TeaModel):
    def __init__(
        self,
        evgw_id: str = None,
        region_id: str = None,
    ):
        self.evgw_id = evgw_id
        self.region_id = region_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.evgw_id is not None:
            result['EvgwId'] = self.evgw_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EvgwId') is not None:
            self.evgw_id = m.get('EvgwId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class DeleteEvgwInEpnRequestTagKeyValueModels(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class DeleteEvgwInEpnRequest(TeaModel):
    def __init__(
        self,
        ak_proxy: str = None,
        ali_uid: int = None,
        api_name: str = None,
        app_key: str = None,
        caller_bid: str = None,
        caller_bid_login_email: str = None,
        caller_security_transport: bool = None,
        caller_type: str = None,
        caller_uid: int = None,
        caller_uid_login_email: str = None,
        channel: str = None,
        client_ip: str = None,
        enable: bool = None,
        epn_id: str = None,
        evgw_region: List[DeleteEvgwInEpnRequestEvgwRegion] = None,
        from_type: int = None,
        mfa_present: bool = None,
        operator: str = None,
        owner_account: str = None,
        owner_id: int = None,
        owner_id_login_email: str = None,
        prod_code: str = None,
        proxy_caller_ip: str = None,
        proxy_caller_security_transport: bool = None,
        proxy_id: str = None,
        proxy_trust_transport_info: bool = None,
        request_content: str = None,
        request_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        security_token: str = None,
        sms_resource_owner_id: int = None,
        tag_key_1: str = None,
        tag_key_2: str = None,
        tag_key_3: str = None,
        tag_key_4: str = None,
        tag_key_5: str = None,
        tag_key_value_models: List[DeleteEvgwInEpnRequestTagKeyValueModels] = None,
        tag_value_1: str = None,
        tag_value_2: str = None,
        tag_value_3: str = None,
        tag_value_4: str = None,
        tag_value_5: str = None,
        token: str = None,
        version: str = None,
    ):
        self.ak_proxy = ak_proxy
        self.ali_uid = ali_uid
        self.api_name = api_name
        self.app_key = app_key
        self.caller_bid = caller_bid
        self.caller_bid_login_email = caller_bid_login_email
        self.caller_security_transport = caller_security_transport
        self.caller_type = caller_type
        self.caller_uid = caller_uid
        self.caller_uid_login_email = caller_uid_login_email
        self.channel = channel
        self.client_ip = client_ip
        self.enable = enable
        self.epn_id = epn_id
        self.evgw_region = evgw_region
        self.from_type = from_type
        self.mfa_present = mfa_present
        self.operator = operator
        self.owner_account = owner_account
        self.owner_id = owner_id
        self.owner_id_login_email = owner_id_login_email
        self.prod_code = prod_code
        self.proxy_caller_ip = proxy_caller_ip
        self.proxy_caller_security_transport = proxy_caller_security_transport
        self.proxy_id = proxy_id
        self.proxy_trust_transport_info = proxy_trust_transport_info
        self.request_content = request_content
        self.request_id = request_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.security_token = security_token
        self.sms_resource_owner_id = sms_resource_owner_id
        self.tag_key_1 = tag_key_1
        self.tag_key_2 = tag_key_2
        self.tag_key_3 = tag_key_3
        self.tag_key_4 = tag_key_4
        self.tag_key_5 = tag_key_5
        self.tag_key_value_models = tag_key_value_models
        self.tag_value_1 = tag_value_1
        self.tag_value_2 = tag_value_2
        self.tag_value_3 = tag_value_3
        self.tag_value_4 = tag_value_4
        self.tag_value_5 = tag_value_5
        self.token = token
        self.version = version

    def validate(self):
        if self.evgw_region:
            for k in self.evgw_region:
                if k:
                    k.validate()
        if self.tag_key_value_models:
            for k in self.tag_key_value_models:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ak_proxy is not None:
            result['AkProxy'] = self.ak_proxy
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.caller_bid is not None:
            result['CallerBid'] = self.caller_bid
        if self.caller_bid_login_email is not None:
            result['CallerBidLoginEmail'] = self.caller_bid_login_email
        if self.caller_security_transport is not None:
            result['CallerSecurityTransport'] = self.caller_security_transport
        if self.caller_type is not None:
            result['CallerType'] = self.caller_type
        if self.caller_uid is not None:
            result['CallerUid'] = self.caller_uid
        if self.caller_uid_login_email is not None:
            result['CallerUidLoginEmail'] = self.caller_uid_login_email
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.client_ip is not None:
            result['ClientIP'] = self.client_ip
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.epn_id is not None:
            result['EpnId'] = self.epn_id
        result['EvgwRegion'] = []
        if self.evgw_region is not None:
            for k in self.evgw_region:
                result['EvgwRegion'].append(k.to_map() if k else None)
        if self.from_type is not None:
            result['FromType'] = self.from_type
        if self.mfa_present is not None:
            result['MfaPresent'] = self.mfa_present
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.owner_account is not None:
            result['OwnerAccount'] = self.owner_account
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.owner_id_login_email is not None:
            result['OwnerIdLoginEmail'] = self.owner_id_login_email
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.proxy_caller_ip is not None:
            result['ProxyCallerIp'] = self.proxy_caller_ip
        if self.proxy_caller_security_transport is not None:
            result['ProxyCallerSecurityTransport'] = self.proxy_caller_security_transport
        if self.proxy_id is not None:
            result['ProxyId'] = self.proxy_id
        if self.proxy_trust_transport_info is not None:
            result['ProxyTrustTransportInfo'] = self.proxy_trust_transport_info
        if self.request_content is not None:
            result['RequestContent'] = self.request_content
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        if self.sms_resource_owner_id is not None:
            result['SmsResourceOwnerId'] = self.sms_resource_owner_id
        if self.tag_key_1 is not None:
            result['TagKey1'] = self.tag_key_1
        if self.tag_key_2 is not None:
            result['TagKey2'] = self.tag_key_2
        if self.tag_key_3 is not None:
            result['TagKey3'] = self.tag_key_3
        if self.tag_key_4 is not None:
            result['TagKey4'] = self.tag_key_4
        if self.tag_key_5 is not None:
            result['TagKey5'] = self.tag_key_5
        result['TagKeyValueModels'] = []
        if self.tag_key_value_models is not None:
            for k in self.tag_key_value_models:
                result['TagKeyValueModels'].append(k.to_map() if k else None)
        if self.tag_value_1 is not None:
            result['TagValue1'] = self.tag_value_1
        if self.tag_value_2 is not None:
            result['TagValue2'] = self.tag_value_2
        if self.tag_value_3 is not None:
            result['TagValue3'] = self.tag_value_3
        if self.tag_value_4 is not None:
            result['TagValue4'] = self.tag_value_4
        if self.tag_value_5 is not None:
            result['TagValue5'] = self.tag_value_5
        if self.token is not None:
            result['Token'] = self.token
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AkProxy') is not None:
            self.ak_proxy = m.get('AkProxy')
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('CallerBid') is not None:
            self.caller_bid = m.get('CallerBid')
        if m.get('CallerBidLoginEmail') is not None:
            self.caller_bid_login_email = m.get('CallerBidLoginEmail')
        if m.get('CallerSecurityTransport') is not None:
            self.caller_security_transport = m.get('CallerSecurityTransport')
        if m.get('CallerType') is not None:
            self.caller_type = m.get('CallerType')
        if m.get('CallerUid') is not None:
            self.caller_uid = m.get('CallerUid')
        if m.get('CallerUidLoginEmail') is not None:
            self.caller_uid_login_email = m.get('CallerUidLoginEmail')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ClientIP') is not None:
            self.client_ip = m.get('ClientIP')
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('EpnId') is not None:
            self.epn_id = m.get('EpnId')
        self.evgw_region = []
        if m.get('EvgwRegion') is not None:
            for k in m.get('EvgwRegion'):
                temp_model = DeleteEvgwInEpnRequestEvgwRegion()
                self.evgw_region.append(temp_model.from_map(k))
        if m.get('FromType') is not None:
            self.from_type = m.get('FromType')
        if m.get('MfaPresent') is not None:
            self.mfa_present = m.get('MfaPresent')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('OwnerAccount') is not None:
            self.owner_account = m.get('OwnerAccount')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('OwnerIdLoginEmail') is not None:
            self.owner_id_login_email = m.get('OwnerIdLoginEmail')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProxyCallerIp') is not None:
            self.proxy_caller_ip = m.get('ProxyCallerIp')
        if m.get('ProxyCallerSecurityTransport') is not None:
            self.proxy_caller_security_transport = m.get('ProxyCallerSecurityTransport')
        if m.get('ProxyId') is not None:
            self.proxy_id = m.get('ProxyId')
        if m.get('ProxyTrustTransportInfo') is not None:
            self.proxy_trust_transport_info = m.get('ProxyTrustTransportInfo')
        if m.get('RequestContent') is not None:
            self.request_content = m.get('RequestContent')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        if m.get('SmsResourceOwnerId') is not None:
            self.sms_resource_owner_id = m.get('SmsResourceOwnerId')
        if m.get('TagKey1') is not None:
            self.tag_key_1 = m.get('TagKey1')
        if m.get('TagKey2') is not None:
            self.tag_key_2 = m.get('TagKey2')
        if m.get('TagKey3') is not None:
            self.tag_key_3 = m.get('TagKey3')
        if m.get('TagKey4') is not None:
            self.tag_key_4 = m.get('TagKey4')
        if m.get('TagKey5') is not None:
            self.tag_key_5 = m.get('TagKey5')
        self.tag_key_value_models = []
        if m.get('TagKeyValueModels') is not None:
            for k in m.get('TagKeyValueModels'):
                temp_model = DeleteEvgwInEpnRequestTagKeyValueModels()
                self.tag_key_value_models.append(temp_model.from_map(k))
        if m.get('TagValue1') is not None:
            self.tag_value_1 = m.get('TagValue1')
        if m.get('TagValue2') is not None:
            self.tag_value_2 = m.get('TagValue2')
        if m.get('TagValue3') is not None:
            self.tag_value_3 = m.get('TagValue3')
        if m.get('TagValue4') is not None:
            self.tag_value_4 = m.get('TagValue4')
        if m.get('TagValue5') is not None:
            self.tag_value_5 = m.get('TagValue5')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DeleteEvgwInEpnResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        content: Any = None,
        desc: str = None,
        description: str = None,
        request_id: str = None,
        ret_code: int = None,
        success: bool = None,
    ):
        self.code = code
        self.content = content
        self.desc = desc
        self.description = description
        self.request_id = request_id
        self.ret_code = ret_code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.content is not None:
            result['Content'] = self.content
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.description is not None:
            result['Description'] = self.description
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.ret_code is not None:
            result['RetCode'] = self.ret_code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RetCode') is not None:
            self.ret_code = m.get('RetCode')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteEvgwInEpnResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteEvgwInEpnResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteEvgwInEpnResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteEvgwInstanceRequestTagKeyValueModels(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class DeleteEvgwInstanceRequest(TeaModel):
    def __init__(
        self,
        ak_proxy: str = None,
        ali_uid: int = None,
        api_name: str = None,
        app_key: str = None,
        caller_bid: str = None,
        caller_bid_login_email: str = None,
        caller_security_transport: bool = None,
        caller_type: str = None,
        caller_uid: int = None,
        caller_uid_login_email: str = None,
        channel: str = None,
        client_ip: str = None,
        enable: bool = None,
        evgw_id: str = None,
        from_type: int = None,
        mfa_present: bool = None,
        operator: str = None,
        owner_account: str = None,
        owner_id: int = None,
        owner_id_login_email: str = None,
        prod_code: str = None,
        proxy_caller_ip: str = None,
        proxy_caller_security_transport: bool = None,
        proxy_id: str = None,
        proxy_trust_transport_info: bool = None,
        region_id: str = None,
        request_content: str = None,
        request_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        security_token: str = None,
        sms_resource_owner_id: int = None,
        tag_key_1: str = None,
        tag_key_2: str = None,
        tag_key_3: str = None,
        tag_key_4: str = None,
        tag_key_5: str = None,
        tag_key_value_models: List[DeleteEvgwInstanceRequestTagKeyValueModels] = None,
        tag_value_1: str = None,
        tag_value_2: str = None,
        tag_value_3: str = None,
        tag_value_4: str = None,
        tag_value_5: str = None,
        token: str = None,
        version: str = None,
    ):
        self.ak_proxy = ak_proxy
        self.ali_uid = ali_uid
        self.api_name = api_name
        self.app_key = app_key
        self.caller_bid = caller_bid
        self.caller_bid_login_email = caller_bid_login_email
        self.caller_security_transport = caller_security_transport
        self.caller_type = caller_type
        self.caller_uid = caller_uid
        self.caller_uid_login_email = caller_uid_login_email
        self.channel = channel
        self.client_ip = client_ip
        self.enable = enable
        self.evgw_id = evgw_id
        self.from_type = from_type
        self.mfa_present = mfa_present
        self.operator = operator
        self.owner_account = owner_account
        self.owner_id = owner_id
        self.owner_id_login_email = owner_id_login_email
        self.prod_code = prod_code
        self.proxy_caller_ip = proxy_caller_ip
        self.proxy_caller_security_transport = proxy_caller_security_transport
        self.proxy_id = proxy_id
        self.proxy_trust_transport_info = proxy_trust_transport_info
        self.region_id = region_id
        self.request_content = request_content
        self.request_id = request_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.security_token = security_token
        self.sms_resource_owner_id = sms_resource_owner_id
        self.tag_key_1 = tag_key_1
        self.tag_key_2 = tag_key_2
        self.tag_key_3 = tag_key_3
        self.tag_key_4 = tag_key_4
        self.tag_key_5 = tag_key_5
        self.tag_key_value_models = tag_key_value_models
        self.tag_value_1 = tag_value_1
        self.tag_value_2 = tag_value_2
        self.tag_value_3 = tag_value_3
        self.tag_value_4 = tag_value_4
        self.tag_value_5 = tag_value_5
        self.token = token
        self.version = version

    def validate(self):
        if self.tag_key_value_models:
            for k in self.tag_key_value_models:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ak_proxy is not None:
            result['AkProxy'] = self.ak_proxy
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.caller_bid is not None:
            result['CallerBid'] = self.caller_bid
        if self.caller_bid_login_email is not None:
            result['CallerBidLoginEmail'] = self.caller_bid_login_email
        if self.caller_security_transport is not None:
            result['CallerSecurityTransport'] = self.caller_security_transport
        if self.caller_type is not None:
            result['CallerType'] = self.caller_type
        if self.caller_uid is not None:
            result['CallerUid'] = self.caller_uid
        if self.caller_uid_login_email is not None:
            result['CallerUidLoginEmail'] = self.caller_uid_login_email
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.client_ip is not None:
            result['ClientIP'] = self.client_ip
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.evgw_id is not None:
            result['EvgwId'] = self.evgw_id
        if self.from_type is not None:
            result['FromType'] = self.from_type
        if self.mfa_present is not None:
            result['MfaPresent'] = self.mfa_present
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.owner_account is not None:
            result['OwnerAccount'] = self.owner_account
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.owner_id_login_email is not None:
            result['OwnerIdLoginEmail'] = self.owner_id_login_email
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.proxy_caller_ip is not None:
            result['ProxyCallerIp'] = self.proxy_caller_ip
        if self.proxy_caller_security_transport is not None:
            result['ProxyCallerSecurityTransport'] = self.proxy_caller_security_transport
        if self.proxy_id is not None:
            result['ProxyId'] = self.proxy_id
        if self.proxy_trust_transport_info is not None:
            result['ProxyTrustTransportInfo'] = self.proxy_trust_transport_info
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.request_content is not None:
            result['RequestContent'] = self.request_content
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        if self.sms_resource_owner_id is not None:
            result['SmsResourceOwnerId'] = self.sms_resource_owner_id
        if self.tag_key_1 is not None:
            result['TagKey1'] = self.tag_key_1
        if self.tag_key_2 is not None:
            result['TagKey2'] = self.tag_key_2
        if self.tag_key_3 is not None:
            result['TagKey3'] = self.tag_key_3
        if self.tag_key_4 is not None:
            result['TagKey4'] = self.tag_key_4
        if self.tag_key_5 is not None:
            result['TagKey5'] = self.tag_key_5
        result['TagKeyValueModels'] = []
        if self.tag_key_value_models is not None:
            for k in self.tag_key_value_models:
                result['TagKeyValueModels'].append(k.to_map() if k else None)
        if self.tag_value_1 is not None:
            result['TagValue1'] = self.tag_value_1
        if self.tag_value_2 is not None:
            result['TagValue2'] = self.tag_value_2
        if self.tag_value_3 is not None:
            result['TagValue3'] = self.tag_value_3
        if self.tag_value_4 is not None:
            result['TagValue4'] = self.tag_value_4
        if self.tag_value_5 is not None:
            result['TagValue5'] = self.tag_value_5
        if self.token is not None:
            result['Token'] = self.token
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AkProxy') is not None:
            self.ak_proxy = m.get('AkProxy')
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('CallerBid') is not None:
            self.caller_bid = m.get('CallerBid')
        if m.get('CallerBidLoginEmail') is not None:
            self.caller_bid_login_email = m.get('CallerBidLoginEmail')
        if m.get('CallerSecurityTransport') is not None:
            self.caller_security_transport = m.get('CallerSecurityTransport')
        if m.get('CallerType') is not None:
            self.caller_type = m.get('CallerType')
        if m.get('CallerUid') is not None:
            self.caller_uid = m.get('CallerUid')
        if m.get('CallerUidLoginEmail') is not None:
            self.caller_uid_login_email = m.get('CallerUidLoginEmail')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ClientIP') is not None:
            self.client_ip = m.get('ClientIP')
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('EvgwId') is not None:
            self.evgw_id = m.get('EvgwId')
        if m.get('FromType') is not None:
            self.from_type = m.get('FromType')
        if m.get('MfaPresent') is not None:
            self.mfa_present = m.get('MfaPresent')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('OwnerAccount') is not None:
            self.owner_account = m.get('OwnerAccount')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('OwnerIdLoginEmail') is not None:
            self.owner_id_login_email = m.get('OwnerIdLoginEmail')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProxyCallerIp') is not None:
            self.proxy_caller_ip = m.get('ProxyCallerIp')
        if m.get('ProxyCallerSecurityTransport') is not None:
            self.proxy_caller_security_transport = m.get('ProxyCallerSecurityTransport')
        if m.get('ProxyId') is not None:
            self.proxy_id = m.get('ProxyId')
        if m.get('ProxyTrustTransportInfo') is not None:
            self.proxy_trust_transport_info = m.get('ProxyTrustTransportInfo')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('RequestContent') is not None:
            self.request_content = m.get('RequestContent')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        if m.get('SmsResourceOwnerId') is not None:
            self.sms_resource_owner_id = m.get('SmsResourceOwnerId')
        if m.get('TagKey1') is not None:
            self.tag_key_1 = m.get('TagKey1')
        if m.get('TagKey2') is not None:
            self.tag_key_2 = m.get('TagKey2')
        if m.get('TagKey3') is not None:
            self.tag_key_3 = m.get('TagKey3')
        if m.get('TagKey4') is not None:
            self.tag_key_4 = m.get('TagKey4')
        if m.get('TagKey5') is not None:
            self.tag_key_5 = m.get('TagKey5')
        self.tag_key_value_models = []
        if m.get('TagKeyValueModels') is not None:
            for k in m.get('TagKeyValueModels'):
                temp_model = DeleteEvgwInstanceRequestTagKeyValueModels()
                self.tag_key_value_models.append(temp_model.from_map(k))
        if m.get('TagValue1') is not None:
            self.tag_value_1 = m.get('TagValue1')
        if m.get('TagValue2') is not None:
            self.tag_value_2 = m.get('TagValue2')
        if m.get('TagValue3') is not None:
            self.tag_value_3 = m.get('TagValue3')
        if m.get('TagValue4') is not None:
            self.tag_value_4 = m.get('TagValue4')
        if m.get('TagValue5') is not None:
            self.tag_value_5 = m.get('TagValue5')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class DeleteEvgwInstanceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        content: Any = None,
        desc: str = None,
        description: str = None,
        request_id: str = None,
        ret_code: int = None,
        success: bool = None,
    ):
        self.code = code
        self.content = content
        self.desc = desc
        self.description = description
        self.request_id = request_id
        self.ret_code = ret_code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.content is not None:
            result['Content'] = self.content
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.description is not None:
            result['Description'] = self.description
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.ret_code is not None:
            result['RetCode'] = self.ret_code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RetCode') is not None:
            self.ret_code = m.get('RetCode')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteEvgwInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteEvgwInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteEvgwInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteVtuneInEvgwRequestTagKeyValueModels(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class DeleteVtuneInEvgwRequest(TeaModel):
    def __init__(
        self,
        ak_proxy: str = None,
        ali_uid: int = None,
        api_name: str = None,
        app_key: str = None,
        caller_bid: str = None,
        caller_bid_login_email: str = None,
        caller_security_transport: bool = None,
        caller_type: str = None,
        caller_uid: int = None,
        caller_uid_login_email: str = None,
        channel: str = None,
        client_ip: str = None,
        enable: bool = None,
        evgw_id: str = None,
        from_type: int = None,
        mfa_present: bool = None,
        operator: str = None,
        owner_account: str = None,
        owner_id: int = None,
        owner_id_login_email: str = None,
        prod_code: str = None,
        proxy_caller_ip: str = None,
        proxy_caller_security_transport: bool = None,
        proxy_id: str = None,
        proxy_trust_transport_info: bool = None,
        request_content: str = None,
        request_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        security_token: str = None,
        sms_resource_owner_id: int = None,
        tag_key_1: str = None,
        tag_key_2: str = None,
        tag_key_3: str = None,
        tag_key_4: str = None,
        tag_key_5: str = None,
        tag_key_value_models: List[DeleteVtuneInEvgwRequestTagKeyValueModels] = None,
        tag_value_1: str = None,
        tag_value_2: str = None,
        tag_value_3: str = None,
        tag_value_4: str = None,
        tag_value_5: str = None,
        token: str = None,
        version: str = None,
        vtune_id: str = None,
    ):
        self.ak_proxy = ak_proxy
        self.ali_uid = ali_uid
        self.api_name = api_name
        self.app_key = app_key
        self.caller_bid = caller_bid
        self.caller_bid_login_email = caller_bid_login_email
        self.caller_security_transport = caller_security_transport
        self.caller_type = caller_type
        self.caller_uid = caller_uid
        self.caller_uid_login_email = caller_uid_login_email
        self.channel = channel
        self.client_ip = client_ip
        self.enable = enable
        self.evgw_id = evgw_id
        self.from_type = from_type
        self.mfa_present = mfa_present
        self.operator = operator
        self.owner_account = owner_account
        self.owner_id = owner_id
        self.owner_id_login_email = owner_id_login_email
        self.prod_code = prod_code
        self.proxy_caller_ip = proxy_caller_ip
        self.proxy_caller_security_transport = proxy_caller_security_transport
        self.proxy_id = proxy_id
        self.proxy_trust_transport_info = proxy_trust_transport_info
        self.request_content = request_content
        self.request_id = request_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.security_token = security_token
        self.sms_resource_owner_id = sms_resource_owner_id
        self.tag_key_1 = tag_key_1
        self.tag_key_2 = tag_key_2
        self.tag_key_3 = tag_key_3
        self.tag_key_4 = tag_key_4
        self.tag_key_5 = tag_key_5
        self.tag_key_value_models = tag_key_value_models
        self.tag_value_1 = tag_value_1
        self.tag_value_2 = tag_value_2
        self.tag_value_3 = tag_value_3
        self.tag_value_4 = tag_value_4
        self.tag_value_5 = tag_value_5
        self.token = token
        self.version = version
        self.vtune_id = vtune_id

    def validate(self):
        if self.tag_key_value_models:
            for k in self.tag_key_value_models:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ak_proxy is not None:
            result['AkProxy'] = self.ak_proxy
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.caller_bid is not None:
            result['CallerBid'] = self.caller_bid
        if self.caller_bid_login_email is not None:
            result['CallerBidLoginEmail'] = self.caller_bid_login_email
        if self.caller_security_transport is not None:
            result['CallerSecurityTransport'] = self.caller_security_transport
        if self.caller_type is not None:
            result['CallerType'] = self.caller_type
        if self.caller_uid is not None:
            result['CallerUid'] = self.caller_uid
        if self.caller_uid_login_email is not None:
            result['CallerUidLoginEmail'] = self.caller_uid_login_email
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.client_ip is not None:
            result['ClientIP'] = self.client_ip
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.evgw_id is not None:
            result['EvgwId'] = self.evgw_id
        if self.from_type is not None:
            result['FromType'] = self.from_type
        if self.mfa_present is not None:
            result['MfaPresent'] = self.mfa_present
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.owner_account is not None:
            result['OwnerAccount'] = self.owner_account
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.owner_id_login_email is not None:
            result['OwnerIdLoginEmail'] = self.owner_id_login_email
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.proxy_caller_ip is not None:
            result['ProxyCallerIp'] = self.proxy_caller_ip
        if self.proxy_caller_security_transport is not None:
            result['ProxyCallerSecurityTransport'] = self.proxy_caller_security_transport
        if self.proxy_id is not None:
            result['ProxyId'] = self.proxy_id
        if self.proxy_trust_transport_info is not None:
            result['ProxyTrustTransportInfo'] = self.proxy_trust_transport_info
        if self.request_content is not None:
            result['RequestContent'] = self.request_content
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        if self.sms_resource_owner_id is not None:
            result['SmsResourceOwnerId'] = self.sms_resource_owner_id
        if self.tag_key_1 is not None:
            result['TagKey1'] = self.tag_key_1
        if self.tag_key_2 is not None:
            result['TagKey2'] = self.tag_key_2
        if self.tag_key_3 is not None:
            result['TagKey3'] = self.tag_key_3
        if self.tag_key_4 is not None:
            result['TagKey4'] = self.tag_key_4
        if self.tag_key_5 is not None:
            result['TagKey5'] = self.tag_key_5
        result['TagKeyValueModels'] = []
        if self.tag_key_value_models is not None:
            for k in self.tag_key_value_models:
                result['TagKeyValueModels'].append(k.to_map() if k else None)
        if self.tag_value_1 is not None:
            result['TagValue1'] = self.tag_value_1
        if self.tag_value_2 is not None:
            result['TagValue2'] = self.tag_value_2
        if self.tag_value_3 is not None:
            result['TagValue3'] = self.tag_value_3
        if self.tag_value_4 is not None:
            result['TagValue4'] = self.tag_value_4
        if self.tag_value_5 is not None:
            result['TagValue5'] = self.tag_value_5
        if self.token is not None:
            result['Token'] = self.token
        if self.version is not None:
            result['Version'] = self.version
        if self.vtune_id is not None:
            result['VtuneId'] = self.vtune_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AkProxy') is not None:
            self.ak_proxy = m.get('AkProxy')
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('CallerBid') is not None:
            self.caller_bid = m.get('CallerBid')
        if m.get('CallerBidLoginEmail') is not None:
            self.caller_bid_login_email = m.get('CallerBidLoginEmail')
        if m.get('CallerSecurityTransport') is not None:
            self.caller_security_transport = m.get('CallerSecurityTransport')
        if m.get('CallerType') is not None:
            self.caller_type = m.get('CallerType')
        if m.get('CallerUid') is not None:
            self.caller_uid = m.get('CallerUid')
        if m.get('CallerUidLoginEmail') is not None:
            self.caller_uid_login_email = m.get('CallerUidLoginEmail')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ClientIP') is not None:
            self.client_ip = m.get('ClientIP')
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('EvgwId') is not None:
            self.evgw_id = m.get('EvgwId')
        if m.get('FromType') is not None:
            self.from_type = m.get('FromType')
        if m.get('MfaPresent') is not None:
            self.mfa_present = m.get('MfaPresent')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('OwnerAccount') is not None:
            self.owner_account = m.get('OwnerAccount')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('OwnerIdLoginEmail') is not None:
            self.owner_id_login_email = m.get('OwnerIdLoginEmail')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProxyCallerIp') is not None:
            self.proxy_caller_ip = m.get('ProxyCallerIp')
        if m.get('ProxyCallerSecurityTransport') is not None:
            self.proxy_caller_security_transport = m.get('ProxyCallerSecurityTransport')
        if m.get('ProxyId') is not None:
            self.proxy_id = m.get('ProxyId')
        if m.get('ProxyTrustTransportInfo') is not None:
            self.proxy_trust_transport_info = m.get('ProxyTrustTransportInfo')
        if m.get('RequestContent') is not None:
            self.request_content = m.get('RequestContent')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        if m.get('SmsResourceOwnerId') is not None:
            self.sms_resource_owner_id = m.get('SmsResourceOwnerId')
        if m.get('TagKey1') is not None:
            self.tag_key_1 = m.get('TagKey1')
        if m.get('TagKey2') is not None:
            self.tag_key_2 = m.get('TagKey2')
        if m.get('TagKey3') is not None:
            self.tag_key_3 = m.get('TagKey3')
        if m.get('TagKey4') is not None:
            self.tag_key_4 = m.get('TagKey4')
        if m.get('TagKey5') is not None:
            self.tag_key_5 = m.get('TagKey5')
        self.tag_key_value_models = []
        if m.get('TagKeyValueModels') is not None:
            for k in m.get('TagKeyValueModels'):
                temp_model = DeleteVtuneInEvgwRequestTagKeyValueModels()
                self.tag_key_value_models.append(temp_model.from_map(k))
        if m.get('TagValue1') is not None:
            self.tag_value_1 = m.get('TagValue1')
        if m.get('TagValue2') is not None:
            self.tag_value_2 = m.get('TagValue2')
        if m.get('TagValue3') is not None:
            self.tag_value_3 = m.get('TagValue3')
        if m.get('TagValue4') is not None:
            self.tag_value_4 = m.get('TagValue4')
        if m.get('TagValue5') is not None:
            self.tag_value_5 = m.get('TagValue5')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        if m.get('VtuneId') is not None:
            self.vtune_id = m.get('VtuneId')
        return self


class DeleteVtuneInEvgwResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        content: Any = None,
        desc: str = None,
        description: str = None,
        request_id: str = None,
        ret_code: int = None,
        success: bool = None,
    ):
        self.code = code
        self.content = content
        self.desc = desc
        self.description = description
        self.request_id = request_id
        self.ret_code = ret_code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.content is not None:
            result['Content'] = self.content
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.description is not None:
            result['Description'] = self.description
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.ret_code is not None:
            result['RetCode'] = self.ret_code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RetCode') is not None:
            self.ret_code = m.get('RetCode')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteVtuneInEvgwResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteVtuneInEvgwResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteVtuneInEvgwResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteVtuneInstanceRequestTagKeyValueModels(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class DeleteVtuneInstanceRequest(TeaModel):
    def __init__(
        self,
        ak_proxy: str = None,
        ali_uid: int = None,
        api_name: str = None,
        app_key: str = None,
        caller_bid: str = None,
        caller_bid_login_email: str = None,
        caller_security_transport: bool = None,
        caller_type: str = None,
        caller_uid: int = None,
        caller_uid_login_email: str = None,
        channel: str = None,
        client_ip: str = None,
        enable: bool = None,
        from_type: int = None,
        mfa_present: bool = None,
        operator: str = None,
        owner_account: str = None,
        owner_id: int = None,
        owner_id_login_email: str = None,
        prod_code: str = None,
        proxy_caller_ip: str = None,
        proxy_caller_security_transport: bool = None,
        proxy_id: str = None,
        proxy_trust_transport_info: bool = None,
        request_content: str = None,
        request_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        security_token: str = None,
        sms_resource_owner_id: int = None,
        tag_key_1: str = None,
        tag_key_2: str = None,
        tag_key_3: str = None,
        tag_key_4: str = None,
        tag_key_5: str = None,
        tag_key_value_models: List[DeleteVtuneInstanceRequestTagKeyValueModels] = None,
        tag_value_1: str = None,
        tag_value_2: str = None,
        tag_value_3: str = None,
        tag_value_4: str = None,
        tag_value_5: str = None,
        token: str = None,
        version: str = None,
        vtune_id: str = None,
    ):
        self.ak_proxy = ak_proxy
        self.ali_uid = ali_uid
        self.api_name = api_name
        self.app_key = app_key
        self.caller_bid = caller_bid
        self.caller_bid_login_email = caller_bid_login_email
        self.caller_security_transport = caller_security_transport
        self.caller_type = caller_type
        self.caller_uid = caller_uid
        self.caller_uid_login_email = caller_uid_login_email
        self.channel = channel
        self.client_ip = client_ip
        self.enable = enable
        self.from_type = from_type
        self.mfa_present = mfa_present
        self.operator = operator
        self.owner_account = owner_account
        self.owner_id = owner_id
        self.owner_id_login_email = owner_id_login_email
        self.prod_code = prod_code
        self.proxy_caller_ip = proxy_caller_ip
        self.proxy_caller_security_transport = proxy_caller_security_transport
        self.proxy_id = proxy_id
        self.proxy_trust_transport_info = proxy_trust_transport_info
        self.request_content = request_content
        self.request_id = request_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.security_token = security_token
        self.sms_resource_owner_id = sms_resource_owner_id
        self.tag_key_1 = tag_key_1
        self.tag_key_2 = tag_key_2
        self.tag_key_3 = tag_key_3
        self.tag_key_4 = tag_key_4
        self.tag_key_5 = tag_key_5
        self.tag_key_value_models = tag_key_value_models
        self.tag_value_1 = tag_value_1
        self.tag_value_2 = tag_value_2
        self.tag_value_3 = tag_value_3
        self.tag_value_4 = tag_value_4
        self.tag_value_5 = tag_value_5
        self.token = token
        self.version = version
        self.vtune_id = vtune_id

    def validate(self):
        if self.tag_key_value_models:
            for k in self.tag_key_value_models:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ak_proxy is not None:
            result['AkProxy'] = self.ak_proxy
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.caller_bid is not None:
            result['CallerBid'] = self.caller_bid
        if self.caller_bid_login_email is not None:
            result['CallerBidLoginEmail'] = self.caller_bid_login_email
        if self.caller_security_transport is not None:
            result['CallerSecurityTransport'] = self.caller_security_transport
        if self.caller_type is not None:
            result['CallerType'] = self.caller_type
        if self.caller_uid is not None:
            result['CallerUid'] = self.caller_uid
        if self.caller_uid_login_email is not None:
            result['CallerUidLoginEmail'] = self.caller_uid_login_email
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.client_ip is not None:
            result['ClientIP'] = self.client_ip
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.from_type is not None:
            result['FromType'] = self.from_type
        if self.mfa_present is not None:
            result['MfaPresent'] = self.mfa_present
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.owner_account is not None:
            result['OwnerAccount'] = self.owner_account
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.owner_id_login_email is not None:
            result['OwnerIdLoginEmail'] = self.owner_id_login_email
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.proxy_caller_ip is not None:
            result['ProxyCallerIp'] = self.proxy_caller_ip
        if self.proxy_caller_security_transport is not None:
            result['ProxyCallerSecurityTransport'] = self.proxy_caller_security_transport
        if self.proxy_id is not None:
            result['ProxyId'] = self.proxy_id
        if self.proxy_trust_transport_info is not None:
            result['ProxyTrustTransportInfo'] = self.proxy_trust_transport_info
        if self.request_content is not None:
            result['RequestContent'] = self.request_content
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        if self.sms_resource_owner_id is not None:
            result['SmsResourceOwnerId'] = self.sms_resource_owner_id
        if self.tag_key_1 is not None:
            result['TagKey1'] = self.tag_key_1
        if self.tag_key_2 is not None:
            result['TagKey2'] = self.tag_key_2
        if self.tag_key_3 is not None:
            result['TagKey3'] = self.tag_key_3
        if self.tag_key_4 is not None:
            result['TagKey4'] = self.tag_key_4
        if self.tag_key_5 is not None:
            result['TagKey5'] = self.tag_key_5
        result['TagKeyValueModels'] = []
        if self.tag_key_value_models is not None:
            for k in self.tag_key_value_models:
                result['TagKeyValueModels'].append(k.to_map() if k else None)
        if self.tag_value_1 is not None:
            result['TagValue1'] = self.tag_value_1
        if self.tag_value_2 is not None:
            result['TagValue2'] = self.tag_value_2
        if self.tag_value_3 is not None:
            result['TagValue3'] = self.tag_value_3
        if self.tag_value_4 is not None:
            result['TagValue4'] = self.tag_value_4
        if self.tag_value_5 is not None:
            result['TagValue5'] = self.tag_value_5
        if self.token is not None:
            result['Token'] = self.token
        if self.version is not None:
            result['Version'] = self.version
        if self.vtune_id is not None:
            result['VtuneId'] = self.vtune_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AkProxy') is not None:
            self.ak_proxy = m.get('AkProxy')
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('CallerBid') is not None:
            self.caller_bid = m.get('CallerBid')
        if m.get('CallerBidLoginEmail') is not None:
            self.caller_bid_login_email = m.get('CallerBidLoginEmail')
        if m.get('CallerSecurityTransport') is not None:
            self.caller_security_transport = m.get('CallerSecurityTransport')
        if m.get('CallerType') is not None:
            self.caller_type = m.get('CallerType')
        if m.get('CallerUid') is not None:
            self.caller_uid = m.get('CallerUid')
        if m.get('CallerUidLoginEmail') is not None:
            self.caller_uid_login_email = m.get('CallerUidLoginEmail')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ClientIP') is not None:
            self.client_ip = m.get('ClientIP')
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('FromType') is not None:
            self.from_type = m.get('FromType')
        if m.get('MfaPresent') is not None:
            self.mfa_present = m.get('MfaPresent')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('OwnerAccount') is not None:
            self.owner_account = m.get('OwnerAccount')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('OwnerIdLoginEmail') is not None:
            self.owner_id_login_email = m.get('OwnerIdLoginEmail')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProxyCallerIp') is not None:
            self.proxy_caller_ip = m.get('ProxyCallerIp')
        if m.get('ProxyCallerSecurityTransport') is not None:
            self.proxy_caller_security_transport = m.get('ProxyCallerSecurityTransport')
        if m.get('ProxyId') is not None:
            self.proxy_id = m.get('ProxyId')
        if m.get('ProxyTrustTransportInfo') is not None:
            self.proxy_trust_transport_info = m.get('ProxyTrustTransportInfo')
        if m.get('RequestContent') is not None:
            self.request_content = m.get('RequestContent')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        if m.get('SmsResourceOwnerId') is not None:
            self.sms_resource_owner_id = m.get('SmsResourceOwnerId')
        if m.get('TagKey1') is not None:
            self.tag_key_1 = m.get('TagKey1')
        if m.get('TagKey2') is not None:
            self.tag_key_2 = m.get('TagKey2')
        if m.get('TagKey3') is not None:
            self.tag_key_3 = m.get('TagKey3')
        if m.get('TagKey4') is not None:
            self.tag_key_4 = m.get('TagKey4')
        if m.get('TagKey5') is not None:
            self.tag_key_5 = m.get('TagKey5')
        self.tag_key_value_models = []
        if m.get('TagKeyValueModels') is not None:
            for k in m.get('TagKeyValueModels'):
                temp_model = DeleteVtuneInstanceRequestTagKeyValueModels()
                self.tag_key_value_models.append(temp_model.from_map(k))
        if m.get('TagValue1') is not None:
            self.tag_value_1 = m.get('TagValue1')
        if m.get('TagValue2') is not None:
            self.tag_value_2 = m.get('TagValue2')
        if m.get('TagValue3') is not None:
            self.tag_value_3 = m.get('TagValue3')
        if m.get('TagValue4') is not None:
            self.tag_value_4 = m.get('TagValue4')
        if m.get('TagValue5') is not None:
            self.tag_value_5 = m.get('TagValue5')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        if m.get('VtuneId') is not None:
            self.vtune_id = m.get('VtuneId')
        return self


class DeleteVtuneInstanceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        content: Any = None,
        desc: str = None,
        description: str = None,
        request_id: str = None,
        ret_code: int = None,
        success: bool = None,
    ):
        self.code = code
        self.content = content
        self.desc = desc
        self.description = description
        self.request_id = request_id
        self.ret_code = ret_code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.content is not None:
            result['Content'] = self.content
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.description is not None:
            result['Description'] = self.description
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.ret_code is not None:
            result['RetCode'] = self.ret_code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RetCode') is not None:
            self.ret_code = m.get('RetCode')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteVtuneInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteVtuneInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteVtuneInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetEVLTrafficDataRequestTagKeyValueModels(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetEVLTrafficDataRequest(TeaModel):
    def __init__(
        self,
        ak_proxy: str = None,
        ali_uid: int = None,
        api_name: str = None,
        app_key: str = None,
        caller_bid_login_email: str = None,
        caller_security_transport: bool = None,
        caller_uid_login_email: str = None,
        channel: str = None,
        client_ip: str = None,
        enable: bool = None,
        end_time: str = None,
        from_type: int = None,
        group_method: str = None,
        group_type: str = None,
        instance_id: str = None,
        mfa_present: bool = None,
        operator: str = None,
        owner_account: str = None,
        owner_id: int = None,
        owner_id_login_email: str = None,
        prod_code: str = None,
        proxy_caller_ip: str = None,
        proxy_caller_security_transport: bool = None,
        proxy_id: str = None,
        proxy_trust_transport_info: bool = None,
        request_content: str = None,
        request_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        security_token: str = None,
        sms_resource_owner_id: int = None,
        start_time: str = None,
        tag_key_1: str = None,
        tag_key_2: str = None,
        tag_key_3: str = None,
        tag_key_4: str = None,
        tag_key_5: str = None,
        tag_key_value_models: List[GetEVLTrafficDataRequestTagKeyValueModels] = None,
        tag_value_1: str = None,
        tag_value_2: str = None,
        tag_value_3: str = None,
        tag_value_4: str = None,
        tag_value_5: str = None,
        token: str = None,
        version: str = None,
    ):
        self.ak_proxy = ak_proxy
        self.ali_uid = ali_uid
        self.api_name = api_name
        self.app_key = app_key
        self.caller_bid_login_email = caller_bid_login_email
        self.caller_security_transport = caller_security_transport
        self.caller_uid_login_email = caller_uid_login_email
        self.channel = channel
        self.client_ip = client_ip
        self.enable = enable
        self.end_time = end_time
        self.from_type = from_type
        self.group_method = group_method
        self.group_type = group_type
        self.instance_id = instance_id
        self.mfa_present = mfa_present
        self.operator = operator
        self.owner_account = owner_account
        self.owner_id = owner_id
        self.owner_id_login_email = owner_id_login_email
        self.prod_code = prod_code
        self.proxy_caller_ip = proxy_caller_ip
        self.proxy_caller_security_transport = proxy_caller_security_transport
        self.proxy_id = proxy_id
        self.proxy_trust_transport_info = proxy_trust_transport_info
        self.request_content = request_content
        self.request_id = request_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.security_token = security_token
        self.sms_resource_owner_id = sms_resource_owner_id
        self.start_time = start_time
        self.tag_key_1 = tag_key_1
        self.tag_key_2 = tag_key_2
        self.tag_key_3 = tag_key_3
        self.tag_key_4 = tag_key_4
        self.tag_key_5 = tag_key_5
        self.tag_key_value_models = tag_key_value_models
        self.tag_value_1 = tag_value_1
        self.tag_value_2 = tag_value_2
        self.tag_value_3 = tag_value_3
        self.tag_value_4 = tag_value_4
        self.tag_value_5 = tag_value_5
        self.token = token
        self.version = version

    def validate(self):
        if self.tag_key_value_models:
            for k in self.tag_key_value_models:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ak_proxy is not None:
            result['AkProxy'] = self.ak_proxy
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.caller_bid_login_email is not None:
            result['CallerBidLoginEmail'] = self.caller_bid_login_email
        if self.caller_security_transport is not None:
            result['CallerSecurityTransport'] = self.caller_security_transport
        if self.caller_uid_login_email is not None:
            result['CallerUidLoginEmail'] = self.caller_uid_login_email
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.client_ip is not None:
            result['ClientIP'] = self.client_ip
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.from_type is not None:
            result['FromType'] = self.from_type
        if self.group_method is not None:
            result['GroupMethod'] = self.group_method
        if self.group_type is not None:
            result['GroupType'] = self.group_type
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.mfa_present is not None:
            result['MfaPresent'] = self.mfa_present
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.owner_account is not None:
            result['OwnerAccount'] = self.owner_account
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.owner_id_login_email is not None:
            result['OwnerIdLoginEmail'] = self.owner_id_login_email
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.proxy_caller_ip is not None:
            result['ProxyCallerIp'] = self.proxy_caller_ip
        if self.proxy_caller_security_transport is not None:
            result['ProxyCallerSecurityTransport'] = self.proxy_caller_security_transport
        if self.proxy_id is not None:
            result['ProxyId'] = self.proxy_id
        if self.proxy_trust_transport_info is not None:
            result['ProxyTrustTransportInfo'] = self.proxy_trust_transport_info
        if self.request_content is not None:
            result['RequestContent'] = self.request_content
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        if self.sms_resource_owner_id is not None:
            result['SmsResourceOwnerId'] = self.sms_resource_owner_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.tag_key_1 is not None:
            result['TagKey1'] = self.tag_key_1
        if self.tag_key_2 is not None:
            result['TagKey2'] = self.tag_key_2
        if self.tag_key_3 is not None:
            result['TagKey3'] = self.tag_key_3
        if self.tag_key_4 is not None:
            result['TagKey4'] = self.tag_key_4
        if self.tag_key_5 is not None:
            result['TagKey5'] = self.tag_key_5
        result['TagKeyValueModels'] = []
        if self.tag_key_value_models is not None:
            for k in self.tag_key_value_models:
                result['TagKeyValueModels'].append(k.to_map() if k else None)
        if self.tag_value_1 is not None:
            result['TagValue1'] = self.tag_value_1
        if self.tag_value_2 is not None:
            result['TagValue2'] = self.tag_value_2
        if self.tag_value_3 is not None:
            result['TagValue3'] = self.tag_value_3
        if self.tag_value_4 is not None:
            result['TagValue4'] = self.tag_value_4
        if self.tag_value_5 is not None:
            result['TagValue5'] = self.tag_value_5
        if self.token is not None:
            result['Token'] = self.token
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AkProxy') is not None:
            self.ak_proxy = m.get('AkProxy')
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('CallerBidLoginEmail') is not None:
            self.caller_bid_login_email = m.get('CallerBidLoginEmail')
        if m.get('CallerSecurityTransport') is not None:
            self.caller_security_transport = m.get('CallerSecurityTransport')
        if m.get('CallerUidLoginEmail') is not None:
            self.caller_uid_login_email = m.get('CallerUidLoginEmail')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ClientIP') is not None:
            self.client_ip = m.get('ClientIP')
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('FromType') is not None:
            self.from_type = m.get('FromType')
        if m.get('GroupMethod') is not None:
            self.group_method = m.get('GroupMethod')
        if m.get('GroupType') is not None:
            self.group_type = m.get('GroupType')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MfaPresent') is not None:
            self.mfa_present = m.get('MfaPresent')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('OwnerAccount') is not None:
            self.owner_account = m.get('OwnerAccount')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('OwnerIdLoginEmail') is not None:
            self.owner_id_login_email = m.get('OwnerIdLoginEmail')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProxyCallerIp') is not None:
            self.proxy_caller_ip = m.get('ProxyCallerIp')
        if m.get('ProxyCallerSecurityTransport') is not None:
            self.proxy_caller_security_transport = m.get('ProxyCallerSecurityTransport')
        if m.get('ProxyId') is not None:
            self.proxy_id = m.get('ProxyId')
        if m.get('ProxyTrustTransportInfo') is not None:
            self.proxy_trust_transport_info = m.get('ProxyTrustTransportInfo')
        if m.get('RequestContent') is not None:
            self.request_content = m.get('RequestContent')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        if m.get('SmsResourceOwnerId') is not None:
            self.sms_resource_owner_id = m.get('SmsResourceOwnerId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TagKey1') is not None:
            self.tag_key_1 = m.get('TagKey1')
        if m.get('TagKey2') is not None:
            self.tag_key_2 = m.get('TagKey2')
        if m.get('TagKey3') is not None:
            self.tag_key_3 = m.get('TagKey3')
        if m.get('TagKey4') is not None:
            self.tag_key_4 = m.get('TagKey4')
        if m.get('TagKey5') is not None:
            self.tag_key_5 = m.get('TagKey5')
        self.tag_key_value_models = []
        if m.get('TagKeyValueModels') is not None:
            for k in m.get('TagKeyValueModels'):
                temp_model = GetEVLTrafficDataRequestTagKeyValueModels()
                self.tag_key_value_models.append(temp_model.from_map(k))
        if m.get('TagValue1') is not None:
            self.tag_value_1 = m.get('TagValue1')
        if m.get('TagValue2') is not None:
            self.tag_value_2 = m.get('TagValue2')
        if m.get('TagValue3') is not None:
            self.tag_value_3 = m.get('TagValue3')
        if m.get('TagValue4') is not None:
            self.tag_value_4 = m.get('TagValue4')
        if m.get('TagValue5') is not None:
            self.tag_value_5 = m.get('TagValue5')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class GetEVLTrafficDataResponseBodyModelContent(TeaModel):
    def __init__(
        self,
        band_width_rx: int = None,
        band_width_tx: int = None,
        ts: str = None,
    ):
        self.band_width_rx = band_width_rx
        self.band_width_tx = band_width_tx
        self.ts = ts

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.band_width_rx is not None:
            result['BandWidthRx'] = self.band_width_rx
        if self.band_width_tx is not None:
            result['BandWidthTx'] = self.band_width_tx
        if self.ts is not None:
            result['Ts'] = self.ts
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BandWidthRx') is not None:
            self.band_width_rx = m.get('BandWidthRx')
        if m.get('BandWidthTx') is not None:
            self.band_width_tx = m.get('BandWidthTx')
        if m.get('Ts') is not None:
            self.ts = m.get('Ts')
        return self


class GetEVLTrafficDataResponseBodyModel(TeaModel):
    def __init__(
        self,
        content: List[GetEVLTrafficDataResponseBodyModelContent] = None,
        description: str = None,
        request_id: str = None,
        ret_code: int = None,
    ):
        self.content = content
        self.description = description
        self.request_id = request_id
        self.ret_code = ret_code

    def validate(self):
        if self.content:
            for k in self.content:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Content'] = []
        if self.content is not None:
            for k in self.content:
                result['Content'].append(k.to_map() if k else None)
        if self.description is not None:
            result['Description'] = self.description
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.ret_code is not None:
            result['RetCode'] = self.ret_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.content = []
        if m.get('Content') is not None:
            for k in m.get('Content'):
                temp_model = GetEVLTrafficDataResponseBodyModelContent()
                self.content.append(temp_model.from_map(k))
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RetCode') is not None:
            self.ret_code = m.get('RetCode')
        return self


class GetEVLTrafficDataResponseBodyRequestOrderAccountCreditList(TeaModel):
    def __init__(
        self,
        account_id: int = None,
        account_name: str = None,
        credit_balance: int = None,
        cust_id: int = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        remarks: str = None,
    ):
        self.account_id = account_id
        self.account_name = account_name
        self.credit_balance = credit_balance
        self.cust_id = cust_id
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.remarks = remarks

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.account_name is not None:
            result['AccountName'] = self.account_name
        if self.credit_balance is not None:
            result['CreditBalance'] = self.credit_balance
        if self.cust_id is not None:
            result['CustId'] = self.cust_id
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('AccountName') is not None:
            self.account_name = m.get('AccountName')
        if m.get('CreditBalance') is not None:
            self.credit_balance = m.get('CreditBalance')
        if m.get('CustId') is not None:
            self.cust_id = m.get('CustId')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class GetEVLTrafficDataResponseBodyRequestOrderAccount(TeaModel):
    def __init__(
        self,
        acct_id: int = None,
        acct_name: str = None,
        acct_type: str = None,
        bill_type: int = None,
        control_type: int = None,
        credit_list: List[GetEVLTrafficDataResponseBodyRequestOrderAccountCreditList] = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        remarks: str = None,
    ):
        self.acct_id = acct_id
        self.acct_name = acct_name
        self.acct_type = acct_type
        self.bill_type = bill_type
        self.control_type = control_type
        self.credit_list = credit_list
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.remarks = remarks

    def validate(self):
        if self.credit_list:
            for k in self.credit_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.acct_id is not None:
            result['AcctId'] = self.acct_id
        if self.acct_name is not None:
            result['AcctName'] = self.acct_name
        if self.acct_type is not None:
            result['AcctType'] = self.acct_type
        if self.bill_type is not None:
            result['BillType'] = self.bill_type
        if self.control_type is not None:
            result['ControlType'] = self.control_type
        result['CreditList'] = []
        if self.credit_list is not None:
            for k in self.credit_list:
                result['CreditList'].append(k.to_map() if k else None)
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AcctId') is not None:
            self.acct_id = m.get('AcctId')
        if m.get('AcctName') is not None:
            self.acct_name = m.get('AcctName')
        if m.get('AcctType') is not None:
            self.acct_type = m.get('AcctType')
        if m.get('BillType') is not None:
            self.bill_type = m.get('BillType')
        if m.get('ControlType') is not None:
            self.control_type = m.get('ControlType')
        self.credit_list = []
        if m.get('CreditList') is not None:
            for k in m.get('CreditList'):
                temp_model = GetEVLTrafficDataResponseBodyRequestOrderAccountCreditList()
                self.credit_list.append(temp_model.from_map(k))
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class GetEVLTrafficDataResponseBodyRequestOrderAssetsAttributeList(TeaModel):
    def __init__(
        self,
        attr_group: str = None,
        attr_id: int = None,
        attr_name: str = None,
        attr_text: str = None,
        attr_value: str = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        mapping_code: str = None,
        old_attr_text: str = None,
        old_attr_value: str = None,
        options: int = None,
        remarks: str = None,
        value_expression: str = None,
    ):
        self.attr_group = attr_group
        self.attr_id = attr_id
        self.attr_name = attr_name
        self.attr_text = attr_text
        self.attr_value = attr_value
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.mapping_code = mapping_code
        self.old_attr_text = old_attr_text
        self.old_attr_value = old_attr_value
        self.options = options
        self.remarks = remarks
        self.value_expression = value_expression

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attr_group is not None:
            result['AttrGroup'] = self.attr_group
        if self.attr_id is not None:
            result['AttrId'] = self.attr_id
        if self.attr_name is not None:
            result['AttrName'] = self.attr_name
        if self.attr_text is not None:
            result['AttrText'] = self.attr_text
        if self.attr_value is not None:
            result['AttrValue'] = self.attr_value
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.mapping_code is not None:
            result['MappingCode'] = self.mapping_code
        if self.old_attr_text is not None:
            result['OldAttrText'] = self.old_attr_text
        if self.old_attr_value is not None:
            result['OldAttrValue'] = self.old_attr_value
        if self.options is not None:
            result['Options'] = self.options
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.value_expression is not None:
            result['ValueExpression'] = self.value_expression
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AttrGroup') is not None:
            self.attr_group = m.get('AttrGroup')
        if m.get('AttrId') is not None:
            self.attr_id = m.get('AttrId')
        if m.get('AttrName') is not None:
            self.attr_name = m.get('AttrName')
        if m.get('AttrText') is not None:
            self.attr_text = m.get('AttrText')
        if m.get('AttrValue') is not None:
            self.attr_value = m.get('AttrValue')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('MappingCode') is not None:
            self.mapping_code = m.get('MappingCode')
        if m.get('OldAttrText') is not None:
            self.old_attr_text = m.get('OldAttrText')
        if m.get('OldAttrValue') is not None:
            self.old_attr_value = m.get('OldAttrValue')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ValueExpression') is not None:
            self.value_expression = m.get('ValueExpression')
        return self


class GetEVLTrafficDataResponseBodyRequestOrderAssets(TeaModel):
    def __init__(
        self,
        active_time: str = None,
        assets_id: int = None,
        assets_name: str = None,
        assets_owner: str = None,
        assets_status: int = None,
        assets_tag: int = None,
        assets_type: int = None,
        attribute_list: List[GetEVLTrafficDataResponseBodyRequestOrderAssetsAttributeList] = None,
        bill_id: str = None,
        bill_source: str = None,
        channel_id: str = None,
        data_status: int = None,
        destroy_time: str = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        group_path: str = None,
        imsi: str = None,
        ins_status: int = None,
        os_status: str = None,
        os_time: str = None,
        owner_assets_id: int = None,
        password: str = None,
        pre_destroy_time: str = None,
        product_line_code: str = None,
        real_bill_number: str = None,
        remarks: str = None,
        res_code: str = None,
    ):
        self.active_time = active_time
        self.assets_id = assets_id
        self.assets_name = assets_name
        self.assets_owner = assets_owner
        self.assets_status = assets_status
        self.assets_tag = assets_tag
        self.assets_type = assets_type
        self.attribute_list = attribute_list
        self.bill_id = bill_id
        self.bill_source = bill_source
        self.channel_id = channel_id
        self.data_status = data_status
        self.destroy_time = destroy_time
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.group_path = group_path
        self.imsi = imsi
        self.ins_status = ins_status
        self.os_status = os_status
        self.os_time = os_time
        self.owner_assets_id = owner_assets_id
        self.password = password
        self.pre_destroy_time = pre_destroy_time
        self.product_line_code = product_line_code
        self.real_bill_number = real_bill_number
        self.remarks = remarks
        self.res_code = res_code

    def validate(self):
        if self.attribute_list:
            for k in self.attribute_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.active_time is not None:
            result['ActiveTime'] = self.active_time
        if self.assets_id is not None:
            result['AssetsId'] = self.assets_id
        if self.assets_name is not None:
            result['AssetsName'] = self.assets_name
        if self.assets_owner is not None:
            result['AssetsOwner'] = self.assets_owner
        if self.assets_status is not None:
            result['AssetsStatus'] = self.assets_status
        if self.assets_tag is not None:
            result['AssetsTag'] = self.assets_tag
        if self.assets_type is not None:
            result['AssetsType'] = self.assets_type
        result['AttributeList'] = []
        if self.attribute_list is not None:
            for k in self.attribute_list:
                result['AttributeList'].append(k.to_map() if k else None)
        if self.bill_id is not None:
            result['BillId'] = self.bill_id
        if self.bill_source is not None:
            result['BillSource'] = self.bill_source
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.destroy_time is not None:
            result['DestroyTime'] = self.destroy_time
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.group_path is not None:
            result['GroupPath'] = self.group_path
        if self.imsi is not None:
            result['Imsi'] = self.imsi
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.os_status is not None:
            result['OsStatus'] = self.os_status
        if self.os_time is not None:
            result['OsTime'] = self.os_time
        if self.owner_assets_id is not None:
            result['OwnerAssetsId'] = self.owner_assets_id
        if self.password is not None:
            result['Password'] = self.password
        if self.pre_destroy_time is not None:
            result['PreDestroyTime'] = self.pre_destroy_time
        if self.product_line_code is not None:
            result['ProductLineCode'] = self.product_line_code
        if self.real_bill_number is not None:
            result['RealBillNumber'] = self.real_bill_number
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.res_code is not None:
            result['ResCode'] = self.res_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ActiveTime') is not None:
            self.active_time = m.get('ActiveTime')
        if m.get('AssetsId') is not None:
            self.assets_id = m.get('AssetsId')
        if m.get('AssetsName') is not None:
            self.assets_name = m.get('AssetsName')
        if m.get('AssetsOwner') is not None:
            self.assets_owner = m.get('AssetsOwner')
        if m.get('AssetsStatus') is not None:
            self.assets_status = m.get('AssetsStatus')
        if m.get('AssetsTag') is not None:
            self.assets_tag = m.get('AssetsTag')
        if m.get('AssetsType') is not None:
            self.assets_type = m.get('AssetsType')
        self.attribute_list = []
        if m.get('AttributeList') is not None:
            for k in m.get('AttributeList'):
                temp_model = GetEVLTrafficDataResponseBodyRequestOrderAssetsAttributeList()
                self.attribute_list.append(temp_model.from_map(k))
        if m.get('BillId') is not None:
            self.bill_id = m.get('BillId')
        if m.get('BillSource') is not None:
            self.bill_source = m.get('BillSource')
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('DestroyTime') is not None:
            self.destroy_time = m.get('DestroyTime')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('GroupPath') is not None:
            self.group_path = m.get('GroupPath')
        if m.get('Imsi') is not None:
            self.imsi = m.get('Imsi')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('OsStatus') is not None:
            self.os_status = m.get('OsStatus')
        if m.get('OsTime') is not None:
            self.os_time = m.get('OsTime')
        if m.get('OwnerAssetsId') is not None:
            self.owner_assets_id = m.get('OwnerAssetsId')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('PreDestroyTime') is not None:
            self.pre_destroy_time = m.get('PreDestroyTime')
        if m.get('ProductLineCode') is not None:
            self.product_line_code = m.get('ProductLineCode')
        if m.get('RealBillNumber') is not None:
            self.real_bill_number = m.get('RealBillNumber')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ResCode') is not None:
            self.res_code = m.get('ResCode')
        return self


class GetEVLTrafficDataResponseBodyRequestOrderBusiOperation(TeaModel):
    def __init__(
        self,
        operation_code: str = None,
        operation_id: int = None,
        operation_name: str = None,
    ):
        self.operation_code = operation_code
        self.operation_id = operation_id
        self.operation_name = operation_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.operation_code is not None:
            result['OperationCode'] = self.operation_code
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.operation_name is not None:
            result['OperationName'] = self.operation_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OperationCode') is not None:
            self.operation_code = m.get('OperationCode')
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('OperationName') is not None:
            self.operation_name = m.get('OperationName')
        return self


class GetEVLTrafficDataResponseBodyRequestOrderBusiPriceListBusiPriceDetailList(TeaModel):
    def __init__(
        self,
        outer_order_no: str = None,
        paid_amount: int = None,
        payment_mode: str = None,
    ):
        self.outer_order_no = outer_order_no
        self.paid_amount = paid_amount
        self.payment_mode = payment_mode

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.outer_order_no is not None:
            result['OuterOrderNo'] = self.outer_order_no
        if self.paid_amount is not None:
            result['PaidAmount'] = self.paid_amount
        if self.payment_mode is not None:
            result['PaymentMode'] = self.payment_mode
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OuterOrderNo') is not None:
            self.outer_order_no = m.get('OuterOrderNo')
        if m.get('PaidAmount') is not None:
            self.paid_amount = m.get('PaidAmount')
        if m.get('PaymentMode') is not None:
            self.payment_mode = m.get('PaymentMode')
        return self


class GetEVLTrafficDataResponseBodyRequestOrderBusiPriceList(TeaModel):
    def __init__(
        self,
        alipay_order_no: str = None,
        busi_operation_id: int = None,
        busi_price_detail_list: List[GetEVLTrafficDataResponseBodyRequestOrderBusiPriceListBusiPriceDetailList] = None,
        offer_id: int = None,
        order_channel: str = None,
        outer_order_no: str = None,
        paid_amount: int = None,
        receivable_amount: int = None,
        subject_id: str = None,
    ):
        self.alipay_order_no = alipay_order_no
        self.busi_operation_id = busi_operation_id
        self.busi_price_detail_list = busi_price_detail_list
        self.offer_id = offer_id
        self.order_channel = order_channel
        self.outer_order_no = outer_order_no
        self.paid_amount = paid_amount
        self.receivable_amount = receivable_amount
        self.subject_id = subject_id

    def validate(self):
        if self.busi_price_detail_list:
            for k in self.busi_price_detail_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alipay_order_no is not None:
            result['AlipayOrderNo'] = self.alipay_order_no
        if self.busi_operation_id is not None:
            result['BusiOperationId'] = self.busi_operation_id
        result['BusiPriceDetailList'] = []
        if self.busi_price_detail_list is not None:
            for k in self.busi_price_detail_list:
                result['BusiPriceDetailList'].append(k.to_map() if k else None)
        if self.offer_id is not None:
            result['OfferId'] = self.offer_id
        if self.order_channel is not None:
            result['OrderChannel'] = self.order_channel
        if self.outer_order_no is not None:
            result['OuterOrderNo'] = self.outer_order_no
        if self.paid_amount is not None:
            result['PaidAmount'] = self.paid_amount
        if self.receivable_amount is not None:
            result['ReceivableAmount'] = self.receivable_amount
        if self.subject_id is not None:
            result['SubjectId'] = self.subject_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlipayOrderNo') is not None:
            self.alipay_order_no = m.get('AlipayOrderNo')
        if m.get('BusiOperationId') is not None:
            self.busi_operation_id = m.get('BusiOperationId')
        self.busi_price_detail_list = []
        if m.get('BusiPriceDetailList') is not None:
            for k in m.get('BusiPriceDetailList'):
                temp_model = GetEVLTrafficDataResponseBodyRequestOrderBusiPriceListBusiPriceDetailList()
                self.busi_price_detail_list.append(temp_model.from_map(k))
        if m.get('OfferId') is not None:
            self.offer_id = m.get('OfferId')
        if m.get('OrderChannel') is not None:
            self.order_channel = m.get('OrderChannel')
        if m.get('OuterOrderNo') is not None:
            self.outer_order_no = m.get('OuterOrderNo')
        if m.get('PaidAmount') is not None:
            self.paid_amount = m.get('PaidAmount')
        if m.get('ReceivableAmount') is not None:
            self.receivable_amount = m.get('ReceivableAmount')
        if m.get('SubjectId') is not None:
            self.subject_id = m.get('SubjectId')
        return self


class GetEVLTrafficDataResponseBodyRequestOrderCustomerContracts(TeaModel):
    def __init__(
        self,
        contact_address: str = None,
        contact_name: str = None,
        contact_phone: str = None,
        contact_type: int = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        remarks: str = None,
    ):
        self.contact_address = contact_address
        self.contact_name = contact_name
        self.contact_phone = contact_phone
        self.contact_type = contact_type
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.remarks = remarks

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_address is not None:
            result['ContactAddress'] = self.contact_address
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.contact_phone is not None:
            result['ContactPhone'] = self.contact_phone
        if self.contact_type is not None:
            result['ContactType'] = self.contact_type
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactAddress') is not None:
            self.contact_address = m.get('ContactAddress')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('ContactPhone') is not None:
            self.contact_phone = m.get('ContactPhone')
        if m.get('ContactType') is not None:
            self.contact_type = m.get('ContactType')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class GetEVLTrafficDataResponseBodyRequestOrderCustomer(TeaModel):
    def __init__(
        self,
        cert_address: str = None,
        cert_effdate: str = None,
        cert_expire: str = None,
        cert_no: str = None,
        cert_type: str = None,
        contracts: List[GetEVLTrafficDataResponseBodyRequestOrderCustomerContracts] = None,
        cust_id: int = None,
        cust_name: str = None,
        cust_tag: int = None,
        cust_type: str = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gender: int = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        outer_cust_no: str = None,
        remarks: str = None,
        user_bind_type: int = None,
        user_id: int = None,
        user_nick: str = None,
    ):
        self.cert_address = cert_address
        self.cert_effdate = cert_effdate
        self.cert_expire = cert_expire
        self.cert_no = cert_no
        self.cert_type = cert_type
        self.contracts = contracts
        self.cust_id = cust_id
        self.cust_name = cust_name
        self.cust_tag = cust_tag
        self.cust_type = cust_type
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gender = gender
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.outer_cust_no = outer_cust_no
        self.remarks = remarks
        self.user_bind_type = user_bind_type
        self.user_id = user_id
        self.user_nick = user_nick

    def validate(self):
        if self.contracts:
            for k in self.contracts:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cert_address is not None:
            result['CertAddress'] = self.cert_address
        if self.cert_effdate is not None:
            result['CertEffdate'] = self.cert_effdate
        if self.cert_expire is not None:
            result['CertExpire'] = self.cert_expire
        if self.cert_no is not None:
            result['CertNo'] = self.cert_no
        if self.cert_type is not None:
            result['CertType'] = self.cert_type
        result['Contracts'] = []
        if self.contracts is not None:
            for k in self.contracts:
                result['Contracts'].append(k.to_map() if k else None)
        if self.cust_id is not None:
            result['CustId'] = self.cust_id
        if self.cust_name is not None:
            result['CustName'] = self.cust_name
        if self.cust_tag is not None:
            result['CustTag'] = self.cust_tag
        if self.cust_type is not None:
            result['CustType'] = self.cust_type
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gender is not None:
            result['Gender'] = self.gender
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.outer_cust_no is not None:
            result['OuterCustNo'] = self.outer_cust_no
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.user_bind_type is not None:
            result['UserBindType'] = self.user_bind_type
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.user_nick is not None:
            result['UserNick'] = self.user_nick
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CertAddress') is not None:
            self.cert_address = m.get('CertAddress')
        if m.get('CertEffdate') is not None:
            self.cert_effdate = m.get('CertEffdate')
        if m.get('CertExpire') is not None:
            self.cert_expire = m.get('CertExpire')
        if m.get('CertNo') is not None:
            self.cert_no = m.get('CertNo')
        if m.get('CertType') is not None:
            self.cert_type = m.get('CertType')
        self.contracts = []
        if m.get('Contracts') is not None:
            for k in m.get('Contracts'):
                temp_model = GetEVLTrafficDataResponseBodyRequestOrderCustomerContracts()
                self.contracts.append(temp_model.from_map(k))
        if m.get('CustId') is not None:
            self.cust_id = m.get('CustId')
        if m.get('CustName') is not None:
            self.cust_name = m.get('CustName')
        if m.get('CustTag') is not None:
            self.cust_tag = m.get('CustTag')
        if m.get('CustType') is not None:
            self.cust_type = m.get('CustType')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('Gender') is not None:
            self.gender = m.get('Gender')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('OuterCustNo') is not None:
            self.outer_cust_no = m.get('OuterCustNo')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('UserBindType') is not None:
            self.user_bind_type = m.get('UserBindType')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('UserNick') is not None:
            self.user_nick = m.get('UserNick')
        return self


class GetEVLTrafficDataResponseBodyRequestOrderOfferListAttributeList(TeaModel):
    def __init__(
        self,
        attr_group: str = None,
        attr_id: int = None,
        attr_name: str = None,
        attr_text: str = None,
        attr_value: str = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        mapping_code: str = None,
        old_attr_text: str = None,
        old_attr_value: str = None,
        options: int = None,
        remarks: str = None,
        value_expression: str = None,
    ):
        self.attr_group = attr_group
        self.attr_id = attr_id
        self.attr_name = attr_name
        self.attr_text = attr_text
        self.attr_value = attr_value
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.mapping_code = mapping_code
        self.old_attr_text = old_attr_text
        self.old_attr_value = old_attr_value
        self.options = options
        self.remarks = remarks
        self.value_expression = value_expression

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attr_group is not None:
            result['AttrGroup'] = self.attr_group
        if self.attr_id is not None:
            result['AttrId'] = self.attr_id
        if self.attr_name is not None:
            result['AttrName'] = self.attr_name
        if self.attr_text is not None:
            result['AttrText'] = self.attr_text
        if self.attr_value is not None:
            result['AttrValue'] = self.attr_value
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.mapping_code is not None:
            result['MappingCode'] = self.mapping_code
        if self.old_attr_text is not None:
            result['OldAttrText'] = self.old_attr_text
        if self.old_attr_value is not None:
            result['OldAttrValue'] = self.old_attr_value
        if self.options is not None:
            result['Options'] = self.options
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.value_expression is not None:
            result['ValueExpression'] = self.value_expression
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AttrGroup') is not None:
            self.attr_group = m.get('AttrGroup')
        if m.get('AttrId') is not None:
            self.attr_id = m.get('AttrId')
        if m.get('AttrName') is not None:
            self.attr_name = m.get('AttrName')
        if m.get('AttrText') is not None:
            self.attr_text = m.get('AttrText')
        if m.get('AttrValue') is not None:
            self.attr_value = m.get('AttrValue')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('MappingCode') is not None:
            self.mapping_code = m.get('MappingCode')
        if m.get('OldAttrText') is not None:
            self.old_attr_text = m.get('OldAttrText')
        if m.get('OldAttrValue') is not None:
            self.old_attr_value = m.get('OldAttrValue')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ValueExpression') is not None:
            self.value_expression = m.get('ValueExpression')
        return self


class GetEVLTrafficDataResponseBodyRequestOrderOfferListProductAttributeList(TeaModel):
    def __init__(
        self,
        attr_group: str = None,
        attr_id: int = None,
        attr_name: str = None,
        attr_text: str = None,
        attr_value: str = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        mapping_code: str = None,
        old_attr_text: str = None,
        old_attr_value: str = None,
        options: int = None,
        remarks: str = None,
        value_expression: str = None,
    ):
        self.attr_group = attr_group
        self.attr_id = attr_id
        self.attr_name = attr_name
        self.attr_text = attr_text
        self.attr_value = attr_value
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.mapping_code = mapping_code
        self.old_attr_text = old_attr_text
        self.old_attr_value = old_attr_value
        self.options = options
        self.remarks = remarks
        self.value_expression = value_expression

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attr_group is not None:
            result['AttrGroup'] = self.attr_group
        if self.attr_id is not None:
            result['AttrId'] = self.attr_id
        if self.attr_name is not None:
            result['AttrName'] = self.attr_name
        if self.attr_text is not None:
            result['AttrText'] = self.attr_text
        if self.attr_value is not None:
            result['AttrValue'] = self.attr_value
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.mapping_code is not None:
            result['MappingCode'] = self.mapping_code
        if self.old_attr_text is not None:
            result['OldAttrText'] = self.old_attr_text
        if self.old_attr_value is not None:
            result['OldAttrValue'] = self.old_attr_value
        if self.options is not None:
            result['Options'] = self.options
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.value_expression is not None:
            result['ValueExpression'] = self.value_expression
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AttrGroup') is not None:
            self.attr_group = m.get('AttrGroup')
        if m.get('AttrId') is not None:
            self.attr_id = m.get('AttrId')
        if m.get('AttrName') is not None:
            self.attr_name = m.get('AttrName')
        if m.get('AttrText') is not None:
            self.attr_text = m.get('AttrText')
        if m.get('AttrValue') is not None:
            self.attr_value = m.get('AttrValue')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('MappingCode') is not None:
            self.mapping_code = m.get('MappingCode')
        if m.get('OldAttrText') is not None:
            self.old_attr_text = m.get('OldAttrText')
        if m.get('OldAttrValue') is not None:
            self.old_attr_value = m.get('OldAttrValue')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ValueExpression') is not None:
            self.value_expression = m.get('ValueExpression')
        return self


class GetEVLTrafficDataResponseBodyRequestOrderOfferListProduct(TeaModel):
    def __init__(
        self,
        attribute_list: List[GetEVLTrafficDataResponseBodyRequestOrderOfferListProductAttributeList] = None,
        data_status: int = None,
        effective_time: str = None,
        effective_type: str = None,
        expire_time: str = None,
        expire_type: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_product_id: int = None,
        ins_status: int = None,
        is_main: str = None,
        open_status: int = None,
        operate_time: str = None,
        operation_id: int = None,
        options: int = None,
        product_id: int = None,
        product_name: str = None,
        product_type: str = None,
        remarks: str = None,
    ):
        self.attribute_list = attribute_list
        self.data_status = data_status
        self.effective_time = effective_time
        self.effective_type = effective_type
        self.expire_time = expire_time
        self.expire_type = expire_type
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_product_id = ins_product_id
        self.ins_status = ins_status
        self.is_main = is_main
        self.open_status = open_status
        self.operate_time = operate_time
        self.operation_id = operation_id
        self.options = options
        self.product_id = product_id
        self.product_name = product_name
        self.product_type = product_type
        self.remarks = remarks

    def validate(self):
        if self.attribute_list:
            for k in self.attribute_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AttributeList'] = []
        if self.attribute_list is not None:
            for k in self.attribute_list:
                result['AttributeList'].append(k.to_map() if k else None)
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.effective_type is not None:
            result['EffectiveType'] = self.effective_type
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.expire_type is not None:
            result['ExpireType'] = self.expire_type
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_product_id is not None:
            result['InsProductId'] = self.ins_product_id
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.is_main is not None:
            result['IsMain'] = self.is_main
        if self.open_status is not None:
            result['OpenStatus'] = self.open_status
        if self.operate_time is not None:
            result['OperateTime'] = self.operate_time
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.options is not None:
            result['Options'] = self.options
        if self.product_id is not None:
            result['ProductId'] = self.product_id
        if self.product_name is not None:
            result['ProductName'] = self.product_name
        if self.product_type is not None:
            result['ProductType'] = self.product_type
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.attribute_list = []
        if m.get('AttributeList') is not None:
            for k in m.get('AttributeList'):
                temp_model = GetEVLTrafficDataResponseBodyRequestOrderOfferListProductAttributeList()
                self.attribute_list.append(temp_model.from_map(k))
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('EffectiveType') is not None:
            self.effective_type = m.get('EffectiveType')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('ExpireType') is not None:
            self.expire_type = m.get('ExpireType')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsProductId') is not None:
            self.ins_product_id = m.get('InsProductId')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('IsMain') is not None:
            self.is_main = m.get('IsMain')
        if m.get('OpenStatus') is not None:
            self.open_status = m.get('OpenStatus')
        if m.get('OperateTime') is not None:
            self.operate_time = m.get('OperateTime')
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('ProductId') is not None:
            self.product_id = m.get('ProductId')
        if m.get('ProductName') is not None:
            self.product_name = m.get('ProductName')
        if m.get('ProductType') is not None:
            self.product_type = m.get('ProductType')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class GetEVLTrafficDataResponseBodyRequestOrderOfferList(TeaModel):
    def __init__(
        self,
        attribute_list: List[GetEVLTrafficDataResponseBodyRequestOrderOfferListAttributeList] = None,
        billing_pkg_id: int = None,
        data_status: int = None,
        eff_param: str = None,
        effective_time: str = None,
        effective_type: str = None,
        exp_param: str = None,
        expire_time: str = None,
        expire_type: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_offer_id: int = None,
        ins_status: int = None,
        offer_id: int = None,
        offer_name: str = None,
        offer_type: str = None,
        old_effective_time: str = None,
        old_ins_offer_id: int = None,
        old_offer_id: int = None,
        operation_id: int = None,
        options: int = None,
        ord_type: str = None,
        product: GetEVLTrafficDataResponseBodyRequestOrderOfferListProduct = None,
        remarks: str = None,
    ):
        self.attribute_list = attribute_list
        self.billing_pkg_id = billing_pkg_id
        self.data_status = data_status
        self.eff_param = eff_param
        self.effective_time = effective_time
        self.effective_type = effective_type
        self.exp_param = exp_param
        self.expire_time = expire_time
        self.expire_type = expire_type
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_offer_id = ins_offer_id
        self.ins_status = ins_status
        self.offer_id = offer_id
        self.offer_name = offer_name
        self.offer_type = offer_type
        self.old_effective_time = old_effective_time
        self.old_ins_offer_id = old_ins_offer_id
        self.old_offer_id = old_offer_id
        self.operation_id = operation_id
        self.options = options
        self.ord_type = ord_type
        self.product = product
        self.remarks = remarks

    def validate(self):
        if self.attribute_list:
            for k in self.attribute_list:
                if k:
                    k.validate()
        if self.product:
            self.product.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AttributeList'] = []
        if self.attribute_list is not None:
            for k in self.attribute_list:
                result['AttributeList'].append(k.to_map() if k else None)
        if self.billing_pkg_id is not None:
            result['BillingPkgId'] = self.billing_pkg_id
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.eff_param is not None:
            result['EffParam'] = self.eff_param
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.effective_type is not None:
            result['EffectiveType'] = self.effective_type
        if self.exp_param is not None:
            result['ExpParam'] = self.exp_param
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.expire_type is not None:
            result['ExpireType'] = self.expire_type
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_offer_id is not None:
            result['InsOfferId'] = self.ins_offer_id
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.offer_id is not None:
            result['OfferId'] = self.offer_id
        if self.offer_name is not None:
            result['OfferName'] = self.offer_name
        if self.offer_type is not None:
            result['OfferType'] = self.offer_type
        if self.old_effective_time is not None:
            result['OldEffectiveTime'] = self.old_effective_time
        if self.old_ins_offer_id is not None:
            result['OldInsOfferId'] = self.old_ins_offer_id
        if self.old_offer_id is not None:
            result['OldOfferId'] = self.old_offer_id
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.options is not None:
            result['Options'] = self.options
        if self.ord_type is not None:
            result['OrdType'] = self.ord_type
        if self.product is not None:
            result['Product'] = self.product.to_map()
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.attribute_list = []
        if m.get('AttributeList') is not None:
            for k in m.get('AttributeList'):
                temp_model = GetEVLTrafficDataResponseBodyRequestOrderOfferListAttributeList()
                self.attribute_list.append(temp_model.from_map(k))
        if m.get('BillingPkgId') is not None:
            self.billing_pkg_id = m.get('BillingPkgId')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffParam') is not None:
            self.eff_param = m.get('EffParam')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('EffectiveType') is not None:
            self.effective_type = m.get('EffectiveType')
        if m.get('ExpParam') is not None:
            self.exp_param = m.get('ExpParam')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('ExpireType') is not None:
            self.expire_type = m.get('ExpireType')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsOfferId') is not None:
            self.ins_offer_id = m.get('InsOfferId')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('OfferId') is not None:
            self.offer_id = m.get('OfferId')
        if m.get('OfferName') is not None:
            self.offer_name = m.get('OfferName')
        if m.get('OfferType') is not None:
            self.offer_type = m.get('OfferType')
        if m.get('OldEffectiveTime') is not None:
            self.old_effective_time = m.get('OldEffectiveTime')
        if m.get('OldInsOfferId') is not None:
            self.old_ins_offer_id = m.get('OldInsOfferId')
        if m.get('OldOfferId') is not None:
            self.old_offer_id = m.get('OldOfferId')
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('OrdType') is not None:
            self.ord_type = m.get('OrdType')
        if m.get('Product') is not None:
            temp_model = GetEVLTrafficDataResponseBodyRequestOrderOfferListProduct()
            self.product = temp_model.from_map(m['Product'])
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class GetEVLTrafficDataResponseBodyRequestOrderProductListAttributeList(TeaModel):
    def __init__(
        self,
        attr_group: str = None,
        attr_id: int = None,
        attr_name: str = None,
        attr_text: str = None,
        attr_value: str = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        mapping_code: str = None,
        old_attr_text: str = None,
        old_attr_value: str = None,
        options: int = None,
        remarks: str = None,
        value_expression: str = None,
    ):
        self.attr_group = attr_group
        self.attr_id = attr_id
        self.attr_name = attr_name
        self.attr_text = attr_text
        self.attr_value = attr_value
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.mapping_code = mapping_code
        self.old_attr_text = old_attr_text
        self.old_attr_value = old_attr_value
        self.options = options
        self.remarks = remarks
        self.value_expression = value_expression

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attr_group is not None:
            result['AttrGroup'] = self.attr_group
        if self.attr_id is not None:
            result['AttrId'] = self.attr_id
        if self.attr_name is not None:
            result['AttrName'] = self.attr_name
        if self.attr_text is not None:
            result['AttrText'] = self.attr_text
        if self.attr_value is not None:
            result['AttrValue'] = self.attr_value
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.mapping_code is not None:
            result['MappingCode'] = self.mapping_code
        if self.old_attr_text is not None:
            result['OldAttrText'] = self.old_attr_text
        if self.old_attr_value is not None:
            result['OldAttrValue'] = self.old_attr_value
        if self.options is not None:
            result['Options'] = self.options
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.value_expression is not None:
            result['ValueExpression'] = self.value_expression
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AttrGroup') is not None:
            self.attr_group = m.get('AttrGroup')
        if m.get('AttrId') is not None:
            self.attr_id = m.get('AttrId')
        if m.get('AttrName') is not None:
            self.attr_name = m.get('AttrName')
        if m.get('AttrText') is not None:
            self.attr_text = m.get('AttrText')
        if m.get('AttrValue') is not None:
            self.attr_value = m.get('AttrValue')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('MappingCode') is not None:
            self.mapping_code = m.get('MappingCode')
        if m.get('OldAttrText') is not None:
            self.old_attr_text = m.get('OldAttrText')
        if m.get('OldAttrValue') is not None:
            self.old_attr_value = m.get('OldAttrValue')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ValueExpression') is not None:
            self.value_expression = m.get('ValueExpression')
        return self


class GetEVLTrafficDataResponseBodyRequestOrderProductList(TeaModel):
    def __init__(
        self,
        attribute_list: List[GetEVLTrafficDataResponseBodyRequestOrderProductListAttributeList] = None,
        data_status: int = None,
        effective_time: str = None,
        effective_type: str = None,
        expire_time: str = None,
        expire_type: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_product_id: int = None,
        ins_status: int = None,
        is_main: str = None,
        open_status: int = None,
        operate_time: str = None,
        operation_id: int = None,
        options: int = None,
        product_id: int = None,
        product_name: str = None,
        product_type: str = None,
        remarks: str = None,
    ):
        self.attribute_list = attribute_list
        self.data_status = data_status
        self.effective_time = effective_time
        self.effective_type = effective_type
        self.expire_time = expire_time
        self.expire_type = expire_type
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_product_id = ins_product_id
        self.ins_status = ins_status
        self.is_main = is_main
        self.open_status = open_status
        self.operate_time = operate_time
        self.operation_id = operation_id
        self.options = options
        self.product_id = product_id
        self.product_name = product_name
        self.product_type = product_type
        self.remarks = remarks

    def validate(self):
        if self.attribute_list:
            for k in self.attribute_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AttributeList'] = []
        if self.attribute_list is not None:
            for k in self.attribute_list:
                result['AttributeList'].append(k.to_map() if k else None)
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.effective_type is not None:
            result['EffectiveType'] = self.effective_type
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.expire_type is not None:
            result['ExpireType'] = self.expire_type
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_product_id is not None:
            result['InsProductId'] = self.ins_product_id
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.is_main is not None:
            result['IsMain'] = self.is_main
        if self.open_status is not None:
            result['OpenStatus'] = self.open_status
        if self.operate_time is not None:
            result['OperateTime'] = self.operate_time
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.options is not None:
            result['Options'] = self.options
        if self.product_id is not None:
            result['ProductId'] = self.product_id
        if self.product_name is not None:
            result['ProductName'] = self.product_name
        if self.product_type is not None:
            result['ProductType'] = self.product_type
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.attribute_list = []
        if m.get('AttributeList') is not None:
            for k in m.get('AttributeList'):
                temp_model = GetEVLTrafficDataResponseBodyRequestOrderProductListAttributeList()
                self.attribute_list.append(temp_model.from_map(k))
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('EffectiveType') is not None:
            self.effective_type = m.get('EffectiveType')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('ExpireType') is not None:
            self.expire_type = m.get('ExpireType')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsProductId') is not None:
            self.ins_product_id = m.get('InsProductId')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('IsMain') is not None:
            self.is_main = m.get('IsMain')
        if m.get('OpenStatus') is not None:
            self.open_status = m.get('OpenStatus')
        if m.get('OperateTime') is not None:
            self.operate_time = m.get('OperateTime')
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('ProductId') is not None:
            self.product_id = m.get('ProductId')
        if m.get('ProductName') is not None:
            self.product_name = m.get('ProductName')
        if m.get('ProductType') is not None:
            self.product_type = m.get('ProductType')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class GetEVLTrafficDataResponseBodyRequestOrderRuleList(TeaModel):
    def __init__(
        self,
        act_on_ins_offer_id: int = None,
        act_on_operation_id: int = None,
        act_on_user_id: int = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        message: str = None,
        remarks: str = None,
        result_code: str = None,
        rule_code: str = None,
        rule_id: str = None,
        rule_name: str = None,
        rule_status: str = None,
        trigger_ins_offer_id: int = None,
    ):
        self.act_on_ins_offer_id = act_on_ins_offer_id
        self.act_on_operation_id = act_on_operation_id
        self.act_on_user_id = act_on_user_id
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.message = message
        self.remarks = remarks
        self.result_code = result_code
        self.rule_code = rule_code
        self.rule_id = rule_id
        self.rule_name = rule_name
        self.rule_status = rule_status
        self.trigger_ins_offer_id = trigger_ins_offer_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.act_on_ins_offer_id is not None:
            result['ActOnInsOfferId'] = self.act_on_ins_offer_id
        if self.act_on_operation_id is not None:
            result['ActOnOperationId'] = self.act_on_operation_id
        if self.act_on_user_id is not None:
            result['ActOnUserId'] = self.act_on_user_id
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.message is not None:
            result['Message'] = self.message
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.rule_code is not None:
            result['RuleCode'] = self.rule_code
        if self.rule_id is not None:
            result['RuleId'] = self.rule_id
        if self.rule_name is not None:
            result['RuleName'] = self.rule_name
        if self.rule_status is not None:
            result['RuleStatus'] = self.rule_status
        if self.trigger_ins_offer_id is not None:
            result['TriggerInsOfferId'] = self.trigger_ins_offer_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ActOnInsOfferId') is not None:
            self.act_on_ins_offer_id = m.get('ActOnInsOfferId')
        if m.get('ActOnOperationId') is not None:
            self.act_on_operation_id = m.get('ActOnOperationId')
        if m.get('ActOnUserId') is not None:
            self.act_on_user_id = m.get('ActOnUserId')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('RuleCode') is not None:
            self.rule_code = m.get('RuleCode')
        if m.get('RuleId') is not None:
            self.rule_id = m.get('RuleId')
        if m.get('RuleName') is not None:
            self.rule_name = m.get('RuleName')
        if m.get('RuleStatus') is not None:
            self.rule_status = m.get('RuleStatus')
        if m.get('TriggerInsOfferId') is not None:
            self.trigger_ins_offer_id = m.get('TriggerInsOfferId')
        return self


class GetEVLTrafficDataResponseBodyRequestOrder(TeaModel):
    def __init__(
        self,
        account: GetEVLTrafficDataResponseBodyRequestOrderAccount = None,
        assets: GetEVLTrafficDataResponseBodyRequestOrderAssets = None,
        busi_operation: GetEVLTrafficDataResponseBodyRequestOrderBusiOperation = None,
        busi_operator: str = None,
        busi_price_list: List[GetEVLTrafficDataResponseBodyRequestOrderBusiPriceList] = None,
        channel_id: str = None,
        customer: GetEVLTrafficDataResponseBodyRequestOrderCustomer = None,
        data_status: int = None,
        ext_info: Dict[str, str] = None,
        is_auth: bool = None,
        offer_list: List[GetEVLTrafficDataResponseBodyRequestOrderOfferList] = None,
        open_completed_time: str = None,
        order_id: int = None,
        order_no: str = None,
        order_serial_id: int = None,
        order_status: str = None,
        order_time: str = None,
        order_type: str = None,
        owner_id: str = None,
        parent_order_id: str = None,
        product_list: List[GetEVLTrafficDataResponseBodyRequestOrderProductList] = None,
        remarks: str = None,
        rule_list: List[GetEVLTrafficDataResponseBodyRequestOrderRuleList] = None,
    ):
        self.account = account
        self.assets = assets
        self.busi_operation = busi_operation
        self.busi_operator = busi_operator
        self.busi_price_list = busi_price_list
        self.channel_id = channel_id
        self.customer = customer
        self.data_status = data_status
        self.ext_info = ext_info
        self.is_auth = is_auth
        self.offer_list = offer_list
        self.open_completed_time = open_completed_time
        self.order_id = order_id
        self.order_no = order_no
        self.order_serial_id = order_serial_id
        self.order_status = order_status
        self.order_time = order_time
        self.order_type = order_type
        self.owner_id = owner_id
        self.parent_order_id = parent_order_id
        self.product_list = product_list
        self.remarks = remarks
        self.rule_list = rule_list

    def validate(self):
        if self.account:
            self.account.validate()
        if self.assets:
            self.assets.validate()
        if self.busi_operation:
            self.busi_operation.validate()
        if self.busi_price_list:
            for k in self.busi_price_list:
                if k:
                    k.validate()
        if self.customer:
            self.customer.validate()
        if self.offer_list:
            for k in self.offer_list:
                if k:
                    k.validate()
        if self.product_list:
            for k in self.product_list:
                if k:
                    k.validate()
        if self.rule_list:
            for k in self.rule_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account is not None:
            result['Account'] = self.account.to_map()
        if self.assets is not None:
            result['Assets'] = self.assets.to_map()
        if self.busi_operation is not None:
            result['BusiOperation'] = self.busi_operation.to_map()
        if self.busi_operator is not None:
            result['BusiOperator'] = self.busi_operator
        result['BusiPriceList'] = []
        if self.busi_price_list is not None:
            for k in self.busi_price_list:
                result['BusiPriceList'].append(k.to_map() if k else None)
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.customer is not None:
            result['Customer'] = self.customer.to_map()
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.ext_info is not None:
            result['ExtInfo'] = self.ext_info
        if self.is_auth is not None:
            result['IsAuth'] = self.is_auth
        result['OfferList'] = []
        if self.offer_list is not None:
            for k in self.offer_list:
                result['OfferList'].append(k.to_map() if k else None)
        if self.open_completed_time is not None:
            result['OpenCompletedTime'] = self.open_completed_time
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.order_no is not None:
            result['OrderNo'] = self.order_no
        if self.order_serial_id is not None:
            result['OrderSerialId'] = self.order_serial_id
        if self.order_status is not None:
            result['OrderStatus'] = self.order_status
        if self.order_time is not None:
            result['OrderTime'] = self.order_time
        if self.order_type is not None:
            result['OrderType'] = self.order_type
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.parent_order_id is not None:
            result['ParentOrderId'] = self.parent_order_id
        result['ProductList'] = []
        if self.product_list is not None:
            for k in self.product_list:
                result['ProductList'].append(k.to_map() if k else None)
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        result['RuleList'] = []
        if self.rule_list is not None:
            for k in self.rule_list:
                result['RuleList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Account') is not None:
            temp_model = GetEVLTrafficDataResponseBodyRequestOrderAccount()
            self.account = temp_model.from_map(m['Account'])
        if m.get('Assets') is not None:
            temp_model = GetEVLTrafficDataResponseBodyRequestOrderAssets()
            self.assets = temp_model.from_map(m['Assets'])
        if m.get('BusiOperation') is not None:
            temp_model = GetEVLTrafficDataResponseBodyRequestOrderBusiOperation()
            self.busi_operation = temp_model.from_map(m['BusiOperation'])
        if m.get('BusiOperator') is not None:
            self.busi_operator = m.get('BusiOperator')
        self.busi_price_list = []
        if m.get('BusiPriceList') is not None:
            for k in m.get('BusiPriceList'):
                temp_model = GetEVLTrafficDataResponseBodyRequestOrderBusiPriceList()
                self.busi_price_list.append(temp_model.from_map(k))
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('Customer') is not None:
            temp_model = GetEVLTrafficDataResponseBodyRequestOrderCustomer()
            self.customer = temp_model.from_map(m['Customer'])
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('ExtInfo') is not None:
            self.ext_info = m.get('ExtInfo')
        if m.get('IsAuth') is not None:
            self.is_auth = m.get('IsAuth')
        self.offer_list = []
        if m.get('OfferList') is not None:
            for k in m.get('OfferList'):
                temp_model = GetEVLTrafficDataResponseBodyRequestOrderOfferList()
                self.offer_list.append(temp_model.from_map(k))
        if m.get('OpenCompletedTime') is not None:
            self.open_completed_time = m.get('OpenCompletedTime')
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('OrderNo') is not None:
            self.order_no = m.get('OrderNo')
        if m.get('OrderSerialId') is not None:
            self.order_serial_id = m.get('OrderSerialId')
        if m.get('OrderStatus') is not None:
            self.order_status = m.get('OrderStatus')
        if m.get('OrderTime') is not None:
            self.order_time = m.get('OrderTime')
        if m.get('OrderType') is not None:
            self.order_type = m.get('OrderType')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ParentOrderId') is not None:
            self.parent_order_id = m.get('ParentOrderId')
        self.product_list = []
        if m.get('ProductList') is not None:
            for k in m.get('ProductList'):
                temp_model = GetEVLTrafficDataResponseBodyRequestOrderProductList()
                self.product_list.append(temp_model.from_map(k))
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        self.rule_list = []
        if m.get('RuleList') is not None:
            for k in m.get('RuleList'):
                temp_model = GetEVLTrafficDataResponseBodyRequestOrderRuleList()
                self.rule_list.append(temp_model.from_map(k))
        return self


class GetEVLTrafficDataResponseBodyRequest(TeaModel):
    def __init__(
        self,
        is_sync: bool = None,
        order: GetEVLTrafficDataResponseBodyRequestOrder = None,
        serial_no: str = None,
    ):
        self.is_sync = is_sync
        self.order = order
        self.serial_no = serial_no

    def validate(self):
        if self.order:
            self.order.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_sync is not None:
            result['IsSync'] = self.is_sync
        if self.order is not None:
            result['Order'] = self.order.to_map()
        if self.serial_no is not None:
            result['SerialNo'] = self.serial_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IsSync') is not None:
            self.is_sync = m.get('IsSync')
        if m.get('Order') is not None:
            temp_model = GetEVLTrafficDataResponseBodyRequestOrder()
            self.order = temp_model.from_map(m['Order'])
        if m.get('SerialNo') is not None:
            self.serial_no = m.get('SerialNo')
        return self


class GetEVLTrafficDataResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        desc: str = None,
        model: GetEVLTrafficDataResponseBodyModel = None,
        query_count: int = None,
        request: GetEVLTrafficDataResponseBodyRequest = None,
        success: bool = None,
    ):
        self.code = code
        self.desc = desc
        self.model = model
        self.query_count = query_count
        self.request = request
        self.success = success

    def validate(self):
        if self.model:
            self.model.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.model is not None:
            result['Model'] = self.model.to_map()
        if self.query_count is not None:
            result['QueryCount'] = self.query_count
        if self.request is not None:
            result['Request'] = self.request.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Model') is not None:
            temp_model = GetEVLTrafficDataResponseBodyModel()
            self.model = temp_model.from_map(m['Model'])
        if m.get('QueryCount') is not None:
            self.query_count = m.get('QueryCount')
        if m.get('Request') is not None:
            temp_model = GetEVLTrafficDataResponseBodyRequest()
            self.request = temp_model.from_map(m['Request'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetEVLTrafficDataResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetEVLTrafficDataResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetEVLTrafficDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetEpnInstanceRequestTagKeyValueModels(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetEpnInstanceRequest(TeaModel):
    def __init__(
        self,
        ak_proxy: str = None,
        ali_uid: int = None,
        api_name: str = None,
        app_key: str = None,
        caller_bid: str = None,
        caller_bid_login_email: str = None,
        caller_security_transport: bool = None,
        caller_type: str = None,
        caller_uid: int = None,
        caller_uid_login_email: str = None,
        channel: str = None,
        client_ip: str = None,
        enable: bool = None,
        epn_id: str = None,
        from_type: int = None,
        mfa_present: bool = None,
        operator: str = None,
        owner_account: str = None,
        owner_id: int = None,
        owner_id_login_email: str = None,
        prod_code: str = None,
        proxy_caller_ip: str = None,
        proxy_caller_security_transport: bool = None,
        proxy_id: str = None,
        proxy_trust_transport_info: bool = None,
        request_content: str = None,
        request_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        security_token: str = None,
        sms_resource_owner_id: int = None,
        tag_key_1: str = None,
        tag_key_2: str = None,
        tag_key_3: str = None,
        tag_key_4: str = None,
        tag_key_5: str = None,
        tag_key_value_models: List[GetEpnInstanceRequestTagKeyValueModels] = None,
        tag_value_1: str = None,
        tag_value_2: str = None,
        tag_value_3: str = None,
        tag_value_4: str = None,
        tag_value_5: str = None,
        token: str = None,
        version: str = None,
    ):
        self.ak_proxy = ak_proxy
        self.ali_uid = ali_uid
        self.api_name = api_name
        self.app_key = app_key
        self.caller_bid = caller_bid
        self.caller_bid_login_email = caller_bid_login_email
        self.caller_security_transport = caller_security_transport
        self.caller_type = caller_type
        self.caller_uid = caller_uid
        self.caller_uid_login_email = caller_uid_login_email
        self.channel = channel
        self.client_ip = client_ip
        self.enable = enable
        self.epn_id = epn_id
        self.from_type = from_type
        self.mfa_present = mfa_present
        self.operator = operator
        self.owner_account = owner_account
        self.owner_id = owner_id
        self.owner_id_login_email = owner_id_login_email
        self.prod_code = prod_code
        self.proxy_caller_ip = proxy_caller_ip
        self.proxy_caller_security_transport = proxy_caller_security_transport
        self.proxy_id = proxy_id
        self.proxy_trust_transport_info = proxy_trust_transport_info
        self.request_content = request_content
        self.request_id = request_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.security_token = security_token
        self.sms_resource_owner_id = sms_resource_owner_id
        self.tag_key_1 = tag_key_1
        self.tag_key_2 = tag_key_2
        self.tag_key_3 = tag_key_3
        self.tag_key_4 = tag_key_4
        self.tag_key_5 = tag_key_5
        self.tag_key_value_models = tag_key_value_models
        self.tag_value_1 = tag_value_1
        self.tag_value_2 = tag_value_2
        self.tag_value_3 = tag_value_3
        self.tag_value_4 = tag_value_4
        self.tag_value_5 = tag_value_5
        self.token = token
        self.version = version

    def validate(self):
        if self.tag_key_value_models:
            for k in self.tag_key_value_models:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ak_proxy is not None:
            result['AkProxy'] = self.ak_proxy
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.caller_bid is not None:
            result['CallerBid'] = self.caller_bid
        if self.caller_bid_login_email is not None:
            result['CallerBidLoginEmail'] = self.caller_bid_login_email
        if self.caller_security_transport is not None:
            result['CallerSecurityTransport'] = self.caller_security_transport
        if self.caller_type is not None:
            result['CallerType'] = self.caller_type
        if self.caller_uid is not None:
            result['CallerUid'] = self.caller_uid
        if self.caller_uid_login_email is not None:
            result['CallerUidLoginEmail'] = self.caller_uid_login_email
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.client_ip is not None:
            result['ClientIP'] = self.client_ip
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.epn_id is not None:
            result['EpnId'] = self.epn_id
        if self.from_type is not None:
            result['FromType'] = self.from_type
        if self.mfa_present is not None:
            result['MfaPresent'] = self.mfa_present
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.owner_account is not None:
            result['OwnerAccount'] = self.owner_account
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.owner_id_login_email is not None:
            result['OwnerIdLoginEmail'] = self.owner_id_login_email
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.proxy_caller_ip is not None:
            result['ProxyCallerIp'] = self.proxy_caller_ip
        if self.proxy_caller_security_transport is not None:
            result['ProxyCallerSecurityTransport'] = self.proxy_caller_security_transport
        if self.proxy_id is not None:
            result['ProxyId'] = self.proxy_id
        if self.proxy_trust_transport_info is not None:
            result['ProxyTrustTransportInfo'] = self.proxy_trust_transport_info
        if self.request_content is not None:
            result['RequestContent'] = self.request_content
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        if self.sms_resource_owner_id is not None:
            result['SmsResourceOwnerId'] = self.sms_resource_owner_id
        if self.tag_key_1 is not None:
            result['TagKey1'] = self.tag_key_1
        if self.tag_key_2 is not None:
            result['TagKey2'] = self.tag_key_2
        if self.tag_key_3 is not None:
            result['TagKey3'] = self.tag_key_3
        if self.tag_key_4 is not None:
            result['TagKey4'] = self.tag_key_4
        if self.tag_key_5 is not None:
            result['TagKey5'] = self.tag_key_5
        result['TagKeyValueModels'] = []
        if self.tag_key_value_models is not None:
            for k in self.tag_key_value_models:
                result['TagKeyValueModels'].append(k.to_map() if k else None)
        if self.tag_value_1 is not None:
            result['TagValue1'] = self.tag_value_1
        if self.tag_value_2 is not None:
            result['TagValue2'] = self.tag_value_2
        if self.tag_value_3 is not None:
            result['TagValue3'] = self.tag_value_3
        if self.tag_value_4 is not None:
            result['TagValue4'] = self.tag_value_4
        if self.tag_value_5 is not None:
            result['TagValue5'] = self.tag_value_5
        if self.token is not None:
            result['Token'] = self.token
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AkProxy') is not None:
            self.ak_proxy = m.get('AkProxy')
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('CallerBid') is not None:
            self.caller_bid = m.get('CallerBid')
        if m.get('CallerBidLoginEmail') is not None:
            self.caller_bid_login_email = m.get('CallerBidLoginEmail')
        if m.get('CallerSecurityTransport') is not None:
            self.caller_security_transport = m.get('CallerSecurityTransport')
        if m.get('CallerType') is not None:
            self.caller_type = m.get('CallerType')
        if m.get('CallerUid') is not None:
            self.caller_uid = m.get('CallerUid')
        if m.get('CallerUidLoginEmail') is not None:
            self.caller_uid_login_email = m.get('CallerUidLoginEmail')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ClientIP') is not None:
            self.client_ip = m.get('ClientIP')
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('EpnId') is not None:
            self.epn_id = m.get('EpnId')
        if m.get('FromType') is not None:
            self.from_type = m.get('FromType')
        if m.get('MfaPresent') is not None:
            self.mfa_present = m.get('MfaPresent')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('OwnerAccount') is not None:
            self.owner_account = m.get('OwnerAccount')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('OwnerIdLoginEmail') is not None:
            self.owner_id_login_email = m.get('OwnerIdLoginEmail')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProxyCallerIp') is not None:
            self.proxy_caller_ip = m.get('ProxyCallerIp')
        if m.get('ProxyCallerSecurityTransport') is not None:
            self.proxy_caller_security_transport = m.get('ProxyCallerSecurityTransport')
        if m.get('ProxyId') is not None:
            self.proxy_id = m.get('ProxyId')
        if m.get('ProxyTrustTransportInfo') is not None:
            self.proxy_trust_transport_info = m.get('ProxyTrustTransportInfo')
        if m.get('RequestContent') is not None:
            self.request_content = m.get('RequestContent')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        if m.get('SmsResourceOwnerId') is not None:
            self.sms_resource_owner_id = m.get('SmsResourceOwnerId')
        if m.get('TagKey1') is not None:
            self.tag_key_1 = m.get('TagKey1')
        if m.get('TagKey2') is not None:
            self.tag_key_2 = m.get('TagKey2')
        if m.get('TagKey3') is not None:
            self.tag_key_3 = m.get('TagKey3')
        if m.get('TagKey4') is not None:
            self.tag_key_4 = m.get('TagKey4')
        if m.get('TagKey5') is not None:
            self.tag_key_5 = m.get('TagKey5')
        self.tag_key_value_models = []
        if m.get('TagKeyValueModels') is not None:
            for k in m.get('TagKeyValueModels'):
                temp_model = GetEpnInstanceRequestTagKeyValueModels()
                self.tag_key_value_models.append(temp_model.from_map(k))
        if m.get('TagValue1') is not None:
            self.tag_value_1 = m.get('TagValue1')
        if m.get('TagValue2') is not None:
            self.tag_value_2 = m.get('TagValue2')
        if m.get('TagValue3') is not None:
            self.tag_value_3 = m.get('TagValue3')
        if m.get('TagValue4') is not None:
            self.tag_value_4 = m.get('TagValue4')
        if m.get('TagValue5') is not None:
            self.tag_value_5 = m.get('TagValue5')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class GetEpnInstanceResponseBodyContentNetInfo(TeaModel):
    def __init__(
        self,
        accelerate: bool = None,
        aliuid: int = None,
        create_time: str = None,
        dscp: int = None,
        epn_id: str = None,
        epn_name: str = None,
        limit_rx: int = None,
        limit_tx: int = None,
        security: bool = None,
        start_time: str = None,
        status: int = None,
    ):
        self.accelerate = accelerate
        self.aliuid = aliuid
        self.create_time = create_time
        self.dscp = dscp
        self.epn_id = epn_id
        self.epn_name = epn_name
        self.limit_rx = limit_rx
        self.limit_tx = limit_tx
        self.security = security
        self.start_time = start_time
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.accelerate is not None:
            result['Accelerate'] = self.accelerate
        if self.aliuid is not None:
            result['Aliuid'] = self.aliuid
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.dscp is not None:
            result['Dscp'] = self.dscp
        if self.epn_id is not None:
            result['EpnId'] = self.epn_id
        if self.epn_name is not None:
            result['EpnName'] = self.epn_name
        if self.limit_rx is not None:
            result['LimitRx'] = self.limit_rx
        if self.limit_tx is not None:
            result['LimitTx'] = self.limit_tx
        if self.security is not None:
            result['Security'] = self.security
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Accelerate') is not None:
            self.accelerate = m.get('Accelerate')
        if m.get('Aliuid') is not None:
            self.aliuid = m.get('Aliuid')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Dscp') is not None:
            self.dscp = m.get('Dscp')
        if m.get('EpnId') is not None:
            self.epn_id = m.get('EpnId')
        if m.get('EpnName') is not None:
            self.epn_name = m.get('EpnName')
        if m.get('LimitRx') is not None:
            self.limit_rx = m.get('LimitRx')
        if m.get('LimitTx') is not None:
            self.limit_tx = m.get('LimitTx')
        if m.get('Security') is not None:
            self.security = m.get('Security')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class GetEpnInstanceResponseBodyContent(TeaModel):
    def __init__(
        self,
        ensgws: List[str] = None,
        evbrs: List[str] = None,
        evgws: List[str] = None,
        net_info: GetEpnInstanceResponseBodyContentNetInfo = None,
    ):
        self.ensgws = ensgws
        self.evbrs = evbrs
        self.evgws = evgws
        self.net_info = net_info

    def validate(self):
        if self.net_info:
            self.net_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ensgws is not None:
            result['Ensgws'] = self.ensgws
        if self.evbrs is not None:
            result['Evbrs'] = self.evbrs
        if self.evgws is not None:
            result['Evgws'] = self.evgws
        if self.net_info is not None:
            result['NetInfo'] = self.net_info.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Ensgws') is not None:
            self.ensgws = m.get('Ensgws')
        if m.get('Evbrs') is not None:
            self.evbrs = m.get('Evbrs')
        if m.get('Evgws') is not None:
            self.evgws = m.get('Evgws')
        if m.get('NetInfo') is not None:
            temp_model = GetEpnInstanceResponseBodyContentNetInfo()
            self.net_info = temp_model.from_map(m['NetInfo'])
        return self


class GetEpnInstanceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        content: GetEpnInstanceResponseBodyContent = None,
        desc: str = None,
        description: str = None,
        request_id: str = None,
        ret_code: int = None,
        success: bool = None,
    ):
        self.code = code
        self.content = content
        self.desc = desc
        self.description = description
        self.request_id = request_id
        self.ret_code = ret_code
        self.success = success

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.content is not None:
            result['Content'] = self.content.to_map()
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.description is not None:
            result['Description'] = self.description
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.ret_code is not None:
            result['RetCode'] = self.ret_code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Content') is not None:
            temp_model = GetEpnInstanceResponseBodyContent()
            self.content = temp_model.from_map(m['Content'])
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RetCode') is not None:
            self.ret_code = m.get('RetCode')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetEpnInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetEpnInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetEpnInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetEvgwInstanceRequestTagKeyValueModels(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetEvgwInstanceRequest(TeaModel):
    def __init__(
        self,
        ak_proxy: str = None,
        ali_uid: int = None,
        api_name: str = None,
        app_key: str = None,
        caller_bid: str = None,
        caller_bid_login_email: str = None,
        caller_security_transport: bool = None,
        caller_type: str = None,
        caller_uid: int = None,
        caller_uid_login_email: str = None,
        channel: str = None,
        client_ip: str = None,
        enable: bool = None,
        evgw_id: str = None,
        from_type: int = None,
        mfa_present: bool = None,
        operator: str = None,
        owner_account: str = None,
        owner_id: int = None,
        owner_id_login_email: str = None,
        prod_code: str = None,
        proxy_caller_ip: str = None,
        proxy_caller_security_transport: bool = None,
        proxy_id: str = None,
        proxy_trust_transport_info: bool = None,
        request_content: str = None,
        request_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        security_token: str = None,
        sms_resource_owner_id: int = None,
        tag_key_1: str = None,
        tag_key_2: str = None,
        tag_key_3: str = None,
        tag_key_4: str = None,
        tag_key_5: str = None,
        tag_key_value_models: List[GetEvgwInstanceRequestTagKeyValueModels] = None,
        tag_value_1: str = None,
        tag_value_2: str = None,
        tag_value_3: str = None,
        tag_value_4: str = None,
        tag_value_5: str = None,
        token: str = None,
        version: str = None,
    ):
        self.ak_proxy = ak_proxy
        self.ali_uid = ali_uid
        self.api_name = api_name
        self.app_key = app_key
        self.caller_bid = caller_bid
        self.caller_bid_login_email = caller_bid_login_email
        self.caller_security_transport = caller_security_transport
        self.caller_type = caller_type
        self.caller_uid = caller_uid
        self.caller_uid_login_email = caller_uid_login_email
        self.channel = channel
        self.client_ip = client_ip
        self.enable = enable
        self.evgw_id = evgw_id
        self.from_type = from_type
        self.mfa_present = mfa_present
        self.operator = operator
        self.owner_account = owner_account
        self.owner_id = owner_id
        self.owner_id_login_email = owner_id_login_email
        self.prod_code = prod_code
        self.proxy_caller_ip = proxy_caller_ip
        self.proxy_caller_security_transport = proxy_caller_security_transport
        self.proxy_id = proxy_id
        self.proxy_trust_transport_info = proxy_trust_transport_info
        self.request_content = request_content
        self.request_id = request_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.security_token = security_token
        self.sms_resource_owner_id = sms_resource_owner_id
        self.tag_key_1 = tag_key_1
        self.tag_key_2 = tag_key_2
        self.tag_key_3 = tag_key_3
        self.tag_key_4 = tag_key_4
        self.tag_key_5 = tag_key_5
        self.tag_key_value_models = tag_key_value_models
        self.tag_value_1 = tag_value_1
        self.tag_value_2 = tag_value_2
        self.tag_value_3 = tag_value_3
        self.tag_value_4 = tag_value_4
        self.tag_value_5 = tag_value_5
        self.token = token
        self.version = version

    def validate(self):
        if self.tag_key_value_models:
            for k in self.tag_key_value_models:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ak_proxy is not None:
            result['AkProxy'] = self.ak_proxy
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.caller_bid is not None:
            result['CallerBid'] = self.caller_bid
        if self.caller_bid_login_email is not None:
            result['CallerBidLoginEmail'] = self.caller_bid_login_email
        if self.caller_security_transport is not None:
            result['CallerSecurityTransport'] = self.caller_security_transport
        if self.caller_type is not None:
            result['CallerType'] = self.caller_type
        if self.caller_uid is not None:
            result['CallerUid'] = self.caller_uid
        if self.caller_uid_login_email is not None:
            result['CallerUidLoginEmail'] = self.caller_uid_login_email
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.client_ip is not None:
            result['ClientIP'] = self.client_ip
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.evgw_id is not None:
            result['EvgwId'] = self.evgw_id
        if self.from_type is not None:
            result['FromType'] = self.from_type
        if self.mfa_present is not None:
            result['MfaPresent'] = self.mfa_present
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.owner_account is not None:
            result['OwnerAccount'] = self.owner_account
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.owner_id_login_email is not None:
            result['OwnerIdLoginEmail'] = self.owner_id_login_email
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.proxy_caller_ip is not None:
            result['ProxyCallerIp'] = self.proxy_caller_ip
        if self.proxy_caller_security_transport is not None:
            result['ProxyCallerSecurityTransport'] = self.proxy_caller_security_transport
        if self.proxy_id is not None:
            result['ProxyId'] = self.proxy_id
        if self.proxy_trust_transport_info is not None:
            result['ProxyTrustTransportInfo'] = self.proxy_trust_transport_info
        if self.request_content is not None:
            result['RequestContent'] = self.request_content
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        if self.sms_resource_owner_id is not None:
            result['SmsResourceOwnerId'] = self.sms_resource_owner_id
        if self.tag_key_1 is not None:
            result['TagKey1'] = self.tag_key_1
        if self.tag_key_2 is not None:
            result['TagKey2'] = self.tag_key_2
        if self.tag_key_3 is not None:
            result['TagKey3'] = self.tag_key_3
        if self.tag_key_4 is not None:
            result['TagKey4'] = self.tag_key_4
        if self.tag_key_5 is not None:
            result['TagKey5'] = self.tag_key_5
        result['TagKeyValueModels'] = []
        if self.tag_key_value_models is not None:
            for k in self.tag_key_value_models:
                result['TagKeyValueModels'].append(k.to_map() if k else None)
        if self.tag_value_1 is not None:
            result['TagValue1'] = self.tag_value_1
        if self.tag_value_2 is not None:
            result['TagValue2'] = self.tag_value_2
        if self.tag_value_3 is not None:
            result['TagValue3'] = self.tag_value_3
        if self.tag_value_4 is not None:
            result['TagValue4'] = self.tag_value_4
        if self.tag_value_5 is not None:
            result['TagValue5'] = self.tag_value_5
        if self.token is not None:
            result['Token'] = self.token
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AkProxy') is not None:
            self.ak_proxy = m.get('AkProxy')
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('CallerBid') is not None:
            self.caller_bid = m.get('CallerBid')
        if m.get('CallerBidLoginEmail') is not None:
            self.caller_bid_login_email = m.get('CallerBidLoginEmail')
        if m.get('CallerSecurityTransport') is not None:
            self.caller_security_transport = m.get('CallerSecurityTransport')
        if m.get('CallerType') is not None:
            self.caller_type = m.get('CallerType')
        if m.get('CallerUid') is not None:
            self.caller_uid = m.get('CallerUid')
        if m.get('CallerUidLoginEmail') is not None:
            self.caller_uid_login_email = m.get('CallerUidLoginEmail')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ClientIP') is not None:
            self.client_ip = m.get('ClientIP')
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('EvgwId') is not None:
            self.evgw_id = m.get('EvgwId')
        if m.get('FromType') is not None:
            self.from_type = m.get('FromType')
        if m.get('MfaPresent') is not None:
            self.mfa_present = m.get('MfaPresent')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('OwnerAccount') is not None:
            self.owner_account = m.get('OwnerAccount')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('OwnerIdLoginEmail') is not None:
            self.owner_id_login_email = m.get('OwnerIdLoginEmail')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProxyCallerIp') is not None:
            self.proxy_caller_ip = m.get('ProxyCallerIp')
        if m.get('ProxyCallerSecurityTransport') is not None:
            self.proxy_caller_security_transport = m.get('ProxyCallerSecurityTransport')
        if m.get('ProxyId') is not None:
            self.proxy_id = m.get('ProxyId')
        if m.get('ProxyTrustTransportInfo') is not None:
            self.proxy_trust_transport_info = m.get('ProxyTrustTransportInfo')
        if m.get('RequestContent') is not None:
            self.request_content = m.get('RequestContent')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        if m.get('SmsResourceOwnerId') is not None:
            self.sms_resource_owner_id = m.get('SmsResourceOwnerId')
        if m.get('TagKey1') is not None:
            self.tag_key_1 = m.get('TagKey1')
        if m.get('TagKey2') is not None:
            self.tag_key_2 = m.get('TagKey2')
        if m.get('TagKey3') is not None:
            self.tag_key_3 = m.get('TagKey3')
        if m.get('TagKey4') is not None:
            self.tag_key_4 = m.get('TagKey4')
        if m.get('TagKey5') is not None:
            self.tag_key_5 = m.get('TagKey5')
        self.tag_key_value_models = []
        if m.get('TagKeyValueModels') is not None:
            for k in m.get('TagKeyValueModels'):
                temp_model = GetEvgwInstanceRequestTagKeyValueModels()
                self.tag_key_value_models.append(temp_model.from_map(k))
        if m.get('TagValue1') is not None:
            self.tag_value_1 = m.get('TagValue1')
        if m.get('TagValue2') is not None:
            self.tag_value_2 = m.get('TagValue2')
        if m.get('TagValue3') is not None:
            self.tag_value_3 = m.get('TagValue3')
        if m.get('TagValue4') is not None:
            self.tag_value_4 = m.get('TagValue4')
        if m.get('TagValue5') is not None:
            self.tag_value_5 = m.get('TagValue5')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class GetEvgwInstanceResponseBodyContent(TeaModel):
    def __init__(
        self,
        evgw_id: str = None,
        gw_ip: str = None,
        region_id: str = None,
        vtunes: List[str] = None,
    ):
        self.evgw_id = evgw_id
        self.gw_ip = gw_ip
        self.region_id = region_id
        self.vtunes = vtunes

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.evgw_id is not None:
            result['EvgwId'] = self.evgw_id
        if self.gw_ip is not None:
            result['GwIp'] = self.gw_ip
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.vtunes is not None:
            result['Vtunes'] = self.vtunes
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EvgwId') is not None:
            self.evgw_id = m.get('EvgwId')
        if m.get('GwIp') is not None:
            self.gw_ip = m.get('GwIp')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('Vtunes') is not None:
            self.vtunes = m.get('Vtunes')
        return self


class GetEvgwInstanceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        content: GetEvgwInstanceResponseBodyContent = None,
        desc: str = None,
        description: str = None,
        request_id: str = None,
        ret_code: int = None,
        success: bool = None,
    ):
        self.code = code
        self.content = content
        self.desc = desc
        self.description = description
        self.request_id = request_id
        self.ret_code = ret_code
        self.success = success

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.content is not None:
            result['Content'] = self.content.to_map()
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.description is not None:
            result['Description'] = self.description
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.ret_code is not None:
            result['RetCode'] = self.ret_code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Content') is not None:
            temp_model = GetEvgwInstanceResponseBodyContent()
            self.content = temp_model.from_map(m['Content'])
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RetCode') is not None:
            self.ret_code = m.get('RetCode')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetEvgwInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetEvgwInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetEvgwInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetEvgwRegionsRequestTagKeyValueModels(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetEvgwRegionsRequest(TeaModel):
    def __init__(
        self,
        ak_proxy: str = None,
        ali_uid: int = None,
        api_name: str = None,
        app_key: str = None,
        caller_bid: str = None,
        caller_bid_login_email: str = None,
        caller_security_transport: bool = None,
        caller_type: str = None,
        caller_uid: int = None,
        caller_uid_login_email: str = None,
        channel: str = None,
        client_ip: str = None,
        enable: bool = None,
        from_type: int = None,
        mfa_present: bool = None,
        operator: str = None,
        owner_account: str = None,
        owner_id: int = None,
        owner_id_login_email: str = None,
        prod_code: str = None,
        proxy_caller_ip: str = None,
        proxy_caller_security_transport: bool = None,
        proxy_id: str = None,
        proxy_trust_transport_info: bool = None,
        request_content: str = None,
        request_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        security_token: str = None,
        sms_resource_owner_id: int = None,
        tag_key_1: str = None,
        tag_key_2: str = None,
        tag_key_3: str = None,
        tag_key_4: str = None,
        tag_key_5: str = None,
        tag_key_value_models: List[GetEvgwRegionsRequestTagKeyValueModels] = None,
        tag_value_1: str = None,
        tag_value_2: str = None,
        tag_value_3: str = None,
        tag_value_4: str = None,
        tag_value_5: str = None,
        token: str = None,
        version: str = None,
    ):
        self.ak_proxy = ak_proxy
        self.ali_uid = ali_uid
        self.api_name = api_name
        self.app_key = app_key
        self.caller_bid = caller_bid
        self.caller_bid_login_email = caller_bid_login_email
        self.caller_security_transport = caller_security_transport
        self.caller_type = caller_type
        self.caller_uid = caller_uid
        self.caller_uid_login_email = caller_uid_login_email
        self.channel = channel
        self.client_ip = client_ip
        self.enable = enable
        self.from_type = from_type
        self.mfa_present = mfa_present
        self.operator = operator
        self.owner_account = owner_account
        self.owner_id = owner_id
        self.owner_id_login_email = owner_id_login_email
        self.prod_code = prod_code
        self.proxy_caller_ip = proxy_caller_ip
        self.proxy_caller_security_transport = proxy_caller_security_transport
        self.proxy_id = proxy_id
        self.proxy_trust_transport_info = proxy_trust_transport_info
        self.request_content = request_content
        self.request_id = request_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.security_token = security_token
        self.sms_resource_owner_id = sms_resource_owner_id
        self.tag_key_1 = tag_key_1
        self.tag_key_2 = tag_key_2
        self.tag_key_3 = tag_key_3
        self.tag_key_4 = tag_key_4
        self.tag_key_5 = tag_key_5
        self.tag_key_value_models = tag_key_value_models
        self.tag_value_1 = tag_value_1
        self.tag_value_2 = tag_value_2
        self.tag_value_3 = tag_value_3
        self.tag_value_4 = tag_value_4
        self.tag_value_5 = tag_value_5
        self.token = token
        self.version = version

    def validate(self):
        if self.tag_key_value_models:
            for k in self.tag_key_value_models:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ak_proxy is not None:
            result['AkProxy'] = self.ak_proxy
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.caller_bid is not None:
            result['CallerBid'] = self.caller_bid
        if self.caller_bid_login_email is not None:
            result['CallerBidLoginEmail'] = self.caller_bid_login_email
        if self.caller_security_transport is not None:
            result['CallerSecurityTransport'] = self.caller_security_transport
        if self.caller_type is not None:
            result['CallerType'] = self.caller_type
        if self.caller_uid is not None:
            result['CallerUid'] = self.caller_uid
        if self.caller_uid_login_email is not None:
            result['CallerUidLoginEmail'] = self.caller_uid_login_email
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.client_ip is not None:
            result['ClientIP'] = self.client_ip
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.from_type is not None:
            result['FromType'] = self.from_type
        if self.mfa_present is not None:
            result['MfaPresent'] = self.mfa_present
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.owner_account is not None:
            result['OwnerAccount'] = self.owner_account
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.owner_id_login_email is not None:
            result['OwnerIdLoginEmail'] = self.owner_id_login_email
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.proxy_caller_ip is not None:
            result['ProxyCallerIp'] = self.proxy_caller_ip
        if self.proxy_caller_security_transport is not None:
            result['ProxyCallerSecurityTransport'] = self.proxy_caller_security_transport
        if self.proxy_id is not None:
            result['ProxyId'] = self.proxy_id
        if self.proxy_trust_transport_info is not None:
            result['ProxyTrustTransportInfo'] = self.proxy_trust_transport_info
        if self.request_content is not None:
            result['RequestContent'] = self.request_content
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        if self.sms_resource_owner_id is not None:
            result['SmsResourceOwnerId'] = self.sms_resource_owner_id
        if self.tag_key_1 is not None:
            result['TagKey1'] = self.tag_key_1
        if self.tag_key_2 is not None:
            result['TagKey2'] = self.tag_key_2
        if self.tag_key_3 is not None:
            result['TagKey3'] = self.tag_key_3
        if self.tag_key_4 is not None:
            result['TagKey4'] = self.tag_key_4
        if self.tag_key_5 is not None:
            result['TagKey5'] = self.tag_key_5
        result['TagKeyValueModels'] = []
        if self.tag_key_value_models is not None:
            for k in self.tag_key_value_models:
                result['TagKeyValueModels'].append(k.to_map() if k else None)
        if self.tag_value_1 is not None:
            result['TagValue1'] = self.tag_value_1
        if self.tag_value_2 is not None:
            result['TagValue2'] = self.tag_value_2
        if self.tag_value_3 is not None:
            result['TagValue3'] = self.tag_value_3
        if self.tag_value_4 is not None:
            result['TagValue4'] = self.tag_value_4
        if self.tag_value_5 is not None:
            result['TagValue5'] = self.tag_value_5
        if self.token is not None:
            result['Token'] = self.token
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AkProxy') is not None:
            self.ak_proxy = m.get('AkProxy')
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('CallerBid') is not None:
            self.caller_bid = m.get('CallerBid')
        if m.get('CallerBidLoginEmail') is not None:
            self.caller_bid_login_email = m.get('CallerBidLoginEmail')
        if m.get('CallerSecurityTransport') is not None:
            self.caller_security_transport = m.get('CallerSecurityTransport')
        if m.get('CallerType') is not None:
            self.caller_type = m.get('CallerType')
        if m.get('CallerUid') is not None:
            self.caller_uid = m.get('CallerUid')
        if m.get('CallerUidLoginEmail') is not None:
            self.caller_uid_login_email = m.get('CallerUidLoginEmail')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ClientIP') is not None:
            self.client_ip = m.get('ClientIP')
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('FromType') is not None:
            self.from_type = m.get('FromType')
        if m.get('MfaPresent') is not None:
            self.mfa_present = m.get('MfaPresent')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('OwnerAccount') is not None:
            self.owner_account = m.get('OwnerAccount')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('OwnerIdLoginEmail') is not None:
            self.owner_id_login_email = m.get('OwnerIdLoginEmail')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProxyCallerIp') is not None:
            self.proxy_caller_ip = m.get('ProxyCallerIp')
        if m.get('ProxyCallerSecurityTransport') is not None:
            self.proxy_caller_security_transport = m.get('ProxyCallerSecurityTransport')
        if m.get('ProxyId') is not None:
            self.proxy_id = m.get('ProxyId')
        if m.get('ProxyTrustTransportInfo') is not None:
            self.proxy_trust_transport_info = m.get('ProxyTrustTransportInfo')
        if m.get('RequestContent') is not None:
            self.request_content = m.get('RequestContent')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        if m.get('SmsResourceOwnerId') is not None:
            self.sms_resource_owner_id = m.get('SmsResourceOwnerId')
        if m.get('TagKey1') is not None:
            self.tag_key_1 = m.get('TagKey1')
        if m.get('TagKey2') is not None:
            self.tag_key_2 = m.get('TagKey2')
        if m.get('TagKey3') is not None:
            self.tag_key_3 = m.get('TagKey3')
        if m.get('TagKey4') is not None:
            self.tag_key_4 = m.get('TagKey4')
        if m.get('TagKey5') is not None:
            self.tag_key_5 = m.get('TagKey5')
        self.tag_key_value_models = []
        if m.get('TagKeyValueModels') is not None:
            for k in m.get('TagKeyValueModels'):
                temp_model = GetEvgwRegionsRequestTagKeyValueModels()
                self.tag_key_value_models.append(temp_model.from_map(k))
        if m.get('TagValue1') is not None:
            self.tag_value_1 = m.get('TagValue1')
        if m.get('TagValue2') is not None:
            self.tag_value_2 = m.get('TagValue2')
        if m.get('TagValue3') is not None:
            self.tag_value_3 = m.get('TagValue3')
        if m.get('TagValue4') is not None:
            self.tag_value_4 = m.get('TagValue4')
        if m.get('TagValue5') is not None:
            self.tag_value_5 = m.get('TagValue5')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class GetEvgwRegionsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        content: List[str] = None,
        desc: str = None,
        description: str = None,
        request_id: str = None,
        ret_code: int = None,
        success: bool = None,
    ):
        self.code = code
        self.content = content
        self.desc = desc
        self.description = description
        self.request_id = request_id
        self.ret_code = ret_code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.content is not None:
            result['Content'] = self.content
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.description is not None:
            result['Description'] = self.description
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.ret_code is not None:
            result['RetCode'] = self.ret_code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RetCode') is not None:
            self.ret_code = m.get('RetCode')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetEvgwRegionsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetEvgwRegionsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetEvgwRegionsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetLLBZTrafficDataRequestTagKeyValueModels(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetLLBZTrafficDataRequest(TeaModel):
    def __init__(
        self,
        ak_proxy: str = None,
        ali_uid: int = None,
        api_name: str = None,
        app_key: str = None,
        caller_bid_login_email: str = None,
        caller_security_transport: bool = None,
        caller_uid_login_email: str = None,
        channel: str = None,
        client_ip: str = None,
        enable: bool = None,
        end_time: str = None,
        from_type: int = None,
        group_method: str = None,
        group_type: str = None,
        instance_id: str = None,
        mfa_present: bool = None,
        operator: str = None,
        owner_account: str = None,
        owner_id: int = None,
        owner_id_login_email: str = None,
        prod_code: str = None,
        proxy_caller_ip: str = None,
        proxy_caller_security_transport: bool = None,
        proxy_id: str = None,
        proxy_trust_transport_info: bool = None,
        request_content: str = None,
        request_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        security_token: str = None,
        sms_resource_owner_id: int = None,
        start_time: str = None,
        tag_key_1: str = None,
        tag_key_2: str = None,
        tag_key_3: str = None,
        tag_key_4: str = None,
        tag_key_5: str = None,
        tag_key_value_models: List[GetLLBZTrafficDataRequestTagKeyValueModels] = None,
        tag_value_1: str = None,
        tag_value_2: str = None,
        tag_value_3: str = None,
        tag_value_4: str = None,
        tag_value_5: str = None,
        token: str = None,
        version: str = None,
    ):
        self.ak_proxy = ak_proxy
        self.ali_uid = ali_uid
        self.api_name = api_name
        self.app_key = app_key
        self.caller_bid_login_email = caller_bid_login_email
        self.caller_security_transport = caller_security_transport
        self.caller_uid_login_email = caller_uid_login_email
        self.channel = channel
        self.client_ip = client_ip
        self.enable = enable
        self.end_time = end_time
        self.from_type = from_type
        self.group_method = group_method
        self.group_type = group_type
        self.instance_id = instance_id
        self.mfa_present = mfa_present
        self.operator = operator
        self.owner_account = owner_account
        self.owner_id = owner_id
        self.owner_id_login_email = owner_id_login_email
        self.prod_code = prod_code
        self.proxy_caller_ip = proxy_caller_ip
        self.proxy_caller_security_transport = proxy_caller_security_transport
        self.proxy_id = proxy_id
        self.proxy_trust_transport_info = proxy_trust_transport_info
        self.request_content = request_content
        self.request_id = request_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.security_token = security_token
        self.sms_resource_owner_id = sms_resource_owner_id
        self.start_time = start_time
        self.tag_key_1 = tag_key_1
        self.tag_key_2 = tag_key_2
        self.tag_key_3 = tag_key_3
        self.tag_key_4 = tag_key_4
        self.tag_key_5 = tag_key_5
        self.tag_key_value_models = tag_key_value_models
        self.tag_value_1 = tag_value_1
        self.tag_value_2 = tag_value_2
        self.tag_value_3 = tag_value_3
        self.tag_value_4 = tag_value_4
        self.tag_value_5 = tag_value_5
        self.token = token
        self.version = version

    def validate(self):
        if self.tag_key_value_models:
            for k in self.tag_key_value_models:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ak_proxy is not None:
            result['AkProxy'] = self.ak_proxy
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.caller_bid_login_email is not None:
            result['CallerBidLoginEmail'] = self.caller_bid_login_email
        if self.caller_security_transport is not None:
            result['CallerSecurityTransport'] = self.caller_security_transport
        if self.caller_uid_login_email is not None:
            result['CallerUidLoginEmail'] = self.caller_uid_login_email
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.client_ip is not None:
            result['ClientIP'] = self.client_ip
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.from_type is not None:
            result['FromType'] = self.from_type
        if self.group_method is not None:
            result['GroupMethod'] = self.group_method
        if self.group_type is not None:
            result['GroupType'] = self.group_type
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.mfa_present is not None:
            result['MfaPresent'] = self.mfa_present
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.owner_account is not None:
            result['OwnerAccount'] = self.owner_account
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.owner_id_login_email is not None:
            result['OwnerIdLoginEmail'] = self.owner_id_login_email
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.proxy_caller_ip is not None:
            result['ProxyCallerIp'] = self.proxy_caller_ip
        if self.proxy_caller_security_transport is not None:
            result['ProxyCallerSecurityTransport'] = self.proxy_caller_security_transport
        if self.proxy_id is not None:
            result['ProxyId'] = self.proxy_id
        if self.proxy_trust_transport_info is not None:
            result['ProxyTrustTransportInfo'] = self.proxy_trust_transport_info
        if self.request_content is not None:
            result['RequestContent'] = self.request_content
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        if self.sms_resource_owner_id is not None:
            result['SmsResourceOwnerId'] = self.sms_resource_owner_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.tag_key_1 is not None:
            result['TagKey1'] = self.tag_key_1
        if self.tag_key_2 is not None:
            result['TagKey2'] = self.tag_key_2
        if self.tag_key_3 is not None:
            result['TagKey3'] = self.tag_key_3
        if self.tag_key_4 is not None:
            result['TagKey4'] = self.tag_key_4
        if self.tag_key_5 is not None:
            result['TagKey5'] = self.tag_key_5
        result['TagKeyValueModels'] = []
        if self.tag_key_value_models is not None:
            for k in self.tag_key_value_models:
                result['TagKeyValueModels'].append(k.to_map() if k else None)
        if self.tag_value_1 is not None:
            result['TagValue1'] = self.tag_value_1
        if self.tag_value_2 is not None:
            result['TagValue2'] = self.tag_value_2
        if self.tag_value_3 is not None:
            result['TagValue3'] = self.tag_value_3
        if self.tag_value_4 is not None:
            result['TagValue4'] = self.tag_value_4
        if self.tag_value_5 is not None:
            result['TagValue5'] = self.tag_value_5
        if self.token is not None:
            result['Token'] = self.token
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AkProxy') is not None:
            self.ak_proxy = m.get('AkProxy')
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('CallerBidLoginEmail') is not None:
            self.caller_bid_login_email = m.get('CallerBidLoginEmail')
        if m.get('CallerSecurityTransport') is not None:
            self.caller_security_transport = m.get('CallerSecurityTransport')
        if m.get('CallerUidLoginEmail') is not None:
            self.caller_uid_login_email = m.get('CallerUidLoginEmail')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ClientIP') is not None:
            self.client_ip = m.get('ClientIP')
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('FromType') is not None:
            self.from_type = m.get('FromType')
        if m.get('GroupMethod') is not None:
            self.group_method = m.get('GroupMethod')
        if m.get('GroupType') is not None:
            self.group_type = m.get('GroupType')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MfaPresent') is not None:
            self.mfa_present = m.get('MfaPresent')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('OwnerAccount') is not None:
            self.owner_account = m.get('OwnerAccount')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('OwnerIdLoginEmail') is not None:
            self.owner_id_login_email = m.get('OwnerIdLoginEmail')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProxyCallerIp') is not None:
            self.proxy_caller_ip = m.get('ProxyCallerIp')
        if m.get('ProxyCallerSecurityTransport') is not None:
            self.proxy_caller_security_transport = m.get('ProxyCallerSecurityTransport')
        if m.get('ProxyId') is not None:
            self.proxy_id = m.get('ProxyId')
        if m.get('ProxyTrustTransportInfo') is not None:
            self.proxy_trust_transport_info = m.get('ProxyTrustTransportInfo')
        if m.get('RequestContent') is not None:
            self.request_content = m.get('RequestContent')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        if m.get('SmsResourceOwnerId') is not None:
            self.sms_resource_owner_id = m.get('SmsResourceOwnerId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TagKey1') is not None:
            self.tag_key_1 = m.get('TagKey1')
        if m.get('TagKey2') is not None:
            self.tag_key_2 = m.get('TagKey2')
        if m.get('TagKey3') is not None:
            self.tag_key_3 = m.get('TagKey3')
        if m.get('TagKey4') is not None:
            self.tag_key_4 = m.get('TagKey4')
        if m.get('TagKey5') is not None:
            self.tag_key_5 = m.get('TagKey5')
        self.tag_key_value_models = []
        if m.get('TagKeyValueModels') is not None:
            for k in m.get('TagKeyValueModels'):
                temp_model = GetLLBZTrafficDataRequestTagKeyValueModels()
                self.tag_key_value_models.append(temp_model.from_map(k))
        if m.get('TagValue1') is not None:
            self.tag_value_1 = m.get('TagValue1')
        if m.get('TagValue2') is not None:
            self.tag_value_2 = m.get('TagValue2')
        if m.get('TagValue3') is not None:
            self.tag_value_3 = m.get('TagValue3')
        if m.get('TagValue4') is not None:
            self.tag_value_4 = m.get('TagValue4')
        if m.get('TagValue5') is not None:
            self.tag_value_5 = m.get('TagValue5')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class GetLLBZTrafficDataResponseBodyModelContent(TeaModel):
    def __init__(
        self,
        bandwidth: str = None,
        ts: str = None,
    ):
        self.bandwidth = bandwidth
        self.ts = ts

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bandwidth is not None:
            result['bandwidth'] = self.bandwidth
        if self.ts is not None:
            result['ts'] = self.ts
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('bandwidth') is not None:
            self.bandwidth = m.get('bandwidth')
        if m.get('ts') is not None:
            self.ts = m.get('ts')
        return self


class GetLLBZTrafficDataResponseBodyModel(TeaModel):
    def __init__(
        self,
        content: List[GetLLBZTrafficDataResponseBodyModelContent] = None,
        description: str = None,
        request_id: str = None,
        ret_code: int = None,
    ):
        self.content = content
        self.description = description
        self.request_id = request_id
        self.ret_code = ret_code

    def validate(self):
        if self.content:
            for k in self.content:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Content'] = []
        if self.content is not None:
            for k in self.content:
                result['Content'].append(k.to_map() if k else None)
        if self.description is not None:
            result['Description'] = self.description
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.ret_code is not None:
            result['RetCode'] = self.ret_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.content = []
        if m.get('Content') is not None:
            for k in m.get('Content'):
                temp_model = GetLLBZTrafficDataResponseBodyModelContent()
                self.content.append(temp_model.from_map(k))
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RetCode') is not None:
            self.ret_code = m.get('RetCode')
        return self


class GetLLBZTrafficDataResponseBodyRequestOrderAccountCreditList(TeaModel):
    def __init__(
        self,
        account_id: int = None,
        account_name: str = None,
        credit_balance: int = None,
        cust_id: int = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        remarks: str = None,
    ):
        self.account_id = account_id
        self.account_name = account_name
        self.credit_balance = credit_balance
        self.cust_id = cust_id
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.remarks = remarks

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.account_name is not None:
            result['AccountName'] = self.account_name
        if self.credit_balance is not None:
            result['CreditBalance'] = self.credit_balance
        if self.cust_id is not None:
            result['CustId'] = self.cust_id
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('AccountName') is not None:
            self.account_name = m.get('AccountName')
        if m.get('CreditBalance') is not None:
            self.credit_balance = m.get('CreditBalance')
        if m.get('CustId') is not None:
            self.cust_id = m.get('CustId')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class GetLLBZTrafficDataResponseBodyRequestOrderAccount(TeaModel):
    def __init__(
        self,
        acct_id: int = None,
        acct_name: str = None,
        acct_type: str = None,
        bill_type: int = None,
        control_type: int = None,
        credit_list: List[GetLLBZTrafficDataResponseBodyRequestOrderAccountCreditList] = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        remarks: str = None,
    ):
        self.acct_id = acct_id
        self.acct_name = acct_name
        self.acct_type = acct_type
        self.bill_type = bill_type
        self.control_type = control_type
        self.credit_list = credit_list
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.remarks = remarks

    def validate(self):
        if self.credit_list:
            for k in self.credit_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.acct_id is not None:
            result['AcctId'] = self.acct_id
        if self.acct_name is not None:
            result['AcctName'] = self.acct_name
        if self.acct_type is not None:
            result['AcctType'] = self.acct_type
        if self.bill_type is not None:
            result['BillType'] = self.bill_type
        if self.control_type is not None:
            result['ControlType'] = self.control_type
        result['CreditList'] = []
        if self.credit_list is not None:
            for k in self.credit_list:
                result['CreditList'].append(k.to_map() if k else None)
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AcctId') is not None:
            self.acct_id = m.get('AcctId')
        if m.get('AcctName') is not None:
            self.acct_name = m.get('AcctName')
        if m.get('AcctType') is not None:
            self.acct_type = m.get('AcctType')
        if m.get('BillType') is not None:
            self.bill_type = m.get('BillType')
        if m.get('ControlType') is not None:
            self.control_type = m.get('ControlType')
        self.credit_list = []
        if m.get('CreditList') is not None:
            for k in m.get('CreditList'):
                temp_model = GetLLBZTrafficDataResponseBodyRequestOrderAccountCreditList()
                self.credit_list.append(temp_model.from_map(k))
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class GetLLBZTrafficDataResponseBodyRequestOrderAssetsAttributeList(TeaModel):
    def __init__(
        self,
        attr_group: str = None,
        attr_id: int = None,
        attr_name: str = None,
        attr_text: str = None,
        attr_value: str = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        mapping_code: str = None,
        old_attr_text: str = None,
        old_attr_value: str = None,
        options: int = None,
        remarks: str = None,
        value_expression: str = None,
    ):
        self.attr_group = attr_group
        self.attr_id = attr_id
        self.attr_name = attr_name
        self.attr_text = attr_text
        self.attr_value = attr_value
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.mapping_code = mapping_code
        self.old_attr_text = old_attr_text
        self.old_attr_value = old_attr_value
        self.options = options
        self.remarks = remarks
        self.value_expression = value_expression

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attr_group is not None:
            result['AttrGroup'] = self.attr_group
        if self.attr_id is not None:
            result['AttrId'] = self.attr_id
        if self.attr_name is not None:
            result['AttrName'] = self.attr_name
        if self.attr_text is not None:
            result['AttrText'] = self.attr_text
        if self.attr_value is not None:
            result['AttrValue'] = self.attr_value
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.mapping_code is not None:
            result['MappingCode'] = self.mapping_code
        if self.old_attr_text is not None:
            result['OldAttrText'] = self.old_attr_text
        if self.old_attr_value is not None:
            result['OldAttrValue'] = self.old_attr_value
        if self.options is not None:
            result['Options'] = self.options
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.value_expression is not None:
            result['ValueExpression'] = self.value_expression
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AttrGroup') is not None:
            self.attr_group = m.get('AttrGroup')
        if m.get('AttrId') is not None:
            self.attr_id = m.get('AttrId')
        if m.get('AttrName') is not None:
            self.attr_name = m.get('AttrName')
        if m.get('AttrText') is not None:
            self.attr_text = m.get('AttrText')
        if m.get('AttrValue') is not None:
            self.attr_value = m.get('AttrValue')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('MappingCode') is not None:
            self.mapping_code = m.get('MappingCode')
        if m.get('OldAttrText') is not None:
            self.old_attr_text = m.get('OldAttrText')
        if m.get('OldAttrValue') is not None:
            self.old_attr_value = m.get('OldAttrValue')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ValueExpression') is not None:
            self.value_expression = m.get('ValueExpression')
        return self


class GetLLBZTrafficDataResponseBodyRequestOrderAssets(TeaModel):
    def __init__(
        self,
        active_time: str = None,
        assets_id: int = None,
        assets_name: str = None,
        assets_owner: str = None,
        assets_status: int = None,
        assets_tag: int = None,
        assets_type: int = None,
        attribute_list: List[GetLLBZTrafficDataResponseBodyRequestOrderAssetsAttributeList] = None,
        bill_id: str = None,
        bill_source: str = None,
        channel_id: str = None,
        data_status: int = None,
        destroy_time: str = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        group_path: str = None,
        imsi: str = None,
        ins_status: int = None,
        os_status: str = None,
        os_time: str = None,
        owner_assets_id: int = None,
        password: str = None,
        pre_destroy_time: str = None,
        product_line_code: str = None,
        real_bill_number: str = None,
        remarks: str = None,
        res_code: str = None,
    ):
        self.active_time = active_time
        self.assets_id = assets_id
        self.assets_name = assets_name
        self.assets_owner = assets_owner
        self.assets_status = assets_status
        self.assets_tag = assets_tag
        self.assets_type = assets_type
        self.attribute_list = attribute_list
        self.bill_id = bill_id
        self.bill_source = bill_source
        self.channel_id = channel_id
        self.data_status = data_status
        self.destroy_time = destroy_time
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.group_path = group_path
        self.imsi = imsi
        self.ins_status = ins_status
        self.os_status = os_status
        self.os_time = os_time
        self.owner_assets_id = owner_assets_id
        self.password = password
        self.pre_destroy_time = pre_destroy_time
        self.product_line_code = product_line_code
        self.real_bill_number = real_bill_number
        self.remarks = remarks
        self.res_code = res_code

    def validate(self):
        if self.attribute_list:
            for k in self.attribute_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.active_time is not None:
            result['ActiveTime'] = self.active_time
        if self.assets_id is not None:
            result['AssetsId'] = self.assets_id
        if self.assets_name is not None:
            result['AssetsName'] = self.assets_name
        if self.assets_owner is not None:
            result['AssetsOwner'] = self.assets_owner
        if self.assets_status is not None:
            result['AssetsStatus'] = self.assets_status
        if self.assets_tag is not None:
            result['AssetsTag'] = self.assets_tag
        if self.assets_type is not None:
            result['AssetsType'] = self.assets_type
        result['AttributeList'] = []
        if self.attribute_list is not None:
            for k in self.attribute_list:
                result['AttributeList'].append(k.to_map() if k else None)
        if self.bill_id is not None:
            result['BillId'] = self.bill_id
        if self.bill_source is not None:
            result['BillSource'] = self.bill_source
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.destroy_time is not None:
            result['DestroyTime'] = self.destroy_time
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.group_path is not None:
            result['GroupPath'] = self.group_path
        if self.imsi is not None:
            result['Imsi'] = self.imsi
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.os_status is not None:
            result['OsStatus'] = self.os_status
        if self.os_time is not None:
            result['OsTime'] = self.os_time
        if self.owner_assets_id is not None:
            result['OwnerAssetsId'] = self.owner_assets_id
        if self.password is not None:
            result['Password'] = self.password
        if self.pre_destroy_time is not None:
            result['PreDestroyTime'] = self.pre_destroy_time
        if self.product_line_code is not None:
            result['ProductLineCode'] = self.product_line_code
        if self.real_bill_number is not None:
            result['RealBillNumber'] = self.real_bill_number
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.res_code is not None:
            result['ResCode'] = self.res_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ActiveTime') is not None:
            self.active_time = m.get('ActiveTime')
        if m.get('AssetsId') is not None:
            self.assets_id = m.get('AssetsId')
        if m.get('AssetsName') is not None:
            self.assets_name = m.get('AssetsName')
        if m.get('AssetsOwner') is not None:
            self.assets_owner = m.get('AssetsOwner')
        if m.get('AssetsStatus') is not None:
            self.assets_status = m.get('AssetsStatus')
        if m.get('AssetsTag') is not None:
            self.assets_tag = m.get('AssetsTag')
        if m.get('AssetsType') is not None:
            self.assets_type = m.get('AssetsType')
        self.attribute_list = []
        if m.get('AttributeList') is not None:
            for k in m.get('AttributeList'):
                temp_model = GetLLBZTrafficDataResponseBodyRequestOrderAssetsAttributeList()
                self.attribute_list.append(temp_model.from_map(k))
        if m.get('BillId') is not None:
            self.bill_id = m.get('BillId')
        if m.get('BillSource') is not None:
            self.bill_source = m.get('BillSource')
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('DestroyTime') is not None:
            self.destroy_time = m.get('DestroyTime')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('GroupPath') is not None:
            self.group_path = m.get('GroupPath')
        if m.get('Imsi') is not None:
            self.imsi = m.get('Imsi')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('OsStatus') is not None:
            self.os_status = m.get('OsStatus')
        if m.get('OsTime') is not None:
            self.os_time = m.get('OsTime')
        if m.get('OwnerAssetsId') is not None:
            self.owner_assets_id = m.get('OwnerAssetsId')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('PreDestroyTime') is not None:
            self.pre_destroy_time = m.get('PreDestroyTime')
        if m.get('ProductLineCode') is not None:
            self.product_line_code = m.get('ProductLineCode')
        if m.get('RealBillNumber') is not None:
            self.real_bill_number = m.get('RealBillNumber')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ResCode') is not None:
            self.res_code = m.get('ResCode')
        return self


class GetLLBZTrafficDataResponseBodyRequestOrderBusiOperation(TeaModel):
    def __init__(
        self,
        operation_code: str = None,
        operation_id: int = None,
        operation_name: str = None,
    ):
        self.operation_code = operation_code
        self.operation_id = operation_id
        self.operation_name = operation_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.operation_code is not None:
            result['OperationCode'] = self.operation_code
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.operation_name is not None:
            result['OperationName'] = self.operation_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OperationCode') is not None:
            self.operation_code = m.get('OperationCode')
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('OperationName') is not None:
            self.operation_name = m.get('OperationName')
        return self


class GetLLBZTrafficDataResponseBodyRequestOrderBusiPriceListBusiPriceDetailList(TeaModel):
    def __init__(
        self,
        outer_order_no: str = None,
        paid_amount: int = None,
        payment_mode: str = None,
    ):
        self.outer_order_no = outer_order_no
        self.paid_amount = paid_amount
        self.payment_mode = payment_mode

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.outer_order_no is not None:
            result['OuterOrderNo'] = self.outer_order_no
        if self.paid_amount is not None:
            result['PaidAmount'] = self.paid_amount
        if self.payment_mode is not None:
            result['PaymentMode'] = self.payment_mode
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OuterOrderNo') is not None:
            self.outer_order_no = m.get('OuterOrderNo')
        if m.get('PaidAmount') is not None:
            self.paid_amount = m.get('PaidAmount')
        if m.get('PaymentMode') is not None:
            self.payment_mode = m.get('PaymentMode')
        return self


class GetLLBZTrafficDataResponseBodyRequestOrderBusiPriceList(TeaModel):
    def __init__(
        self,
        alipay_order_no: str = None,
        busi_operation_id: int = None,
        busi_price_detail_list: List[GetLLBZTrafficDataResponseBodyRequestOrderBusiPriceListBusiPriceDetailList] = None,
        offer_id: int = None,
        order_channel: str = None,
        outer_order_no: str = None,
        paid_amount: int = None,
        receivable_amount: int = None,
        subject_id: str = None,
    ):
        self.alipay_order_no = alipay_order_no
        self.busi_operation_id = busi_operation_id
        self.busi_price_detail_list = busi_price_detail_list
        self.offer_id = offer_id
        self.order_channel = order_channel
        self.outer_order_no = outer_order_no
        self.paid_amount = paid_amount
        self.receivable_amount = receivable_amount
        self.subject_id = subject_id

    def validate(self):
        if self.busi_price_detail_list:
            for k in self.busi_price_detail_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alipay_order_no is not None:
            result['AlipayOrderNo'] = self.alipay_order_no
        if self.busi_operation_id is not None:
            result['BusiOperationId'] = self.busi_operation_id
        result['BusiPriceDetailList'] = []
        if self.busi_price_detail_list is not None:
            for k in self.busi_price_detail_list:
                result['BusiPriceDetailList'].append(k.to_map() if k else None)
        if self.offer_id is not None:
            result['OfferId'] = self.offer_id
        if self.order_channel is not None:
            result['OrderChannel'] = self.order_channel
        if self.outer_order_no is not None:
            result['OuterOrderNo'] = self.outer_order_no
        if self.paid_amount is not None:
            result['PaidAmount'] = self.paid_amount
        if self.receivable_amount is not None:
            result['ReceivableAmount'] = self.receivable_amount
        if self.subject_id is not None:
            result['SubjectId'] = self.subject_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlipayOrderNo') is not None:
            self.alipay_order_no = m.get('AlipayOrderNo')
        if m.get('BusiOperationId') is not None:
            self.busi_operation_id = m.get('BusiOperationId')
        self.busi_price_detail_list = []
        if m.get('BusiPriceDetailList') is not None:
            for k in m.get('BusiPriceDetailList'):
                temp_model = GetLLBZTrafficDataResponseBodyRequestOrderBusiPriceListBusiPriceDetailList()
                self.busi_price_detail_list.append(temp_model.from_map(k))
        if m.get('OfferId') is not None:
            self.offer_id = m.get('OfferId')
        if m.get('OrderChannel') is not None:
            self.order_channel = m.get('OrderChannel')
        if m.get('OuterOrderNo') is not None:
            self.outer_order_no = m.get('OuterOrderNo')
        if m.get('PaidAmount') is not None:
            self.paid_amount = m.get('PaidAmount')
        if m.get('ReceivableAmount') is not None:
            self.receivable_amount = m.get('ReceivableAmount')
        if m.get('SubjectId') is not None:
            self.subject_id = m.get('SubjectId')
        return self


class GetLLBZTrafficDataResponseBodyRequestOrderCustomerContracts(TeaModel):
    def __init__(
        self,
        contact_address: str = None,
        contact_name: str = None,
        contact_phone: str = None,
        contact_type: int = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        remarks: str = None,
    ):
        self.contact_address = contact_address
        self.contact_name = contact_name
        self.contact_phone = contact_phone
        self.contact_type = contact_type
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.remarks = remarks

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_address is not None:
            result['ContactAddress'] = self.contact_address
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.contact_phone is not None:
            result['ContactPhone'] = self.contact_phone
        if self.contact_type is not None:
            result['ContactType'] = self.contact_type
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactAddress') is not None:
            self.contact_address = m.get('ContactAddress')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('ContactPhone') is not None:
            self.contact_phone = m.get('ContactPhone')
        if m.get('ContactType') is not None:
            self.contact_type = m.get('ContactType')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class GetLLBZTrafficDataResponseBodyRequestOrderCustomer(TeaModel):
    def __init__(
        self,
        cert_address: str = None,
        cert_effdate: str = None,
        cert_expire: str = None,
        cert_no: str = None,
        cert_type: str = None,
        contracts: List[GetLLBZTrafficDataResponseBodyRequestOrderCustomerContracts] = None,
        cust_id: int = None,
        cust_name: str = None,
        cust_tag: int = None,
        cust_type: str = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gender: int = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        outer_cust_no: str = None,
        remarks: str = None,
        user_bind_type: int = None,
        user_id: int = None,
        user_nick: str = None,
    ):
        self.cert_address = cert_address
        self.cert_effdate = cert_effdate
        self.cert_expire = cert_expire
        self.cert_no = cert_no
        self.cert_type = cert_type
        self.contracts = contracts
        self.cust_id = cust_id
        self.cust_name = cust_name
        self.cust_tag = cust_tag
        self.cust_type = cust_type
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gender = gender
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.outer_cust_no = outer_cust_no
        self.remarks = remarks
        self.user_bind_type = user_bind_type
        self.user_id = user_id
        self.user_nick = user_nick

    def validate(self):
        if self.contracts:
            for k in self.contracts:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cert_address is not None:
            result['CertAddress'] = self.cert_address
        if self.cert_effdate is not None:
            result['CertEffdate'] = self.cert_effdate
        if self.cert_expire is not None:
            result['CertExpire'] = self.cert_expire
        if self.cert_no is not None:
            result['CertNo'] = self.cert_no
        if self.cert_type is not None:
            result['CertType'] = self.cert_type
        result['Contracts'] = []
        if self.contracts is not None:
            for k in self.contracts:
                result['Contracts'].append(k.to_map() if k else None)
        if self.cust_id is not None:
            result['CustId'] = self.cust_id
        if self.cust_name is not None:
            result['CustName'] = self.cust_name
        if self.cust_tag is not None:
            result['CustTag'] = self.cust_tag
        if self.cust_type is not None:
            result['CustType'] = self.cust_type
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gender is not None:
            result['Gender'] = self.gender
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.outer_cust_no is not None:
            result['OuterCustNo'] = self.outer_cust_no
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.user_bind_type is not None:
            result['UserBindType'] = self.user_bind_type
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.user_nick is not None:
            result['UserNick'] = self.user_nick
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CertAddress') is not None:
            self.cert_address = m.get('CertAddress')
        if m.get('CertEffdate') is not None:
            self.cert_effdate = m.get('CertEffdate')
        if m.get('CertExpire') is not None:
            self.cert_expire = m.get('CertExpire')
        if m.get('CertNo') is not None:
            self.cert_no = m.get('CertNo')
        if m.get('CertType') is not None:
            self.cert_type = m.get('CertType')
        self.contracts = []
        if m.get('Contracts') is not None:
            for k in m.get('Contracts'):
                temp_model = GetLLBZTrafficDataResponseBodyRequestOrderCustomerContracts()
                self.contracts.append(temp_model.from_map(k))
        if m.get('CustId') is not None:
            self.cust_id = m.get('CustId')
        if m.get('CustName') is not None:
            self.cust_name = m.get('CustName')
        if m.get('CustTag') is not None:
            self.cust_tag = m.get('CustTag')
        if m.get('CustType') is not None:
            self.cust_type = m.get('CustType')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('Gender') is not None:
            self.gender = m.get('Gender')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('OuterCustNo') is not None:
            self.outer_cust_no = m.get('OuterCustNo')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('UserBindType') is not None:
            self.user_bind_type = m.get('UserBindType')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('UserNick') is not None:
            self.user_nick = m.get('UserNick')
        return self


class GetLLBZTrafficDataResponseBodyRequestOrderOfferListAttributeList(TeaModel):
    def __init__(
        self,
        attr_group: str = None,
        attr_id: int = None,
        attr_name: str = None,
        attr_text: str = None,
        attr_value: str = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        mapping_code: str = None,
        old_attr_text: str = None,
        old_attr_value: str = None,
        options: int = None,
        remarks: str = None,
        value_expression: str = None,
    ):
        self.attr_group = attr_group
        self.attr_id = attr_id
        self.attr_name = attr_name
        self.attr_text = attr_text
        self.attr_value = attr_value
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.mapping_code = mapping_code
        self.old_attr_text = old_attr_text
        self.old_attr_value = old_attr_value
        self.options = options
        self.remarks = remarks
        self.value_expression = value_expression

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attr_group is not None:
            result['AttrGroup'] = self.attr_group
        if self.attr_id is not None:
            result['AttrId'] = self.attr_id
        if self.attr_name is not None:
            result['AttrName'] = self.attr_name
        if self.attr_text is not None:
            result['AttrText'] = self.attr_text
        if self.attr_value is not None:
            result['AttrValue'] = self.attr_value
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.mapping_code is not None:
            result['MappingCode'] = self.mapping_code
        if self.old_attr_text is not None:
            result['OldAttrText'] = self.old_attr_text
        if self.old_attr_value is not None:
            result['OldAttrValue'] = self.old_attr_value
        if self.options is not None:
            result['Options'] = self.options
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.value_expression is not None:
            result['ValueExpression'] = self.value_expression
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AttrGroup') is not None:
            self.attr_group = m.get('AttrGroup')
        if m.get('AttrId') is not None:
            self.attr_id = m.get('AttrId')
        if m.get('AttrName') is not None:
            self.attr_name = m.get('AttrName')
        if m.get('AttrText') is not None:
            self.attr_text = m.get('AttrText')
        if m.get('AttrValue') is not None:
            self.attr_value = m.get('AttrValue')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('MappingCode') is not None:
            self.mapping_code = m.get('MappingCode')
        if m.get('OldAttrText') is not None:
            self.old_attr_text = m.get('OldAttrText')
        if m.get('OldAttrValue') is not None:
            self.old_attr_value = m.get('OldAttrValue')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ValueExpression') is not None:
            self.value_expression = m.get('ValueExpression')
        return self


class GetLLBZTrafficDataResponseBodyRequestOrderOfferListProductAttributeList(TeaModel):
    def __init__(
        self,
        attr_group: str = None,
        attr_id: int = None,
        attr_name: str = None,
        attr_text: str = None,
        attr_value: str = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        mapping_code: str = None,
        old_attr_text: str = None,
        old_attr_value: str = None,
        options: int = None,
        remarks: str = None,
        value_expression: str = None,
    ):
        self.attr_group = attr_group
        self.attr_id = attr_id
        self.attr_name = attr_name
        self.attr_text = attr_text
        self.attr_value = attr_value
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.mapping_code = mapping_code
        self.old_attr_text = old_attr_text
        self.old_attr_value = old_attr_value
        self.options = options
        self.remarks = remarks
        self.value_expression = value_expression

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attr_group is not None:
            result['AttrGroup'] = self.attr_group
        if self.attr_id is not None:
            result['AttrId'] = self.attr_id
        if self.attr_name is not None:
            result['AttrName'] = self.attr_name
        if self.attr_text is not None:
            result['AttrText'] = self.attr_text
        if self.attr_value is not None:
            result['AttrValue'] = self.attr_value
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.mapping_code is not None:
            result['MappingCode'] = self.mapping_code
        if self.old_attr_text is not None:
            result['OldAttrText'] = self.old_attr_text
        if self.old_attr_value is not None:
            result['OldAttrValue'] = self.old_attr_value
        if self.options is not None:
            result['Options'] = self.options
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.value_expression is not None:
            result['ValueExpression'] = self.value_expression
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AttrGroup') is not None:
            self.attr_group = m.get('AttrGroup')
        if m.get('AttrId') is not None:
            self.attr_id = m.get('AttrId')
        if m.get('AttrName') is not None:
            self.attr_name = m.get('AttrName')
        if m.get('AttrText') is not None:
            self.attr_text = m.get('AttrText')
        if m.get('AttrValue') is not None:
            self.attr_value = m.get('AttrValue')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('MappingCode') is not None:
            self.mapping_code = m.get('MappingCode')
        if m.get('OldAttrText') is not None:
            self.old_attr_text = m.get('OldAttrText')
        if m.get('OldAttrValue') is not None:
            self.old_attr_value = m.get('OldAttrValue')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ValueExpression') is not None:
            self.value_expression = m.get('ValueExpression')
        return self


class GetLLBZTrafficDataResponseBodyRequestOrderOfferListProduct(TeaModel):
    def __init__(
        self,
        attribute_list: List[GetLLBZTrafficDataResponseBodyRequestOrderOfferListProductAttributeList] = None,
        data_status: int = None,
        effective_time: str = None,
        effective_type: str = None,
        expire_time: str = None,
        expire_type: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_product_id: int = None,
        ins_status: int = None,
        is_main: str = None,
        open_status: int = None,
        operate_time: str = None,
        operation_id: int = None,
        options: int = None,
        product_id: int = None,
        product_name: str = None,
        product_type: str = None,
        remarks: str = None,
    ):
        self.attribute_list = attribute_list
        self.data_status = data_status
        self.effective_time = effective_time
        self.effective_type = effective_type
        self.expire_time = expire_time
        self.expire_type = expire_type
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_product_id = ins_product_id
        self.ins_status = ins_status
        self.is_main = is_main
        self.open_status = open_status
        self.operate_time = operate_time
        self.operation_id = operation_id
        self.options = options
        self.product_id = product_id
        self.product_name = product_name
        self.product_type = product_type
        self.remarks = remarks

    def validate(self):
        if self.attribute_list:
            for k in self.attribute_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AttributeList'] = []
        if self.attribute_list is not None:
            for k in self.attribute_list:
                result['AttributeList'].append(k.to_map() if k else None)
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.effective_type is not None:
            result['EffectiveType'] = self.effective_type
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.expire_type is not None:
            result['ExpireType'] = self.expire_type
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_product_id is not None:
            result['InsProductId'] = self.ins_product_id
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.is_main is not None:
            result['IsMain'] = self.is_main
        if self.open_status is not None:
            result['OpenStatus'] = self.open_status
        if self.operate_time is not None:
            result['OperateTime'] = self.operate_time
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.options is not None:
            result['Options'] = self.options
        if self.product_id is not None:
            result['ProductId'] = self.product_id
        if self.product_name is not None:
            result['ProductName'] = self.product_name
        if self.product_type is not None:
            result['ProductType'] = self.product_type
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.attribute_list = []
        if m.get('AttributeList') is not None:
            for k in m.get('AttributeList'):
                temp_model = GetLLBZTrafficDataResponseBodyRequestOrderOfferListProductAttributeList()
                self.attribute_list.append(temp_model.from_map(k))
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('EffectiveType') is not None:
            self.effective_type = m.get('EffectiveType')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('ExpireType') is not None:
            self.expire_type = m.get('ExpireType')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsProductId') is not None:
            self.ins_product_id = m.get('InsProductId')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('IsMain') is not None:
            self.is_main = m.get('IsMain')
        if m.get('OpenStatus') is not None:
            self.open_status = m.get('OpenStatus')
        if m.get('OperateTime') is not None:
            self.operate_time = m.get('OperateTime')
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('ProductId') is not None:
            self.product_id = m.get('ProductId')
        if m.get('ProductName') is not None:
            self.product_name = m.get('ProductName')
        if m.get('ProductType') is not None:
            self.product_type = m.get('ProductType')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class GetLLBZTrafficDataResponseBodyRequestOrderOfferList(TeaModel):
    def __init__(
        self,
        attribute_list: List[GetLLBZTrafficDataResponseBodyRequestOrderOfferListAttributeList] = None,
        billing_pkg_id: int = None,
        data_status: int = None,
        eff_param: str = None,
        effective_time: str = None,
        effective_type: str = None,
        exp_param: str = None,
        expire_time: str = None,
        expire_type: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_offer_id: int = None,
        ins_status: int = None,
        offer_id: int = None,
        offer_name: str = None,
        offer_type: str = None,
        old_effective_time: str = None,
        old_ins_offer_id: int = None,
        old_offer_id: int = None,
        operation_id: int = None,
        options: int = None,
        ord_type: str = None,
        product: GetLLBZTrafficDataResponseBodyRequestOrderOfferListProduct = None,
        remarks: str = None,
    ):
        self.attribute_list = attribute_list
        self.billing_pkg_id = billing_pkg_id
        self.data_status = data_status
        self.eff_param = eff_param
        self.effective_time = effective_time
        self.effective_type = effective_type
        self.exp_param = exp_param
        self.expire_time = expire_time
        self.expire_type = expire_type
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_offer_id = ins_offer_id
        self.ins_status = ins_status
        self.offer_id = offer_id
        self.offer_name = offer_name
        self.offer_type = offer_type
        self.old_effective_time = old_effective_time
        self.old_ins_offer_id = old_ins_offer_id
        self.old_offer_id = old_offer_id
        self.operation_id = operation_id
        self.options = options
        self.ord_type = ord_type
        self.product = product
        self.remarks = remarks

    def validate(self):
        if self.attribute_list:
            for k in self.attribute_list:
                if k:
                    k.validate()
        if self.product:
            self.product.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AttributeList'] = []
        if self.attribute_list is not None:
            for k in self.attribute_list:
                result['AttributeList'].append(k.to_map() if k else None)
        if self.billing_pkg_id is not None:
            result['BillingPkgId'] = self.billing_pkg_id
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.eff_param is not None:
            result['EffParam'] = self.eff_param
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.effective_type is not None:
            result['EffectiveType'] = self.effective_type
        if self.exp_param is not None:
            result['ExpParam'] = self.exp_param
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.expire_type is not None:
            result['ExpireType'] = self.expire_type
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_offer_id is not None:
            result['InsOfferId'] = self.ins_offer_id
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.offer_id is not None:
            result['OfferId'] = self.offer_id
        if self.offer_name is not None:
            result['OfferName'] = self.offer_name
        if self.offer_type is not None:
            result['OfferType'] = self.offer_type
        if self.old_effective_time is not None:
            result['OldEffectiveTime'] = self.old_effective_time
        if self.old_ins_offer_id is not None:
            result['OldInsOfferId'] = self.old_ins_offer_id
        if self.old_offer_id is not None:
            result['OldOfferId'] = self.old_offer_id
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.options is not None:
            result['Options'] = self.options
        if self.ord_type is not None:
            result['OrdType'] = self.ord_type
        if self.product is not None:
            result['Product'] = self.product.to_map()
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.attribute_list = []
        if m.get('AttributeList') is not None:
            for k in m.get('AttributeList'):
                temp_model = GetLLBZTrafficDataResponseBodyRequestOrderOfferListAttributeList()
                self.attribute_list.append(temp_model.from_map(k))
        if m.get('BillingPkgId') is not None:
            self.billing_pkg_id = m.get('BillingPkgId')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffParam') is not None:
            self.eff_param = m.get('EffParam')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('EffectiveType') is not None:
            self.effective_type = m.get('EffectiveType')
        if m.get('ExpParam') is not None:
            self.exp_param = m.get('ExpParam')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('ExpireType') is not None:
            self.expire_type = m.get('ExpireType')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsOfferId') is not None:
            self.ins_offer_id = m.get('InsOfferId')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('OfferId') is not None:
            self.offer_id = m.get('OfferId')
        if m.get('OfferName') is not None:
            self.offer_name = m.get('OfferName')
        if m.get('OfferType') is not None:
            self.offer_type = m.get('OfferType')
        if m.get('OldEffectiveTime') is not None:
            self.old_effective_time = m.get('OldEffectiveTime')
        if m.get('OldInsOfferId') is not None:
            self.old_ins_offer_id = m.get('OldInsOfferId')
        if m.get('OldOfferId') is not None:
            self.old_offer_id = m.get('OldOfferId')
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('OrdType') is not None:
            self.ord_type = m.get('OrdType')
        if m.get('Product') is not None:
            temp_model = GetLLBZTrafficDataResponseBodyRequestOrderOfferListProduct()
            self.product = temp_model.from_map(m['Product'])
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class GetLLBZTrafficDataResponseBodyRequestOrderProductListAttributeList(TeaModel):
    def __init__(
        self,
        attr_group: str = None,
        attr_id: int = None,
        attr_name: str = None,
        attr_text: str = None,
        attr_value: str = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        mapping_code: str = None,
        old_attr_text: str = None,
        old_attr_value: str = None,
        options: int = None,
        remarks: str = None,
        value_expression: str = None,
    ):
        self.attr_group = attr_group
        self.attr_id = attr_id
        self.attr_name = attr_name
        self.attr_text = attr_text
        self.attr_value = attr_value
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.mapping_code = mapping_code
        self.old_attr_text = old_attr_text
        self.old_attr_value = old_attr_value
        self.options = options
        self.remarks = remarks
        self.value_expression = value_expression

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attr_group is not None:
            result['AttrGroup'] = self.attr_group
        if self.attr_id is not None:
            result['AttrId'] = self.attr_id
        if self.attr_name is not None:
            result['AttrName'] = self.attr_name
        if self.attr_text is not None:
            result['AttrText'] = self.attr_text
        if self.attr_value is not None:
            result['AttrValue'] = self.attr_value
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.mapping_code is not None:
            result['MappingCode'] = self.mapping_code
        if self.old_attr_text is not None:
            result['OldAttrText'] = self.old_attr_text
        if self.old_attr_value is not None:
            result['OldAttrValue'] = self.old_attr_value
        if self.options is not None:
            result['Options'] = self.options
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.value_expression is not None:
            result['ValueExpression'] = self.value_expression
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AttrGroup') is not None:
            self.attr_group = m.get('AttrGroup')
        if m.get('AttrId') is not None:
            self.attr_id = m.get('AttrId')
        if m.get('AttrName') is not None:
            self.attr_name = m.get('AttrName')
        if m.get('AttrText') is not None:
            self.attr_text = m.get('AttrText')
        if m.get('AttrValue') is not None:
            self.attr_value = m.get('AttrValue')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('MappingCode') is not None:
            self.mapping_code = m.get('MappingCode')
        if m.get('OldAttrText') is not None:
            self.old_attr_text = m.get('OldAttrText')
        if m.get('OldAttrValue') is not None:
            self.old_attr_value = m.get('OldAttrValue')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ValueExpression') is not None:
            self.value_expression = m.get('ValueExpression')
        return self


class GetLLBZTrafficDataResponseBodyRequestOrderProductList(TeaModel):
    def __init__(
        self,
        attribute_list: List[GetLLBZTrafficDataResponseBodyRequestOrderProductListAttributeList] = None,
        data_status: int = None,
        effective_time: str = None,
        effective_type: str = None,
        expire_time: str = None,
        expire_type: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_product_id: int = None,
        ins_status: int = None,
        is_main: str = None,
        open_status: int = None,
        operate_time: str = None,
        operation_id: int = None,
        options: int = None,
        product_id: int = None,
        product_name: str = None,
        product_type: str = None,
        remarks: str = None,
    ):
        self.attribute_list = attribute_list
        self.data_status = data_status
        self.effective_time = effective_time
        self.effective_type = effective_type
        self.expire_time = expire_time
        self.expire_type = expire_type
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_product_id = ins_product_id
        self.ins_status = ins_status
        self.is_main = is_main
        self.open_status = open_status
        self.operate_time = operate_time
        self.operation_id = operation_id
        self.options = options
        self.product_id = product_id
        self.product_name = product_name
        self.product_type = product_type
        self.remarks = remarks

    def validate(self):
        if self.attribute_list:
            for k in self.attribute_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AttributeList'] = []
        if self.attribute_list is not None:
            for k in self.attribute_list:
                result['AttributeList'].append(k.to_map() if k else None)
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.effective_type is not None:
            result['EffectiveType'] = self.effective_type
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.expire_type is not None:
            result['ExpireType'] = self.expire_type
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_product_id is not None:
            result['InsProductId'] = self.ins_product_id
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.is_main is not None:
            result['IsMain'] = self.is_main
        if self.open_status is not None:
            result['OpenStatus'] = self.open_status
        if self.operate_time is not None:
            result['OperateTime'] = self.operate_time
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.options is not None:
            result['Options'] = self.options
        if self.product_id is not None:
            result['ProductId'] = self.product_id
        if self.product_name is not None:
            result['ProductName'] = self.product_name
        if self.product_type is not None:
            result['ProductType'] = self.product_type
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.attribute_list = []
        if m.get('AttributeList') is not None:
            for k in m.get('AttributeList'):
                temp_model = GetLLBZTrafficDataResponseBodyRequestOrderProductListAttributeList()
                self.attribute_list.append(temp_model.from_map(k))
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('EffectiveType') is not None:
            self.effective_type = m.get('EffectiveType')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('ExpireType') is not None:
            self.expire_type = m.get('ExpireType')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsProductId') is not None:
            self.ins_product_id = m.get('InsProductId')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('IsMain') is not None:
            self.is_main = m.get('IsMain')
        if m.get('OpenStatus') is not None:
            self.open_status = m.get('OpenStatus')
        if m.get('OperateTime') is not None:
            self.operate_time = m.get('OperateTime')
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('ProductId') is not None:
            self.product_id = m.get('ProductId')
        if m.get('ProductName') is not None:
            self.product_name = m.get('ProductName')
        if m.get('ProductType') is not None:
            self.product_type = m.get('ProductType')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class GetLLBZTrafficDataResponseBodyRequestOrderRuleList(TeaModel):
    def __init__(
        self,
        act_on_ins_offer_id: int = None,
        act_on_operation_id: int = None,
        act_on_user_id: int = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        message: str = None,
        remarks: str = None,
        result_code: str = None,
        rule_code: str = None,
        rule_id: str = None,
        rule_name: str = None,
        rule_status: str = None,
        trigger_ins_offer_id: int = None,
    ):
        self.act_on_ins_offer_id = act_on_ins_offer_id
        self.act_on_operation_id = act_on_operation_id
        self.act_on_user_id = act_on_user_id
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.message = message
        self.remarks = remarks
        self.result_code = result_code
        self.rule_code = rule_code
        self.rule_id = rule_id
        self.rule_name = rule_name
        self.rule_status = rule_status
        self.trigger_ins_offer_id = trigger_ins_offer_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.act_on_ins_offer_id is not None:
            result['ActOnInsOfferId'] = self.act_on_ins_offer_id
        if self.act_on_operation_id is not None:
            result['ActOnOperationId'] = self.act_on_operation_id
        if self.act_on_user_id is not None:
            result['ActOnUserId'] = self.act_on_user_id
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.message is not None:
            result['Message'] = self.message
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.rule_code is not None:
            result['RuleCode'] = self.rule_code
        if self.rule_id is not None:
            result['RuleId'] = self.rule_id
        if self.rule_name is not None:
            result['RuleName'] = self.rule_name
        if self.rule_status is not None:
            result['RuleStatus'] = self.rule_status
        if self.trigger_ins_offer_id is not None:
            result['TriggerInsOfferId'] = self.trigger_ins_offer_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ActOnInsOfferId') is not None:
            self.act_on_ins_offer_id = m.get('ActOnInsOfferId')
        if m.get('ActOnOperationId') is not None:
            self.act_on_operation_id = m.get('ActOnOperationId')
        if m.get('ActOnUserId') is not None:
            self.act_on_user_id = m.get('ActOnUserId')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('RuleCode') is not None:
            self.rule_code = m.get('RuleCode')
        if m.get('RuleId') is not None:
            self.rule_id = m.get('RuleId')
        if m.get('RuleName') is not None:
            self.rule_name = m.get('RuleName')
        if m.get('RuleStatus') is not None:
            self.rule_status = m.get('RuleStatus')
        if m.get('TriggerInsOfferId') is not None:
            self.trigger_ins_offer_id = m.get('TriggerInsOfferId')
        return self


class GetLLBZTrafficDataResponseBodyRequestOrder(TeaModel):
    def __init__(
        self,
        account: GetLLBZTrafficDataResponseBodyRequestOrderAccount = None,
        assets: GetLLBZTrafficDataResponseBodyRequestOrderAssets = None,
        busi_operation: GetLLBZTrafficDataResponseBodyRequestOrderBusiOperation = None,
        busi_operator: str = None,
        busi_price_list: List[GetLLBZTrafficDataResponseBodyRequestOrderBusiPriceList] = None,
        channel_id: str = None,
        customer: GetLLBZTrafficDataResponseBodyRequestOrderCustomer = None,
        data_status: int = None,
        ext_info: Dict[str, str] = None,
        is_auth: bool = None,
        offer_list: List[GetLLBZTrafficDataResponseBodyRequestOrderOfferList] = None,
        open_completed_time: str = None,
        order_id: int = None,
        order_no: str = None,
        order_serial_id: int = None,
        order_status: str = None,
        order_time: str = None,
        order_type: str = None,
        owner_id: str = None,
        parent_order_id: str = None,
        product_list: List[GetLLBZTrafficDataResponseBodyRequestOrderProductList] = None,
        remarks: str = None,
        rule_list: List[GetLLBZTrafficDataResponseBodyRequestOrderRuleList] = None,
    ):
        self.account = account
        self.assets = assets
        self.busi_operation = busi_operation
        self.busi_operator = busi_operator
        self.busi_price_list = busi_price_list
        self.channel_id = channel_id
        self.customer = customer
        self.data_status = data_status
        self.ext_info = ext_info
        self.is_auth = is_auth
        self.offer_list = offer_list
        self.open_completed_time = open_completed_time
        self.order_id = order_id
        self.order_no = order_no
        self.order_serial_id = order_serial_id
        self.order_status = order_status
        self.order_time = order_time
        self.order_type = order_type
        self.owner_id = owner_id
        self.parent_order_id = parent_order_id
        self.product_list = product_list
        self.remarks = remarks
        self.rule_list = rule_list

    def validate(self):
        if self.account:
            self.account.validate()
        if self.assets:
            self.assets.validate()
        if self.busi_operation:
            self.busi_operation.validate()
        if self.busi_price_list:
            for k in self.busi_price_list:
                if k:
                    k.validate()
        if self.customer:
            self.customer.validate()
        if self.offer_list:
            for k in self.offer_list:
                if k:
                    k.validate()
        if self.product_list:
            for k in self.product_list:
                if k:
                    k.validate()
        if self.rule_list:
            for k in self.rule_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account is not None:
            result['Account'] = self.account.to_map()
        if self.assets is not None:
            result['Assets'] = self.assets.to_map()
        if self.busi_operation is not None:
            result['BusiOperation'] = self.busi_operation.to_map()
        if self.busi_operator is not None:
            result['BusiOperator'] = self.busi_operator
        result['BusiPriceList'] = []
        if self.busi_price_list is not None:
            for k in self.busi_price_list:
                result['BusiPriceList'].append(k.to_map() if k else None)
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.customer is not None:
            result['Customer'] = self.customer.to_map()
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.ext_info is not None:
            result['ExtInfo'] = self.ext_info
        if self.is_auth is not None:
            result['IsAuth'] = self.is_auth
        result['OfferList'] = []
        if self.offer_list is not None:
            for k in self.offer_list:
                result['OfferList'].append(k.to_map() if k else None)
        if self.open_completed_time is not None:
            result['OpenCompletedTime'] = self.open_completed_time
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.order_no is not None:
            result['OrderNo'] = self.order_no
        if self.order_serial_id is not None:
            result['OrderSerialId'] = self.order_serial_id
        if self.order_status is not None:
            result['OrderStatus'] = self.order_status
        if self.order_time is not None:
            result['OrderTime'] = self.order_time
        if self.order_type is not None:
            result['OrderType'] = self.order_type
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.parent_order_id is not None:
            result['ParentOrderId'] = self.parent_order_id
        result['ProductList'] = []
        if self.product_list is not None:
            for k in self.product_list:
                result['ProductList'].append(k.to_map() if k else None)
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        result['RuleList'] = []
        if self.rule_list is not None:
            for k in self.rule_list:
                result['RuleList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Account') is not None:
            temp_model = GetLLBZTrafficDataResponseBodyRequestOrderAccount()
            self.account = temp_model.from_map(m['Account'])
        if m.get('Assets') is not None:
            temp_model = GetLLBZTrafficDataResponseBodyRequestOrderAssets()
            self.assets = temp_model.from_map(m['Assets'])
        if m.get('BusiOperation') is not None:
            temp_model = GetLLBZTrafficDataResponseBodyRequestOrderBusiOperation()
            self.busi_operation = temp_model.from_map(m['BusiOperation'])
        if m.get('BusiOperator') is not None:
            self.busi_operator = m.get('BusiOperator')
        self.busi_price_list = []
        if m.get('BusiPriceList') is not None:
            for k in m.get('BusiPriceList'):
                temp_model = GetLLBZTrafficDataResponseBodyRequestOrderBusiPriceList()
                self.busi_price_list.append(temp_model.from_map(k))
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('Customer') is not None:
            temp_model = GetLLBZTrafficDataResponseBodyRequestOrderCustomer()
            self.customer = temp_model.from_map(m['Customer'])
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('ExtInfo') is not None:
            self.ext_info = m.get('ExtInfo')
        if m.get('IsAuth') is not None:
            self.is_auth = m.get('IsAuth')
        self.offer_list = []
        if m.get('OfferList') is not None:
            for k in m.get('OfferList'):
                temp_model = GetLLBZTrafficDataResponseBodyRequestOrderOfferList()
                self.offer_list.append(temp_model.from_map(k))
        if m.get('OpenCompletedTime') is not None:
            self.open_completed_time = m.get('OpenCompletedTime')
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('OrderNo') is not None:
            self.order_no = m.get('OrderNo')
        if m.get('OrderSerialId') is not None:
            self.order_serial_id = m.get('OrderSerialId')
        if m.get('OrderStatus') is not None:
            self.order_status = m.get('OrderStatus')
        if m.get('OrderTime') is not None:
            self.order_time = m.get('OrderTime')
        if m.get('OrderType') is not None:
            self.order_type = m.get('OrderType')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ParentOrderId') is not None:
            self.parent_order_id = m.get('ParentOrderId')
        self.product_list = []
        if m.get('ProductList') is not None:
            for k in m.get('ProductList'):
                temp_model = GetLLBZTrafficDataResponseBodyRequestOrderProductList()
                self.product_list.append(temp_model.from_map(k))
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        self.rule_list = []
        if m.get('RuleList') is not None:
            for k in m.get('RuleList'):
                temp_model = GetLLBZTrafficDataResponseBodyRequestOrderRuleList()
                self.rule_list.append(temp_model.from_map(k))
        return self


class GetLLBZTrafficDataResponseBodyRequest(TeaModel):
    def __init__(
        self,
        is_sync: bool = None,
        order: GetLLBZTrafficDataResponseBodyRequestOrder = None,
        serial_no: str = None,
    ):
        self.is_sync = is_sync
        self.order = order
        self.serial_no = serial_no

    def validate(self):
        if self.order:
            self.order.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_sync is not None:
            result['IsSync'] = self.is_sync
        if self.order is not None:
            result['Order'] = self.order.to_map()
        if self.serial_no is not None:
            result['SerialNo'] = self.serial_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IsSync') is not None:
            self.is_sync = m.get('IsSync')
        if m.get('Order') is not None:
            temp_model = GetLLBZTrafficDataResponseBodyRequestOrder()
            self.order = temp_model.from_map(m['Order'])
        if m.get('SerialNo') is not None:
            self.serial_no = m.get('SerialNo')
        return self


class GetLLBZTrafficDataResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        desc: str = None,
        model: GetLLBZTrafficDataResponseBodyModel = None,
        query_count: int = None,
        request: GetLLBZTrafficDataResponseBodyRequest = None,
        success: bool = None,
    ):
        self.code = code
        self.desc = desc
        self.model = model
        self.query_count = query_count
        self.request = request
        self.success = success

    def validate(self):
        if self.model:
            self.model.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.model is not None:
            result['Model'] = self.model.to_map()
        if self.query_count is not None:
            result['QueryCount'] = self.query_count
        if self.request is not None:
            result['Request'] = self.request.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Model') is not None:
            temp_model = GetLLBZTrafficDataResponseBodyModel()
            self.model = temp_model.from_map(m['Model'])
        if m.get('QueryCount') is not None:
            self.query_count = m.get('QueryCount')
        if m.get('Request') is not None:
            temp_model = GetLLBZTrafficDataResponseBodyRequest()
            self.request = temp_model.from_map(m['Request'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetLLBZTrafficDataResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetLLBZTrafficDataResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetLLBZTrafficDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetVtuneConfigRequestTagKeyValueModels(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetVtuneConfigRequest(TeaModel):
    def __init__(
        self,
        ak_proxy: str = None,
        ali_uid: int = None,
        api_name: str = None,
        app_key: str = None,
        caller_bid: str = None,
        caller_bid_login_email: str = None,
        caller_security_transport: bool = None,
        caller_type: str = None,
        caller_uid: int = None,
        caller_uid_login_email: str = None,
        channel: str = None,
        client_ip: str = None,
        enable: bool = None,
        epn_id: str = None,
        from_type: int = None,
        mfa_present: bool = None,
        operator: str = None,
        owner_account: str = None,
        owner_id: int = None,
        owner_id_login_email: str = None,
        prod_code: str = None,
        proxy_caller_ip: str = None,
        proxy_caller_security_transport: bool = None,
        proxy_id: str = None,
        proxy_trust_transport_info: bool = None,
        request_content: str = None,
        request_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        security_token: str = None,
        sms_resource_owner_id: int = None,
        tag_key_1: str = None,
        tag_key_2: str = None,
        tag_key_3: str = None,
        tag_key_4: str = None,
        tag_key_5: str = None,
        tag_key_value_models: List[GetVtuneConfigRequestTagKeyValueModels] = None,
        tag_value_1: str = None,
        tag_value_2: str = None,
        tag_value_3: str = None,
        tag_value_4: str = None,
        tag_value_5: str = None,
        token: str = None,
        version: str = None,
    ):
        self.ak_proxy = ak_proxy
        self.ali_uid = ali_uid
        self.api_name = api_name
        self.app_key = app_key
        self.caller_bid = caller_bid
        self.caller_bid_login_email = caller_bid_login_email
        self.caller_security_transport = caller_security_transport
        self.caller_type = caller_type
        self.caller_uid = caller_uid
        self.caller_uid_login_email = caller_uid_login_email
        self.channel = channel
        self.client_ip = client_ip
        self.enable = enable
        self.epn_id = epn_id
        self.from_type = from_type
        self.mfa_present = mfa_present
        self.operator = operator
        self.owner_account = owner_account
        self.owner_id = owner_id
        self.owner_id_login_email = owner_id_login_email
        self.prod_code = prod_code
        self.proxy_caller_ip = proxy_caller_ip
        self.proxy_caller_security_transport = proxy_caller_security_transport
        self.proxy_id = proxy_id
        self.proxy_trust_transport_info = proxy_trust_transport_info
        self.request_content = request_content
        self.request_id = request_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.security_token = security_token
        self.sms_resource_owner_id = sms_resource_owner_id
        self.tag_key_1 = tag_key_1
        self.tag_key_2 = tag_key_2
        self.tag_key_3 = tag_key_3
        self.tag_key_4 = tag_key_4
        self.tag_key_5 = tag_key_5
        self.tag_key_value_models = tag_key_value_models
        self.tag_value_1 = tag_value_1
        self.tag_value_2 = tag_value_2
        self.tag_value_3 = tag_value_3
        self.tag_value_4 = tag_value_4
        self.tag_value_5 = tag_value_5
        self.token = token
        self.version = version

    def validate(self):
        if self.tag_key_value_models:
            for k in self.tag_key_value_models:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ak_proxy is not None:
            result['AkProxy'] = self.ak_proxy
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.caller_bid is not None:
            result['CallerBid'] = self.caller_bid
        if self.caller_bid_login_email is not None:
            result['CallerBidLoginEmail'] = self.caller_bid_login_email
        if self.caller_security_transport is not None:
            result['CallerSecurityTransport'] = self.caller_security_transport
        if self.caller_type is not None:
            result['CallerType'] = self.caller_type
        if self.caller_uid is not None:
            result['CallerUid'] = self.caller_uid
        if self.caller_uid_login_email is not None:
            result['CallerUidLoginEmail'] = self.caller_uid_login_email
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.client_ip is not None:
            result['ClientIP'] = self.client_ip
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.epn_id is not None:
            result['EpnId'] = self.epn_id
        if self.from_type is not None:
            result['FromType'] = self.from_type
        if self.mfa_present is not None:
            result['MfaPresent'] = self.mfa_present
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.owner_account is not None:
            result['OwnerAccount'] = self.owner_account
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.owner_id_login_email is not None:
            result['OwnerIdLoginEmail'] = self.owner_id_login_email
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.proxy_caller_ip is not None:
            result['ProxyCallerIp'] = self.proxy_caller_ip
        if self.proxy_caller_security_transport is not None:
            result['ProxyCallerSecurityTransport'] = self.proxy_caller_security_transport
        if self.proxy_id is not None:
            result['ProxyId'] = self.proxy_id
        if self.proxy_trust_transport_info is not None:
            result['ProxyTrustTransportInfo'] = self.proxy_trust_transport_info
        if self.request_content is not None:
            result['RequestContent'] = self.request_content
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        if self.sms_resource_owner_id is not None:
            result['SmsResourceOwnerId'] = self.sms_resource_owner_id
        if self.tag_key_1 is not None:
            result['TagKey1'] = self.tag_key_1
        if self.tag_key_2 is not None:
            result['TagKey2'] = self.tag_key_2
        if self.tag_key_3 is not None:
            result['TagKey3'] = self.tag_key_3
        if self.tag_key_4 is not None:
            result['TagKey4'] = self.tag_key_4
        if self.tag_key_5 is not None:
            result['TagKey5'] = self.tag_key_5
        result['TagKeyValueModels'] = []
        if self.tag_key_value_models is not None:
            for k in self.tag_key_value_models:
                result['TagKeyValueModels'].append(k.to_map() if k else None)
        if self.tag_value_1 is not None:
            result['TagValue1'] = self.tag_value_1
        if self.tag_value_2 is not None:
            result['TagValue2'] = self.tag_value_2
        if self.tag_value_3 is not None:
            result['TagValue3'] = self.tag_value_3
        if self.tag_value_4 is not None:
            result['TagValue4'] = self.tag_value_4
        if self.tag_value_5 is not None:
            result['TagValue5'] = self.tag_value_5
        if self.token is not None:
            result['Token'] = self.token
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AkProxy') is not None:
            self.ak_proxy = m.get('AkProxy')
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('CallerBid') is not None:
            self.caller_bid = m.get('CallerBid')
        if m.get('CallerBidLoginEmail') is not None:
            self.caller_bid_login_email = m.get('CallerBidLoginEmail')
        if m.get('CallerSecurityTransport') is not None:
            self.caller_security_transport = m.get('CallerSecurityTransport')
        if m.get('CallerType') is not None:
            self.caller_type = m.get('CallerType')
        if m.get('CallerUid') is not None:
            self.caller_uid = m.get('CallerUid')
        if m.get('CallerUidLoginEmail') is not None:
            self.caller_uid_login_email = m.get('CallerUidLoginEmail')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ClientIP') is not None:
            self.client_ip = m.get('ClientIP')
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('EpnId') is not None:
            self.epn_id = m.get('EpnId')
        if m.get('FromType') is not None:
            self.from_type = m.get('FromType')
        if m.get('MfaPresent') is not None:
            self.mfa_present = m.get('MfaPresent')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('OwnerAccount') is not None:
            self.owner_account = m.get('OwnerAccount')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('OwnerIdLoginEmail') is not None:
            self.owner_id_login_email = m.get('OwnerIdLoginEmail')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProxyCallerIp') is not None:
            self.proxy_caller_ip = m.get('ProxyCallerIp')
        if m.get('ProxyCallerSecurityTransport') is not None:
            self.proxy_caller_security_transport = m.get('ProxyCallerSecurityTransport')
        if m.get('ProxyId') is not None:
            self.proxy_id = m.get('ProxyId')
        if m.get('ProxyTrustTransportInfo') is not None:
            self.proxy_trust_transport_info = m.get('ProxyTrustTransportInfo')
        if m.get('RequestContent') is not None:
            self.request_content = m.get('RequestContent')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        if m.get('SmsResourceOwnerId') is not None:
            self.sms_resource_owner_id = m.get('SmsResourceOwnerId')
        if m.get('TagKey1') is not None:
            self.tag_key_1 = m.get('TagKey1')
        if m.get('TagKey2') is not None:
            self.tag_key_2 = m.get('TagKey2')
        if m.get('TagKey3') is not None:
            self.tag_key_3 = m.get('TagKey3')
        if m.get('TagKey4') is not None:
            self.tag_key_4 = m.get('TagKey4')
        if m.get('TagKey5') is not None:
            self.tag_key_5 = m.get('TagKey5')
        self.tag_key_value_models = []
        if m.get('TagKeyValueModels') is not None:
            for k in m.get('TagKeyValueModels'):
                temp_model = GetVtuneConfigRequestTagKeyValueModels()
                self.tag_key_value_models.append(temp_model.from_map(k))
        if m.get('TagValue1') is not None:
            self.tag_value_1 = m.get('TagValue1')
        if m.get('TagValue2') is not None:
            self.tag_value_2 = m.get('TagValue2')
        if m.get('TagValue3') is not None:
            self.tag_value_3 = m.get('TagValue3')
        if m.get('TagValue4') is not None:
            self.tag_value_4 = m.get('TagValue4')
        if m.get('TagValue5') is not None:
            self.tag_value_5 = m.get('TagValue5')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class GetVtuneConfigResponseBodyContentTunnels(TeaModel):
    def __init__(
        self,
        bgp_ip: str = None,
        cidrs: List[str] = None,
        gw_ip: str = None,
        psk: str = None,
        tune_id: str = None,
    ):
        self.bgp_ip = bgp_ip
        self.cidrs = cidrs
        self.gw_ip = gw_ip
        self.psk = psk
        self.tune_id = tune_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bgp_ip is not None:
            result['BgpIp'] = self.bgp_ip
        if self.cidrs is not None:
            result['Cidrs'] = self.cidrs
        if self.gw_ip is not None:
            result['GwIp'] = self.gw_ip
        if self.psk is not None:
            result['Psk'] = self.psk
        if self.tune_id is not None:
            result['TuneId'] = self.tune_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BgpIp') is not None:
            self.bgp_ip = m.get('BgpIp')
        if m.get('Cidrs') is not None:
            self.cidrs = m.get('Cidrs')
        if m.get('GwIp') is not None:
            self.gw_ip = m.get('GwIp')
        if m.get('Psk') is not None:
            self.psk = m.get('Psk')
        if m.get('TuneId') is not None:
            self.tune_id = m.get('TuneId')
        return self


class GetVtuneConfigResponseBodyContent(TeaModel):
    def __init__(
        self,
        fqdn: str = None,
        tunnels: List[GetVtuneConfigResponseBodyContentTunnels] = None,
    ):
        self.fqdn = fqdn
        self.tunnels = tunnels

    def validate(self):
        if self.tunnels:
            for k in self.tunnels:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fqdn is not None:
            result['Fqdn'] = self.fqdn
        result['Tunnels'] = []
        if self.tunnels is not None:
            for k in self.tunnels:
                result['Tunnels'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Fqdn') is not None:
            self.fqdn = m.get('Fqdn')
        self.tunnels = []
        if m.get('Tunnels') is not None:
            for k in m.get('Tunnels'):
                temp_model = GetVtuneConfigResponseBodyContentTunnels()
                self.tunnels.append(temp_model.from_map(k))
        return self


class GetVtuneConfigResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        content: GetVtuneConfigResponseBodyContent = None,
        desc: str = None,
        description: str = None,
        request_id: str = None,
        ret_code: int = None,
        success: bool = None,
    ):
        self.code = code
        self.content = content
        self.desc = desc
        self.description = description
        self.request_id = request_id
        self.ret_code = ret_code
        self.success = success

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.content is not None:
            result['Content'] = self.content.to_map()
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.description is not None:
            result['Description'] = self.description
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.ret_code is not None:
            result['RetCode'] = self.ret_code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Content') is not None:
            temp_model = GetVtuneConfigResponseBodyContent()
            self.content = temp_model.from_map(m['Content'])
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RetCode') is not None:
            self.ret_code = m.get('RetCode')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetVtuneConfigResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetVtuneConfigResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetVtuneConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetVtuneInstanceRequestTagKeyValueModels(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetVtuneInstanceRequest(TeaModel):
    def __init__(
        self,
        ak_proxy: str = None,
        ali_uid: int = None,
        api_name: str = None,
        app_key: str = None,
        caller_bid: str = None,
        caller_bid_login_email: str = None,
        caller_security_transport: bool = None,
        caller_type: str = None,
        caller_uid: int = None,
        caller_uid_login_email: str = None,
        channel: str = None,
        client_ip: str = None,
        enable: bool = None,
        from_type: int = None,
        mfa_present: bool = None,
        operator: str = None,
        owner_account: str = None,
        owner_id: int = None,
        owner_id_login_email: str = None,
        prod_code: str = None,
        proxy_caller_ip: str = None,
        proxy_caller_security_transport: bool = None,
        proxy_id: str = None,
        proxy_trust_transport_info: bool = None,
        request_content: str = None,
        request_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        security_token: str = None,
        sms_resource_owner_id: int = None,
        tag_key_1: str = None,
        tag_key_2: str = None,
        tag_key_3: str = None,
        tag_key_4: str = None,
        tag_key_5: str = None,
        tag_key_value_models: List[GetVtuneInstanceRequestTagKeyValueModels] = None,
        tag_value_1: str = None,
        tag_value_2: str = None,
        tag_value_3: str = None,
        tag_value_4: str = None,
        tag_value_5: str = None,
        token: str = None,
        version: str = None,
        vtune_id: str = None,
    ):
        self.ak_proxy = ak_proxy
        self.ali_uid = ali_uid
        self.api_name = api_name
        self.app_key = app_key
        self.caller_bid = caller_bid
        self.caller_bid_login_email = caller_bid_login_email
        self.caller_security_transport = caller_security_transport
        self.caller_type = caller_type
        self.caller_uid = caller_uid
        self.caller_uid_login_email = caller_uid_login_email
        self.channel = channel
        self.client_ip = client_ip
        self.enable = enable
        self.from_type = from_type
        self.mfa_present = mfa_present
        self.operator = operator
        self.owner_account = owner_account
        self.owner_id = owner_id
        self.owner_id_login_email = owner_id_login_email
        self.prod_code = prod_code
        self.proxy_caller_ip = proxy_caller_ip
        self.proxy_caller_security_transport = proxy_caller_security_transport
        self.proxy_id = proxy_id
        self.proxy_trust_transport_info = proxy_trust_transport_info
        self.request_content = request_content
        self.request_id = request_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.security_token = security_token
        self.sms_resource_owner_id = sms_resource_owner_id
        self.tag_key_1 = tag_key_1
        self.tag_key_2 = tag_key_2
        self.tag_key_3 = tag_key_3
        self.tag_key_4 = tag_key_4
        self.tag_key_5 = tag_key_5
        self.tag_key_value_models = tag_key_value_models
        self.tag_value_1 = tag_value_1
        self.tag_value_2 = tag_value_2
        self.tag_value_3 = tag_value_3
        self.tag_value_4 = tag_value_4
        self.tag_value_5 = tag_value_5
        self.token = token
        self.version = version
        self.vtune_id = vtune_id

    def validate(self):
        if self.tag_key_value_models:
            for k in self.tag_key_value_models:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ak_proxy is not None:
            result['AkProxy'] = self.ak_proxy
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.caller_bid is not None:
            result['CallerBid'] = self.caller_bid
        if self.caller_bid_login_email is not None:
            result['CallerBidLoginEmail'] = self.caller_bid_login_email
        if self.caller_security_transport is not None:
            result['CallerSecurityTransport'] = self.caller_security_transport
        if self.caller_type is not None:
            result['CallerType'] = self.caller_type
        if self.caller_uid is not None:
            result['CallerUid'] = self.caller_uid
        if self.caller_uid_login_email is not None:
            result['CallerUidLoginEmail'] = self.caller_uid_login_email
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.client_ip is not None:
            result['ClientIP'] = self.client_ip
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.from_type is not None:
            result['FromType'] = self.from_type
        if self.mfa_present is not None:
            result['MfaPresent'] = self.mfa_present
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.owner_account is not None:
            result['OwnerAccount'] = self.owner_account
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.owner_id_login_email is not None:
            result['OwnerIdLoginEmail'] = self.owner_id_login_email
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.proxy_caller_ip is not None:
            result['ProxyCallerIp'] = self.proxy_caller_ip
        if self.proxy_caller_security_transport is not None:
            result['ProxyCallerSecurityTransport'] = self.proxy_caller_security_transport
        if self.proxy_id is not None:
            result['ProxyId'] = self.proxy_id
        if self.proxy_trust_transport_info is not None:
            result['ProxyTrustTransportInfo'] = self.proxy_trust_transport_info
        if self.request_content is not None:
            result['RequestContent'] = self.request_content
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        if self.sms_resource_owner_id is not None:
            result['SmsResourceOwnerId'] = self.sms_resource_owner_id
        if self.tag_key_1 is not None:
            result['TagKey1'] = self.tag_key_1
        if self.tag_key_2 is not None:
            result['TagKey2'] = self.tag_key_2
        if self.tag_key_3 is not None:
            result['TagKey3'] = self.tag_key_3
        if self.tag_key_4 is not None:
            result['TagKey4'] = self.tag_key_4
        if self.tag_key_5 is not None:
            result['TagKey5'] = self.tag_key_5
        result['TagKeyValueModels'] = []
        if self.tag_key_value_models is not None:
            for k in self.tag_key_value_models:
                result['TagKeyValueModels'].append(k.to_map() if k else None)
        if self.tag_value_1 is not None:
            result['TagValue1'] = self.tag_value_1
        if self.tag_value_2 is not None:
            result['TagValue2'] = self.tag_value_2
        if self.tag_value_3 is not None:
            result['TagValue3'] = self.tag_value_3
        if self.tag_value_4 is not None:
            result['TagValue4'] = self.tag_value_4
        if self.tag_value_5 is not None:
            result['TagValue5'] = self.tag_value_5
        if self.token is not None:
            result['Token'] = self.token
        if self.version is not None:
            result['Version'] = self.version
        if self.vtune_id is not None:
            result['VtuneId'] = self.vtune_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AkProxy') is not None:
            self.ak_proxy = m.get('AkProxy')
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('CallerBid') is not None:
            self.caller_bid = m.get('CallerBid')
        if m.get('CallerBidLoginEmail') is not None:
            self.caller_bid_login_email = m.get('CallerBidLoginEmail')
        if m.get('CallerSecurityTransport') is not None:
            self.caller_security_transport = m.get('CallerSecurityTransport')
        if m.get('CallerType') is not None:
            self.caller_type = m.get('CallerType')
        if m.get('CallerUid') is not None:
            self.caller_uid = m.get('CallerUid')
        if m.get('CallerUidLoginEmail') is not None:
            self.caller_uid_login_email = m.get('CallerUidLoginEmail')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ClientIP') is not None:
            self.client_ip = m.get('ClientIP')
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('FromType') is not None:
            self.from_type = m.get('FromType')
        if m.get('MfaPresent') is not None:
            self.mfa_present = m.get('MfaPresent')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('OwnerAccount') is not None:
            self.owner_account = m.get('OwnerAccount')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('OwnerIdLoginEmail') is not None:
            self.owner_id_login_email = m.get('OwnerIdLoginEmail')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProxyCallerIp') is not None:
            self.proxy_caller_ip = m.get('ProxyCallerIp')
        if m.get('ProxyCallerSecurityTransport') is not None:
            self.proxy_caller_security_transport = m.get('ProxyCallerSecurityTransport')
        if m.get('ProxyId') is not None:
            self.proxy_id = m.get('ProxyId')
        if m.get('ProxyTrustTransportInfo') is not None:
            self.proxy_trust_transport_info = m.get('ProxyTrustTransportInfo')
        if m.get('RequestContent') is not None:
            self.request_content = m.get('RequestContent')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        if m.get('SmsResourceOwnerId') is not None:
            self.sms_resource_owner_id = m.get('SmsResourceOwnerId')
        if m.get('TagKey1') is not None:
            self.tag_key_1 = m.get('TagKey1')
        if m.get('TagKey2') is not None:
            self.tag_key_2 = m.get('TagKey2')
        if m.get('TagKey3') is not None:
            self.tag_key_3 = m.get('TagKey3')
        if m.get('TagKey4') is not None:
            self.tag_key_4 = m.get('TagKey4')
        if m.get('TagKey5') is not None:
            self.tag_key_5 = m.get('TagKey5')
        self.tag_key_value_models = []
        if m.get('TagKeyValueModels') is not None:
            for k in m.get('TagKeyValueModels'):
                temp_model = GetVtuneInstanceRequestTagKeyValueModels()
                self.tag_key_value_models.append(temp_model.from_map(k))
        if m.get('TagValue1') is not None:
            self.tag_value_1 = m.get('TagValue1')
        if m.get('TagValue2') is not None:
            self.tag_value_2 = m.get('TagValue2')
        if m.get('TagValue3') is not None:
            self.tag_value_3 = m.get('TagValue3')
        if m.get('TagValue4') is not None:
            self.tag_value_4 = m.get('TagValue4')
        if m.get('TagValue5') is not None:
            self.tag_value_5 = m.get('TagValue5')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        if m.get('VtuneId') is not None:
            self.vtune_id = m.get('VtuneId')
        return self


class GetVtuneInstanceResponseBodyContentCidrInfo(TeaModel):
    def __init__(
        self,
        cidr: str = None,
        priority: int = None,
    ):
        self.cidr = cidr
        self.priority = priority

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cidr is not None:
            result['Cidr'] = self.cidr
        if self.priority is not None:
            result['Priority'] = self.priority
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Cidr') is not None:
            self.cidr = m.get('Cidr')
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        return self


class GetVtuneInstanceResponseBodyContent(TeaModel):
    def __init__(
        self,
        bgp_ip: str = None,
        cidr_info: List[GetVtuneInstanceResponseBodyContentCidrInfo] = None,
        enable_bgp: bool = None,
        limit_rx: int = None,
        limit_tx: int = None,
        priority: int = None,
        vtune_id: str = None,
    ):
        self.bgp_ip = bgp_ip
        self.cidr_info = cidr_info
        self.enable_bgp = enable_bgp
        self.limit_rx = limit_rx
        self.limit_tx = limit_tx
        self.priority = priority
        self.vtune_id = vtune_id

    def validate(self):
        if self.cidr_info:
            for k in self.cidr_info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bgp_ip is not None:
            result['BgpIp'] = self.bgp_ip
        result['CidrInfo'] = []
        if self.cidr_info is not None:
            for k in self.cidr_info:
                result['CidrInfo'].append(k.to_map() if k else None)
        if self.enable_bgp is not None:
            result['EnableBgp'] = self.enable_bgp
        if self.limit_rx is not None:
            result['LimitRx'] = self.limit_rx
        if self.limit_tx is not None:
            result['LimitTx'] = self.limit_tx
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.vtune_id is not None:
            result['VtuneId'] = self.vtune_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BgpIp') is not None:
            self.bgp_ip = m.get('BgpIp')
        self.cidr_info = []
        if m.get('CidrInfo') is not None:
            for k in m.get('CidrInfo'):
                temp_model = GetVtuneInstanceResponseBodyContentCidrInfo()
                self.cidr_info.append(temp_model.from_map(k))
        if m.get('EnableBgp') is not None:
            self.enable_bgp = m.get('EnableBgp')
        if m.get('LimitRx') is not None:
            self.limit_rx = m.get('LimitRx')
        if m.get('LimitTx') is not None:
            self.limit_tx = m.get('LimitTx')
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('VtuneId') is not None:
            self.vtune_id = m.get('VtuneId')
        return self


class GetVtuneInstanceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        content: GetVtuneInstanceResponseBodyContent = None,
        desc: str = None,
        description: str = None,
        request_id: str = None,
        ret_code: int = None,
        success: bool = None,
    ):
        self.code = code
        self.content = content
        self.desc = desc
        self.description = description
        self.request_id = request_id
        self.ret_code = ret_code
        self.success = success

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.content is not None:
            result['Content'] = self.content.to_map()
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.description is not None:
            result['Description'] = self.description
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.ret_code is not None:
            result['RetCode'] = self.ret_code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Content') is not None:
            temp_model = GetVtuneInstanceResponseBodyContent()
            self.content = temp_model.from_map(m['Content'])
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RetCode') is not None:
            self.ret_code = m.get('RetCode')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetVtuneInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetVtuneInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetVtuneInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListEBIRequestTagKeyValueModels(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListEBIRequest(TeaModel):
    def __init__(
        self,
        ak_proxy: str = None,
        api_name: str = None,
        app_key: str = None,
        caller_bid: str = None,
        caller_bid_login_email: str = None,
        caller_security_transport: bool = None,
        caller_type: str = None,
        caller_uid: int = None,
        caller_uid_login_email: str = None,
        channel: str = None,
        client_ip: str = None,
        enable: bool = None,
        from_type: int = None,
        mfa_present: bool = None,
        operator: str = None,
        owner_account: str = None,
        owner_id: int = None,
        owner_id_login_email: str = None,
        prod_code: str = None,
        proxy_caller_ip: str = None,
        proxy_caller_security_transport: bool = None,
        proxy_id: str = None,
        proxy_trust_transport_info: bool = None,
        request_content: str = None,
        request_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        security_token: str = None,
        sms_resource_owner_id: int = None,
        tag_key_1: str = None,
        tag_key_2: str = None,
        tag_key_3: str = None,
        tag_key_4: str = None,
        tag_key_5: str = None,
        tag_key_value_models: List[ListEBIRequestTagKeyValueModels] = None,
        tag_value_1: str = None,
        tag_value_2: str = None,
        tag_value_3: str = None,
        tag_value_4: str = None,
        tag_value_5: str = None,
        token: str = None,
        version: str = None,
    ):
        self.ak_proxy = ak_proxy
        self.api_name = api_name
        self.app_key = app_key
        self.caller_bid = caller_bid
        self.caller_bid_login_email = caller_bid_login_email
        self.caller_security_transport = caller_security_transport
        self.caller_type = caller_type
        self.caller_uid = caller_uid
        self.caller_uid_login_email = caller_uid_login_email
        self.channel = channel
        self.client_ip = client_ip
        self.enable = enable
        self.from_type = from_type
        self.mfa_present = mfa_present
        self.operator = operator
        self.owner_account = owner_account
        self.owner_id = owner_id
        self.owner_id_login_email = owner_id_login_email
        self.prod_code = prod_code
        self.proxy_caller_ip = proxy_caller_ip
        self.proxy_caller_security_transport = proxy_caller_security_transport
        self.proxy_id = proxy_id
        self.proxy_trust_transport_info = proxy_trust_transport_info
        self.request_content = request_content
        self.request_id = request_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.security_token = security_token
        self.sms_resource_owner_id = sms_resource_owner_id
        self.tag_key_1 = tag_key_1
        self.tag_key_2 = tag_key_2
        self.tag_key_3 = tag_key_3
        self.tag_key_4 = tag_key_4
        self.tag_key_5 = tag_key_5
        self.tag_key_value_models = tag_key_value_models
        self.tag_value_1 = tag_value_1
        self.tag_value_2 = tag_value_2
        self.tag_value_3 = tag_value_3
        self.tag_value_4 = tag_value_4
        self.tag_value_5 = tag_value_5
        self.token = token
        self.version = version

    def validate(self):
        if self.tag_key_value_models:
            for k in self.tag_key_value_models:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ak_proxy is not None:
            result['AkProxy'] = self.ak_proxy
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.caller_bid is not None:
            result['CallerBid'] = self.caller_bid
        if self.caller_bid_login_email is not None:
            result['CallerBidLoginEmail'] = self.caller_bid_login_email
        if self.caller_security_transport is not None:
            result['CallerSecurityTransport'] = self.caller_security_transport
        if self.caller_type is not None:
            result['CallerType'] = self.caller_type
        if self.caller_uid is not None:
            result['CallerUid'] = self.caller_uid
        if self.caller_uid_login_email is not None:
            result['CallerUidLoginEmail'] = self.caller_uid_login_email
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.client_ip is not None:
            result['ClientIP'] = self.client_ip
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.from_type is not None:
            result['FromType'] = self.from_type
        if self.mfa_present is not None:
            result['MfaPresent'] = self.mfa_present
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.owner_account is not None:
            result['OwnerAccount'] = self.owner_account
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.owner_id_login_email is not None:
            result['OwnerIdLoginEmail'] = self.owner_id_login_email
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.proxy_caller_ip is not None:
            result['ProxyCallerIp'] = self.proxy_caller_ip
        if self.proxy_caller_security_transport is not None:
            result['ProxyCallerSecurityTransport'] = self.proxy_caller_security_transport
        if self.proxy_id is not None:
            result['ProxyId'] = self.proxy_id
        if self.proxy_trust_transport_info is not None:
            result['ProxyTrustTransportInfo'] = self.proxy_trust_transport_info
        if self.request_content is not None:
            result['RequestContent'] = self.request_content
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        if self.sms_resource_owner_id is not None:
            result['SmsResourceOwnerId'] = self.sms_resource_owner_id
        if self.tag_key_1 is not None:
            result['TagKey1'] = self.tag_key_1
        if self.tag_key_2 is not None:
            result['TagKey2'] = self.tag_key_2
        if self.tag_key_3 is not None:
            result['TagKey3'] = self.tag_key_3
        if self.tag_key_4 is not None:
            result['TagKey4'] = self.tag_key_4
        if self.tag_key_5 is not None:
            result['TagKey5'] = self.tag_key_5
        result['TagKeyValueModels'] = []
        if self.tag_key_value_models is not None:
            for k in self.tag_key_value_models:
                result['TagKeyValueModels'].append(k.to_map() if k else None)
        if self.tag_value_1 is not None:
            result['TagValue1'] = self.tag_value_1
        if self.tag_value_2 is not None:
            result['TagValue2'] = self.tag_value_2
        if self.tag_value_3 is not None:
            result['TagValue3'] = self.tag_value_3
        if self.tag_value_4 is not None:
            result['TagValue4'] = self.tag_value_4
        if self.tag_value_5 is not None:
            result['TagValue5'] = self.tag_value_5
        if self.token is not None:
            result['Token'] = self.token
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AkProxy') is not None:
            self.ak_proxy = m.get('AkProxy')
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('CallerBid') is not None:
            self.caller_bid = m.get('CallerBid')
        if m.get('CallerBidLoginEmail') is not None:
            self.caller_bid_login_email = m.get('CallerBidLoginEmail')
        if m.get('CallerSecurityTransport') is not None:
            self.caller_security_transport = m.get('CallerSecurityTransport')
        if m.get('CallerType') is not None:
            self.caller_type = m.get('CallerType')
        if m.get('CallerUid') is not None:
            self.caller_uid = m.get('CallerUid')
        if m.get('CallerUidLoginEmail') is not None:
            self.caller_uid_login_email = m.get('CallerUidLoginEmail')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ClientIP') is not None:
            self.client_ip = m.get('ClientIP')
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('FromType') is not None:
            self.from_type = m.get('FromType')
        if m.get('MfaPresent') is not None:
            self.mfa_present = m.get('MfaPresent')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('OwnerAccount') is not None:
            self.owner_account = m.get('OwnerAccount')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('OwnerIdLoginEmail') is not None:
            self.owner_id_login_email = m.get('OwnerIdLoginEmail')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProxyCallerIp') is not None:
            self.proxy_caller_ip = m.get('ProxyCallerIp')
        if m.get('ProxyCallerSecurityTransport') is not None:
            self.proxy_caller_security_transport = m.get('ProxyCallerSecurityTransport')
        if m.get('ProxyId') is not None:
            self.proxy_id = m.get('ProxyId')
        if m.get('ProxyTrustTransportInfo') is not None:
            self.proxy_trust_transport_info = m.get('ProxyTrustTransportInfo')
        if m.get('RequestContent') is not None:
            self.request_content = m.get('RequestContent')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        if m.get('SmsResourceOwnerId') is not None:
            self.sms_resource_owner_id = m.get('SmsResourceOwnerId')
        if m.get('TagKey1') is not None:
            self.tag_key_1 = m.get('TagKey1')
        if m.get('TagKey2') is not None:
            self.tag_key_2 = m.get('TagKey2')
        if m.get('TagKey3') is not None:
            self.tag_key_3 = m.get('TagKey3')
        if m.get('TagKey4') is not None:
            self.tag_key_4 = m.get('TagKey4')
        if m.get('TagKey5') is not None:
            self.tag_key_5 = m.get('TagKey5')
        self.tag_key_value_models = []
        if m.get('TagKeyValueModels') is not None:
            for k in m.get('TagKeyValueModels'):
                temp_model = ListEBIRequestTagKeyValueModels()
                self.tag_key_value_models.append(temp_model.from_map(k))
        if m.get('TagValue1') is not None:
            self.tag_value_1 = m.get('TagValue1')
        if m.get('TagValue2') is not None:
            self.tag_value_2 = m.get('TagValue2')
        if m.get('TagValue3') is not None:
            self.tag_value_3 = m.get('TagValue3')
        if m.get('TagValue4') is not None:
            self.tag_value_4 = m.get('TagValue4')
        if m.get('TagValue5') is not None:
            self.tag_value_5 = m.get('TagValue5')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class ListEBIResponseBodyModelContentDataIpInfo(TeaModel):
    def __init__(
        self,
        ip: str = None,
        vlan: int = None,
    ):
        self.ip = ip
        self.vlan = vlan

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.vlan is not None:
            result['Vlan'] = self.vlan
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('Vlan') is not None:
            self.vlan = m.get('Vlan')
        return self


class ListEBIResponseBodyModelContentData(TeaModel):
    def __init__(
        self,
        ali_uid: int = None,
        ebi_id: str = None,
        exp_info: str = None,
        gateway: str = None,
        ip_info: List[ListEBIResponseBodyModelContentDataIpInfo] = None,
        network_id: str = None,
        region_id: str = None,
        status: str = None,
    ):
        self.ali_uid = ali_uid
        self.ebi_id = ebi_id
        self.exp_info = exp_info
        self.gateway = gateway
        self.ip_info = ip_info
        self.network_id = network_id
        self.region_id = region_id
        self.status = status

    def validate(self):
        if self.ip_info:
            for k in self.ip_info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.ebi_id is not None:
            result['EbiId'] = self.ebi_id
        if self.exp_info is not None:
            result['ExpInfo'] = self.exp_info
        if self.gateway is not None:
            result['Gateway'] = self.gateway
        result['IpInfo'] = []
        if self.ip_info is not None:
            for k in self.ip_info:
                result['IpInfo'].append(k.to_map() if k else None)
        if self.network_id is not None:
            result['NetworkId'] = self.network_id
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('EbiId') is not None:
            self.ebi_id = m.get('EbiId')
        if m.get('ExpInfo') is not None:
            self.exp_info = m.get('ExpInfo')
        if m.get('Gateway') is not None:
            self.gateway = m.get('Gateway')
        self.ip_info = []
        if m.get('IpInfo') is not None:
            for k in m.get('IpInfo'):
                temp_model = ListEBIResponseBodyModelContentDataIpInfo()
                self.ip_info.append(temp_model.from_map(k))
        if m.get('NetworkId') is not None:
            self.network_id = m.get('NetworkId')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class ListEBIResponseBodyModelContent(TeaModel):
    def __init__(
        self,
        data: List[ListEBIResponseBodyModelContentData] = None,
    ):
        self.data = data

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = ListEBIResponseBodyModelContentData()
                self.data.append(temp_model.from_map(k))
        return self


class ListEBIResponseBodyModel(TeaModel):
    def __init__(
        self,
        content: ListEBIResponseBodyModelContent = None,
        description: str = None,
        request_id: str = None,
        ret_code: int = None,
    ):
        self.content = content
        self.description = description
        self.request_id = request_id
        self.ret_code = ret_code

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content.to_map()
        if self.description is not None:
            result['Description'] = self.description
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.ret_code is not None:
            result['RetCode'] = self.ret_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Content') is not None:
            temp_model = ListEBIResponseBodyModelContent()
            self.content = temp_model.from_map(m['Content'])
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RetCode') is not None:
            self.ret_code = m.get('RetCode')
        return self


class ListEBIResponseBodyRequestOrderAccountCreditList(TeaModel):
    def __init__(
        self,
        account_id: int = None,
        account_name: str = None,
        credit_balance: int = None,
        cust_id: int = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        remarks: str = None,
    ):
        self.account_id = account_id
        self.account_name = account_name
        self.credit_balance = credit_balance
        self.cust_id = cust_id
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.remarks = remarks

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.account_name is not None:
            result['AccountName'] = self.account_name
        if self.credit_balance is not None:
            result['CreditBalance'] = self.credit_balance
        if self.cust_id is not None:
            result['CustId'] = self.cust_id
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('AccountName') is not None:
            self.account_name = m.get('AccountName')
        if m.get('CreditBalance') is not None:
            self.credit_balance = m.get('CreditBalance')
        if m.get('CustId') is not None:
            self.cust_id = m.get('CustId')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class ListEBIResponseBodyRequestOrderAccount(TeaModel):
    def __init__(
        self,
        acct_id: int = None,
        acct_name: str = None,
        acct_type: str = None,
        bill_type: int = None,
        control_type: int = None,
        credit_list: List[ListEBIResponseBodyRequestOrderAccountCreditList] = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        remarks: str = None,
    ):
        self.acct_id = acct_id
        self.acct_name = acct_name
        self.acct_type = acct_type
        self.bill_type = bill_type
        self.control_type = control_type
        self.credit_list = credit_list
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.remarks = remarks

    def validate(self):
        if self.credit_list:
            for k in self.credit_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.acct_id is not None:
            result['AcctId'] = self.acct_id
        if self.acct_name is not None:
            result['AcctName'] = self.acct_name
        if self.acct_type is not None:
            result['AcctType'] = self.acct_type
        if self.bill_type is not None:
            result['BillType'] = self.bill_type
        if self.control_type is not None:
            result['ControlType'] = self.control_type
        result['CreditList'] = []
        if self.credit_list is not None:
            for k in self.credit_list:
                result['CreditList'].append(k.to_map() if k else None)
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AcctId') is not None:
            self.acct_id = m.get('AcctId')
        if m.get('AcctName') is not None:
            self.acct_name = m.get('AcctName')
        if m.get('AcctType') is not None:
            self.acct_type = m.get('AcctType')
        if m.get('BillType') is not None:
            self.bill_type = m.get('BillType')
        if m.get('ControlType') is not None:
            self.control_type = m.get('ControlType')
        self.credit_list = []
        if m.get('CreditList') is not None:
            for k in m.get('CreditList'):
                temp_model = ListEBIResponseBodyRequestOrderAccountCreditList()
                self.credit_list.append(temp_model.from_map(k))
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class ListEBIResponseBodyRequestOrderAssetsAttributeList(TeaModel):
    def __init__(
        self,
        attr_group: str = None,
        attr_id: int = None,
        attr_name: str = None,
        attr_text: str = None,
        attr_value: str = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        mapping_code: str = None,
        old_attr_text: str = None,
        old_attr_value: str = None,
        options: int = None,
        remarks: str = None,
        value_expression: str = None,
    ):
        self.attr_group = attr_group
        self.attr_id = attr_id
        self.attr_name = attr_name
        self.attr_text = attr_text
        self.attr_value = attr_value
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.mapping_code = mapping_code
        self.old_attr_text = old_attr_text
        self.old_attr_value = old_attr_value
        self.options = options
        self.remarks = remarks
        self.value_expression = value_expression

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attr_group is not None:
            result['AttrGroup'] = self.attr_group
        if self.attr_id is not None:
            result['AttrId'] = self.attr_id
        if self.attr_name is not None:
            result['AttrName'] = self.attr_name
        if self.attr_text is not None:
            result['AttrText'] = self.attr_text
        if self.attr_value is not None:
            result['AttrValue'] = self.attr_value
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.mapping_code is not None:
            result['MappingCode'] = self.mapping_code
        if self.old_attr_text is not None:
            result['OldAttrText'] = self.old_attr_text
        if self.old_attr_value is not None:
            result['OldAttrValue'] = self.old_attr_value
        if self.options is not None:
            result['Options'] = self.options
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.value_expression is not None:
            result['ValueExpression'] = self.value_expression
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AttrGroup') is not None:
            self.attr_group = m.get('AttrGroup')
        if m.get('AttrId') is not None:
            self.attr_id = m.get('AttrId')
        if m.get('AttrName') is not None:
            self.attr_name = m.get('AttrName')
        if m.get('AttrText') is not None:
            self.attr_text = m.get('AttrText')
        if m.get('AttrValue') is not None:
            self.attr_value = m.get('AttrValue')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('MappingCode') is not None:
            self.mapping_code = m.get('MappingCode')
        if m.get('OldAttrText') is not None:
            self.old_attr_text = m.get('OldAttrText')
        if m.get('OldAttrValue') is not None:
            self.old_attr_value = m.get('OldAttrValue')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ValueExpression') is not None:
            self.value_expression = m.get('ValueExpression')
        return self


class ListEBIResponseBodyRequestOrderAssets(TeaModel):
    def __init__(
        self,
        active_time: str = None,
        assets_id: int = None,
        assets_name: str = None,
        assets_owner: str = None,
        assets_status: int = None,
        assets_tag: int = None,
        assets_type: int = None,
        attribute_list: List[ListEBIResponseBodyRequestOrderAssetsAttributeList] = None,
        bill_id: str = None,
        bill_source: str = None,
        channel_id: str = None,
        data_status: int = None,
        destroy_time: str = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        group_path: str = None,
        imsi: str = None,
        ins_status: int = None,
        os_status: str = None,
        os_time: str = None,
        owner_assets_id: int = None,
        password: str = None,
        pre_destroy_time: str = None,
        product_line_code: str = None,
        real_bill_number: str = None,
        remarks: str = None,
        res_code: str = None,
    ):
        self.active_time = active_time
        self.assets_id = assets_id
        self.assets_name = assets_name
        self.assets_owner = assets_owner
        self.assets_status = assets_status
        self.assets_tag = assets_tag
        self.assets_type = assets_type
        self.attribute_list = attribute_list
        self.bill_id = bill_id
        self.bill_source = bill_source
        self.channel_id = channel_id
        self.data_status = data_status
        self.destroy_time = destroy_time
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.group_path = group_path
        self.imsi = imsi
        self.ins_status = ins_status
        self.os_status = os_status
        self.os_time = os_time
        self.owner_assets_id = owner_assets_id
        self.password = password
        self.pre_destroy_time = pre_destroy_time
        self.product_line_code = product_line_code
        self.real_bill_number = real_bill_number
        self.remarks = remarks
        self.res_code = res_code

    def validate(self):
        if self.attribute_list:
            for k in self.attribute_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.active_time is not None:
            result['ActiveTime'] = self.active_time
        if self.assets_id is not None:
            result['AssetsId'] = self.assets_id
        if self.assets_name is not None:
            result['AssetsName'] = self.assets_name
        if self.assets_owner is not None:
            result['AssetsOwner'] = self.assets_owner
        if self.assets_status is not None:
            result['AssetsStatus'] = self.assets_status
        if self.assets_tag is not None:
            result['AssetsTag'] = self.assets_tag
        if self.assets_type is not None:
            result['AssetsType'] = self.assets_type
        result['AttributeList'] = []
        if self.attribute_list is not None:
            for k in self.attribute_list:
                result['AttributeList'].append(k.to_map() if k else None)
        if self.bill_id is not None:
            result['BillId'] = self.bill_id
        if self.bill_source is not None:
            result['BillSource'] = self.bill_source
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.destroy_time is not None:
            result['DestroyTime'] = self.destroy_time
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.group_path is not None:
            result['GroupPath'] = self.group_path
        if self.imsi is not None:
            result['Imsi'] = self.imsi
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.os_status is not None:
            result['OsStatus'] = self.os_status
        if self.os_time is not None:
            result['OsTime'] = self.os_time
        if self.owner_assets_id is not None:
            result['OwnerAssetsId'] = self.owner_assets_id
        if self.password is not None:
            result['Password'] = self.password
        if self.pre_destroy_time is not None:
            result['PreDestroyTime'] = self.pre_destroy_time
        if self.product_line_code is not None:
            result['ProductLineCode'] = self.product_line_code
        if self.real_bill_number is not None:
            result['RealBillNumber'] = self.real_bill_number
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.res_code is not None:
            result['ResCode'] = self.res_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ActiveTime') is not None:
            self.active_time = m.get('ActiveTime')
        if m.get('AssetsId') is not None:
            self.assets_id = m.get('AssetsId')
        if m.get('AssetsName') is not None:
            self.assets_name = m.get('AssetsName')
        if m.get('AssetsOwner') is not None:
            self.assets_owner = m.get('AssetsOwner')
        if m.get('AssetsStatus') is not None:
            self.assets_status = m.get('AssetsStatus')
        if m.get('AssetsTag') is not None:
            self.assets_tag = m.get('AssetsTag')
        if m.get('AssetsType') is not None:
            self.assets_type = m.get('AssetsType')
        self.attribute_list = []
        if m.get('AttributeList') is not None:
            for k in m.get('AttributeList'):
                temp_model = ListEBIResponseBodyRequestOrderAssetsAttributeList()
                self.attribute_list.append(temp_model.from_map(k))
        if m.get('BillId') is not None:
            self.bill_id = m.get('BillId')
        if m.get('BillSource') is not None:
            self.bill_source = m.get('BillSource')
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('DestroyTime') is not None:
            self.destroy_time = m.get('DestroyTime')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('GroupPath') is not None:
            self.group_path = m.get('GroupPath')
        if m.get('Imsi') is not None:
            self.imsi = m.get('Imsi')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('OsStatus') is not None:
            self.os_status = m.get('OsStatus')
        if m.get('OsTime') is not None:
            self.os_time = m.get('OsTime')
        if m.get('OwnerAssetsId') is not None:
            self.owner_assets_id = m.get('OwnerAssetsId')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('PreDestroyTime') is not None:
            self.pre_destroy_time = m.get('PreDestroyTime')
        if m.get('ProductLineCode') is not None:
            self.product_line_code = m.get('ProductLineCode')
        if m.get('RealBillNumber') is not None:
            self.real_bill_number = m.get('RealBillNumber')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ResCode') is not None:
            self.res_code = m.get('ResCode')
        return self


class ListEBIResponseBodyRequestOrderBusiOperation(TeaModel):
    def __init__(
        self,
        operation_code: str = None,
        operation_id: int = None,
        operation_name: str = None,
    ):
        self.operation_code = operation_code
        self.operation_id = operation_id
        self.operation_name = operation_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.operation_code is not None:
            result['OperationCode'] = self.operation_code
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.operation_name is not None:
            result['OperationName'] = self.operation_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OperationCode') is not None:
            self.operation_code = m.get('OperationCode')
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('OperationName') is not None:
            self.operation_name = m.get('OperationName')
        return self


class ListEBIResponseBodyRequestOrderBusiPriceListBusiPriceDetailList(TeaModel):
    def __init__(
        self,
        outer_order_no: str = None,
        paid_amount: int = None,
        payment_mode: str = None,
    ):
        self.outer_order_no = outer_order_no
        self.paid_amount = paid_amount
        self.payment_mode = payment_mode

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.outer_order_no is not None:
            result['OuterOrderNo'] = self.outer_order_no
        if self.paid_amount is not None:
            result['PaidAmount'] = self.paid_amount
        if self.payment_mode is not None:
            result['PaymentMode'] = self.payment_mode
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OuterOrderNo') is not None:
            self.outer_order_no = m.get('OuterOrderNo')
        if m.get('PaidAmount') is not None:
            self.paid_amount = m.get('PaidAmount')
        if m.get('PaymentMode') is not None:
            self.payment_mode = m.get('PaymentMode')
        return self


class ListEBIResponseBodyRequestOrderBusiPriceList(TeaModel):
    def __init__(
        self,
        alipay_order_no: str = None,
        busi_operation_id: int = None,
        busi_price_detail_list: List[ListEBIResponseBodyRequestOrderBusiPriceListBusiPriceDetailList] = None,
        offer_id: int = None,
        order_channel: str = None,
        outer_order_no: str = None,
        paid_amount: int = None,
        receivable_amount: int = None,
        subject_id: str = None,
    ):
        self.alipay_order_no = alipay_order_no
        self.busi_operation_id = busi_operation_id
        self.busi_price_detail_list = busi_price_detail_list
        self.offer_id = offer_id
        self.order_channel = order_channel
        self.outer_order_no = outer_order_no
        self.paid_amount = paid_amount
        self.receivable_amount = receivable_amount
        self.subject_id = subject_id

    def validate(self):
        if self.busi_price_detail_list:
            for k in self.busi_price_detail_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alipay_order_no is not None:
            result['AlipayOrderNo'] = self.alipay_order_no
        if self.busi_operation_id is not None:
            result['BusiOperationId'] = self.busi_operation_id
        result['BusiPriceDetailList'] = []
        if self.busi_price_detail_list is not None:
            for k in self.busi_price_detail_list:
                result['BusiPriceDetailList'].append(k.to_map() if k else None)
        if self.offer_id is not None:
            result['OfferId'] = self.offer_id
        if self.order_channel is not None:
            result['OrderChannel'] = self.order_channel
        if self.outer_order_no is not None:
            result['OuterOrderNo'] = self.outer_order_no
        if self.paid_amount is not None:
            result['PaidAmount'] = self.paid_amount
        if self.receivable_amount is not None:
            result['ReceivableAmount'] = self.receivable_amount
        if self.subject_id is not None:
            result['SubjectId'] = self.subject_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlipayOrderNo') is not None:
            self.alipay_order_no = m.get('AlipayOrderNo')
        if m.get('BusiOperationId') is not None:
            self.busi_operation_id = m.get('BusiOperationId')
        self.busi_price_detail_list = []
        if m.get('BusiPriceDetailList') is not None:
            for k in m.get('BusiPriceDetailList'):
                temp_model = ListEBIResponseBodyRequestOrderBusiPriceListBusiPriceDetailList()
                self.busi_price_detail_list.append(temp_model.from_map(k))
        if m.get('OfferId') is not None:
            self.offer_id = m.get('OfferId')
        if m.get('OrderChannel') is not None:
            self.order_channel = m.get('OrderChannel')
        if m.get('OuterOrderNo') is not None:
            self.outer_order_no = m.get('OuterOrderNo')
        if m.get('PaidAmount') is not None:
            self.paid_amount = m.get('PaidAmount')
        if m.get('ReceivableAmount') is not None:
            self.receivable_amount = m.get('ReceivableAmount')
        if m.get('SubjectId') is not None:
            self.subject_id = m.get('SubjectId')
        return self


class ListEBIResponseBodyRequestOrderCustomerContracts(TeaModel):
    def __init__(
        self,
        contact_address: str = None,
        contact_name: str = None,
        contact_phone: str = None,
        contact_type: int = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        remarks: str = None,
    ):
        self.contact_address = contact_address
        self.contact_name = contact_name
        self.contact_phone = contact_phone
        self.contact_type = contact_type
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.remarks = remarks

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_address is not None:
            result['ContactAddress'] = self.contact_address
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.contact_phone is not None:
            result['ContactPhone'] = self.contact_phone
        if self.contact_type is not None:
            result['ContactType'] = self.contact_type
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactAddress') is not None:
            self.contact_address = m.get('ContactAddress')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('ContactPhone') is not None:
            self.contact_phone = m.get('ContactPhone')
        if m.get('ContactType') is not None:
            self.contact_type = m.get('ContactType')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class ListEBIResponseBodyRequestOrderCustomer(TeaModel):
    def __init__(
        self,
        cert_address: str = None,
        cert_effdate: str = None,
        cert_expire: str = None,
        cert_no: str = None,
        cert_type: str = None,
        contracts: List[ListEBIResponseBodyRequestOrderCustomerContracts] = None,
        cust_id: int = None,
        cust_name: str = None,
        cust_tag: int = None,
        cust_type: str = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gender: int = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        outer_cust_no: str = None,
        remarks: str = None,
        user_bind_type: int = None,
        user_id: int = None,
        user_nick: str = None,
    ):
        self.cert_address = cert_address
        self.cert_effdate = cert_effdate
        self.cert_expire = cert_expire
        self.cert_no = cert_no
        self.cert_type = cert_type
        self.contracts = contracts
        self.cust_id = cust_id
        self.cust_name = cust_name
        self.cust_tag = cust_tag
        self.cust_type = cust_type
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gender = gender
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.outer_cust_no = outer_cust_no
        self.remarks = remarks
        self.user_bind_type = user_bind_type
        self.user_id = user_id
        self.user_nick = user_nick

    def validate(self):
        if self.contracts:
            for k in self.contracts:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cert_address is not None:
            result['CertAddress'] = self.cert_address
        if self.cert_effdate is not None:
            result['CertEffdate'] = self.cert_effdate
        if self.cert_expire is not None:
            result['CertExpire'] = self.cert_expire
        if self.cert_no is not None:
            result['CertNo'] = self.cert_no
        if self.cert_type is not None:
            result['CertType'] = self.cert_type
        result['Contracts'] = []
        if self.contracts is not None:
            for k in self.contracts:
                result['Contracts'].append(k.to_map() if k else None)
        if self.cust_id is not None:
            result['CustId'] = self.cust_id
        if self.cust_name is not None:
            result['CustName'] = self.cust_name
        if self.cust_tag is not None:
            result['CustTag'] = self.cust_tag
        if self.cust_type is not None:
            result['CustType'] = self.cust_type
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gender is not None:
            result['Gender'] = self.gender
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.outer_cust_no is not None:
            result['OuterCustNo'] = self.outer_cust_no
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.user_bind_type is not None:
            result['UserBindType'] = self.user_bind_type
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.user_nick is not None:
            result['UserNick'] = self.user_nick
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CertAddress') is not None:
            self.cert_address = m.get('CertAddress')
        if m.get('CertEffdate') is not None:
            self.cert_effdate = m.get('CertEffdate')
        if m.get('CertExpire') is not None:
            self.cert_expire = m.get('CertExpire')
        if m.get('CertNo') is not None:
            self.cert_no = m.get('CertNo')
        if m.get('CertType') is not None:
            self.cert_type = m.get('CertType')
        self.contracts = []
        if m.get('Contracts') is not None:
            for k in m.get('Contracts'):
                temp_model = ListEBIResponseBodyRequestOrderCustomerContracts()
                self.contracts.append(temp_model.from_map(k))
        if m.get('CustId') is not None:
            self.cust_id = m.get('CustId')
        if m.get('CustName') is not None:
            self.cust_name = m.get('CustName')
        if m.get('CustTag') is not None:
            self.cust_tag = m.get('CustTag')
        if m.get('CustType') is not None:
            self.cust_type = m.get('CustType')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('Gender') is not None:
            self.gender = m.get('Gender')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('OuterCustNo') is not None:
            self.outer_cust_no = m.get('OuterCustNo')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('UserBindType') is not None:
            self.user_bind_type = m.get('UserBindType')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('UserNick') is not None:
            self.user_nick = m.get('UserNick')
        return self


class ListEBIResponseBodyRequestOrderOfferListAttributeList(TeaModel):
    def __init__(
        self,
        attr_group: str = None,
        attr_id: int = None,
        attr_name: str = None,
        attr_text: str = None,
        attr_value: str = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        mapping_code: str = None,
        old_attr_text: str = None,
        old_attr_value: str = None,
        options: int = None,
        remarks: str = None,
        value_expression: str = None,
    ):
        self.attr_group = attr_group
        self.attr_id = attr_id
        self.attr_name = attr_name
        self.attr_text = attr_text
        self.attr_value = attr_value
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.mapping_code = mapping_code
        self.old_attr_text = old_attr_text
        self.old_attr_value = old_attr_value
        self.options = options
        self.remarks = remarks
        self.value_expression = value_expression

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attr_group is not None:
            result['AttrGroup'] = self.attr_group
        if self.attr_id is not None:
            result['AttrId'] = self.attr_id
        if self.attr_name is not None:
            result['AttrName'] = self.attr_name
        if self.attr_text is not None:
            result['AttrText'] = self.attr_text
        if self.attr_value is not None:
            result['AttrValue'] = self.attr_value
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.mapping_code is not None:
            result['MappingCode'] = self.mapping_code
        if self.old_attr_text is not None:
            result['OldAttrText'] = self.old_attr_text
        if self.old_attr_value is not None:
            result['OldAttrValue'] = self.old_attr_value
        if self.options is not None:
            result['Options'] = self.options
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.value_expression is not None:
            result['ValueExpression'] = self.value_expression
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AttrGroup') is not None:
            self.attr_group = m.get('AttrGroup')
        if m.get('AttrId') is not None:
            self.attr_id = m.get('AttrId')
        if m.get('AttrName') is not None:
            self.attr_name = m.get('AttrName')
        if m.get('AttrText') is not None:
            self.attr_text = m.get('AttrText')
        if m.get('AttrValue') is not None:
            self.attr_value = m.get('AttrValue')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('MappingCode') is not None:
            self.mapping_code = m.get('MappingCode')
        if m.get('OldAttrText') is not None:
            self.old_attr_text = m.get('OldAttrText')
        if m.get('OldAttrValue') is not None:
            self.old_attr_value = m.get('OldAttrValue')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ValueExpression') is not None:
            self.value_expression = m.get('ValueExpression')
        return self


class ListEBIResponseBodyRequestOrderOfferListProductAttributeList(TeaModel):
    def __init__(
        self,
        attr_group: str = None,
        attr_id: int = None,
        attr_name: str = None,
        attr_text: str = None,
        attr_value: str = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        mapping_code: str = None,
        old_attr_text: str = None,
        old_attr_value: str = None,
        options: int = None,
        remarks: str = None,
        value_expression: str = None,
    ):
        self.attr_group = attr_group
        self.attr_id = attr_id
        self.attr_name = attr_name
        self.attr_text = attr_text
        self.attr_value = attr_value
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.mapping_code = mapping_code
        self.old_attr_text = old_attr_text
        self.old_attr_value = old_attr_value
        self.options = options
        self.remarks = remarks
        self.value_expression = value_expression

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attr_group is not None:
            result['AttrGroup'] = self.attr_group
        if self.attr_id is not None:
            result['AttrId'] = self.attr_id
        if self.attr_name is not None:
            result['AttrName'] = self.attr_name
        if self.attr_text is not None:
            result['AttrText'] = self.attr_text
        if self.attr_value is not None:
            result['AttrValue'] = self.attr_value
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.mapping_code is not None:
            result['MappingCode'] = self.mapping_code
        if self.old_attr_text is not None:
            result['OldAttrText'] = self.old_attr_text
        if self.old_attr_value is not None:
            result['OldAttrValue'] = self.old_attr_value
        if self.options is not None:
            result['Options'] = self.options
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.value_expression is not None:
            result['ValueExpression'] = self.value_expression
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AttrGroup') is not None:
            self.attr_group = m.get('AttrGroup')
        if m.get('AttrId') is not None:
            self.attr_id = m.get('AttrId')
        if m.get('AttrName') is not None:
            self.attr_name = m.get('AttrName')
        if m.get('AttrText') is not None:
            self.attr_text = m.get('AttrText')
        if m.get('AttrValue') is not None:
            self.attr_value = m.get('AttrValue')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('MappingCode') is not None:
            self.mapping_code = m.get('MappingCode')
        if m.get('OldAttrText') is not None:
            self.old_attr_text = m.get('OldAttrText')
        if m.get('OldAttrValue') is not None:
            self.old_attr_value = m.get('OldAttrValue')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ValueExpression') is not None:
            self.value_expression = m.get('ValueExpression')
        return self


class ListEBIResponseBodyRequestOrderOfferListProduct(TeaModel):
    def __init__(
        self,
        attribute_list: List[ListEBIResponseBodyRequestOrderOfferListProductAttributeList] = None,
        data_status: int = None,
        effective_time: str = None,
        effective_type: str = None,
        expire_time: str = None,
        expire_type: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_product_id: int = None,
        ins_status: int = None,
        is_main: str = None,
        open_status: int = None,
        operate_time: str = None,
        operation_id: int = None,
        options: int = None,
        product_id: int = None,
        product_name: str = None,
        product_type: str = None,
        remarks: str = None,
    ):
        self.attribute_list = attribute_list
        self.data_status = data_status
        self.effective_time = effective_time
        self.effective_type = effective_type
        self.expire_time = expire_time
        self.expire_type = expire_type
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_product_id = ins_product_id
        self.ins_status = ins_status
        self.is_main = is_main
        self.open_status = open_status
        self.operate_time = operate_time
        self.operation_id = operation_id
        self.options = options
        self.product_id = product_id
        self.product_name = product_name
        self.product_type = product_type
        self.remarks = remarks

    def validate(self):
        if self.attribute_list:
            for k in self.attribute_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AttributeList'] = []
        if self.attribute_list is not None:
            for k in self.attribute_list:
                result['AttributeList'].append(k.to_map() if k else None)
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.effective_type is not None:
            result['EffectiveType'] = self.effective_type
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.expire_type is not None:
            result['ExpireType'] = self.expire_type
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_product_id is not None:
            result['InsProductId'] = self.ins_product_id
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.is_main is not None:
            result['IsMain'] = self.is_main
        if self.open_status is not None:
            result['OpenStatus'] = self.open_status
        if self.operate_time is not None:
            result['OperateTime'] = self.operate_time
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.options is not None:
            result['Options'] = self.options
        if self.product_id is not None:
            result['ProductId'] = self.product_id
        if self.product_name is not None:
            result['ProductName'] = self.product_name
        if self.product_type is not None:
            result['ProductType'] = self.product_type
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.attribute_list = []
        if m.get('AttributeList') is not None:
            for k in m.get('AttributeList'):
                temp_model = ListEBIResponseBodyRequestOrderOfferListProductAttributeList()
                self.attribute_list.append(temp_model.from_map(k))
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('EffectiveType') is not None:
            self.effective_type = m.get('EffectiveType')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('ExpireType') is not None:
            self.expire_type = m.get('ExpireType')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsProductId') is not None:
            self.ins_product_id = m.get('InsProductId')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('IsMain') is not None:
            self.is_main = m.get('IsMain')
        if m.get('OpenStatus') is not None:
            self.open_status = m.get('OpenStatus')
        if m.get('OperateTime') is not None:
            self.operate_time = m.get('OperateTime')
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('ProductId') is not None:
            self.product_id = m.get('ProductId')
        if m.get('ProductName') is not None:
            self.product_name = m.get('ProductName')
        if m.get('ProductType') is not None:
            self.product_type = m.get('ProductType')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class ListEBIResponseBodyRequestOrderOfferList(TeaModel):
    def __init__(
        self,
        attribute_list: List[ListEBIResponseBodyRequestOrderOfferListAttributeList] = None,
        billing_pkg_id: int = None,
        data_status: int = None,
        eff_param: str = None,
        effective_time: str = None,
        effective_type: str = None,
        exp_param: str = None,
        expire_time: str = None,
        expire_type: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_offer_id: int = None,
        ins_status: int = None,
        offer_id: int = None,
        offer_name: str = None,
        offer_type: str = None,
        old_effective_time: str = None,
        old_ins_offer_id: int = None,
        old_offer_id: int = None,
        operation_id: int = None,
        options: int = None,
        ord_type: str = None,
        product: ListEBIResponseBodyRequestOrderOfferListProduct = None,
        remarks: str = None,
    ):
        self.attribute_list = attribute_list
        self.billing_pkg_id = billing_pkg_id
        self.data_status = data_status
        self.eff_param = eff_param
        self.effective_time = effective_time
        self.effective_type = effective_type
        self.exp_param = exp_param
        self.expire_time = expire_time
        self.expire_type = expire_type
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_offer_id = ins_offer_id
        self.ins_status = ins_status
        self.offer_id = offer_id
        self.offer_name = offer_name
        self.offer_type = offer_type
        self.old_effective_time = old_effective_time
        self.old_ins_offer_id = old_ins_offer_id
        self.old_offer_id = old_offer_id
        self.operation_id = operation_id
        self.options = options
        self.ord_type = ord_type
        self.product = product
        self.remarks = remarks

    def validate(self):
        if self.attribute_list:
            for k in self.attribute_list:
                if k:
                    k.validate()
        if self.product:
            self.product.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AttributeList'] = []
        if self.attribute_list is not None:
            for k in self.attribute_list:
                result['AttributeList'].append(k.to_map() if k else None)
        if self.billing_pkg_id is not None:
            result['BillingPkgId'] = self.billing_pkg_id
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.eff_param is not None:
            result['EffParam'] = self.eff_param
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.effective_type is not None:
            result['EffectiveType'] = self.effective_type
        if self.exp_param is not None:
            result['ExpParam'] = self.exp_param
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.expire_type is not None:
            result['ExpireType'] = self.expire_type
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_offer_id is not None:
            result['InsOfferId'] = self.ins_offer_id
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.offer_id is not None:
            result['OfferId'] = self.offer_id
        if self.offer_name is not None:
            result['OfferName'] = self.offer_name
        if self.offer_type is not None:
            result['OfferType'] = self.offer_type
        if self.old_effective_time is not None:
            result['OldEffectiveTime'] = self.old_effective_time
        if self.old_ins_offer_id is not None:
            result['OldInsOfferId'] = self.old_ins_offer_id
        if self.old_offer_id is not None:
            result['OldOfferId'] = self.old_offer_id
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.options is not None:
            result['Options'] = self.options
        if self.ord_type is not None:
            result['OrdType'] = self.ord_type
        if self.product is not None:
            result['Product'] = self.product.to_map()
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.attribute_list = []
        if m.get('AttributeList') is not None:
            for k in m.get('AttributeList'):
                temp_model = ListEBIResponseBodyRequestOrderOfferListAttributeList()
                self.attribute_list.append(temp_model.from_map(k))
        if m.get('BillingPkgId') is not None:
            self.billing_pkg_id = m.get('BillingPkgId')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffParam') is not None:
            self.eff_param = m.get('EffParam')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('EffectiveType') is not None:
            self.effective_type = m.get('EffectiveType')
        if m.get('ExpParam') is not None:
            self.exp_param = m.get('ExpParam')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('ExpireType') is not None:
            self.expire_type = m.get('ExpireType')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsOfferId') is not None:
            self.ins_offer_id = m.get('InsOfferId')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('OfferId') is not None:
            self.offer_id = m.get('OfferId')
        if m.get('OfferName') is not None:
            self.offer_name = m.get('OfferName')
        if m.get('OfferType') is not None:
            self.offer_type = m.get('OfferType')
        if m.get('OldEffectiveTime') is not None:
            self.old_effective_time = m.get('OldEffectiveTime')
        if m.get('OldInsOfferId') is not None:
            self.old_ins_offer_id = m.get('OldInsOfferId')
        if m.get('OldOfferId') is not None:
            self.old_offer_id = m.get('OldOfferId')
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('OrdType') is not None:
            self.ord_type = m.get('OrdType')
        if m.get('Product') is not None:
            temp_model = ListEBIResponseBodyRequestOrderOfferListProduct()
            self.product = temp_model.from_map(m['Product'])
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class ListEBIResponseBodyRequestOrderProductListAttributeList(TeaModel):
    def __init__(
        self,
        attr_group: str = None,
        attr_id: int = None,
        attr_name: str = None,
        attr_text: str = None,
        attr_value: str = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        mapping_code: str = None,
        old_attr_text: str = None,
        old_attr_value: str = None,
        options: int = None,
        remarks: str = None,
        value_expression: str = None,
    ):
        self.attr_group = attr_group
        self.attr_id = attr_id
        self.attr_name = attr_name
        self.attr_text = attr_text
        self.attr_value = attr_value
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.mapping_code = mapping_code
        self.old_attr_text = old_attr_text
        self.old_attr_value = old_attr_value
        self.options = options
        self.remarks = remarks
        self.value_expression = value_expression

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attr_group is not None:
            result['AttrGroup'] = self.attr_group
        if self.attr_id is not None:
            result['AttrId'] = self.attr_id
        if self.attr_name is not None:
            result['AttrName'] = self.attr_name
        if self.attr_text is not None:
            result['AttrText'] = self.attr_text
        if self.attr_value is not None:
            result['AttrValue'] = self.attr_value
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.mapping_code is not None:
            result['MappingCode'] = self.mapping_code
        if self.old_attr_text is not None:
            result['OldAttrText'] = self.old_attr_text
        if self.old_attr_value is not None:
            result['OldAttrValue'] = self.old_attr_value
        if self.options is not None:
            result['Options'] = self.options
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.value_expression is not None:
            result['ValueExpression'] = self.value_expression
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AttrGroup') is not None:
            self.attr_group = m.get('AttrGroup')
        if m.get('AttrId') is not None:
            self.attr_id = m.get('AttrId')
        if m.get('AttrName') is not None:
            self.attr_name = m.get('AttrName')
        if m.get('AttrText') is not None:
            self.attr_text = m.get('AttrText')
        if m.get('AttrValue') is not None:
            self.attr_value = m.get('AttrValue')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('MappingCode') is not None:
            self.mapping_code = m.get('MappingCode')
        if m.get('OldAttrText') is not None:
            self.old_attr_text = m.get('OldAttrText')
        if m.get('OldAttrValue') is not None:
            self.old_attr_value = m.get('OldAttrValue')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ValueExpression') is not None:
            self.value_expression = m.get('ValueExpression')
        return self


class ListEBIResponseBodyRequestOrderProductList(TeaModel):
    def __init__(
        self,
        attribute_list: List[ListEBIResponseBodyRequestOrderProductListAttributeList] = None,
        data_status: int = None,
        effective_time: str = None,
        effective_type: str = None,
        expire_time: str = None,
        expire_type: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_product_id: int = None,
        ins_status: int = None,
        is_main: str = None,
        open_status: int = None,
        operate_time: str = None,
        operation_id: int = None,
        options: int = None,
        product_id: int = None,
        product_name: str = None,
        product_type: str = None,
        remarks: str = None,
    ):
        self.attribute_list = attribute_list
        self.data_status = data_status
        self.effective_time = effective_time
        self.effective_type = effective_type
        self.expire_time = expire_time
        self.expire_type = expire_type
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_product_id = ins_product_id
        self.ins_status = ins_status
        self.is_main = is_main
        self.open_status = open_status
        self.operate_time = operate_time
        self.operation_id = operation_id
        self.options = options
        self.product_id = product_id
        self.product_name = product_name
        self.product_type = product_type
        self.remarks = remarks

    def validate(self):
        if self.attribute_list:
            for k in self.attribute_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AttributeList'] = []
        if self.attribute_list is not None:
            for k in self.attribute_list:
                result['AttributeList'].append(k.to_map() if k else None)
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.effective_type is not None:
            result['EffectiveType'] = self.effective_type
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.expire_type is not None:
            result['ExpireType'] = self.expire_type
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_product_id is not None:
            result['InsProductId'] = self.ins_product_id
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.is_main is not None:
            result['IsMain'] = self.is_main
        if self.open_status is not None:
            result['OpenStatus'] = self.open_status
        if self.operate_time is not None:
            result['OperateTime'] = self.operate_time
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.options is not None:
            result['Options'] = self.options
        if self.product_id is not None:
            result['ProductId'] = self.product_id
        if self.product_name is not None:
            result['ProductName'] = self.product_name
        if self.product_type is not None:
            result['ProductType'] = self.product_type
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.attribute_list = []
        if m.get('AttributeList') is not None:
            for k in m.get('AttributeList'):
                temp_model = ListEBIResponseBodyRequestOrderProductListAttributeList()
                self.attribute_list.append(temp_model.from_map(k))
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('EffectiveType') is not None:
            self.effective_type = m.get('EffectiveType')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('ExpireType') is not None:
            self.expire_type = m.get('ExpireType')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsProductId') is not None:
            self.ins_product_id = m.get('InsProductId')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('IsMain') is not None:
            self.is_main = m.get('IsMain')
        if m.get('OpenStatus') is not None:
            self.open_status = m.get('OpenStatus')
        if m.get('OperateTime') is not None:
            self.operate_time = m.get('OperateTime')
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('ProductId') is not None:
            self.product_id = m.get('ProductId')
        if m.get('ProductName') is not None:
            self.product_name = m.get('ProductName')
        if m.get('ProductType') is not None:
            self.product_type = m.get('ProductType')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class ListEBIResponseBodyRequestOrderRuleList(TeaModel):
    def __init__(
        self,
        act_on_ins_offer_id: int = None,
        act_on_operation_id: int = None,
        act_on_user_id: int = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        message: str = None,
        remarks: str = None,
        result_code: str = None,
        rule_code: str = None,
        rule_id: str = None,
        rule_name: str = None,
        rule_status: str = None,
        trigger_ins_offer_id: int = None,
    ):
        self.act_on_ins_offer_id = act_on_ins_offer_id
        self.act_on_operation_id = act_on_operation_id
        self.act_on_user_id = act_on_user_id
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.message = message
        self.remarks = remarks
        self.result_code = result_code
        self.rule_code = rule_code
        self.rule_id = rule_id
        self.rule_name = rule_name
        self.rule_status = rule_status
        self.trigger_ins_offer_id = trigger_ins_offer_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.act_on_ins_offer_id is not None:
            result['ActOnInsOfferId'] = self.act_on_ins_offer_id
        if self.act_on_operation_id is not None:
            result['ActOnOperationId'] = self.act_on_operation_id
        if self.act_on_user_id is not None:
            result['ActOnUserId'] = self.act_on_user_id
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.message is not None:
            result['Message'] = self.message
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.rule_code is not None:
            result['RuleCode'] = self.rule_code
        if self.rule_id is not None:
            result['RuleId'] = self.rule_id
        if self.rule_name is not None:
            result['RuleName'] = self.rule_name
        if self.rule_status is not None:
            result['RuleStatus'] = self.rule_status
        if self.trigger_ins_offer_id is not None:
            result['TriggerInsOfferId'] = self.trigger_ins_offer_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ActOnInsOfferId') is not None:
            self.act_on_ins_offer_id = m.get('ActOnInsOfferId')
        if m.get('ActOnOperationId') is not None:
            self.act_on_operation_id = m.get('ActOnOperationId')
        if m.get('ActOnUserId') is not None:
            self.act_on_user_id = m.get('ActOnUserId')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('RuleCode') is not None:
            self.rule_code = m.get('RuleCode')
        if m.get('RuleId') is not None:
            self.rule_id = m.get('RuleId')
        if m.get('RuleName') is not None:
            self.rule_name = m.get('RuleName')
        if m.get('RuleStatus') is not None:
            self.rule_status = m.get('RuleStatus')
        if m.get('TriggerInsOfferId') is not None:
            self.trigger_ins_offer_id = m.get('TriggerInsOfferId')
        return self


class ListEBIResponseBodyRequestOrder(TeaModel):
    def __init__(
        self,
        account: ListEBIResponseBodyRequestOrderAccount = None,
        assets: ListEBIResponseBodyRequestOrderAssets = None,
        busi_operation: ListEBIResponseBodyRequestOrderBusiOperation = None,
        busi_operator: str = None,
        busi_price_list: List[ListEBIResponseBodyRequestOrderBusiPriceList] = None,
        channel_id: str = None,
        customer: ListEBIResponseBodyRequestOrderCustomer = None,
        data_status: int = None,
        ext_info: Dict[str, str] = None,
        is_auth: bool = None,
        offer_list: List[ListEBIResponseBodyRequestOrderOfferList] = None,
        open_completed_time: str = None,
        order_id: int = None,
        order_no: str = None,
        order_serial_id: int = None,
        order_status: str = None,
        order_time: str = None,
        order_type: str = None,
        owner_id: str = None,
        parent_order_id: str = None,
        product_list: List[ListEBIResponseBodyRequestOrderProductList] = None,
        remarks: str = None,
        rule_list: List[ListEBIResponseBodyRequestOrderRuleList] = None,
    ):
        self.account = account
        self.assets = assets
        self.busi_operation = busi_operation
        self.busi_operator = busi_operator
        self.busi_price_list = busi_price_list
        self.channel_id = channel_id
        self.customer = customer
        self.data_status = data_status
        self.ext_info = ext_info
        self.is_auth = is_auth
        self.offer_list = offer_list
        self.open_completed_time = open_completed_time
        self.order_id = order_id
        self.order_no = order_no
        self.order_serial_id = order_serial_id
        self.order_status = order_status
        self.order_time = order_time
        self.order_type = order_type
        self.owner_id = owner_id
        self.parent_order_id = parent_order_id
        self.product_list = product_list
        self.remarks = remarks
        self.rule_list = rule_list

    def validate(self):
        if self.account:
            self.account.validate()
        if self.assets:
            self.assets.validate()
        if self.busi_operation:
            self.busi_operation.validate()
        if self.busi_price_list:
            for k in self.busi_price_list:
                if k:
                    k.validate()
        if self.customer:
            self.customer.validate()
        if self.offer_list:
            for k in self.offer_list:
                if k:
                    k.validate()
        if self.product_list:
            for k in self.product_list:
                if k:
                    k.validate()
        if self.rule_list:
            for k in self.rule_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account is not None:
            result['Account'] = self.account.to_map()
        if self.assets is not None:
            result['Assets'] = self.assets.to_map()
        if self.busi_operation is not None:
            result['BusiOperation'] = self.busi_operation.to_map()
        if self.busi_operator is not None:
            result['BusiOperator'] = self.busi_operator
        result['BusiPriceList'] = []
        if self.busi_price_list is not None:
            for k in self.busi_price_list:
                result['BusiPriceList'].append(k.to_map() if k else None)
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.customer is not None:
            result['Customer'] = self.customer.to_map()
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.ext_info is not None:
            result['ExtInfo'] = self.ext_info
        if self.is_auth is not None:
            result['IsAuth'] = self.is_auth
        result['OfferList'] = []
        if self.offer_list is not None:
            for k in self.offer_list:
                result['OfferList'].append(k.to_map() if k else None)
        if self.open_completed_time is not None:
            result['OpenCompletedTime'] = self.open_completed_time
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.order_no is not None:
            result['OrderNo'] = self.order_no
        if self.order_serial_id is not None:
            result['OrderSerialId'] = self.order_serial_id
        if self.order_status is not None:
            result['OrderStatus'] = self.order_status
        if self.order_time is not None:
            result['OrderTime'] = self.order_time
        if self.order_type is not None:
            result['OrderType'] = self.order_type
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.parent_order_id is not None:
            result['ParentOrderId'] = self.parent_order_id
        result['ProductList'] = []
        if self.product_list is not None:
            for k in self.product_list:
                result['ProductList'].append(k.to_map() if k else None)
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        result['RuleList'] = []
        if self.rule_list is not None:
            for k in self.rule_list:
                result['RuleList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Account') is not None:
            temp_model = ListEBIResponseBodyRequestOrderAccount()
            self.account = temp_model.from_map(m['Account'])
        if m.get('Assets') is not None:
            temp_model = ListEBIResponseBodyRequestOrderAssets()
            self.assets = temp_model.from_map(m['Assets'])
        if m.get('BusiOperation') is not None:
            temp_model = ListEBIResponseBodyRequestOrderBusiOperation()
            self.busi_operation = temp_model.from_map(m['BusiOperation'])
        if m.get('BusiOperator') is not None:
            self.busi_operator = m.get('BusiOperator')
        self.busi_price_list = []
        if m.get('BusiPriceList') is not None:
            for k in m.get('BusiPriceList'):
                temp_model = ListEBIResponseBodyRequestOrderBusiPriceList()
                self.busi_price_list.append(temp_model.from_map(k))
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('Customer') is not None:
            temp_model = ListEBIResponseBodyRequestOrderCustomer()
            self.customer = temp_model.from_map(m['Customer'])
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('ExtInfo') is not None:
            self.ext_info = m.get('ExtInfo')
        if m.get('IsAuth') is not None:
            self.is_auth = m.get('IsAuth')
        self.offer_list = []
        if m.get('OfferList') is not None:
            for k in m.get('OfferList'):
                temp_model = ListEBIResponseBodyRequestOrderOfferList()
                self.offer_list.append(temp_model.from_map(k))
        if m.get('OpenCompletedTime') is not None:
            self.open_completed_time = m.get('OpenCompletedTime')
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('OrderNo') is not None:
            self.order_no = m.get('OrderNo')
        if m.get('OrderSerialId') is not None:
            self.order_serial_id = m.get('OrderSerialId')
        if m.get('OrderStatus') is not None:
            self.order_status = m.get('OrderStatus')
        if m.get('OrderTime') is not None:
            self.order_time = m.get('OrderTime')
        if m.get('OrderType') is not None:
            self.order_type = m.get('OrderType')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ParentOrderId') is not None:
            self.parent_order_id = m.get('ParentOrderId')
        self.product_list = []
        if m.get('ProductList') is not None:
            for k in m.get('ProductList'):
                temp_model = ListEBIResponseBodyRequestOrderProductList()
                self.product_list.append(temp_model.from_map(k))
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        self.rule_list = []
        if m.get('RuleList') is not None:
            for k in m.get('RuleList'):
                temp_model = ListEBIResponseBodyRequestOrderRuleList()
                self.rule_list.append(temp_model.from_map(k))
        return self


class ListEBIResponseBodyRequest(TeaModel):
    def __init__(
        self,
        is_sync: bool = None,
        order: ListEBIResponseBodyRequestOrder = None,
        serial_no: str = None,
    ):
        self.is_sync = is_sync
        self.order = order
        self.serial_no = serial_no

    def validate(self):
        if self.order:
            self.order.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_sync is not None:
            result['IsSync'] = self.is_sync
        if self.order is not None:
            result['Order'] = self.order.to_map()
        if self.serial_no is not None:
            result['SerialNo'] = self.serial_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IsSync') is not None:
            self.is_sync = m.get('IsSync')
        if m.get('Order') is not None:
            temp_model = ListEBIResponseBodyRequestOrder()
            self.order = temp_model.from_map(m['Order'])
        if m.get('SerialNo') is not None:
            self.serial_no = m.get('SerialNo')
        return self


class ListEBIResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        desc: str = None,
        model: ListEBIResponseBodyModel = None,
        query_count: int = None,
        request: ListEBIResponseBodyRequest = None,
        success: bool = None,
    ):
        self.code = code
        self.desc = desc
        self.model = model
        self.query_count = query_count
        self.request = request
        self.success = success

    def validate(self):
        if self.model:
            self.model.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.model is not None:
            result['Model'] = self.model.to_map()
        if self.query_count is not None:
            result['QueryCount'] = self.query_count
        if self.request is not None:
            result['Request'] = self.request.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Model') is not None:
            temp_model = ListEBIResponseBodyModel()
            self.model = temp_model.from_map(m['Model'])
        if m.get('QueryCount') is not None:
            self.query_count = m.get('QueryCount')
        if m.get('Request') is not None:
            temp_model = ListEBIResponseBodyRequest()
            self.request = temp_model.from_map(m['Request'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListEBIResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListEBIResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListEBIResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class OpenApiTestRequest(TeaModel):
    def __init__(
        self,
        id: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.id = id
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class OpenApiTestResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        desc: str = None,
        model: bool = None,
        success: bool = None,
    ):
        self.code = code
        self.desc = desc
        self.model = model
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.model is not None:
            result['Model'] = self.model
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class OpenApiTestResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: OpenApiTestResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = OpenApiTestResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryAccelerateSellerShopRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryAccelerateSellerShopResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QueryAccelerateSellerShopResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryAccelerateSellerShopResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryAccelerateSellerShopResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryAccelerateStatisticsRequest(TeaModel):
    def __init__(
        self,
        end_date: str = None,
        owner_id: int = None,
        prod_code: str = None,
        prod_id: int = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        start_date: str = None,
    ):
        self.end_date = end_date
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.prod_id = prod_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.start_date = start_date

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_date is not None:
            result['EndDate'] = self.end_date
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.prod_id is not None:
            result['ProdId'] = self.prod_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.start_date is not None:
            result['StartDate'] = self.start_date
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndDate') is not None:
            self.end_date = m.get('EndDate')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProdId') is not None:
            self.prod_id = m.get('ProdId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('StartDate') is not None:
            self.start_date = m.get('StartDate')
        return self


class QueryAccelerateStatisticsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QueryAccelerateStatisticsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryAccelerateStatisticsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryAccelerateStatisticsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryEBIRequestTagKeyValueModels(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class QueryEBIRequest(TeaModel):
    def __init__(
        self,
        ak_proxy: str = None,
        api_name: str = None,
        app_key: str = None,
        caller_bid: str = None,
        caller_bid_login_email: str = None,
        caller_security_transport: bool = None,
        caller_type: str = None,
        caller_uid: int = None,
        caller_uid_login_email: str = None,
        channel: str = None,
        client_ip: str = None,
        ebi_id: str = None,
        enable: bool = None,
        from_type: int = None,
        mfa_present: bool = None,
        operator: str = None,
        owner_account: str = None,
        owner_id: int = None,
        owner_id_login_email: str = None,
        prod_code: str = None,
        proxy_caller_ip: str = None,
        proxy_caller_security_transport: bool = None,
        proxy_id: str = None,
        proxy_trust_transport_info: bool = None,
        request_content: str = None,
        request_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        security_token: str = None,
        sms_resource_owner_id: int = None,
        tag_key_1: str = None,
        tag_key_2: str = None,
        tag_key_3: str = None,
        tag_key_4: str = None,
        tag_key_5: str = None,
        tag_key_value_models: List[QueryEBIRequestTagKeyValueModels] = None,
        tag_value_1: str = None,
        tag_value_2: str = None,
        tag_value_3: str = None,
        tag_value_4: str = None,
        tag_value_5: str = None,
        token: str = None,
        version: str = None,
    ):
        self.ak_proxy = ak_proxy
        self.api_name = api_name
        self.app_key = app_key
        self.caller_bid = caller_bid
        self.caller_bid_login_email = caller_bid_login_email
        self.caller_security_transport = caller_security_transport
        self.caller_type = caller_type
        self.caller_uid = caller_uid
        self.caller_uid_login_email = caller_uid_login_email
        self.channel = channel
        self.client_ip = client_ip
        self.ebi_id = ebi_id
        self.enable = enable
        self.from_type = from_type
        self.mfa_present = mfa_present
        self.operator = operator
        self.owner_account = owner_account
        self.owner_id = owner_id
        self.owner_id_login_email = owner_id_login_email
        self.prod_code = prod_code
        self.proxy_caller_ip = proxy_caller_ip
        self.proxy_caller_security_transport = proxy_caller_security_transport
        self.proxy_id = proxy_id
        self.proxy_trust_transport_info = proxy_trust_transport_info
        self.request_content = request_content
        self.request_id = request_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.security_token = security_token
        self.sms_resource_owner_id = sms_resource_owner_id
        self.tag_key_1 = tag_key_1
        self.tag_key_2 = tag_key_2
        self.tag_key_3 = tag_key_3
        self.tag_key_4 = tag_key_4
        self.tag_key_5 = tag_key_5
        self.tag_key_value_models = tag_key_value_models
        self.tag_value_1 = tag_value_1
        self.tag_value_2 = tag_value_2
        self.tag_value_3 = tag_value_3
        self.tag_value_4 = tag_value_4
        self.tag_value_5 = tag_value_5
        self.token = token
        self.version = version

    def validate(self):
        if self.tag_key_value_models:
            for k in self.tag_key_value_models:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ak_proxy is not None:
            result['AkProxy'] = self.ak_proxy
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.caller_bid is not None:
            result['CallerBid'] = self.caller_bid
        if self.caller_bid_login_email is not None:
            result['CallerBidLoginEmail'] = self.caller_bid_login_email
        if self.caller_security_transport is not None:
            result['CallerSecurityTransport'] = self.caller_security_transport
        if self.caller_type is not None:
            result['CallerType'] = self.caller_type
        if self.caller_uid is not None:
            result['CallerUid'] = self.caller_uid
        if self.caller_uid_login_email is not None:
            result['CallerUidLoginEmail'] = self.caller_uid_login_email
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.client_ip is not None:
            result['ClientIP'] = self.client_ip
        if self.ebi_id is not None:
            result['Ebi_id'] = self.ebi_id
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.from_type is not None:
            result['FromType'] = self.from_type
        if self.mfa_present is not None:
            result['MfaPresent'] = self.mfa_present
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.owner_account is not None:
            result['OwnerAccount'] = self.owner_account
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.owner_id_login_email is not None:
            result['OwnerIdLoginEmail'] = self.owner_id_login_email
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.proxy_caller_ip is not None:
            result['ProxyCallerIp'] = self.proxy_caller_ip
        if self.proxy_caller_security_transport is not None:
            result['ProxyCallerSecurityTransport'] = self.proxy_caller_security_transport
        if self.proxy_id is not None:
            result['ProxyId'] = self.proxy_id
        if self.proxy_trust_transport_info is not None:
            result['ProxyTrustTransportInfo'] = self.proxy_trust_transport_info
        if self.request_content is not None:
            result['RequestContent'] = self.request_content
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        if self.sms_resource_owner_id is not None:
            result['SmsResourceOwnerId'] = self.sms_resource_owner_id
        if self.tag_key_1 is not None:
            result['TagKey1'] = self.tag_key_1
        if self.tag_key_2 is not None:
            result['TagKey2'] = self.tag_key_2
        if self.tag_key_3 is not None:
            result['TagKey3'] = self.tag_key_3
        if self.tag_key_4 is not None:
            result['TagKey4'] = self.tag_key_4
        if self.tag_key_5 is not None:
            result['TagKey5'] = self.tag_key_5
        result['TagKeyValueModels'] = []
        if self.tag_key_value_models is not None:
            for k in self.tag_key_value_models:
                result['TagKeyValueModels'].append(k.to_map() if k else None)
        if self.tag_value_1 is not None:
            result['TagValue1'] = self.tag_value_1
        if self.tag_value_2 is not None:
            result['TagValue2'] = self.tag_value_2
        if self.tag_value_3 is not None:
            result['TagValue3'] = self.tag_value_3
        if self.tag_value_4 is not None:
            result['TagValue4'] = self.tag_value_4
        if self.tag_value_5 is not None:
            result['TagValue5'] = self.tag_value_5
        if self.token is not None:
            result['Token'] = self.token
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AkProxy') is not None:
            self.ak_proxy = m.get('AkProxy')
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('CallerBid') is not None:
            self.caller_bid = m.get('CallerBid')
        if m.get('CallerBidLoginEmail') is not None:
            self.caller_bid_login_email = m.get('CallerBidLoginEmail')
        if m.get('CallerSecurityTransport') is not None:
            self.caller_security_transport = m.get('CallerSecurityTransport')
        if m.get('CallerType') is not None:
            self.caller_type = m.get('CallerType')
        if m.get('CallerUid') is not None:
            self.caller_uid = m.get('CallerUid')
        if m.get('CallerUidLoginEmail') is not None:
            self.caller_uid_login_email = m.get('CallerUidLoginEmail')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ClientIP') is not None:
            self.client_ip = m.get('ClientIP')
        if m.get('Ebi_id') is not None:
            self.ebi_id = m.get('Ebi_id')
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('FromType') is not None:
            self.from_type = m.get('FromType')
        if m.get('MfaPresent') is not None:
            self.mfa_present = m.get('MfaPresent')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('OwnerAccount') is not None:
            self.owner_account = m.get('OwnerAccount')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('OwnerIdLoginEmail') is not None:
            self.owner_id_login_email = m.get('OwnerIdLoginEmail')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProxyCallerIp') is not None:
            self.proxy_caller_ip = m.get('ProxyCallerIp')
        if m.get('ProxyCallerSecurityTransport') is not None:
            self.proxy_caller_security_transport = m.get('ProxyCallerSecurityTransport')
        if m.get('ProxyId') is not None:
            self.proxy_id = m.get('ProxyId')
        if m.get('ProxyTrustTransportInfo') is not None:
            self.proxy_trust_transport_info = m.get('ProxyTrustTransportInfo')
        if m.get('RequestContent') is not None:
            self.request_content = m.get('RequestContent')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        if m.get('SmsResourceOwnerId') is not None:
            self.sms_resource_owner_id = m.get('SmsResourceOwnerId')
        if m.get('TagKey1') is not None:
            self.tag_key_1 = m.get('TagKey1')
        if m.get('TagKey2') is not None:
            self.tag_key_2 = m.get('TagKey2')
        if m.get('TagKey3') is not None:
            self.tag_key_3 = m.get('TagKey3')
        if m.get('TagKey4') is not None:
            self.tag_key_4 = m.get('TagKey4')
        if m.get('TagKey5') is not None:
            self.tag_key_5 = m.get('TagKey5')
        self.tag_key_value_models = []
        if m.get('TagKeyValueModels') is not None:
            for k in m.get('TagKeyValueModels'):
                temp_model = QueryEBIRequestTagKeyValueModels()
                self.tag_key_value_models.append(temp_model.from_map(k))
        if m.get('TagValue1') is not None:
            self.tag_value_1 = m.get('TagValue1')
        if m.get('TagValue2') is not None:
            self.tag_value_2 = m.get('TagValue2')
        if m.get('TagValue3') is not None:
            self.tag_value_3 = m.get('TagValue3')
        if m.get('TagValue4') is not None:
            self.tag_value_4 = m.get('TagValue4')
        if m.get('TagValue5') is not None:
            self.tag_value_5 = m.get('TagValue5')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class QueryEBIResponseBodyModelContentIpInfo(TeaModel):
    def __init__(
        self,
        ip: str = None,
        vlan: int = None,
    ):
        self.ip = ip
        self.vlan = vlan

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.vlan is not None:
            result['Vlan'] = self.vlan
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('Vlan') is not None:
            self.vlan = m.get('Vlan')
        return self


class QueryEBIResponseBodyModelContent(TeaModel):
    def __init__(
        self,
        aliuid: int = None,
        ebi_id: str = None,
        exp_info: str = None,
        gateway: str = None,
        ip_info: List[QueryEBIResponseBodyModelContentIpInfo] = None,
        network_id: str = None,
        region_id: str = None,
        status: str = None,
    ):
        self.aliuid = aliuid
        self.ebi_id = ebi_id
        self.exp_info = exp_info
        self.gateway = gateway
        self.ip_info = ip_info
        self.network_id = network_id
        self.region_id = region_id
        self.status = status

    def validate(self):
        if self.ip_info:
            for k in self.ip_info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliuid is not None:
            result['Aliuid'] = self.aliuid
        if self.ebi_id is not None:
            result['Ebi_id'] = self.ebi_id
        if self.exp_info is not None:
            result['Exp_info'] = self.exp_info
        if self.gateway is not None:
            result['Gateway'] = self.gateway
        result['Ip_info'] = []
        if self.ip_info is not None:
            for k in self.ip_info:
                result['Ip_info'].append(k.to_map() if k else None)
        if self.network_id is not None:
            result['Network_id'] = self.network_id
        if self.region_id is not None:
            result['Region_id'] = self.region_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Aliuid') is not None:
            self.aliuid = m.get('Aliuid')
        if m.get('Ebi_id') is not None:
            self.ebi_id = m.get('Ebi_id')
        if m.get('Exp_info') is not None:
            self.exp_info = m.get('Exp_info')
        if m.get('Gateway') is not None:
            self.gateway = m.get('Gateway')
        self.ip_info = []
        if m.get('Ip_info') is not None:
            for k in m.get('Ip_info'):
                temp_model = QueryEBIResponseBodyModelContentIpInfo()
                self.ip_info.append(temp_model.from_map(k))
        if m.get('Network_id') is not None:
            self.network_id = m.get('Network_id')
        if m.get('Region_id') is not None:
            self.region_id = m.get('Region_id')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class QueryEBIResponseBodyModel(TeaModel):
    def __init__(
        self,
        content: QueryEBIResponseBodyModelContent = None,
        description: str = None,
        request_id: str = None,
        ret_code: int = None,
    ):
        self.content = content
        self.description = description
        self.request_id = request_id
        self.ret_code = ret_code

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content.to_map()
        if self.description is not None:
            result['Description'] = self.description
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.ret_code is not None:
            result['RetCode'] = self.ret_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Content') is not None:
            temp_model = QueryEBIResponseBodyModelContent()
            self.content = temp_model.from_map(m['Content'])
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RetCode') is not None:
            self.ret_code = m.get('RetCode')
        return self


class QueryEBIResponseBodyRequestOrderAccountCreditList(TeaModel):
    def __init__(
        self,
        account_id: int = None,
        account_name: str = None,
        credit_balance: int = None,
        cust_id: int = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        remarks: str = None,
    ):
        self.account_id = account_id
        self.account_name = account_name
        self.credit_balance = credit_balance
        self.cust_id = cust_id
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.remarks = remarks

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_id is not None:
            result['AccountId'] = self.account_id
        if self.account_name is not None:
            result['AccountName'] = self.account_name
        if self.credit_balance is not None:
            result['CreditBalance'] = self.credit_balance
        if self.cust_id is not None:
            result['CustId'] = self.cust_id
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountId') is not None:
            self.account_id = m.get('AccountId')
        if m.get('AccountName') is not None:
            self.account_name = m.get('AccountName')
        if m.get('CreditBalance') is not None:
            self.credit_balance = m.get('CreditBalance')
        if m.get('CustId') is not None:
            self.cust_id = m.get('CustId')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class QueryEBIResponseBodyRequestOrderAccount(TeaModel):
    def __init__(
        self,
        acct_id: int = None,
        acct_name: str = None,
        acct_type: str = None,
        bill_type: int = None,
        control_type: int = None,
        credit_list: List[QueryEBIResponseBodyRequestOrderAccountCreditList] = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        remarks: str = None,
    ):
        self.acct_id = acct_id
        self.acct_name = acct_name
        self.acct_type = acct_type
        self.bill_type = bill_type
        self.control_type = control_type
        self.credit_list = credit_list
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.remarks = remarks

    def validate(self):
        if self.credit_list:
            for k in self.credit_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.acct_id is not None:
            result['AcctId'] = self.acct_id
        if self.acct_name is not None:
            result['AcctName'] = self.acct_name
        if self.acct_type is not None:
            result['AcctType'] = self.acct_type
        if self.bill_type is not None:
            result['BillType'] = self.bill_type
        if self.control_type is not None:
            result['ControlType'] = self.control_type
        result['CreditList'] = []
        if self.credit_list is not None:
            for k in self.credit_list:
                result['CreditList'].append(k.to_map() if k else None)
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AcctId') is not None:
            self.acct_id = m.get('AcctId')
        if m.get('AcctName') is not None:
            self.acct_name = m.get('AcctName')
        if m.get('AcctType') is not None:
            self.acct_type = m.get('AcctType')
        if m.get('BillType') is not None:
            self.bill_type = m.get('BillType')
        if m.get('ControlType') is not None:
            self.control_type = m.get('ControlType')
        self.credit_list = []
        if m.get('CreditList') is not None:
            for k in m.get('CreditList'):
                temp_model = QueryEBIResponseBodyRequestOrderAccountCreditList()
                self.credit_list.append(temp_model.from_map(k))
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class QueryEBIResponseBodyRequestOrderAssetsAttributeList(TeaModel):
    def __init__(
        self,
        attr_group: str = None,
        attr_id: int = None,
        attr_name: str = None,
        attr_text: str = None,
        attr_value: str = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        mapping_code: str = None,
        old_attr_text: str = None,
        old_attr_value: str = None,
        options: int = None,
        remarks: str = None,
        value_expression: str = None,
    ):
        self.attr_group = attr_group
        self.attr_id = attr_id
        self.attr_name = attr_name
        self.attr_text = attr_text
        self.attr_value = attr_value
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.mapping_code = mapping_code
        self.old_attr_text = old_attr_text
        self.old_attr_value = old_attr_value
        self.options = options
        self.remarks = remarks
        self.value_expression = value_expression

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attr_group is not None:
            result['AttrGroup'] = self.attr_group
        if self.attr_id is not None:
            result['AttrId'] = self.attr_id
        if self.attr_name is not None:
            result['AttrName'] = self.attr_name
        if self.attr_text is not None:
            result['AttrText'] = self.attr_text
        if self.attr_value is not None:
            result['AttrValue'] = self.attr_value
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.mapping_code is not None:
            result['MappingCode'] = self.mapping_code
        if self.old_attr_text is not None:
            result['OldAttrText'] = self.old_attr_text
        if self.old_attr_value is not None:
            result['OldAttrValue'] = self.old_attr_value
        if self.options is not None:
            result['Options'] = self.options
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.value_expression is not None:
            result['ValueExpression'] = self.value_expression
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AttrGroup') is not None:
            self.attr_group = m.get('AttrGroup')
        if m.get('AttrId') is not None:
            self.attr_id = m.get('AttrId')
        if m.get('AttrName') is not None:
            self.attr_name = m.get('AttrName')
        if m.get('AttrText') is not None:
            self.attr_text = m.get('AttrText')
        if m.get('AttrValue') is not None:
            self.attr_value = m.get('AttrValue')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('MappingCode') is not None:
            self.mapping_code = m.get('MappingCode')
        if m.get('OldAttrText') is not None:
            self.old_attr_text = m.get('OldAttrText')
        if m.get('OldAttrValue') is not None:
            self.old_attr_value = m.get('OldAttrValue')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ValueExpression') is not None:
            self.value_expression = m.get('ValueExpression')
        return self


class QueryEBIResponseBodyRequestOrderAssets(TeaModel):
    def __init__(
        self,
        active_time: str = None,
        assets_id: int = None,
        assets_name: str = None,
        assets_owner: str = None,
        assets_status: int = None,
        assets_tag: int = None,
        assets_type: int = None,
        attribute_list: List[QueryEBIResponseBodyRequestOrderAssetsAttributeList] = None,
        bill_id: str = None,
        bill_source: str = None,
        channel_id: str = None,
        data_status: int = None,
        destroy_time: str = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        group_path: str = None,
        imsi: str = None,
        ins_status: int = None,
        os_status: str = None,
        os_time: str = None,
        owner_assets_id: int = None,
        password: str = None,
        pre_destroy_time: str = None,
        product_line_code: str = None,
        real_bill_number: str = None,
        remarks: str = None,
        res_code: str = None,
    ):
        self.active_time = active_time
        self.assets_id = assets_id
        self.assets_name = assets_name
        self.assets_owner = assets_owner
        self.assets_status = assets_status
        self.assets_tag = assets_tag
        self.assets_type = assets_type
        self.attribute_list = attribute_list
        self.bill_id = bill_id
        self.bill_source = bill_source
        self.channel_id = channel_id
        self.data_status = data_status
        self.destroy_time = destroy_time
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.group_path = group_path
        self.imsi = imsi
        self.ins_status = ins_status
        self.os_status = os_status
        self.os_time = os_time
        self.owner_assets_id = owner_assets_id
        self.password = password
        self.pre_destroy_time = pre_destroy_time
        self.product_line_code = product_line_code
        self.real_bill_number = real_bill_number
        self.remarks = remarks
        self.res_code = res_code

    def validate(self):
        if self.attribute_list:
            for k in self.attribute_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.active_time is not None:
            result['ActiveTime'] = self.active_time
        if self.assets_id is not None:
            result['AssetsId'] = self.assets_id
        if self.assets_name is not None:
            result['AssetsName'] = self.assets_name
        if self.assets_owner is not None:
            result['AssetsOwner'] = self.assets_owner
        if self.assets_status is not None:
            result['AssetsStatus'] = self.assets_status
        if self.assets_tag is not None:
            result['AssetsTag'] = self.assets_tag
        if self.assets_type is not None:
            result['AssetsType'] = self.assets_type
        result['AttributeList'] = []
        if self.attribute_list is not None:
            for k in self.attribute_list:
                result['AttributeList'].append(k.to_map() if k else None)
        if self.bill_id is not None:
            result['BillId'] = self.bill_id
        if self.bill_source is not None:
            result['BillSource'] = self.bill_source
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.destroy_time is not None:
            result['DestroyTime'] = self.destroy_time
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.group_path is not None:
            result['GroupPath'] = self.group_path
        if self.imsi is not None:
            result['Imsi'] = self.imsi
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.os_status is not None:
            result['OsStatus'] = self.os_status
        if self.os_time is not None:
            result['OsTime'] = self.os_time
        if self.owner_assets_id is not None:
            result['OwnerAssetsId'] = self.owner_assets_id
        if self.password is not None:
            result['Password'] = self.password
        if self.pre_destroy_time is not None:
            result['PreDestroyTime'] = self.pre_destroy_time
        if self.product_line_code is not None:
            result['ProductLineCode'] = self.product_line_code
        if self.real_bill_number is not None:
            result['RealBillNumber'] = self.real_bill_number
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.res_code is not None:
            result['ResCode'] = self.res_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ActiveTime') is not None:
            self.active_time = m.get('ActiveTime')
        if m.get('AssetsId') is not None:
            self.assets_id = m.get('AssetsId')
        if m.get('AssetsName') is not None:
            self.assets_name = m.get('AssetsName')
        if m.get('AssetsOwner') is not None:
            self.assets_owner = m.get('AssetsOwner')
        if m.get('AssetsStatus') is not None:
            self.assets_status = m.get('AssetsStatus')
        if m.get('AssetsTag') is not None:
            self.assets_tag = m.get('AssetsTag')
        if m.get('AssetsType') is not None:
            self.assets_type = m.get('AssetsType')
        self.attribute_list = []
        if m.get('AttributeList') is not None:
            for k in m.get('AttributeList'):
                temp_model = QueryEBIResponseBodyRequestOrderAssetsAttributeList()
                self.attribute_list.append(temp_model.from_map(k))
        if m.get('BillId') is not None:
            self.bill_id = m.get('BillId')
        if m.get('BillSource') is not None:
            self.bill_source = m.get('BillSource')
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('DestroyTime') is not None:
            self.destroy_time = m.get('DestroyTime')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('GroupPath') is not None:
            self.group_path = m.get('GroupPath')
        if m.get('Imsi') is not None:
            self.imsi = m.get('Imsi')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('OsStatus') is not None:
            self.os_status = m.get('OsStatus')
        if m.get('OsTime') is not None:
            self.os_time = m.get('OsTime')
        if m.get('OwnerAssetsId') is not None:
            self.owner_assets_id = m.get('OwnerAssetsId')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        if m.get('PreDestroyTime') is not None:
            self.pre_destroy_time = m.get('PreDestroyTime')
        if m.get('ProductLineCode') is not None:
            self.product_line_code = m.get('ProductLineCode')
        if m.get('RealBillNumber') is not None:
            self.real_bill_number = m.get('RealBillNumber')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ResCode') is not None:
            self.res_code = m.get('ResCode')
        return self


class QueryEBIResponseBodyRequestOrderBusiOperation(TeaModel):
    def __init__(
        self,
        operation_code: str = None,
        operation_id: int = None,
        operation_name: str = None,
    ):
        self.operation_code = operation_code
        self.operation_id = operation_id
        self.operation_name = operation_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.operation_code is not None:
            result['OperationCode'] = self.operation_code
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.operation_name is not None:
            result['OperationName'] = self.operation_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OperationCode') is not None:
            self.operation_code = m.get('OperationCode')
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('OperationName') is not None:
            self.operation_name = m.get('OperationName')
        return self


class QueryEBIResponseBodyRequestOrderBusiPriceListBusiPriceDetailList(TeaModel):
    def __init__(
        self,
        outer_order_no: str = None,
        paid_amount: int = None,
        payment_mode: str = None,
    ):
        self.outer_order_no = outer_order_no
        self.paid_amount = paid_amount
        self.payment_mode = payment_mode

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.outer_order_no is not None:
            result['OuterOrderNo'] = self.outer_order_no
        if self.paid_amount is not None:
            result['PaidAmount'] = self.paid_amount
        if self.payment_mode is not None:
            result['PaymentMode'] = self.payment_mode
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OuterOrderNo') is not None:
            self.outer_order_no = m.get('OuterOrderNo')
        if m.get('PaidAmount') is not None:
            self.paid_amount = m.get('PaidAmount')
        if m.get('PaymentMode') is not None:
            self.payment_mode = m.get('PaymentMode')
        return self


class QueryEBIResponseBodyRequestOrderBusiPriceList(TeaModel):
    def __init__(
        self,
        alipay_order_no: str = None,
        busi_operation_id: int = None,
        busi_price_detail_list: List[QueryEBIResponseBodyRequestOrderBusiPriceListBusiPriceDetailList] = None,
        offer_id: int = None,
        order_channel: str = None,
        outer_order_no: str = None,
        paid_amount: int = None,
        receivable_amount: int = None,
        subject_id: str = None,
    ):
        self.alipay_order_no = alipay_order_no
        self.busi_operation_id = busi_operation_id
        self.busi_price_detail_list = busi_price_detail_list
        self.offer_id = offer_id
        self.order_channel = order_channel
        self.outer_order_no = outer_order_no
        self.paid_amount = paid_amount
        self.receivable_amount = receivable_amount
        self.subject_id = subject_id

    def validate(self):
        if self.busi_price_detail_list:
            for k in self.busi_price_detail_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alipay_order_no is not None:
            result['AlipayOrderNo'] = self.alipay_order_no
        if self.busi_operation_id is not None:
            result['BusiOperationId'] = self.busi_operation_id
        result['BusiPriceDetailList'] = []
        if self.busi_price_detail_list is not None:
            for k in self.busi_price_detail_list:
                result['BusiPriceDetailList'].append(k.to_map() if k else None)
        if self.offer_id is not None:
            result['OfferId'] = self.offer_id
        if self.order_channel is not None:
            result['OrderChannel'] = self.order_channel
        if self.outer_order_no is not None:
            result['OuterOrderNo'] = self.outer_order_no
        if self.paid_amount is not None:
            result['PaidAmount'] = self.paid_amount
        if self.receivable_amount is not None:
            result['ReceivableAmount'] = self.receivable_amount
        if self.subject_id is not None:
            result['SubjectId'] = self.subject_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AlipayOrderNo') is not None:
            self.alipay_order_no = m.get('AlipayOrderNo')
        if m.get('BusiOperationId') is not None:
            self.busi_operation_id = m.get('BusiOperationId')
        self.busi_price_detail_list = []
        if m.get('BusiPriceDetailList') is not None:
            for k in m.get('BusiPriceDetailList'):
                temp_model = QueryEBIResponseBodyRequestOrderBusiPriceListBusiPriceDetailList()
                self.busi_price_detail_list.append(temp_model.from_map(k))
        if m.get('OfferId') is not None:
            self.offer_id = m.get('OfferId')
        if m.get('OrderChannel') is not None:
            self.order_channel = m.get('OrderChannel')
        if m.get('OuterOrderNo') is not None:
            self.outer_order_no = m.get('OuterOrderNo')
        if m.get('PaidAmount') is not None:
            self.paid_amount = m.get('PaidAmount')
        if m.get('ReceivableAmount') is not None:
            self.receivable_amount = m.get('ReceivableAmount')
        if m.get('SubjectId') is not None:
            self.subject_id = m.get('SubjectId')
        return self


class QueryEBIResponseBodyRequestOrderCustomerContracts(TeaModel):
    def __init__(
        self,
        contact_address: str = None,
        contact_name: str = None,
        contact_phone: str = None,
        contact_type: int = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        remarks: str = None,
    ):
        self.contact_address = contact_address
        self.contact_name = contact_name
        self.contact_phone = contact_phone
        self.contact_type = contact_type
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.remarks = remarks

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_address is not None:
            result['ContactAddress'] = self.contact_address
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.contact_phone is not None:
            result['ContactPhone'] = self.contact_phone
        if self.contact_type is not None:
            result['ContactType'] = self.contact_type
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactAddress') is not None:
            self.contact_address = m.get('ContactAddress')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('ContactPhone') is not None:
            self.contact_phone = m.get('ContactPhone')
        if m.get('ContactType') is not None:
            self.contact_type = m.get('ContactType')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class QueryEBIResponseBodyRequestOrderCustomer(TeaModel):
    def __init__(
        self,
        cert_address: str = None,
        cert_effdate: str = None,
        cert_expire: str = None,
        cert_no: str = None,
        cert_type: str = None,
        contracts: List[QueryEBIResponseBodyRequestOrderCustomerContracts] = None,
        cust_id: int = None,
        cust_name: str = None,
        cust_tag: int = None,
        cust_type: str = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gender: int = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        outer_cust_no: str = None,
        remarks: str = None,
        user_bind_type: int = None,
        user_id: int = None,
        user_nick: str = None,
    ):
        self.cert_address = cert_address
        self.cert_effdate = cert_effdate
        self.cert_expire = cert_expire
        self.cert_no = cert_no
        self.cert_type = cert_type
        self.contracts = contracts
        self.cust_id = cust_id
        self.cust_name = cust_name
        self.cust_tag = cust_tag
        self.cust_type = cust_type
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gender = gender
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.outer_cust_no = outer_cust_no
        self.remarks = remarks
        self.user_bind_type = user_bind_type
        self.user_id = user_id
        self.user_nick = user_nick

    def validate(self):
        if self.contracts:
            for k in self.contracts:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cert_address is not None:
            result['CertAddress'] = self.cert_address
        if self.cert_effdate is not None:
            result['CertEffdate'] = self.cert_effdate
        if self.cert_expire is not None:
            result['CertExpire'] = self.cert_expire
        if self.cert_no is not None:
            result['CertNo'] = self.cert_no
        if self.cert_type is not None:
            result['CertType'] = self.cert_type
        result['Contracts'] = []
        if self.contracts is not None:
            for k in self.contracts:
                result['Contracts'].append(k.to_map() if k else None)
        if self.cust_id is not None:
            result['CustId'] = self.cust_id
        if self.cust_name is not None:
            result['CustName'] = self.cust_name
        if self.cust_tag is not None:
            result['CustTag'] = self.cust_tag
        if self.cust_type is not None:
            result['CustType'] = self.cust_type
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gender is not None:
            result['Gender'] = self.gender
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.outer_cust_no is not None:
            result['OuterCustNo'] = self.outer_cust_no
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.user_bind_type is not None:
            result['UserBindType'] = self.user_bind_type
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.user_nick is not None:
            result['UserNick'] = self.user_nick
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CertAddress') is not None:
            self.cert_address = m.get('CertAddress')
        if m.get('CertEffdate') is not None:
            self.cert_effdate = m.get('CertEffdate')
        if m.get('CertExpire') is not None:
            self.cert_expire = m.get('CertExpire')
        if m.get('CertNo') is not None:
            self.cert_no = m.get('CertNo')
        if m.get('CertType') is not None:
            self.cert_type = m.get('CertType')
        self.contracts = []
        if m.get('Contracts') is not None:
            for k in m.get('Contracts'):
                temp_model = QueryEBIResponseBodyRequestOrderCustomerContracts()
                self.contracts.append(temp_model.from_map(k))
        if m.get('CustId') is not None:
            self.cust_id = m.get('CustId')
        if m.get('CustName') is not None:
            self.cust_name = m.get('CustName')
        if m.get('CustTag') is not None:
            self.cust_tag = m.get('CustTag')
        if m.get('CustType') is not None:
            self.cust_type = m.get('CustType')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('Gender') is not None:
            self.gender = m.get('Gender')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('OuterCustNo') is not None:
            self.outer_cust_no = m.get('OuterCustNo')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('UserBindType') is not None:
            self.user_bind_type = m.get('UserBindType')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('UserNick') is not None:
            self.user_nick = m.get('UserNick')
        return self


class QueryEBIResponseBodyRequestOrderOfferListAttributeList(TeaModel):
    def __init__(
        self,
        attr_group: str = None,
        attr_id: int = None,
        attr_name: str = None,
        attr_text: str = None,
        attr_value: str = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        mapping_code: str = None,
        old_attr_text: str = None,
        old_attr_value: str = None,
        options: int = None,
        remarks: str = None,
        value_expression: str = None,
    ):
        self.attr_group = attr_group
        self.attr_id = attr_id
        self.attr_name = attr_name
        self.attr_text = attr_text
        self.attr_value = attr_value
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.mapping_code = mapping_code
        self.old_attr_text = old_attr_text
        self.old_attr_value = old_attr_value
        self.options = options
        self.remarks = remarks
        self.value_expression = value_expression

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attr_group is not None:
            result['AttrGroup'] = self.attr_group
        if self.attr_id is not None:
            result['AttrId'] = self.attr_id
        if self.attr_name is not None:
            result['AttrName'] = self.attr_name
        if self.attr_text is not None:
            result['AttrText'] = self.attr_text
        if self.attr_value is not None:
            result['AttrValue'] = self.attr_value
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.mapping_code is not None:
            result['MappingCode'] = self.mapping_code
        if self.old_attr_text is not None:
            result['OldAttrText'] = self.old_attr_text
        if self.old_attr_value is not None:
            result['OldAttrValue'] = self.old_attr_value
        if self.options is not None:
            result['Options'] = self.options
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.value_expression is not None:
            result['ValueExpression'] = self.value_expression
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AttrGroup') is not None:
            self.attr_group = m.get('AttrGroup')
        if m.get('AttrId') is not None:
            self.attr_id = m.get('AttrId')
        if m.get('AttrName') is not None:
            self.attr_name = m.get('AttrName')
        if m.get('AttrText') is not None:
            self.attr_text = m.get('AttrText')
        if m.get('AttrValue') is not None:
            self.attr_value = m.get('AttrValue')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('MappingCode') is not None:
            self.mapping_code = m.get('MappingCode')
        if m.get('OldAttrText') is not None:
            self.old_attr_text = m.get('OldAttrText')
        if m.get('OldAttrValue') is not None:
            self.old_attr_value = m.get('OldAttrValue')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ValueExpression') is not None:
            self.value_expression = m.get('ValueExpression')
        return self


class QueryEBIResponseBodyRequestOrderOfferListProductAttributeList(TeaModel):
    def __init__(
        self,
        attr_group: str = None,
        attr_id: int = None,
        attr_name: str = None,
        attr_text: str = None,
        attr_value: str = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        mapping_code: str = None,
        old_attr_text: str = None,
        old_attr_value: str = None,
        options: int = None,
        remarks: str = None,
        value_expression: str = None,
    ):
        self.attr_group = attr_group
        self.attr_id = attr_id
        self.attr_name = attr_name
        self.attr_text = attr_text
        self.attr_value = attr_value
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.mapping_code = mapping_code
        self.old_attr_text = old_attr_text
        self.old_attr_value = old_attr_value
        self.options = options
        self.remarks = remarks
        self.value_expression = value_expression

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attr_group is not None:
            result['AttrGroup'] = self.attr_group
        if self.attr_id is not None:
            result['AttrId'] = self.attr_id
        if self.attr_name is not None:
            result['AttrName'] = self.attr_name
        if self.attr_text is not None:
            result['AttrText'] = self.attr_text
        if self.attr_value is not None:
            result['AttrValue'] = self.attr_value
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.mapping_code is not None:
            result['MappingCode'] = self.mapping_code
        if self.old_attr_text is not None:
            result['OldAttrText'] = self.old_attr_text
        if self.old_attr_value is not None:
            result['OldAttrValue'] = self.old_attr_value
        if self.options is not None:
            result['Options'] = self.options
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.value_expression is not None:
            result['ValueExpression'] = self.value_expression
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AttrGroup') is not None:
            self.attr_group = m.get('AttrGroup')
        if m.get('AttrId') is not None:
            self.attr_id = m.get('AttrId')
        if m.get('AttrName') is not None:
            self.attr_name = m.get('AttrName')
        if m.get('AttrText') is not None:
            self.attr_text = m.get('AttrText')
        if m.get('AttrValue') is not None:
            self.attr_value = m.get('AttrValue')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('MappingCode') is not None:
            self.mapping_code = m.get('MappingCode')
        if m.get('OldAttrText') is not None:
            self.old_attr_text = m.get('OldAttrText')
        if m.get('OldAttrValue') is not None:
            self.old_attr_value = m.get('OldAttrValue')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ValueExpression') is not None:
            self.value_expression = m.get('ValueExpression')
        return self


class QueryEBIResponseBodyRequestOrderOfferListProduct(TeaModel):
    def __init__(
        self,
        attribute_list: List[QueryEBIResponseBodyRequestOrderOfferListProductAttributeList] = None,
        data_status: int = None,
        effective_time: str = None,
        effective_type: str = None,
        expire_time: str = None,
        expire_type: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_product_id: int = None,
        ins_status: int = None,
        is_main: str = None,
        open_status: int = None,
        operate_time: str = None,
        operation_id: int = None,
        options: int = None,
        product_id: int = None,
        product_name: str = None,
        product_type: str = None,
        remarks: str = None,
    ):
        self.attribute_list = attribute_list
        self.data_status = data_status
        self.effective_time = effective_time
        self.effective_type = effective_type
        self.expire_time = expire_time
        self.expire_type = expire_type
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_product_id = ins_product_id
        self.ins_status = ins_status
        self.is_main = is_main
        self.open_status = open_status
        self.operate_time = operate_time
        self.operation_id = operation_id
        self.options = options
        self.product_id = product_id
        self.product_name = product_name
        self.product_type = product_type
        self.remarks = remarks

    def validate(self):
        if self.attribute_list:
            for k in self.attribute_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AttributeList'] = []
        if self.attribute_list is not None:
            for k in self.attribute_list:
                result['AttributeList'].append(k.to_map() if k else None)
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.effective_type is not None:
            result['EffectiveType'] = self.effective_type
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.expire_type is not None:
            result['ExpireType'] = self.expire_type
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_product_id is not None:
            result['InsProductId'] = self.ins_product_id
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.is_main is not None:
            result['IsMain'] = self.is_main
        if self.open_status is not None:
            result['OpenStatus'] = self.open_status
        if self.operate_time is not None:
            result['OperateTime'] = self.operate_time
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.options is not None:
            result['Options'] = self.options
        if self.product_id is not None:
            result['ProductId'] = self.product_id
        if self.product_name is not None:
            result['ProductName'] = self.product_name
        if self.product_type is not None:
            result['ProductType'] = self.product_type
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.attribute_list = []
        if m.get('AttributeList') is not None:
            for k in m.get('AttributeList'):
                temp_model = QueryEBIResponseBodyRequestOrderOfferListProductAttributeList()
                self.attribute_list.append(temp_model.from_map(k))
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('EffectiveType') is not None:
            self.effective_type = m.get('EffectiveType')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('ExpireType') is not None:
            self.expire_type = m.get('ExpireType')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsProductId') is not None:
            self.ins_product_id = m.get('InsProductId')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('IsMain') is not None:
            self.is_main = m.get('IsMain')
        if m.get('OpenStatus') is not None:
            self.open_status = m.get('OpenStatus')
        if m.get('OperateTime') is not None:
            self.operate_time = m.get('OperateTime')
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('ProductId') is not None:
            self.product_id = m.get('ProductId')
        if m.get('ProductName') is not None:
            self.product_name = m.get('ProductName')
        if m.get('ProductType') is not None:
            self.product_type = m.get('ProductType')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class QueryEBIResponseBodyRequestOrderOfferList(TeaModel):
    def __init__(
        self,
        attribute_list: List[QueryEBIResponseBodyRequestOrderOfferListAttributeList] = None,
        billing_pkg_id: int = None,
        data_status: int = None,
        eff_param: str = None,
        effective_time: str = None,
        effective_type: str = None,
        exp_param: str = None,
        expire_time: str = None,
        expire_type: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_offer_id: int = None,
        ins_status: int = None,
        offer_id: int = None,
        offer_name: str = None,
        offer_type: str = None,
        old_effective_time: str = None,
        old_ins_offer_id: int = None,
        old_offer_id: int = None,
        operation_id: int = None,
        options: int = None,
        ord_type: str = None,
        product: QueryEBIResponseBodyRequestOrderOfferListProduct = None,
        remarks: str = None,
    ):
        self.attribute_list = attribute_list
        self.billing_pkg_id = billing_pkg_id
        self.data_status = data_status
        self.eff_param = eff_param
        self.effective_time = effective_time
        self.effective_type = effective_type
        self.exp_param = exp_param
        self.expire_time = expire_time
        self.expire_type = expire_type
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_offer_id = ins_offer_id
        self.ins_status = ins_status
        self.offer_id = offer_id
        self.offer_name = offer_name
        self.offer_type = offer_type
        self.old_effective_time = old_effective_time
        self.old_ins_offer_id = old_ins_offer_id
        self.old_offer_id = old_offer_id
        self.operation_id = operation_id
        self.options = options
        self.ord_type = ord_type
        self.product = product
        self.remarks = remarks

    def validate(self):
        if self.attribute_list:
            for k in self.attribute_list:
                if k:
                    k.validate()
        if self.product:
            self.product.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AttributeList'] = []
        if self.attribute_list is not None:
            for k in self.attribute_list:
                result['AttributeList'].append(k.to_map() if k else None)
        if self.billing_pkg_id is not None:
            result['BillingPkgId'] = self.billing_pkg_id
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.eff_param is not None:
            result['EffParam'] = self.eff_param
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.effective_type is not None:
            result['EffectiveType'] = self.effective_type
        if self.exp_param is not None:
            result['ExpParam'] = self.exp_param
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.expire_type is not None:
            result['ExpireType'] = self.expire_type
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_offer_id is not None:
            result['InsOfferId'] = self.ins_offer_id
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.offer_id is not None:
            result['OfferId'] = self.offer_id
        if self.offer_name is not None:
            result['OfferName'] = self.offer_name
        if self.offer_type is not None:
            result['OfferType'] = self.offer_type
        if self.old_effective_time is not None:
            result['OldEffectiveTime'] = self.old_effective_time
        if self.old_ins_offer_id is not None:
            result['OldInsOfferId'] = self.old_ins_offer_id
        if self.old_offer_id is not None:
            result['OldOfferId'] = self.old_offer_id
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.options is not None:
            result['Options'] = self.options
        if self.ord_type is not None:
            result['OrdType'] = self.ord_type
        if self.product is not None:
            result['Product'] = self.product.to_map()
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.attribute_list = []
        if m.get('AttributeList') is not None:
            for k in m.get('AttributeList'):
                temp_model = QueryEBIResponseBodyRequestOrderOfferListAttributeList()
                self.attribute_list.append(temp_model.from_map(k))
        if m.get('BillingPkgId') is not None:
            self.billing_pkg_id = m.get('BillingPkgId')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffParam') is not None:
            self.eff_param = m.get('EffParam')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('EffectiveType') is not None:
            self.effective_type = m.get('EffectiveType')
        if m.get('ExpParam') is not None:
            self.exp_param = m.get('ExpParam')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('ExpireType') is not None:
            self.expire_type = m.get('ExpireType')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsOfferId') is not None:
            self.ins_offer_id = m.get('InsOfferId')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('OfferId') is not None:
            self.offer_id = m.get('OfferId')
        if m.get('OfferName') is not None:
            self.offer_name = m.get('OfferName')
        if m.get('OfferType') is not None:
            self.offer_type = m.get('OfferType')
        if m.get('OldEffectiveTime') is not None:
            self.old_effective_time = m.get('OldEffectiveTime')
        if m.get('OldInsOfferId') is not None:
            self.old_ins_offer_id = m.get('OldInsOfferId')
        if m.get('OldOfferId') is not None:
            self.old_offer_id = m.get('OldOfferId')
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('OrdType') is not None:
            self.ord_type = m.get('OrdType')
        if m.get('Product') is not None:
            temp_model = QueryEBIResponseBodyRequestOrderOfferListProduct()
            self.product = temp_model.from_map(m['Product'])
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class QueryEBIResponseBodyRequestOrderProductListAttributeList(TeaModel):
    def __init__(
        self,
        attr_group: str = None,
        attr_id: int = None,
        attr_name: str = None,
        attr_text: str = None,
        attr_value: str = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        mapping_code: str = None,
        old_attr_text: str = None,
        old_attr_value: str = None,
        options: int = None,
        remarks: str = None,
        value_expression: str = None,
    ):
        self.attr_group = attr_group
        self.attr_id = attr_id
        self.attr_name = attr_name
        self.attr_text = attr_text
        self.attr_value = attr_value
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.mapping_code = mapping_code
        self.old_attr_text = old_attr_text
        self.old_attr_value = old_attr_value
        self.options = options
        self.remarks = remarks
        self.value_expression = value_expression

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attr_group is not None:
            result['AttrGroup'] = self.attr_group
        if self.attr_id is not None:
            result['AttrId'] = self.attr_id
        if self.attr_name is not None:
            result['AttrName'] = self.attr_name
        if self.attr_text is not None:
            result['AttrText'] = self.attr_text
        if self.attr_value is not None:
            result['AttrValue'] = self.attr_value
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.mapping_code is not None:
            result['MappingCode'] = self.mapping_code
        if self.old_attr_text is not None:
            result['OldAttrText'] = self.old_attr_text
        if self.old_attr_value is not None:
            result['OldAttrValue'] = self.old_attr_value
        if self.options is not None:
            result['Options'] = self.options
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.value_expression is not None:
            result['ValueExpression'] = self.value_expression
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AttrGroup') is not None:
            self.attr_group = m.get('AttrGroup')
        if m.get('AttrId') is not None:
            self.attr_id = m.get('AttrId')
        if m.get('AttrName') is not None:
            self.attr_name = m.get('AttrName')
        if m.get('AttrText') is not None:
            self.attr_text = m.get('AttrText')
        if m.get('AttrValue') is not None:
            self.attr_value = m.get('AttrValue')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('MappingCode') is not None:
            self.mapping_code = m.get('MappingCode')
        if m.get('OldAttrText') is not None:
            self.old_attr_text = m.get('OldAttrText')
        if m.get('OldAttrValue') is not None:
            self.old_attr_value = m.get('OldAttrValue')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ValueExpression') is not None:
            self.value_expression = m.get('ValueExpression')
        return self


class QueryEBIResponseBodyRequestOrderProductList(TeaModel):
    def __init__(
        self,
        attribute_list: List[QueryEBIResponseBodyRequestOrderProductListAttributeList] = None,
        data_status: int = None,
        effective_time: str = None,
        effective_type: str = None,
        expire_time: str = None,
        expire_type: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_product_id: int = None,
        ins_status: int = None,
        is_main: str = None,
        open_status: int = None,
        operate_time: str = None,
        operation_id: int = None,
        options: int = None,
        product_id: int = None,
        product_name: str = None,
        product_type: str = None,
        remarks: str = None,
    ):
        self.attribute_list = attribute_list
        self.data_status = data_status
        self.effective_time = effective_time
        self.effective_type = effective_type
        self.expire_time = expire_time
        self.expire_type = expire_type
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_product_id = ins_product_id
        self.ins_status = ins_status
        self.is_main = is_main
        self.open_status = open_status
        self.operate_time = operate_time
        self.operation_id = operation_id
        self.options = options
        self.product_id = product_id
        self.product_name = product_name
        self.product_type = product_type
        self.remarks = remarks

    def validate(self):
        if self.attribute_list:
            for k in self.attribute_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AttributeList'] = []
        if self.attribute_list is not None:
            for k in self.attribute_list:
                result['AttributeList'].append(k.to_map() if k else None)
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.effective_type is not None:
            result['EffectiveType'] = self.effective_type
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.expire_type is not None:
            result['ExpireType'] = self.expire_type
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_product_id is not None:
            result['InsProductId'] = self.ins_product_id
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.is_main is not None:
            result['IsMain'] = self.is_main
        if self.open_status is not None:
            result['OpenStatus'] = self.open_status
        if self.operate_time is not None:
            result['OperateTime'] = self.operate_time
        if self.operation_id is not None:
            result['OperationId'] = self.operation_id
        if self.options is not None:
            result['Options'] = self.options
        if self.product_id is not None:
            result['ProductId'] = self.product_id
        if self.product_name is not None:
            result['ProductName'] = self.product_name
        if self.product_type is not None:
            result['ProductType'] = self.product_type
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.attribute_list = []
        if m.get('AttributeList') is not None:
            for k in m.get('AttributeList'):
                temp_model = QueryEBIResponseBodyRequestOrderProductListAttributeList()
                self.attribute_list.append(temp_model.from_map(k))
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('EffectiveType') is not None:
            self.effective_type = m.get('EffectiveType')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('ExpireType') is not None:
            self.expire_type = m.get('ExpireType')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsProductId') is not None:
            self.ins_product_id = m.get('InsProductId')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('IsMain') is not None:
            self.is_main = m.get('IsMain')
        if m.get('OpenStatus') is not None:
            self.open_status = m.get('OpenStatus')
        if m.get('OperateTime') is not None:
            self.operate_time = m.get('OperateTime')
        if m.get('OperationId') is not None:
            self.operation_id = m.get('OperationId')
        if m.get('Options') is not None:
            self.options = m.get('Options')
        if m.get('ProductId') is not None:
            self.product_id = m.get('ProductId')
        if m.get('ProductName') is not None:
            self.product_name = m.get('ProductName')
        if m.get('ProductType') is not None:
            self.product_type = m.get('ProductType')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        return self


class QueryEBIResponseBodyRequestOrderRuleList(TeaModel):
    def __init__(
        self,
        act_on_ins_offer_id: int = None,
        act_on_operation_id: int = None,
        act_on_user_id: int = None,
        data_status: int = None,
        effective_time: str = None,
        expire_time: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_status: int = None,
        message: str = None,
        remarks: str = None,
        result_code: str = None,
        rule_code: str = None,
        rule_id: str = None,
        rule_name: str = None,
        rule_status: str = None,
        trigger_ins_offer_id: int = None,
    ):
        self.act_on_ins_offer_id = act_on_ins_offer_id
        self.act_on_operation_id = act_on_operation_id
        self.act_on_user_id = act_on_user_id
        self.data_status = data_status
        self.effective_time = effective_time
        self.expire_time = expire_time
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_status = ins_status
        self.message = message
        self.remarks = remarks
        self.result_code = result_code
        self.rule_code = rule_code
        self.rule_id = rule_id
        self.rule_name = rule_name
        self.rule_status = rule_status
        self.trigger_ins_offer_id = trigger_ins_offer_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.act_on_ins_offer_id is not None:
            result['ActOnInsOfferId'] = self.act_on_ins_offer_id
        if self.act_on_operation_id is not None:
            result['ActOnOperationId'] = self.act_on_operation_id
        if self.act_on_user_id is not None:
            result['ActOnUserId'] = self.act_on_user_id
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.effective_time is not None:
            result['EffectiveTime'] = self.effective_time
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.ins_status is not None:
            result['InsStatus'] = self.ins_status
        if self.message is not None:
            result['Message'] = self.message
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.result_code is not None:
            result['ResultCode'] = self.result_code
        if self.rule_code is not None:
            result['RuleCode'] = self.rule_code
        if self.rule_id is not None:
            result['RuleId'] = self.rule_id
        if self.rule_name is not None:
            result['RuleName'] = self.rule_name
        if self.rule_status is not None:
            result['RuleStatus'] = self.rule_status
        if self.trigger_ins_offer_id is not None:
            result['TriggerInsOfferId'] = self.trigger_ins_offer_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ActOnInsOfferId') is not None:
            self.act_on_ins_offer_id = m.get('ActOnInsOfferId')
        if m.get('ActOnOperationId') is not None:
            self.act_on_operation_id = m.get('ActOnOperationId')
        if m.get('ActOnUserId') is not None:
            self.act_on_user_id = m.get('ActOnUserId')
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('EffectiveTime') is not None:
            self.effective_time = m.get('EffectiveTime')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('InsStatus') is not None:
            self.ins_status = m.get('InsStatus')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ResultCode') is not None:
            self.result_code = m.get('ResultCode')
        if m.get('RuleCode') is not None:
            self.rule_code = m.get('RuleCode')
        if m.get('RuleId') is not None:
            self.rule_id = m.get('RuleId')
        if m.get('RuleName') is not None:
            self.rule_name = m.get('RuleName')
        if m.get('RuleStatus') is not None:
            self.rule_status = m.get('RuleStatus')
        if m.get('TriggerInsOfferId') is not None:
            self.trigger_ins_offer_id = m.get('TriggerInsOfferId')
        return self


class QueryEBIResponseBodyRequestOrder(TeaModel):
    def __init__(
        self,
        account: QueryEBIResponseBodyRequestOrderAccount = None,
        assets: QueryEBIResponseBodyRequestOrderAssets = None,
        busi_operation: QueryEBIResponseBodyRequestOrderBusiOperation = None,
        busi_operator: str = None,
        busi_price_list: List[QueryEBIResponseBodyRequestOrderBusiPriceList] = None,
        channel_id: str = None,
        customer: QueryEBIResponseBodyRequestOrderCustomer = None,
        data_status: int = None,
        ext_info: Dict[str, str] = None,
        is_auth: bool = None,
        offer_list: List[QueryEBIResponseBodyRequestOrderOfferList] = None,
        open_completed_time: str = None,
        order_id: int = None,
        order_no: str = None,
        order_serial_id: int = None,
        order_status: str = None,
        order_time: str = None,
        order_type: str = None,
        owner_id: str = None,
        parent_order_id: str = None,
        product_list: List[QueryEBIResponseBodyRequestOrderProductList] = None,
        remarks: str = None,
        rule_list: List[QueryEBIResponseBodyRequestOrderRuleList] = None,
    ):
        self.account = account
        self.assets = assets
        self.busi_operation = busi_operation
        self.busi_operator = busi_operator
        self.busi_price_list = busi_price_list
        self.channel_id = channel_id
        self.customer = customer
        self.data_status = data_status
        self.ext_info = ext_info
        self.is_auth = is_auth
        self.offer_list = offer_list
        self.open_completed_time = open_completed_time
        self.order_id = order_id
        self.order_no = order_no
        self.order_serial_id = order_serial_id
        self.order_status = order_status
        self.order_time = order_time
        self.order_type = order_type
        self.owner_id = owner_id
        self.parent_order_id = parent_order_id
        self.product_list = product_list
        self.remarks = remarks
        self.rule_list = rule_list

    def validate(self):
        if self.account:
            self.account.validate()
        if self.assets:
            self.assets.validate()
        if self.busi_operation:
            self.busi_operation.validate()
        if self.busi_price_list:
            for k in self.busi_price_list:
                if k:
                    k.validate()
        if self.customer:
            self.customer.validate()
        if self.offer_list:
            for k in self.offer_list:
                if k:
                    k.validate()
        if self.product_list:
            for k in self.product_list:
                if k:
                    k.validate()
        if self.rule_list:
            for k in self.rule_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account is not None:
            result['Account'] = self.account.to_map()
        if self.assets is not None:
            result['Assets'] = self.assets.to_map()
        if self.busi_operation is not None:
            result['BusiOperation'] = self.busi_operation.to_map()
        if self.busi_operator is not None:
            result['BusiOperator'] = self.busi_operator
        result['BusiPriceList'] = []
        if self.busi_price_list is not None:
            for k in self.busi_price_list:
                result['BusiPriceList'].append(k.to_map() if k else None)
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.customer is not None:
            result['Customer'] = self.customer.to_map()
        if self.data_status is not None:
            result['DataStatus'] = self.data_status
        if self.ext_info is not None:
            result['ExtInfo'] = self.ext_info
        if self.is_auth is not None:
            result['IsAuth'] = self.is_auth
        result['OfferList'] = []
        if self.offer_list is not None:
            for k in self.offer_list:
                result['OfferList'].append(k.to_map() if k else None)
        if self.open_completed_time is not None:
            result['OpenCompletedTime'] = self.open_completed_time
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.order_no is not None:
            result['OrderNo'] = self.order_no
        if self.order_serial_id is not None:
            result['OrderSerialId'] = self.order_serial_id
        if self.order_status is not None:
            result['OrderStatus'] = self.order_status
        if self.order_time is not None:
            result['OrderTime'] = self.order_time
        if self.order_type is not None:
            result['OrderType'] = self.order_type
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.parent_order_id is not None:
            result['ParentOrderId'] = self.parent_order_id
        result['ProductList'] = []
        if self.product_list is not None:
            for k in self.product_list:
                result['ProductList'].append(k.to_map() if k else None)
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        result['RuleList'] = []
        if self.rule_list is not None:
            for k in self.rule_list:
                result['RuleList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Account') is not None:
            temp_model = QueryEBIResponseBodyRequestOrderAccount()
            self.account = temp_model.from_map(m['Account'])
        if m.get('Assets') is not None:
            temp_model = QueryEBIResponseBodyRequestOrderAssets()
            self.assets = temp_model.from_map(m['Assets'])
        if m.get('BusiOperation') is not None:
            temp_model = QueryEBIResponseBodyRequestOrderBusiOperation()
            self.busi_operation = temp_model.from_map(m['BusiOperation'])
        if m.get('BusiOperator') is not None:
            self.busi_operator = m.get('BusiOperator')
        self.busi_price_list = []
        if m.get('BusiPriceList') is not None:
            for k in m.get('BusiPriceList'):
                temp_model = QueryEBIResponseBodyRequestOrderBusiPriceList()
                self.busi_price_list.append(temp_model.from_map(k))
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('Customer') is not None:
            temp_model = QueryEBIResponseBodyRequestOrderCustomer()
            self.customer = temp_model.from_map(m['Customer'])
        if m.get('DataStatus') is not None:
            self.data_status = m.get('DataStatus')
        if m.get('ExtInfo') is not None:
            self.ext_info = m.get('ExtInfo')
        if m.get('IsAuth') is not None:
            self.is_auth = m.get('IsAuth')
        self.offer_list = []
        if m.get('OfferList') is not None:
            for k in m.get('OfferList'):
                temp_model = QueryEBIResponseBodyRequestOrderOfferList()
                self.offer_list.append(temp_model.from_map(k))
        if m.get('OpenCompletedTime') is not None:
            self.open_completed_time = m.get('OpenCompletedTime')
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('OrderNo') is not None:
            self.order_no = m.get('OrderNo')
        if m.get('OrderSerialId') is not None:
            self.order_serial_id = m.get('OrderSerialId')
        if m.get('OrderStatus') is not None:
            self.order_status = m.get('OrderStatus')
        if m.get('OrderTime') is not None:
            self.order_time = m.get('OrderTime')
        if m.get('OrderType') is not None:
            self.order_type = m.get('OrderType')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ParentOrderId') is not None:
            self.parent_order_id = m.get('ParentOrderId')
        self.product_list = []
        if m.get('ProductList') is not None:
            for k in m.get('ProductList'):
                temp_model = QueryEBIResponseBodyRequestOrderProductList()
                self.product_list.append(temp_model.from_map(k))
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        self.rule_list = []
        if m.get('RuleList') is not None:
            for k in m.get('RuleList'):
                temp_model = QueryEBIResponseBodyRequestOrderRuleList()
                self.rule_list.append(temp_model.from_map(k))
        return self


class QueryEBIResponseBodyRequest(TeaModel):
    def __init__(
        self,
        is_sync: bool = None,
        order: QueryEBIResponseBodyRequestOrder = None,
        serial_no: str = None,
    ):
        self.is_sync = is_sync
        self.order = order
        self.serial_no = serial_no

    def validate(self):
        if self.order:
            self.order.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_sync is not None:
            result['IsSync'] = self.is_sync
        if self.order is not None:
            result['Order'] = self.order.to_map()
        if self.serial_no is not None:
            result['SerialNo'] = self.serial_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IsSync') is not None:
            self.is_sync = m.get('IsSync')
        if m.get('Order') is not None:
            temp_model = QueryEBIResponseBodyRequestOrder()
            self.order = temp_model.from_map(m['Order'])
        if m.get('SerialNo') is not None:
            self.serial_no = m.get('SerialNo')
        return self


class QueryEBIResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        desc: str = None,
        model: QueryEBIResponseBodyModel = None,
        query_count: int = None,
        request: QueryEBIResponseBodyRequest = None,
        success: bool = None,
    ):
        self.code = code
        self.desc = desc
        self.model = model
        self.query_count = query_count
        self.request = request
        self.success = success

    def validate(self):
        if self.model:
            self.model.validate()
        if self.request:
            self.request.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.model is not None:
            result['Model'] = self.model.to_map()
        if self.query_count is not None:
            result['QueryCount'] = self.query_count
        if self.request is not None:
            result['Request'] = self.request.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Model') is not None:
            temp_model = QueryEBIResponseBodyModel()
            self.model = temp_model.from_map(m['Model'])
        if m.get('QueryCount') is not None:
            self.query_count = m.get('QueryCount')
        if m.get('Request') is not None:
            temp_model = QueryEBIResponseBodyRequest()
            self.request = temp_model.from_map(m['Request'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class QueryEBIResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryEBIResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryEBIResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryEntPrivateNetAddressesRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        page_no: int = None,
        page_size: int = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.page_no = page_no
        self.page_size = page_size
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryEntPrivateNetAddressesResponseBodyDataUserAddressDOList(TeaModel):
    def __init__(
        self,
        access_type: str = None,
        addr_id: int = None,
        address: str = None,
        area: str = None,
        band_width: str = None,
        extra_fee: str = None,
        init_fee: str = None,
    ):
        self.access_type = access_type
        self.addr_id = addr_id
        self.address = address
        self.area = area
        self.band_width = band_width
        self.extra_fee = extra_fee
        self.init_fee = init_fee

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_type is not None:
            result['AccessType'] = self.access_type
        if self.addr_id is not None:
            result['AddrId'] = self.addr_id
        if self.address is not None:
            result['Address'] = self.address
        if self.area is not None:
            result['Area'] = self.area
        if self.band_width is not None:
            result['BandWidth'] = self.band_width
        if self.extra_fee is not None:
            result['ExtraFee'] = self.extra_fee
        if self.init_fee is not None:
            result['InitFee'] = self.init_fee
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccessType') is not None:
            self.access_type = m.get('AccessType')
        if m.get('AddrId') is not None:
            self.addr_id = m.get('AddrId')
        if m.get('Address') is not None:
            self.address = m.get('Address')
        if m.get('Area') is not None:
            self.area = m.get('Area')
        if m.get('BandWidth') is not None:
            self.band_width = m.get('BandWidth')
        if m.get('ExtraFee') is not None:
            self.extra_fee = m.get('ExtraFee')
        if m.get('InitFee') is not None:
            self.init_fee = m.get('InitFee')
        return self


class QueryEntPrivateNetAddressesResponseBodyData(TeaModel):
    def __init__(
        self,
        page_no: int = None,
        page_size: int = None,
        total: int = None,
        user_address_dolist: List[QueryEntPrivateNetAddressesResponseBodyDataUserAddressDOList] = None,
    ):
        self.page_no = page_no
        self.page_size = page_size
        self.total = total
        self.user_address_dolist = user_address_dolist

    def validate(self):
        if self.user_address_dolist:
            for k in self.user_address_dolist:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total is not None:
            result['Total'] = self.total
        result['UserAddressDOList'] = []
        if self.user_address_dolist is not None:
            for k in self.user_address_dolist:
                result['UserAddressDOList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        self.user_address_dolist = []
        if m.get('UserAddressDOList') is not None:
            for k in m.get('UserAddressDOList'):
                temp_model = QueryEntPrivateNetAddressesResponseBodyDataUserAddressDOList()
                self.user_address_dolist.append(temp_model.from_map(k))
        return self


class QueryEntPrivateNetAddressesResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result_message: str = None,
        success: str = None,
        code: str = None,
        data: QueryEntPrivateNetAddressesResponseBodyData = None,
    ):
        self.request_id = request_id
        self.result_message = result_message
        self.success = success
        self.code = code
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        if self.success is not None:
            result['Success'] = self.success
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            temp_model = QueryEntPrivateNetAddressesResponseBodyData()
            self.data = temp_model.from_map(m['data'])
        return self


class QueryEntPrivateNetAddressesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryEntPrivateNetAddressesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryEntPrivateNetAddressesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryEntPrivateNetOrdersRequest(TeaModel):
    def __init__(
        self,
        filter_address: str = None,
        filter_intention_id: int = None,
        filter_status: str = None,
        owner_id: int = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.filter_address = filter_address
        self.filter_intention_id = filter_intention_id
        self.filter_status = filter_status
        self.owner_id = owner_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.filter_address is not None:
            result['FilterAddress'] = self.filter_address
        if self.filter_intention_id is not None:
            result['FilterIntentionId'] = self.filter_intention_id
        if self.filter_status is not None:
            result['FilterStatus'] = self.filter_status
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FilterAddress') is not None:
            self.filter_address = m.get('FilterAddress')
        if m.get('FilterIntentionId') is not None:
            self.filter_intention_id = m.get('FilterIntentionId')
        if m.get('FilterStatus') is not None:
            self.filter_status = m.get('FilterStatus')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryEntPrivateNetOrdersResponseBodyDataOrderDetailList(TeaModel):
    def __init__(
        self,
        address: str = None,
        address_id: str = None,
        aliyun_ip: str = None,
        band_width: str = None,
        buy_cycle: str = None,
        contact_email: str = None,
        cust_name: str = None,
        effective_date_str: str = None,
        expires_date_str: str = None,
        fail_date_str: str = None,
        fail_reason: str = None,
        gmt_create_str: str = None,
        install_region: str = None,
        installation_fee: str = None,
        nat_ip: str = None,
        order_id: int = None,
        phone_number: str = None,
        refund_date_str: str = None,
        status: str = None,
        wtt_ord_biz_id: str = None,
    ):
        self.address = address
        self.address_id = address_id
        self.aliyun_ip = aliyun_ip
        self.band_width = band_width
        self.buy_cycle = buy_cycle
        self.contact_email = contact_email
        self.cust_name = cust_name
        self.effective_date_str = effective_date_str
        self.expires_date_str = expires_date_str
        self.fail_date_str = fail_date_str
        self.fail_reason = fail_reason
        self.gmt_create_str = gmt_create_str
        self.install_region = install_region
        self.installation_fee = installation_fee
        self.nat_ip = nat_ip
        self.order_id = order_id
        self.phone_number = phone_number
        self.refund_date_str = refund_date_str
        self.status = status
        self.wtt_ord_biz_id = wtt_ord_biz_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['Address'] = self.address
        if self.address_id is not None:
            result['AddressId'] = self.address_id
        if self.aliyun_ip is not None:
            result['AliyunIp'] = self.aliyun_ip
        if self.band_width is not None:
            result['BandWidth'] = self.band_width
        if self.buy_cycle is not None:
            result['BuyCycle'] = self.buy_cycle
        if self.contact_email is not None:
            result['ContactEmail'] = self.contact_email
        if self.cust_name is not None:
            result['CustName'] = self.cust_name
        if self.effective_date_str is not None:
            result['EffectiveDateStr'] = self.effective_date_str
        if self.expires_date_str is not None:
            result['ExpiresDateStr'] = self.expires_date_str
        if self.fail_date_str is not None:
            result['FailDateStr'] = self.fail_date_str
        if self.fail_reason is not None:
            result['FailReason'] = self.fail_reason
        if self.gmt_create_str is not None:
            result['GmtCreateStr'] = self.gmt_create_str
        if self.install_region is not None:
            result['InstallRegion'] = self.install_region
        if self.installation_fee is not None:
            result['InstallationFee'] = self.installation_fee
        if self.nat_ip is not None:
            result['NatIp'] = self.nat_ip
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.refund_date_str is not None:
            result['RefundDateStr'] = self.refund_date_str
        if self.status is not None:
            result['Status'] = self.status
        if self.wtt_ord_biz_id is not None:
            result['WttOrdBizId'] = self.wtt_ord_biz_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Address') is not None:
            self.address = m.get('Address')
        if m.get('AddressId') is not None:
            self.address_id = m.get('AddressId')
        if m.get('AliyunIp') is not None:
            self.aliyun_ip = m.get('AliyunIp')
        if m.get('BandWidth') is not None:
            self.band_width = m.get('BandWidth')
        if m.get('BuyCycle') is not None:
            self.buy_cycle = m.get('BuyCycle')
        if m.get('ContactEmail') is not None:
            self.contact_email = m.get('ContactEmail')
        if m.get('CustName') is not None:
            self.cust_name = m.get('CustName')
        if m.get('EffectiveDateStr') is not None:
            self.effective_date_str = m.get('EffectiveDateStr')
        if m.get('ExpiresDateStr') is not None:
            self.expires_date_str = m.get('ExpiresDateStr')
        if m.get('FailDateStr') is not None:
            self.fail_date_str = m.get('FailDateStr')
        if m.get('FailReason') is not None:
            self.fail_reason = m.get('FailReason')
        if m.get('GmtCreateStr') is not None:
            self.gmt_create_str = m.get('GmtCreateStr')
        if m.get('InstallRegion') is not None:
            self.install_region = m.get('InstallRegion')
        if m.get('InstallationFee') is not None:
            self.installation_fee = m.get('InstallationFee')
        if m.get('NatIp') is not None:
            self.nat_ip = m.get('NatIp')
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('RefundDateStr') is not None:
            self.refund_date_str = m.get('RefundDateStr')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('WttOrdBizId') is not None:
            self.wtt_ord_biz_id = m.get('WttOrdBizId')
        return self


class QueryEntPrivateNetOrdersResponseBodyData(TeaModel):
    def __init__(
        self,
        order_detail_list: List[QueryEntPrivateNetOrdersResponseBodyDataOrderDetailList] = None,
        page_no: int = None,
        page_size: int = None,
        total: int = None,
    ):
        self.order_detail_list = order_detail_list
        self.page_no = page_no
        self.page_size = page_size
        self.total = total

    def validate(self):
        if self.order_detail_list:
            for k in self.order_detail_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['OrderDetailList'] = []
        if self.order_detail_list is not None:
            for k in self.order_detail_list:
                result['OrderDetailList'].append(k.to_map() if k else None)
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.order_detail_list = []
        if m.get('OrderDetailList') is not None:
            for k in m.get('OrderDetailList'):
                temp_model = QueryEntPrivateNetOrdersResponseBodyDataOrderDetailList()
                self.order_detail_list.append(temp_model.from_map(k))
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class QueryEntPrivateNetOrdersResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result_message: str = None,
        success: str = None,
        code: str = None,
        data: QueryEntPrivateNetOrdersResponseBodyData = None,
    ):
        self.request_id = request_id
        self.result_message = result_message
        self.success = success
        self.code = code
        self.data = data

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result_message is not None:
            result['ResultMessage'] = self.result_message
        if self.success is not None:
            result['Success'] = self.success
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResultMessage') is not None:
            self.result_message = m.get('ResultMessage')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            temp_model = QueryEntPrivateNetOrdersResponseBodyData()
            self.data = temp_model.from_map(m['data'])
        return self


class QueryEntPrivateNetOrdersResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryEntPrivateNetOrdersResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryEntPrivateNetOrdersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryEpnInstancesRequestTagKeyValueModels(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class QueryEpnInstancesRequest(TeaModel):
    def __init__(
        self,
        ak_proxy: str = None,
        ali_uid: int = None,
        api_name: str = None,
        app_key: str = None,
        caller_bid: str = None,
        caller_bid_login_email: str = None,
        caller_security_transport: bool = None,
        caller_type: str = None,
        caller_uid: int = None,
        caller_uid_login_email: str = None,
        channel: str = None,
        client_ip: str = None,
        enable: bool = None,
        epn_id: str = None,
        from_type: int = None,
        mfa_present: bool = None,
        operator: str = None,
        owner_account: str = None,
        owner_id: int = None,
        owner_id_login_email: str = None,
        page: int = None,
        page_size: int = None,
        prod_code: str = None,
        proxy_caller_ip: str = None,
        proxy_caller_security_transport: bool = None,
        proxy_id: str = None,
        proxy_trust_transport_info: bool = None,
        request_content: str = None,
        request_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        security_token: str = None,
        sms_resource_owner_id: int = None,
        tag_key_1: str = None,
        tag_key_2: str = None,
        tag_key_3: str = None,
        tag_key_4: str = None,
        tag_key_5: str = None,
        tag_key_value_models: List[QueryEpnInstancesRequestTagKeyValueModels] = None,
        tag_value_1: str = None,
        tag_value_2: str = None,
        tag_value_3: str = None,
        tag_value_4: str = None,
        tag_value_5: str = None,
        token: str = None,
        version: str = None,
    ):
        self.ak_proxy = ak_proxy
        self.ali_uid = ali_uid
        self.api_name = api_name
        self.app_key = app_key
        self.caller_bid = caller_bid
        self.caller_bid_login_email = caller_bid_login_email
        self.caller_security_transport = caller_security_transport
        self.caller_type = caller_type
        self.caller_uid = caller_uid
        self.caller_uid_login_email = caller_uid_login_email
        self.channel = channel
        self.client_ip = client_ip
        self.enable = enable
        self.epn_id = epn_id
        self.from_type = from_type
        self.mfa_present = mfa_present
        self.operator = operator
        self.owner_account = owner_account
        self.owner_id = owner_id
        self.owner_id_login_email = owner_id_login_email
        self.page = page
        self.page_size = page_size
        self.prod_code = prod_code
        self.proxy_caller_ip = proxy_caller_ip
        self.proxy_caller_security_transport = proxy_caller_security_transport
        self.proxy_id = proxy_id
        self.proxy_trust_transport_info = proxy_trust_transport_info
        self.request_content = request_content
        self.request_id = request_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.security_token = security_token
        self.sms_resource_owner_id = sms_resource_owner_id
        self.tag_key_1 = tag_key_1
        self.tag_key_2 = tag_key_2
        self.tag_key_3 = tag_key_3
        self.tag_key_4 = tag_key_4
        self.tag_key_5 = tag_key_5
        self.tag_key_value_models = tag_key_value_models
        self.tag_value_1 = tag_value_1
        self.tag_value_2 = tag_value_2
        self.tag_value_3 = tag_value_3
        self.tag_value_4 = tag_value_4
        self.tag_value_5 = tag_value_5
        self.token = token
        self.version = version

    def validate(self):
        if self.tag_key_value_models:
            for k in self.tag_key_value_models:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ak_proxy is not None:
            result['AkProxy'] = self.ak_proxy
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.caller_bid is not None:
            result['CallerBid'] = self.caller_bid
        if self.caller_bid_login_email is not None:
            result['CallerBidLoginEmail'] = self.caller_bid_login_email
        if self.caller_security_transport is not None:
            result['CallerSecurityTransport'] = self.caller_security_transport
        if self.caller_type is not None:
            result['CallerType'] = self.caller_type
        if self.caller_uid is not None:
            result['CallerUid'] = self.caller_uid
        if self.caller_uid_login_email is not None:
            result['CallerUidLoginEmail'] = self.caller_uid_login_email
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.client_ip is not None:
            result['ClientIP'] = self.client_ip
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.epn_id is not None:
            result['EpnId'] = self.epn_id
        if self.from_type is not None:
            result['FromType'] = self.from_type
        if self.mfa_present is not None:
            result['MfaPresent'] = self.mfa_present
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.owner_account is not None:
            result['OwnerAccount'] = self.owner_account
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.owner_id_login_email is not None:
            result['OwnerIdLoginEmail'] = self.owner_id_login_email
        if self.page is not None:
            result['Page'] = self.page
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.proxy_caller_ip is not None:
            result['ProxyCallerIp'] = self.proxy_caller_ip
        if self.proxy_caller_security_transport is not None:
            result['ProxyCallerSecurityTransport'] = self.proxy_caller_security_transport
        if self.proxy_id is not None:
            result['ProxyId'] = self.proxy_id
        if self.proxy_trust_transport_info is not None:
            result['ProxyTrustTransportInfo'] = self.proxy_trust_transport_info
        if self.request_content is not None:
            result['RequestContent'] = self.request_content
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        if self.sms_resource_owner_id is not None:
            result['SmsResourceOwnerId'] = self.sms_resource_owner_id
        if self.tag_key_1 is not None:
            result['TagKey1'] = self.tag_key_1
        if self.tag_key_2 is not None:
            result['TagKey2'] = self.tag_key_2
        if self.tag_key_3 is not None:
            result['TagKey3'] = self.tag_key_3
        if self.tag_key_4 is not None:
            result['TagKey4'] = self.tag_key_4
        if self.tag_key_5 is not None:
            result['TagKey5'] = self.tag_key_5
        result['TagKeyValueModels'] = []
        if self.tag_key_value_models is not None:
            for k in self.tag_key_value_models:
                result['TagKeyValueModels'].append(k.to_map() if k else None)
        if self.tag_value_1 is not None:
            result['TagValue1'] = self.tag_value_1
        if self.tag_value_2 is not None:
            result['TagValue2'] = self.tag_value_2
        if self.tag_value_3 is not None:
            result['TagValue3'] = self.tag_value_3
        if self.tag_value_4 is not None:
            result['TagValue4'] = self.tag_value_4
        if self.tag_value_5 is not None:
            result['TagValue5'] = self.tag_value_5
        if self.token is not None:
            result['Token'] = self.token
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AkProxy') is not None:
            self.ak_proxy = m.get('AkProxy')
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('CallerBid') is not None:
            self.caller_bid = m.get('CallerBid')
        if m.get('CallerBidLoginEmail') is not None:
            self.caller_bid_login_email = m.get('CallerBidLoginEmail')
        if m.get('CallerSecurityTransport') is not None:
            self.caller_security_transport = m.get('CallerSecurityTransport')
        if m.get('CallerType') is not None:
            self.caller_type = m.get('CallerType')
        if m.get('CallerUid') is not None:
            self.caller_uid = m.get('CallerUid')
        if m.get('CallerUidLoginEmail') is not None:
            self.caller_uid_login_email = m.get('CallerUidLoginEmail')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ClientIP') is not None:
            self.client_ip = m.get('ClientIP')
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('EpnId') is not None:
            self.epn_id = m.get('EpnId')
        if m.get('FromType') is not None:
            self.from_type = m.get('FromType')
        if m.get('MfaPresent') is not None:
            self.mfa_present = m.get('MfaPresent')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('OwnerAccount') is not None:
            self.owner_account = m.get('OwnerAccount')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('OwnerIdLoginEmail') is not None:
            self.owner_id_login_email = m.get('OwnerIdLoginEmail')
        if m.get('Page') is not None:
            self.page = m.get('Page')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProxyCallerIp') is not None:
            self.proxy_caller_ip = m.get('ProxyCallerIp')
        if m.get('ProxyCallerSecurityTransport') is not None:
            self.proxy_caller_security_transport = m.get('ProxyCallerSecurityTransport')
        if m.get('ProxyId') is not None:
            self.proxy_id = m.get('ProxyId')
        if m.get('ProxyTrustTransportInfo') is not None:
            self.proxy_trust_transport_info = m.get('ProxyTrustTransportInfo')
        if m.get('RequestContent') is not None:
            self.request_content = m.get('RequestContent')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        if m.get('SmsResourceOwnerId') is not None:
            self.sms_resource_owner_id = m.get('SmsResourceOwnerId')
        if m.get('TagKey1') is not None:
            self.tag_key_1 = m.get('TagKey1')
        if m.get('TagKey2') is not None:
            self.tag_key_2 = m.get('TagKey2')
        if m.get('TagKey3') is not None:
            self.tag_key_3 = m.get('TagKey3')
        if m.get('TagKey4') is not None:
            self.tag_key_4 = m.get('TagKey4')
        if m.get('TagKey5') is not None:
            self.tag_key_5 = m.get('TagKey5')
        self.tag_key_value_models = []
        if m.get('TagKeyValueModels') is not None:
            for k in m.get('TagKeyValueModels'):
                temp_model = QueryEpnInstancesRequestTagKeyValueModels()
                self.tag_key_value_models.append(temp_model.from_map(k))
        if m.get('TagValue1') is not None:
            self.tag_value_1 = m.get('TagValue1')
        if m.get('TagValue2') is not None:
            self.tag_value_2 = m.get('TagValue2')
        if m.get('TagValue3') is not None:
            self.tag_value_3 = m.get('TagValue3')
        if m.get('TagValue4') is not None:
            self.tag_value_4 = m.get('TagValue4')
        if m.get('TagValue5') is not None:
            self.tag_value_5 = m.get('TagValue5')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class QueryEpnInstancesResponseBodyContentData(TeaModel):
    def __init__(
        self,
        accelerate: bool = None,
        aliuid: int = None,
        dscp: int = None,
        end_time: str = None,
        epn_id: str = None,
        epn_name: str = None,
        limit_rx: int = None,
        limit_tx: int = None,
        security: bool = None,
        start_time: str = None,
        status: int = None,
    ):
        self.accelerate = accelerate
        self.aliuid = aliuid
        self.dscp = dscp
        self.end_time = end_time
        self.epn_id = epn_id
        self.epn_name = epn_name
        self.limit_rx = limit_rx
        self.limit_tx = limit_tx
        self.security = security
        self.start_time = start_time
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.accelerate is not None:
            result['Accelerate'] = self.accelerate
        if self.aliuid is not None:
            result['Aliuid'] = self.aliuid
        if self.dscp is not None:
            result['Dscp'] = self.dscp
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.epn_id is not None:
            result['EpnId'] = self.epn_id
        if self.epn_name is not None:
            result['EpnName'] = self.epn_name
        if self.limit_rx is not None:
            result['LimitRx'] = self.limit_rx
        if self.limit_tx is not None:
            result['LimitTx'] = self.limit_tx
        if self.security is not None:
            result['Security'] = self.security
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Accelerate') is not None:
            self.accelerate = m.get('Accelerate')
        if m.get('Aliuid') is not None:
            self.aliuid = m.get('Aliuid')
        if m.get('Dscp') is not None:
            self.dscp = m.get('Dscp')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('EpnId') is not None:
            self.epn_id = m.get('EpnId')
        if m.get('EpnName') is not None:
            self.epn_name = m.get('EpnName')
        if m.get('LimitRx') is not None:
            self.limit_rx = m.get('LimitRx')
        if m.get('LimitTx') is not None:
            self.limit_tx = m.get('LimitTx')
        if m.get('Security') is not None:
            self.security = m.get('Security')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class QueryEpnInstancesResponseBodyContent(TeaModel):
    def __init__(
        self,
        data: List[QueryEpnInstancesResponseBodyContentData] = None,
        page: int = None,
        page_size: int = None,
        pages: int = None,
        total_count: int = None,
    ):
        self.data = data
        self.page = page
        self.page_size = page_size
        self.pages = pages
        self.total_count = total_count

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.page is not None:
            result['Page'] = self.page
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.pages is not None:
            result['Pages'] = self.pages
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = QueryEpnInstancesResponseBodyContentData()
                self.data.append(temp_model.from_map(k))
        if m.get('Page') is not None:
            self.page = m.get('Page')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Pages') is not None:
            self.pages = m.get('Pages')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class QueryEpnInstancesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        content: QueryEpnInstancesResponseBodyContent = None,
        desc: str = None,
        description: str = None,
        request_id: str = None,
        ret_code: int = None,
        success: bool = None,
    ):
        self.code = code
        self.content = content
        self.desc = desc
        self.description = description
        self.request_id = request_id
        self.ret_code = ret_code
        self.success = success

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.content is not None:
            result['Content'] = self.content.to_map()
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.description is not None:
            result['Description'] = self.description
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.ret_code is not None:
            result['RetCode'] = self.ret_code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Content') is not None:
            temp_model = QueryEpnInstancesResponseBodyContent()
            self.content = temp_model.from_map(m['Content'])
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RetCode') is not None:
            self.ret_code = m.get('RetCode')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class QueryEpnInstancesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryEpnInstancesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryEpnInstancesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryEvgwInstancesRequestTagKeyValueModels(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class QueryEvgwInstancesRequest(TeaModel):
    def __init__(
        self,
        ak_proxy: str = None,
        ali_uid: int = None,
        api_name: str = None,
        app_key: str = None,
        caller_bid: str = None,
        caller_bid_login_email: str = None,
        caller_security_transport: bool = None,
        caller_type: str = None,
        caller_uid: int = None,
        caller_uid_login_email: str = None,
        channel: str = None,
        client_ip: str = None,
        enable: bool = None,
        evgw_id: str = None,
        from_type: int = None,
        mfa_present: bool = None,
        operator: str = None,
        owner_account: str = None,
        owner_id: int = None,
        owner_id_login_email: str = None,
        page: int = None,
        page_size: int = None,
        prod_code: str = None,
        proxy_caller_ip: str = None,
        proxy_caller_security_transport: bool = None,
        proxy_id: str = None,
        proxy_trust_transport_info: bool = None,
        request_content: str = None,
        request_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        security_token: str = None,
        sms_resource_owner_id: int = None,
        tag_key_1: str = None,
        tag_key_2: str = None,
        tag_key_3: str = None,
        tag_key_4: str = None,
        tag_key_5: str = None,
        tag_key_value_models: List[QueryEvgwInstancesRequestTagKeyValueModels] = None,
        tag_value_1: str = None,
        tag_value_2: str = None,
        tag_value_3: str = None,
        tag_value_4: str = None,
        tag_value_5: str = None,
        token: str = None,
        version: str = None,
    ):
        self.ak_proxy = ak_proxy
        self.ali_uid = ali_uid
        self.api_name = api_name
        self.app_key = app_key
        self.caller_bid = caller_bid
        self.caller_bid_login_email = caller_bid_login_email
        self.caller_security_transport = caller_security_transport
        self.caller_type = caller_type
        self.caller_uid = caller_uid
        self.caller_uid_login_email = caller_uid_login_email
        self.channel = channel
        self.client_ip = client_ip
        self.enable = enable
        self.evgw_id = evgw_id
        self.from_type = from_type
        self.mfa_present = mfa_present
        self.operator = operator
        self.owner_account = owner_account
        self.owner_id = owner_id
        self.owner_id_login_email = owner_id_login_email
        self.page = page
        self.page_size = page_size
        self.prod_code = prod_code
        self.proxy_caller_ip = proxy_caller_ip
        self.proxy_caller_security_transport = proxy_caller_security_transport
        self.proxy_id = proxy_id
        self.proxy_trust_transport_info = proxy_trust_transport_info
        self.request_content = request_content
        self.request_id = request_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.security_token = security_token
        self.sms_resource_owner_id = sms_resource_owner_id
        self.tag_key_1 = tag_key_1
        self.tag_key_2 = tag_key_2
        self.tag_key_3 = tag_key_3
        self.tag_key_4 = tag_key_4
        self.tag_key_5 = tag_key_5
        self.tag_key_value_models = tag_key_value_models
        self.tag_value_1 = tag_value_1
        self.tag_value_2 = tag_value_2
        self.tag_value_3 = tag_value_3
        self.tag_value_4 = tag_value_4
        self.tag_value_5 = tag_value_5
        self.token = token
        self.version = version

    def validate(self):
        if self.tag_key_value_models:
            for k in self.tag_key_value_models:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ak_proxy is not None:
            result['AkProxy'] = self.ak_proxy
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.caller_bid is not None:
            result['CallerBid'] = self.caller_bid
        if self.caller_bid_login_email is not None:
            result['CallerBidLoginEmail'] = self.caller_bid_login_email
        if self.caller_security_transport is not None:
            result['CallerSecurityTransport'] = self.caller_security_transport
        if self.caller_type is not None:
            result['CallerType'] = self.caller_type
        if self.caller_uid is not None:
            result['CallerUid'] = self.caller_uid
        if self.caller_uid_login_email is not None:
            result['CallerUidLoginEmail'] = self.caller_uid_login_email
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.client_ip is not None:
            result['ClientIP'] = self.client_ip
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.evgw_id is not None:
            result['EvgwId'] = self.evgw_id
        if self.from_type is not None:
            result['FromType'] = self.from_type
        if self.mfa_present is not None:
            result['MfaPresent'] = self.mfa_present
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.owner_account is not None:
            result['OwnerAccount'] = self.owner_account
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.owner_id_login_email is not None:
            result['OwnerIdLoginEmail'] = self.owner_id_login_email
        if self.page is not None:
            result['Page'] = self.page
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.proxy_caller_ip is not None:
            result['ProxyCallerIp'] = self.proxy_caller_ip
        if self.proxy_caller_security_transport is not None:
            result['ProxyCallerSecurityTransport'] = self.proxy_caller_security_transport
        if self.proxy_id is not None:
            result['ProxyId'] = self.proxy_id
        if self.proxy_trust_transport_info is not None:
            result['ProxyTrustTransportInfo'] = self.proxy_trust_transport_info
        if self.request_content is not None:
            result['RequestContent'] = self.request_content
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        if self.sms_resource_owner_id is not None:
            result['SmsResourceOwnerId'] = self.sms_resource_owner_id
        if self.tag_key_1 is not None:
            result['TagKey1'] = self.tag_key_1
        if self.tag_key_2 is not None:
            result['TagKey2'] = self.tag_key_2
        if self.tag_key_3 is not None:
            result['TagKey3'] = self.tag_key_3
        if self.tag_key_4 is not None:
            result['TagKey4'] = self.tag_key_4
        if self.tag_key_5 is not None:
            result['TagKey5'] = self.tag_key_5
        result['TagKeyValueModels'] = []
        if self.tag_key_value_models is not None:
            for k in self.tag_key_value_models:
                result['TagKeyValueModels'].append(k.to_map() if k else None)
        if self.tag_value_1 is not None:
            result['TagValue1'] = self.tag_value_1
        if self.tag_value_2 is not None:
            result['TagValue2'] = self.tag_value_2
        if self.tag_value_3 is not None:
            result['TagValue3'] = self.tag_value_3
        if self.tag_value_4 is not None:
            result['TagValue4'] = self.tag_value_4
        if self.tag_value_5 is not None:
            result['TagValue5'] = self.tag_value_5
        if self.token is not None:
            result['Token'] = self.token
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AkProxy') is not None:
            self.ak_proxy = m.get('AkProxy')
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('CallerBid') is not None:
            self.caller_bid = m.get('CallerBid')
        if m.get('CallerBidLoginEmail') is not None:
            self.caller_bid_login_email = m.get('CallerBidLoginEmail')
        if m.get('CallerSecurityTransport') is not None:
            self.caller_security_transport = m.get('CallerSecurityTransport')
        if m.get('CallerType') is not None:
            self.caller_type = m.get('CallerType')
        if m.get('CallerUid') is not None:
            self.caller_uid = m.get('CallerUid')
        if m.get('CallerUidLoginEmail') is not None:
            self.caller_uid_login_email = m.get('CallerUidLoginEmail')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ClientIP') is not None:
            self.client_ip = m.get('ClientIP')
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('EvgwId') is not None:
            self.evgw_id = m.get('EvgwId')
        if m.get('FromType') is not None:
            self.from_type = m.get('FromType')
        if m.get('MfaPresent') is not None:
            self.mfa_present = m.get('MfaPresent')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('OwnerAccount') is not None:
            self.owner_account = m.get('OwnerAccount')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('OwnerIdLoginEmail') is not None:
            self.owner_id_login_email = m.get('OwnerIdLoginEmail')
        if m.get('Page') is not None:
            self.page = m.get('Page')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProxyCallerIp') is not None:
            self.proxy_caller_ip = m.get('ProxyCallerIp')
        if m.get('ProxyCallerSecurityTransport') is not None:
            self.proxy_caller_security_transport = m.get('ProxyCallerSecurityTransport')
        if m.get('ProxyId') is not None:
            self.proxy_id = m.get('ProxyId')
        if m.get('ProxyTrustTransportInfo') is not None:
            self.proxy_trust_transport_info = m.get('ProxyTrustTransportInfo')
        if m.get('RequestContent') is not None:
            self.request_content = m.get('RequestContent')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        if m.get('SmsResourceOwnerId') is not None:
            self.sms_resource_owner_id = m.get('SmsResourceOwnerId')
        if m.get('TagKey1') is not None:
            self.tag_key_1 = m.get('TagKey1')
        if m.get('TagKey2') is not None:
            self.tag_key_2 = m.get('TagKey2')
        if m.get('TagKey3') is not None:
            self.tag_key_3 = m.get('TagKey3')
        if m.get('TagKey4') is not None:
            self.tag_key_4 = m.get('TagKey4')
        if m.get('TagKey5') is not None:
            self.tag_key_5 = m.get('TagKey5')
        self.tag_key_value_models = []
        if m.get('TagKeyValueModels') is not None:
            for k in m.get('TagKeyValueModels'):
                temp_model = QueryEvgwInstancesRequestTagKeyValueModels()
                self.tag_key_value_models.append(temp_model.from_map(k))
        if m.get('TagValue1') is not None:
            self.tag_value_1 = m.get('TagValue1')
        if m.get('TagValue2') is not None:
            self.tag_value_2 = m.get('TagValue2')
        if m.get('TagValue3') is not None:
            self.tag_value_3 = m.get('TagValue3')
        if m.get('TagValue4') is not None:
            self.tag_value_4 = m.get('TagValue4')
        if m.get('TagValue5') is not None:
            self.tag_value_5 = m.get('TagValue5')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class QueryEvgwInstancesResponseBodyContentData(TeaModel):
    def __init__(
        self,
        ali_uid: int = None,
        evgw_id: str = None,
        evgw_name: str = None,
        ipsec_psk: str = None,
        region_id: str = None,
        status: int = None,
    ):
        self.ali_uid = ali_uid
        self.evgw_id = evgw_id
        self.evgw_name = evgw_name
        self.ipsec_psk = ipsec_psk
        self.region_id = region_id
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.evgw_id is not None:
            result['EvgwId'] = self.evgw_id
        if self.evgw_name is not None:
            result['EvgwName'] = self.evgw_name
        if self.ipsec_psk is not None:
            result['IpsecPsk'] = self.ipsec_psk
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('EvgwId') is not None:
            self.evgw_id = m.get('EvgwId')
        if m.get('EvgwName') is not None:
            self.evgw_name = m.get('EvgwName')
        if m.get('IpsecPsk') is not None:
            self.ipsec_psk = m.get('IpsecPsk')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class QueryEvgwInstancesResponseBodyContent(TeaModel):
    def __init__(
        self,
        data: List[QueryEvgwInstancesResponseBodyContentData] = None,
        page: int = None,
        page_size: int = None,
        pages: int = None,
        total_count: int = None,
    ):
        self.data = data
        self.page = page
        self.page_size = page_size
        self.pages = pages
        self.total_count = total_count

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.page is not None:
            result['Page'] = self.page
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.pages is not None:
            result['Pages'] = self.pages
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = QueryEvgwInstancesResponseBodyContentData()
                self.data.append(temp_model.from_map(k))
        if m.get('Page') is not None:
            self.page = m.get('Page')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Pages') is not None:
            self.pages = m.get('Pages')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class QueryEvgwInstancesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        content: QueryEvgwInstancesResponseBodyContent = None,
        desc: str = None,
        description: str = None,
        request_id: str = None,
        ret_code: int = None,
        success: bool = None,
    ):
        self.code = code
        self.content = content
        self.desc = desc
        self.description = description
        self.request_id = request_id
        self.ret_code = ret_code
        self.success = success

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.content is not None:
            result['Content'] = self.content.to_map()
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.description is not None:
            result['Description'] = self.description
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.ret_code is not None:
            result['RetCode'] = self.ret_code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Content') is not None:
            temp_model = QueryEvgwInstancesResponseBodyContent()
            self.content = temp_model.from_map(m['Content'])
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RetCode') is not None:
            self.ret_code = m.get('RetCode')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class QueryEvgwInstancesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryEvgwInstancesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryEvgwInstancesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryOpenStatusRequest(TeaModel):
    def __init__(
        self,
        bus_offer: int = None,
        owner_id: int = None,
        prod_code: str = None,
        prod_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.bus_offer = bus_offer
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.prod_id = prod_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bus_offer is not None:
            result['BusOffer'] = self.bus_offer
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.prod_id is not None:
            result['ProdId'] = self.prod_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BusOffer') is not None:
            self.bus_offer = m.get('BusOffer')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProdId') is not None:
            self.prod_id = m.get('ProdId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryOpenStatusResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: bool = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QueryOpenStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryOpenStatusResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryOpenStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryTestPeriodDetailRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryTestPeriodDetailResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QueryTestPeriodDetailResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryTestPeriodDetailResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryTestPeriodDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryVtuneInstancesRequestTagKeyValueModels(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class QueryVtuneInstancesRequest(TeaModel):
    def __init__(
        self,
        ak_proxy: str = None,
        ali_uid: int = None,
        api_name: str = None,
        app_key: str = None,
        caller_bid: str = None,
        caller_bid_login_email: str = None,
        caller_security_transport: bool = None,
        caller_type: str = None,
        caller_uid: int = None,
        caller_uid_login_email: str = None,
        channel: str = None,
        client_ip: str = None,
        enable: bool = None,
        from_type: int = None,
        mfa_present: bool = None,
        operator: str = None,
        owner_account: str = None,
        owner_id: int = None,
        owner_id_login_email: str = None,
        page: int = None,
        page_size: int = None,
        prod_code: str = None,
        proxy_caller_ip: str = None,
        proxy_caller_security_transport: bool = None,
        proxy_id: str = None,
        proxy_trust_transport_info: bool = None,
        request_content: str = None,
        request_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        security_token: str = None,
        sms_resource_owner_id: int = None,
        tag_key_1: str = None,
        tag_key_2: str = None,
        tag_key_3: str = None,
        tag_key_4: str = None,
        tag_key_5: str = None,
        tag_key_value_models: List[QueryVtuneInstancesRequestTagKeyValueModels] = None,
        tag_value_1: str = None,
        tag_value_2: str = None,
        tag_value_3: str = None,
        tag_value_4: str = None,
        tag_value_5: str = None,
        token: str = None,
        version: str = None,
        vtune_id: str = None,
    ):
        self.ak_proxy = ak_proxy
        self.ali_uid = ali_uid
        self.api_name = api_name
        self.app_key = app_key
        self.caller_bid = caller_bid
        self.caller_bid_login_email = caller_bid_login_email
        self.caller_security_transport = caller_security_transport
        self.caller_type = caller_type
        self.caller_uid = caller_uid
        self.caller_uid_login_email = caller_uid_login_email
        self.channel = channel
        self.client_ip = client_ip
        self.enable = enable
        self.from_type = from_type
        self.mfa_present = mfa_present
        self.operator = operator
        self.owner_account = owner_account
        self.owner_id = owner_id
        self.owner_id_login_email = owner_id_login_email
        self.page = page
        self.page_size = page_size
        self.prod_code = prod_code
        self.proxy_caller_ip = proxy_caller_ip
        self.proxy_caller_security_transport = proxy_caller_security_transport
        self.proxy_id = proxy_id
        self.proxy_trust_transport_info = proxy_trust_transport_info
        self.request_content = request_content
        self.request_id = request_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.security_token = security_token
        self.sms_resource_owner_id = sms_resource_owner_id
        self.tag_key_1 = tag_key_1
        self.tag_key_2 = tag_key_2
        self.tag_key_3 = tag_key_3
        self.tag_key_4 = tag_key_4
        self.tag_key_5 = tag_key_5
        self.tag_key_value_models = tag_key_value_models
        self.tag_value_1 = tag_value_1
        self.tag_value_2 = tag_value_2
        self.tag_value_3 = tag_value_3
        self.tag_value_4 = tag_value_4
        self.tag_value_5 = tag_value_5
        self.token = token
        self.version = version
        self.vtune_id = vtune_id

    def validate(self):
        if self.tag_key_value_models:
            for k in self.tag_key_value_models:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ak_proxy is not None:
            result['AkProxy'] = self.ak_proxy
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.caller_bid is not None:
            result['CallerBid'] = self.caller_bid
        if self.caller_bid_login_email is not None:
            result['CallerBidLoginEmail'] = self.caller_bid_login_email
        if self.caller_security_transport is not None:
            result['CallerSecurityTransport'] = self.caller_security_transport
        if self.caller_type is not None:
            result['CallerType'] = self.caller_type
        if self.caller_uid is not None:
            result['CallerUid'] = self.caller_uid
        if self.caller_uid_login_email is not None:
            result['CallerUidLoginEmail'] = self.caller_uid_login_email
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.client_ip is not None:
            result['ClientIP'] = self.client_ip
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.from_type is not None:
            result['FromType'] = self.from_type
        if self.mfa_present is not None:
            result['MfaPresent'] = self.mfa_present
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.owner_account is not None:
            result['OwnerAccount'] = self.owner_account
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.owner_id_login_email is not None:
            result['OwnerIdLoginEmail'] = self.owner_id_login_email
        if self.page is not None:
            result['Page'] = self.page
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.proxy_caller_ip is not None:
            result['ProxyCallerIp'] = self.proxy_caller_ip
        if self.proxy_caller_security_transport is not None:
            result['ProxyCallerSecurityTransport'] = self.proxy_caller_security_transport
        if self.proxy_id is not None:
            result['ProxyId'] = self.proxy_id
        if self.proxy_trust_transport_info is not None:
            result['ProxyTrustTransportInfo'] = self.proxy_trust_transport_info
        if self.request_content is not None:
            result['RequestContent'] = self.request_content
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        if self.sms_resource_owner_id is not None:
            result['SmsResourceOwnerId'] = self.sms_resource_owner_id
        if self.tag_key_1 is not None:
            result['TagKey1'] = self.tag_key_1
        if self.tag_key_2 is not None:
            result['TagKey2'] = self.tag_key_2
        if self.tag_key_3 is not None:
            result['TagKey3'] = self.tag_key_3
        if self.tag_key_4 is not None:
            result['TagKey4'] = self.tag_key_4
        if self.tag_key_5 is not None:
            result['TagKey5'] = self.tag_key_5
        result['TagKeyValueModels'] = []
        if self.tag_key_value_models is not None:
            for k in self.tag_key_value_models:
                result['TagKeyValueModels'].append(k.to_map() if k else None)
        if self.tag_value_1 is not None:
            result['TagValue1'] = self.tag_value_1
        if self.tag_value_2 is not None:
            result['TagValue2'] = self.tag_value_2
        if self.tag_value_3 is not None:
            result['TagValue3'] = self.tag_value_3
        if self.tag_value_4 is not None:
            result['TagValue4'] = self.tag_value_4
        if self.tag_value_5 is not None:
            result['TagValue5'] = self.tag_value_5
        if self.token is not None:
            result['Token'] = self.token
        if self.version is not None:
            result['Version'] = self.version
        if self.vtune_id is not None:
            result['VtuneId'] = self.vtune_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AkProxy') is not None:
            self.ak_proxy = m.get('AkProxy')
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('CallerBid') is not None:
            self.caller_bid = m.get('CallerBid')
        if m.get('CallerBidLoginEmail') is not None:
            self.caller_bid_login_email = m.get('CallerBidLoginEmail')
        if m.get('CallerSecurityTransport') is not None:
            self.caller_security_transport = m.get('CallerSecurityTransport')
        if m.get('CallerType') is not None:
            self.caller_type = m.get('CallerType')
        if m.get('CallerUid') is not None:
            self.caller_uid = m.get('CallerUid')
        if m.get('CallerUidLoginEmail') is not None:
            self.caller_uid_login_email = m.get('CallerUidLoginEmail')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ClientIP') is not None:
            self.client_ip = m.get('ClientIP')
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('FromType') is not None:
            self.from_type = m.get('FromType')
        if m.get('MfaPresent') is not None:
            self.mfa_present = m.get('MfaPresent')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('OwnerAccount') is not None:
            self.owner_account = m.get('OwnerAccount')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('OwnerIdLoginEmail') is not None:
            self.owner_id_login_email = m.get('OwnerIdLoginEmail')
        if m.get('Page') is not None:
            self.page = m.get('Page')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProxyCallerIp') is not None:
            self.proxy_caller_ip = m.get('ProxyCallerIp')
        if m.get('ProxyCallerSecurityTransport') is not None:
            self.proxy_caller_security_transport = m.get('ProxyCallerSecurityTransport')
        if m.get('ProxyId') is not None:
            self.proxy_id = m.get('ProxyId')
        if m.get('ProxyTrustTransportInfo') is not None:
            self.proxy_trust_transport_info = m.get('ProxyTrustTransportInfo')
        if m.get('RequestContent') is not None:
            self.request_content = m.get('RequestContent')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        if m.get('SmsResourceOwnerId') is not None:
            self.sms_resource_owner_id = m.get('SmsResourceOwnerId')
        if m.get('TagKey1') is not None:
            self.tag_key_1 = m.get('TagKey1')
        if m.get('TagKey2') is not None:
            self.tag_key_2 = m.get('TagKey2')
        if m.get('TagKey3') is not None:
            self.tag_key_3 = m.get('TagKey3')
        if m.get('TagKey4') is not None:
            self.tag_key_4 = m.get('TagKey4')
        if m.get('TagKey5') is not None:
            self.tag_key_5 = m.get('TagKey5')
        self.tag_key_value_models = []
        if m.get('TagKeyValueModels') is not None:
            for k in m.get('TagKeyValueModels'):
                temp_model = QueryVtuneInstancesRequestTagKeyValueModels()
                self.tag_key_value_models.append(temp_model.from_map(k))
        if m.get('TagValue1') is not None:
            self.tag_value_1 = m.get('TagValue1')
        if m.get('TagValue2') is not None:
            self.tag_value_2 = m.get('TagValue2')
        if m.get('TagValue3') is not None:
            self.tag_value_3 = m.get('TagValue3')
        if m.get('TagValue4') is not None:
            self.tag_value_4 = m.get('TagValue4')
        if m.get('TagValue5') is not None:
            self.tag_value_5 = m.get('TagValue5')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        if m.get('VtuneId') is not None:
            self.vtune_id = m.get('VtuneId')
        return self


class QueryVtuneInstancesResponseBodyContentData(TeaModel):
    def __init__(
        self,
        ali_uid: int = None,
        cpe_id: str = None,
        dhcp: bool = None,
        enable_bgp: bool = None,
        limit_rx: int = None,
        limit_tx: int = None,
        partner: str = None,
        priority: int = None,
        pt_uuid: str = None,
        status: int = None,
        vtune_id: str = None,
    ):
        self.ali_uid = ali_uid
        self.cpe_id = cpe_id
        self.dhcp = dhcp
        self.enable_bgp = enable_bgp
        self.limit_rx = limit_rx
        self.limit_tx = limit_tx
        self.partner = partner
        self.priority = priority
        self.pt_uuid = pt_uuid
        self.status = status
        self.vtune_id = vtune_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.cpe_id is not None:
            result['CpeId'] = self.cpe_id
        if self.dhcp is not None:
            result['Dhcp'] = self.dhcp
        if self.enable_bgp is not None:
            result['EnableBgp'] = self.enable_bgp
        if self.limit_rx is not None:
            result['LimitRx'] = self.limit_rx
        if self.limit_tx is not None:
            result['LimitTx'] = self.limit_tx
        if self.partner is not None:
            result['Partner'] = self.partner
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.pt_uuid is not None:
            result['PtUuid'] = self.pt_uuid
        if self.status is not None:
            result['Status'] = self.status
        if self.vtune_id is not None:
            result['VtuneId'] = self.vtune_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('CpeId') is not None:
            self.cpe_id = m.get('CpeId')
        if m.get('Dhcp') is not None:
            self.dhcp = m.get('Dhcp')
        if m.get('EnableBgp') is not None:
            self.enable_bgp = m.get('EnableBgp')
        if m.get('LimitRx') is not None:
            self.limit_rx = m.get('LimitRx')
        if m.get('LimitTx') is not None:
            self.limit_tx = m.get('LimitTx')
        if m.get('Partner') is not None:
            self.partner = m.get('Partner')
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('PtUuid') is not None:
            self.pt_uuid = m.get('PtUuid')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('VtuneId') is not None:
            self.vtune_id = m.get('VtuneId')
        return self


class QueryVtuneInstancesResponseBodyContent(TeaModel):
    def __init__(
        self,
        data: List[QueryVtuneInstancesResponseBodyContentData] = None,
        page: int = None,
        page_size: int = None,
        pages: int = None,
        total_count: int = None,
    ):
        self.data = data
        self.page = page
        self.page_size = page_size
        self.pages = pages
        self.total_count = total_count

    def validate(self):
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Data'] = []
        if self.data is not None:
            for k in self.data:
                result['Data'].append(k.to_map() if k else None)
        if self.page is not None:
            result['Page'] = self.page
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.pages is not None:
            result['Pages'] = self.pages
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.data = []
        if m.get('Data') is not None:
            for k in m.get('Data'):
                temp_model = QueryVtuneInstancesResponseBodyContentData()
                self.data.append(temp_model.from_map(k))
        if m.get('Page') is not None:
            self.page = m.get('Page')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Pages') is not None:
            self.pages = m.get('Pages')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class QueryVtuneInstancesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        content: QueryVtuneInstancesResponseBodyContent = None,
        desc: str = None,
        description: str = None,
        request_id: str = None,
        ret_code: int = None,
        success: bool = None,
    ):
        self.code = code
        self.content = content
        self.desc = desc
        self.description = description
        self.request_id = request_id
        self.ret_code = ret_code
        self.success = success

    def validate(self):
        if self.content:
            self.content.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.content is not None:
            result['Content'] = self.content.to_map()
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.description is not None:
            result['Description'] = self.description
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.ret_code is not None:
            result['RetCode'] = self.ret_code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Content') is not None:
            temp_model = QueryVtuneInstancesResponseBodyContent()
            self.content = temp_model.from_map(m['Content'])
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RetCode') is not None:
            self.ret_code = m.get('RetCode')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class QueryVtuneInstancesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryVtuneInstancesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryVtuneInstancesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ResumeEpnInstanceRequestTagKeyValueModels(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ResumeEpnInstanceRequest(TeaModel):
    def __init__(
        self,
        ak_proxy: str = None,
        ali_uid: int = None,
        api_name: str = None,
        app_key: str = None,
        caller_bid: str = None,
        caller_bid_login_email: str = None,
        caller_security_transport: bool = None,
        caller_type: str = None,
        caller_uid: int = None,
        caller_uid_login_email: str = None,
        channel: str = None,
        client_ip: str = None,
        enable: bool = None,
        epn_id: str = None,
        from_type: int = None,
        mfa_present: bool = None,
        operator: str = None,
        owner_account: str = None,
        owner_id: int = None,
        owner_id_login_email: str = None,
        prod_code: str = None,
        proxy_caller_ip: str = None,
        proxy_caller_security_transport: bool = None,
        proxy_id: str = None,
        proxy_trust_transport_info: bool = None,
        request_content: str = None,
        request_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        security_token: str = None,
        sms_resource_owner_id: int = None,
        tag_key_1: str = None,
        tag_key_2: str = None,
        tag_key_3: str = None,
        tag_key_4: str = None,
        tag_key_5: str = None,
        tag_key_value_models: List[ResumeEpnInstanceRequestTagKeyValueModels] = None,
        tag_value_1: str = None,
        tag_value_2: str = None,
        tag_value_3: str = None,
        tag_value_4: str = None,
        tag_value_5: str = None,
        token: str = None,
        version: str = None,
    ):
        self.ak_proxy = ak_proxy
        self.ali_uid = ali_uid
        self.api_name = api_name
        self.app_key = app_key
        self.caller_bid = caller_bid
        self.caller_bid_login_email = caller_bid_login_email
        self.caller_security_transport = caller_security_transport
        self.caller_type = caller_type
        self.caller_uid = caller_uid
        self.caller_uid_login_email = caller_uid_login_email
        self.channel = channel
        self.client_ip = client_ip
        self.enable = enable
        self.epn_id = epn_id
        self.from_type = from_type
        self.mfa_present = mfa_present
        self.operator = operator
        self.owner_account = owner_account
        self.owner_id = owner_id
        self.owner_id_login_email = owner_id_login_email
        self.prod_code = prod_code
        self.proxy_caller_ip = proxy_caller_ip
        self.proxy_caller_security_transport = proxy_caller_security_transport
        self.proxy_id = proxy_id
        self.proxy_trust_transport_info = proxy_trust_transport_info
        self.request_content = request_content
        self.request_id = request_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.security_token = security_token
        self.sms_resource_owner_id = sms_resource_owner_id
        self.tag_key_1 = tag_key_1
        self.tag_key_2 = tag_key_2
        self.tag_key_3 = tag_key_3
        self.tag_key_4 = tag_key_4
        self.tag_key_5 = tag_key_5
        self.tag_key_value_models = tag_key_value_models
        self.tag_value_1 = tag_value_1
        self.tag_value_2 = tag_value_2
        self.tag_value_3 = tag_value_3
        self.tag_value_4 = tag_value_4
        self.tag_value_5 = tag_value_5
        self.token = token
        self.version = version

    def validate(self):
        if self.tag_key_value_models:
            for k in self.tag_key_value_models:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ak_proxy is not None:
            result['AkProxy'] = self.ak_proxy
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.caller_bid is not None:
            result['CallerBid'] = self.caller_bid
        if self.caller_bid_login_email is not None:
            result['CallerBidLoginEmail'] = self.caller_bid_login_email
        if self.caller_security_transport is not None:
            result['CallerSecurityTransport'] = self.caller_security_transport
        if self.caller_type is not None:
            result['CallerType'] = self.caller_type
        if self.caller_uid is not None:
            result['CallerUid'] = self.caller_uid
        if self.caller_uid_login_email is not None:
            result['CallerUidLoginEmail'] = self.caller_uid_login_email
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.client_ip is not None:
            result['ClientIP'] = self.client_ip
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.epn_id is not None:
            result['EpnId'] = self.epn_id
        if self.from_type is not None:
            result['FromType'] = self.from_type
        if self.mfa_present is not None:
            result['MfaPresent'] = self.mfa_present
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.owner_account is not None:
            result['OwnerAccount'] = self.owner_account
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.owner_id_login_email is not None:
            result['OwnerIdLoginEmail'] = self.owner_id_login_email
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.proxy_caller_ip is not None:
            result['ProxyCallerIp'] = self.proxy_caller_ip
        if self.proxy_caller_security_transport is not None:
            result['ProxyCallerSecurityTransport'] = self.proxy_caller_security_transport
        if self.proxy_id is not None:
            result['ProxyId'] = self.proxy_id
        if self.proxy_trust_transport_info is not None:
            result['ProxyTrustTransportInfo'] = self.proxy_trust_transport_info
        if self.request_content is not None:
            result['RequestContent'] = self.request_content
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        if self.sms_resource_owner_id is not None:
            result['SmsResourceOwnerId'] = self.sms_resource_owner_id
        if self.tag_key_1 is not None:
            result['TagKey1'] = self.tag_key_1
        if self.tag_key_2 is not None:
            result['TagKey2'] = self.tag_key_2
        if self.tag_key_3 is not None:
            result['TagKey3'] = self.tag_key_3
        if self.tag_key_4 is not None:
            result['TagKey4'] = self.tag_key_4
        if self.tag_key_5 is not None:
            result['TagKey5'] = self.tag_key_5
        result['TagKeyValueModels'] = []
        if self.tag_key_value_models is not None:
            for k in self.tag_key_value_models:
                result['TagKeyValueModels'].append(k.to_map() if k else None)
        if self.tag_value_1 is not None:
            result['TagValue1'] = self.tag_value_1
        if self.tag_value_2 is not None:
            result['TagValue2'] = self.tag_value_2
        if self.tag_value_3 is not None:
            result['TagValue3'] = self.tag_value_3
        if self.tag_value_4 is not None:
            result['TagValue4'] = self.tag_value_4
        if self.tag_value_5 is not None:
            result['TagValue5'] = self.tag_value_5
        if self.token is not None:
            result['Token'] = self.token
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AkProxy') is not None:
            self.ak_proxy = m.get('AkProxy')
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('CallerBid') is not None:
            self.caller_bid = m.get('CallerBid')
        if m.get('CallerBidLoginEmail') is not None:
            self.caller_bid_login_email = m.get('CallerBidLoginEmail')
        if m.get('CallerSecurityTransport') is not None:
            self.caller_security_transport = m.get('CallerSecurityTransport')
        if m.get('CallerType') is not None:
            self.caller_type = m.get('CallerType')
        if m.get('CallerUid') is not None:
            self.caller_uid = m.get('CallerUid')
        if m.get('CallerUidLoginEmail') is not None:
            self.caller_uid_login_email = m.get('CallerUidLoginEmail')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ClientIP') is not None:
            self.client_ip = m.get('ClientIP')
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('EpnId') is not None:
            self.epn_id = m.get('EpnId')
        if m.get('FromType') is not None:
            self.from_type = m.get('FromType')
        if m.get('MfaPresent') is not None:
            self.mfa_present = m.get('MfaPresent')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('OwnerAccount') is not None:
            self.owner_account = m.get('OwnerAccount')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('OwnerIdLoginEmail') is not None:
            self.owner_id_login_email = m.get('OwnerIdLoginEmail')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProxyCallerIp') is not None:
            self.proxy_caller_ip = m.get('ProxyCallerIp')
        if m.get('ProxyCallerSecurityTransport') is not None:
            self.proxy_caller_security_transport = m.get('ProxyCallerSecurityTransport')
        if m.get('ProxyId') is not None:
            self.proxy_id = m.get('ProxyId')
        if m.get('ProxyTrustTransportInfo') is not None:
            self.proxy_trust_transport_info = m.get('ProxyTrustTransportInfo')
        if m.get('RequestContent') is not None:
            self.request_content = m.get('RequestContent')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        if m.get('SmsResourceOwnerId') is not None:
            self.sms_resource_owner_id = m.get('SmsResourceOwnerId')
        if m.get('TagKey1') is not None:
            self.tag_key_1 = m.get('TagKey1')
        if m.get('TagKey2') is not None:
            self.tag_key_2 = m.get('TagKey2')
        if m.get('TagKey3') is not None:
            self.tag_key_3 = m.get('TagKey3')
        if m.get('TagKey4') is not None:
            self.tag_key_4 = m.get('TagKey4')
        if m.get('TagKey5') is not None:
            self.tag_key_5 = m.get('TagKey5')
        self.tag_key_value_models = []
        if m.get('TagKeyValueModels') is not None:
            for k in m.get('TagKeyValueModels'):
                temp_model = ResumeEpnInstanceRequestTagKeyValueModels()
                self.tag_key_value_models.append(temp_model.from_map(k))
        if m.get('TagValue1') is not None:
            self.tag_value_1 = m.get('TagValue1')
        if m.get('TagValue2') is not None:
            self.tag_value_2 = m.get('TagValue2')
        if m.get('TagValue3') is not None:
            self.tag_value_3 = m.get('TagValue3')
        if m.get('TagValue4') is not None:
            self.tag_value_4 = m.get('TagValue4')
        if m.get('TagValue5') is not None:
            self.tag_value_5 = m.get('TagValue5')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class ResumeEpnInstanceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        content: Any = None,
        desc: str = None,
        description: str = None,
        request_id: str = None,
        ret_code: int = None,
        success: bool = None,
    ):
        self.code = code
        self.content = content
        self.desc = desc
        self.description = description
        self.request_id = request_id
        self.ret_code = ret_code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.content is not None:
            result['Content'] = self.content
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.description is not None:
            result['Description'] = self.description
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.ret_code is not None:
            result['RetCode'] = self.ret_code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RetCode') is not None:
            self.ret_code = m.get('RetCode')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ResumeEpnInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ResumeEpnInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ResumeEpnInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StopEpnInstanceRequestTagKeyValueModels(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class StopEpnInstanceRequest(TeaModel):
    def __init__(
        self,
        ak_proxy: str = None,
        ali_uid: int = None,
        api_name: str = None,
        app_key: str = None,
        caller_bid: str = None,
        caller_bid_login_email: str = None,
        caller_security_transport: bool = None,
        caller_type: str = None,
        caller_uid: int = None,
        caller_uid_login_email: str = None,
        channel: str = None,
        client_ip: str = None,
        enable: bool = None,
        epn_id: str = None,
        from_type: int = None,
        mfa_present: bool = None,
        operator: str = None,
        owner_account: str = None,
        owner_id: int = None,
        owner_id_login_email: str = None,
        prod_code: str = None,
        proxy_caller_ip: str = None,
        proxy_caller_security_transport: bool = None,
        proxy_id: str = None,
        proxy_trust_transport_info: bool = None,
        request_content: str = None,
        request_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        security_token: str = None,
        sms_resource_owner_id: int = None,
        tag_key_1: str = None,
        tag_key_2: str = None,
        tag_key_3: str = None,
        tag_key_4: str = None,
        tag_key_5: str = None,
        tag_key_value_models: List[StopEpnInstanceRequestTagKeyValueModels] = None,
        tag_value_1: str = None,
        tag_value_2: str = None,
        tag_value_3: str = None,
        tag_value_4: str = None,
        tag_value_5: str = None,
        token: str = None,
        version: str = None,
    ):
        self.ak_proxy = ak_proxy
        self.ali_uid = ali_uid
        self.api_name = api_name
        self.app_key = app_key
        self.caller_bid = caller_bid
        self.caller_bid_login_email = caller_bid_login_email
        self.caller_security_transport = caller_security_transport
        self.caller_type = caller_type
        self.caller_uid = caller_uid
        self.caller_uid_login_email = caller_uid_login_email
        self.channel = channel
        self.client_ip = client_ip
        self.enable = enable
        self.epn_id = epn_id
        self.from_type = from_type
        self.mfa_present = mfa_present
        self.operator = operator
        self.owner_account = owner_account
        self.owner_id = owner_id
        self.owner_id_login_email = owner_id_login_email
        self.prod_code = prod_code
        self.proxy_caller_ip = proxy_caller_ip
        self.proxy_caller_security_transport = proxy_caller_security_transport
        self.proxy_id = proxy_id
        self.proxy_trust_transport_info = proxy_trust_transport_info
        self.request_content = request_content
        self.request_id = request_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.security_token = security_token
        self.sms_resource_owner_id = sms_resource_owner_id
        self.tag_key_1 = tag_key_1
        self.tag_key_2 = tag_key_2
        self.tag_key_3 = tag_key_3
        self.tag_key_4 = tag_key_4
        self.tag_key_5 = tag_key_5
        self.tag_key_value_models = tag_key_value_models
        self.tag_value_1 = tag_value_1
        self.tag_value_2 = tag_value_2
        self.tag_value_3 = tag_value_3
        self.tag_value_4 = tag_value_4
        self.tag_value_5 = tag_value_5
        self.token = token
        self.version = version

    def validate(self):
        if self.tag_key_value_models:
            for k in self.tag_key_value_models:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ak_proxy is not None:
            result['AkProxy'] = self.ak_proxy
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.caller_bid is not None:
            result['CallerBid'] = self.caller_bid
        if self.caller_bid_login_email is not None:
            result['CallerBidLoginEmail'] = self.caller_bid_login_email
        if self.caller_security_transport is not None:
            result['CallerSecurityTransport'] = self.caller_security_transport
        if self.caller_type is not None:
            result['CallerType'] = self.caller_type
        if self.caller_uid is not None:
            result['CallerUid'] = self.caller_uid
        if self.caller_uid_login_email is not None:
            result['CallerUidLoginEmail'] = self.caller_uid_login_email
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.client_ip is not None:
            result['ClientIP'] = self.client_ip
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.epn_id is not None:
            result['EpnId'] = self.epn_id
        if self.from_type is not None:
            result['FromType'] = self.from_type
        if self.mfa_present is not None:
            result['MfaPresent'] = self.mfa_present
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.owner_account is not None:
            result['OwnerAccount'] = self.owner_account
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.owner_id_login_email is not None:
            result['OwnerIdLoginEmail'] = self.owner_id_login_email
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.proxy_caller_ip is not None:
            result['ProxyCallerIp'] = self.proxy_caller_ip
        if self.proxy_caller_security_transport is not None:
            result['ProxyCallerSecurityTransport'] = self.proxy_caller_security_transport
        if self.proxy_id is not None:
            result['ProxyId'] = self.proxy_id
        if self.proxy_trust_transport_info is not None:
            result['ProxyTrustTransportInfo'] = self.proxy_trust_transport_info
        if self.request_content is not None:
            result['RequestContent'] = self.request_content
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        if self.sms_resource_owner_id is not None:
            result['SmsResourceOwnerId'] = self.sms_resource_owner_id
        if self.tag_key_1 is not None:
            result['TagKey1'] = self.tag_key_1
        if self.tag_key_2 is not None:
            result['TagKey2'] = self.tag_key_2
        if self.tag_key_3 is not None:
            result['TagKey3'] = self.tag_key_3
        if self.tag_key_4 is not None:
            result['TagKey4'] = self.tag_key_4
        if self.tag_key_5 is not None:
            result['TagKey5'] = self.tag_key_5
        result['TagKeyValueModels'] = []
        if self.tag_key_value_models is not None:
            for k in self.tag_key_value_models:
                result['TagKeyValueModels'].append(k.to_map() if k else None)
        if self.tag_value_1 is not None:
            result['TagValue1'] = self.tag_value_1
        if self.tag_value_2 is not None:
            result['TagValue2'] = self.tag_value_2
        if self.tag_value_3 is not None:
            result['TagValue3'] = self.tag_value_3
        if self.tag_value_4 is not None:
            result['TagValue4'] = self.tag_value_4
        if self.tag_value_5 is not None:
            result['TagValue5'] = self.tag_value_5
        if self.token is not None:
            result['Token'] = self.token
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AkProxy') is not None:
            self.ak_proxy = m.get('AkProxy')
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('CallerBid') is not None:
            self.caller_bid = m.get('CallerBid')
        if m.get('CallerBidLoginEmail') is not None:
            self.caller_bid_login_email = m.get('CallerBidLoginEmail')
        if m.get('CallerSecurityTransport') is not None:
            self.caller_security_transport = m.get('CallerSecurityTransport')
        if m.get('CallerType') is not None:
            self.caller_type = m.get('CallerType')
        if m.get('CallerUid') is not None:
            self.caller_uid = m.get('CallerUid')
        if m.get('CallerUidLoginEmail') is not None:
            self.caller_uid_login_email = m.get('CallerUidLoginEmail')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ClientIP') is not None:
            self.client_ip = m.get('ClientIP')
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('EpnId') is not None:
            self.epn_id = m.get('EpnId')
        if m.get('FromType') is not None:
            self.from_type = m.get('FromType')
        if m.get('MfaPresent') is not None:
            self.mfa_present = m.get('MfaPresent')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('OwnerAccount') is not None:
            self.owner_account = m.get('OwnerAccount')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('OwnerIdLoginEmail') is not None:
            self.owner_id_login_email = m.get('OwnerIdLoginEmail')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProxyCallerIp') is not None:
            self.proxy_caller_ip = m.get('ProxyCallerIp')
        if m.get('ProxyCallerSecurityTransport') is not None:
            self.proxy_caller_security_transport = m.get('ProxyCallerSecurityTransport')
        if m.get('ProxyId') is not None:
            self.proxy_id = m.get('ProxyId')
        if m.get('ProxyTrustTransportInfo') is not None:
            self.proxy_trust_transport_info = m.get('ProxyTrustTransportInfo')
        if m.get('RequestContent') is not None:
            self.request_content = m.get('RequestContent')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        if m.get('SmsResourceOwnerId') is not None:
            self.sms_resource_owner_id = m.get('SmsResourceOwnerId')
        if m.get('TagKey1') is not None:
            self.tag_key_1 = m.get('TagKey1')
        if m.get('TagKey2') is not None:
            self.tag_key_2 = m.get('TagKey2')
        if m.get('TagKey3') is not None:
            self.tag_key_3 = m.get('TagKey3')
        if m.get('TagKey4') is not None:
            self.tag_key_4 = m.get('TagKey4')
        if m.get('TagKey5') is not None:
            self.tag_key_5 = m.get('TagKey5')
        self.tag_key_value_models = []
        if m.get('TagKeyValueModels') is not None:
            for k in m.get('TagKeyValueModels'):
                temp_model = StopEpnInstanceRequestTagKeyValueModels()
                self.tag_key_value_models.append(temp_model.from_map(k))
        if m.get('TagValue1') is not None:
            self.tag_value_1 = m.get('TagValue1')
        if m.get('TagValue2') is not None:
            self.tag_value_2 = m.get('TagValue2')
        if m.get('TagValue3') is not None:
            self.tag_value_3 = m.get('TagValue3')
        if m.get('TagValue4') is not None:
            self.tag_value_4 = m.get('TagValue4')
        if m.get('TagValue5') is not None:
            self.tag_value_5 = m.get('TagValue5')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class StopEpnInstanceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        content: Any = None,
        desc: str = None,
        description: str = None,
        request_id: str = None,
        ret_code: int = None,
        success: bool = None,
    ):
        self.code = code
        self.content = content
        self.desc = desc
        self.description = description
        self.request_id = request_id
        self.ret_code = ret_code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.content is not None:
            result['Content'] = self.content
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.description is not None:
            result['Description'] = self.description
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.ret_code is not None:
            result['RetCode'] = self.ret_code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RetCode') is not None:
            self.ret_code = m.get('RetCode')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class StopEpnInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: StopEpnInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = StopEpnInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateEpnInstanceRequestTagKeyValueModels(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class UpdateEpnInstanceRequest(TeaModel):
    def __init__(
        self,
        accelerate: bool = None,
        ak_proxy: str = None,
        aliuid: int = None,
        api_name: str = None,
        app_key: str = None,
        caller_bid: str = None,
        caller_bid_login_email: str = None,
        caller_security_transport: bool = None,
        caller_type: str = None,
        caller_uid: int = None,
        caller_uid_login_email: str = None,
        channel: str = None,
        client_ip: str = None,
        dscp: int = None,
        enable: bool = None,
        epn_id: str = None,
        epn_name: str = None,
        from_type: int = None,
        limit_rx: int = None,
        limit_tx: int = None,
        mfa_present: bool = None,
        operator: str = None,
        owner_account: str = None,
        owner_id: int = None,
        owner_id_login_email: str = None,
        prod_code: str = None,
        proxy_caller_ip: str = None,
        proxy_caller_security_transport: bool = None,
        proxy_id: str = None,
        proxy_trust_transport_info: bool = None,
        request_content: str = None,
        request_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        security: bool = None,
        security_token: str = None,
        sms_resource_owner_id: int = None,
        status: int = None,
        tag_key_1: str = None,
        tag_key_2: str = None,
        tag_key_3: str = None,
        tag_key_4: str = None,
        tag_key_5: str = None,
        tag_key_value_models: List[UpdateEpnInstanceRequestTagKeyValueModels] = None,
        tag_value_1: str = None,
        tag_value_2: str = None,
        tag_value_3: str = None,
        tag_value_4: str = None,
        tag_value_5: str = None,
        token: str = None,
        version: str = None,
    ):
        self.accelerate = accelerate
        self.ak_proxy = ak_proxy
        self.aliuid = aliuid
        self.api_name = api_name
        self.app_key = app_key
        self.caller_bid = caller_bid
        self.caller_bid_login_email = caller_bid_login_email
        self.caller_security_transport = caller_security_transport
        self.caller_type = caller_type
        self.caller_uid = caller_uid
        self.caller_uid_login_email = caller_uid_login_email
        self.channel = channel
        self.client_ip = client_ip
        self.dscp = dscp
        self.enable = enable
        self.epn_id = epn_id
        self.epn_name = epn_name
        self.from_type = from_type
        self.limit_rx = limit_rx
        self.limit_tx = limit_tx
        self.mfa_present = mfa_present
        self.operator = operator
        self.owner_account = owner_account
        self.owner_id = owner_id
        self.owner_id_login_email = owner_id_login_email
        self.prod_code = prod_code
        self.proxy_caller_ip = proxy_caller_ip
        self.proxy_caller_security_transport = proxy_caller_security_transport
        self.proxy_id = proxy_id
        self.proxy_trust_transport_info = proxy_trust_transport_info
        self.request_content = request_content
        self.request_id = request_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.security = security
        self.security_token = security_token
        self.sms_resource_owner_id = sms_resource_owner_id
        self.status = status
        self.tag_key_1 = tag_key_1
        self.tag_key_2 = tag_key_2
        self.tag_key_3 = tag_key_3
        self.tag_key_4 = tag_key_4
        self.tag_key_5 = tag_key_5
        self.tag_key_value_models = tag_key_value_models
        self.tag_value_1 = tag_value_1
        self.tag_value_2 = tag_value_2
        self.tag_value_3 = tag_value_3
        self.tag_value_4 = tag_value_4
        self.tag_value_5 = tag_value_5
        self.token = token
        self.version = version

    def validate(self):
        if self.tag_key_value_models:
            for k in self.tag_key_value_models:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.accelerate is not None:
            result['Accelerate'] = self.accelerate
        if self.ak_proxy is not None:
            result['AkProxy'] = self.ak_proxy
        if self.aliuid is not None:
            result['Aliuid'] = self.aliuid
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.caller_bid is not None:
            result['CallerBid'] = self.caller_bid
        if self.caller_bid_login_email is not None:
            result['CallerBidLoginEmail'] = self.caller_bid_login_email
        if self.caller_security_transport is not None:
            result['CallerSecurityTransport'] = self.caller_security_transport
        if self.caller_type is not None:
            result['CallerType'] = self.caller_type
        if self.caller_uid is not None:
            result['CallerUid'] = self.caller_uid
        if self.caller_uid_login_email is not None:
            result['CallerUidLoginEmail'] = self.caller_uid_login_email
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.client_ip is not None:
            result['ClientIP'] = self.client_ip
        if self.dscp is not None:
            result['Dscp'] = self.dscp
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.epn_id is not None:
            result['EpnId'] = self.epn_id
        if self.epn_name is not None:
            result['EpnName'] = self.epn_name
        if self.from_type is not None:
            result['FromType'] = self.from_type
        if self.limit_rx is not None:
            result['LimitRx'] = self.limit_rx
        if self.limit_tx is not None:
            result['LimitTx'] = self.limit_tx
        if self.mfa_present is not None:
            result['MfaPresent'] = self.mfa_present
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.owner_account is not None:
            result['OwnerAccount'] = self.owner_account
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.owner_id_login_email is not None:
            result['OwnerIdLoginEmail'] = self.owner_id_login_email
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.proxy_caller_ip is not None:
            result['ProxyCallerIp'] = self.proxy_caller_ip
        if self.proxy_caller_security_transport is not None:
            result['ProxyCallerSecurityTransport'] = self.proxy_caller_security_transport
        if self.proxy_id is not None:
            result['ProxyId'] = self.proxy_id
        if self.proxy_trust_transport_info is not None:
            result['ProxyTrustTransportInfo'] = self.proxy_trust_transport_info
        if self.request_content is not None:
            result['RequestContent'] = self.request_content
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.security is not None:
            result['Security'] = self.security
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        if self.sms_resource_owner_id is not None:
            result['SmsResourceOwnerId'] = self.sms_resource_owner_id
        if self.status is not None:
            result['Status'] = self.status
        if self.tag_key_1 is not None:
            result['TagKey1'] = self.tag_key_1
        if self.tag_key_2 is not None:
            result['TagKey2'] = self.tag_key_2
        if self.tag_key_3 is not None:
            result['TagKey3'] = self.tag_key_3
        if self.tag_key_4 is not None:
            result['TagKey4'] = self.tag_key_4
        if self.tag_key_5 is not None:
            result['TagKey5'] = self.tag_key_5
        result['TagKeyValueModels'] = []
        if self.tag_key_value_models is not None:
            for k in self.tag_key_value_models:
                result['TagKeyValueModels'].append(k.to_map() if k else None)
        if self.tag_value_1 is not None:
            result['TagValue1'] = self.tag_value_1
        if self.tag_value_2 is not None:
            result['TagValue2'] = self.tag_value_2
        if self.tag_value_3 is not None:
            result['TagValue3'] = self.tag_value_3
        if self.tag_value_4 is not None:
            result['TagValue4'] = self.tag_value_4
        if self.tag_value_5 is not None:
            result['TagValue5'] = self.tag_value_5
        if self.token is not None:
            result['Token'] = self.token
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Accelerate') is not None:
            self.accelerate = m.get('Accelerate')
        if m.get('AkProxy') is not None:
            self.ak_proxy = m.get('AkProxy')
        if m.get('Aliuid') is not None:
            self.aliuid = m.get('Aliuid')
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('CallerBid') is not None:
            self.caller_bid = m.get('CallerBid')
        if m.get('CallerBidLoginEmail') is not None:
            self.caller_bid_login_email = m.get('CallerBidLoginEmail')
        if m.get('CallerSecurityTransport') is not None:
            self.caller_security_transport = m.get('CallerSecurityTransport')
        if m.get('CallerType') is not None:
            self.caller_type = m.get('CallerType')
        if m.get('CallerUid') is not None:
            self.caller_uid = m.get('CallerUid')
        if m.get('CallerUidLoginEmail') is not None:
            self.caller_uid_login_email = m.get('CallerUidLoginEmail')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ClientIP') is not None:
            self.client_ip = m.get('ClientIP')
        if m.get('Dscp') is not None:
            self.dscp = m.get('Dscp')
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('EpnId') is not None:
            self.epn_id = m.get('EpnId')
        if m.get('EpnName') is not None:
            self.epn_name = m.get('EpnName')
        if m.get('FromType') is not None:
            self.from_type = m.get('FromType')
        if m.get('LimitRx') is not None:
            self.limit_rx = m.get('LimitRx')
        if m.get('LimitTx') is not None:
            self.limit_tx = m.get('LimitTx')
        if m.get('MfaPresent') is not None:
            self.mfa_present = m.get('MfaPresent')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('OwnerAccount') is not None:
            self.owner_account = m.get('OwnerAccount')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('OwnerIdLoginEmail') is not None:
            self.owner_id_login_email = m.get('OwnerIdLoginEmail')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProxyCallerIp') is not None:
            self.proxy_caller_ip = m.get('ProxyCallerIp')
        if m.get('ProxyCallerSecurityTransport') is not None:
            self.proxy_caller_security_transport = m.get('ProxyCallerSecurityTransport')
        if m.get('ProxyId') is not None:
            self.proxy_id = m.get('ProxyId')
        if m.get('ProxyTrustTransportInfo') is not None:
            self.proxy_trust_transport_info = m.get('ProxyTrustTransportInfo')
        if m.get('RequestContent') is not None:
            self.request_content = m.get('RequestContent')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('Security') is not None:
            self.security = m.get('Security')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        if m.get('SmsResourceOwnerId') is not None:
            self.sms_resource_owner_id = m.get('SmsResourceOwnerId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TagKey1') is not None:
            self.tag_key_1 = m.get('TagKey1')
        if m.get('TagKey2') is not None:
            self.tag_key_2 = m.get('TagKey2')
        if m.get('TagKey3') is not None:
            self.tag_key_3 = m.get('TagKey3')
        if m.get('TagKey4') is not None:
            self.tag_key_4 = m.get('TagKey4')
        if m.get('TagKey5') is not None:
            self.tag_key_5 = m.get('TagKey5')
        self.tag_key_value_models = []
        if m.get('TagKeyValueModels') is not None:
            for k in m.get('TagKeyValueModels'):
                temp_model = UpdateEpnInstanceRequestTagKeyValueModels()
                self.tag_key_value_models.append(temp_model.from_map(k))
        if m.get('TagValue1') is not None:
            self.tag_value_1 = m.get('TagValue1')
        if m.get('TagValue2') is not None:
            self.tag_value_2 = m.get('TagValue2')
        if m.get('TagValue3') is not None:
            self.tag_value_3 = m.get('TagValue3')
        if m.get('TagValue4') is not None:
            self.tag_value_4 = m.get('TagValue4')
        if m.get('TagValue5') is not None:
            self.tag_value_5 = m.get('TagValue5')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class UpdateEpnInstanceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        content: Any = None,
        desc: str = None,
        description: str = None,
        request_id: str = None,
        ret_code: int = None,
        success: bool = None,
    ):
        self.code = code
        self.content = content
        self.desc = desc
        self.description = description
        self.request_id = request_id
        self.ret_code = ret_code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.content is not None:
            result['Content'] = self.content
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.description is not None:
            result['Description'] = self.description
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.ret_code is not None:
            result['RetCode'] = self.ret_code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RetCode') is not None:
            self.ret_code = m.get('RetCode')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UpdateEpnInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateEpnInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateEpnInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateEvgwInstanceRequestTagKeyValueModels(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class UpdateEvgwInstanceRequest(TeaModel):
    def __init__(
        self,
        ak_proxy: str = None,
        ali_uid: int = None,
        api_name: str = None,
        app_key: str = None,
        caller_bid: str = None,
        caller_bid_login_email: str = None,
        caller_security_transport: bool = None,
        caller_type: str = None,
        caller_uid: int = None,
        caller_uid_login_email: str = None,
        channel: str = None,
        client_ip: str = None,
        enable: bool = None,
        evgw_id: str = None,
        from_type: int = None,
        ipsec_psk: str = None,
        mfa_present: bool = None,
        operator: str = None,
        owner_account: str = None,
        owner_id: int = None,
        owner_id_login_email: str = None,
        prod_code: str = None,
        proxy_caller_ip: str = None,
        proxy_caller_security_transport: bool = None,
        proxy_id: str = None,
        proxy_trust_transport_info: bool = None,
        request_content: str = None,
        request_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        security_token: str = None,
        sms_resource_owner_id: int = None,
        tag_key_1: str = None,
        tag_key_2: str = None,
        tag_key_3: str = None,
        tag_key_4: str = None,
        tag_key_5: str = None,
        tag_key_value_models: List[UpdateEvgwInstanceRequestTagKeyValueModels] = None,
        tag_value_1: str = None,
        tag_value_2: str = None,
        tag_value_3: str = None,
        tag_value_4: str = None,
        tag_value_5: str = None,
        token: str = None,
        version: str = None,
    ):
        self.ak_proxy = ak_proxy
        self.ali_uid = ali_uid
        self.api_name = api_name
        self.app_key = app_key
        self.caller_bid = caller_bid
        self.caller_bid_login_email = caller_bid_login_email
        self.caller_security_transport = caller_security_transport
        self.caller_type = caller_type
        self.caller_uid = caller_uid
        self.caller_uid_login_email = caller_uid_login_email
        self.channel = channel
        self.client_ip = client_ip
        self.enable = enable
        self.evgw_id = evgw_id
        self.from_type = from_type
        self.ipsec_psk = ipsec_psk
        self.mfa_present = mfa_present
        self.operator = operator
        self.owner_account = owner_account
        self.owner_id = owner_id
        self.owner_id_login_email = owner_id_login_email
        self.prod_code = prod_code
        self.proxy_caller_ip = proxy_caller_ip
        self.proxy_caller_security_transport = proxy_caller_security_transport
        self.proxy_id = proxy_id
        self.proxy_trust_transport_info = proxy_trust_transport_info
        self.request_content = request_content
        self.request_id = request_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.security_token = security_token
        self.sms_resource_owner_id = sms_resource_owner_id
        self.tag_key_1 = tag_key_1
        self.tag_key_2 = tag_key_2
        self.tag_key_3 = tag_key_3
        self.tag_key_4 = tag_key_4
        self.tag_key_5 = tag_key_5
        self.tag_key_value_models = tag_key_value_models
        self.tag_value_1 = tag_value_1
        self.tag_value_2 = tag_value_2
        self.tag_value_3 = tag_value_3
        self.tag_value_4 = tag_value_4
        self.tag_value_5 = tag_value_5
        self.token = token
        self.version = version

    def validate(self):
        if self.tag_key_value_models:
            for k in self.tag_key_value_models:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ak_proxy is not None:
            result['AkProxy'] = self.ak_proxy
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.caller_bid is not None:
            result['CallerBid'] = self.caller_bid
        if self.caller_bid_login_email is not None:
            result['CallerBidLoginEmail'] = self.caller_bid_login_email
        if self.caller_security_transport is not None:
            result['CallerSecurityTransport'] = self.caller_security_transport
        if self.caller_type is not None:
            result['CallerType'] = self.caller_type
        if self.caller_uid is not None:
            result['CallerUid'] = self.caller_uid
        if self.caller_uid_login_email is not None:
            result['CallerUidLoginEmail'] = self.caller_uid_login_email
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.client_ip is not None:
            result['ClientIP'] = self.client_ip
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.evgw_id is not None:
            result['EvgwId'] = self.evgw_id
        if self.from_type is not None:
            result['FromType'] = self.from_type
        if self.ipsec_psk is not None:
            result['IpsecPsk'] = self.ipsec_psk
        if self.mfa_present is not None:
            result['MfaPresent'] = self.mfa_present
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.owner_account is not None:
            result['OwnerAccount'] = self.owner_account
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.owner_id_login_email is not None:
            result['OwnerIdLoginEmail'] = self.owner_id_login_email
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.proxy_caller_ip is not None:
            result['ProxyCallerIp'] = self.proxy_caller_ip
        if self.proxy_caller_security_transport is not None:
            result['ProxyCallerSecurityTransport'] = self.proxy_caller_security_transport
        if self.proxy_id is not None:
            result['ProxyId'] = self.proxy_id
        if self.proxy_trust_transport_info is not None:
            result['ProxyTrustTransportInfo'] = self.proxy_trust_transport_info
        if self.request_content is not None:
            result['RequestContent'] = self.request_content
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        if self.sms_resource_owner_id is not None:
            result['SmsResourceOwnerId'] = self.sms_resource_owner_id
        if self.tag_key_1 is not None:
            result['TagKey1'] = self.tag_key_1
        if self.tag_key_2 is not None:
            result['TagKey2'] = self.tag_key_2
        if self.tag_key_3 is not None:
            result['TagKey3'] = self.tag_key_3
        if self.tag_key_4 is not None:
            result['TagKey4'] = self.tag_key_4
        if self.tag_key_5 is not None:
            result['TagKey5'] = self.tag_key_5
        result['TagKeyValueModels'] = []
        if self.tag_key_value_models is not None:
            for k in self.tag_key_value_models:
                result['TagKeyValueModels'].append(k.to_map() if k else None)
        if self.tag_value_1 is not None:
            result['TagValue1'] = self.tag_value_1
        if self.tag_value_2 is not None:
            result['TagValue2'] = self.tag_value_2
        if self.tag_value_3 is not None:
            result['TagValue3'] = self.tag_value_3
        if self.tag_value_4 is not None:
            result['TagValue4'] = self.tag_value_4
        if self.tag_value_5 is not None:
            result['TagValue5'] = self.tag_value_5
        if self.token is not None:
            result['Token'] = self.token
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AkProxy') is not None:
            self.ak_proxy = m.get('AkProxy')
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('CallerBid') is not None:
            self.caller_bid = m.get('CallerBid')
        if m.get('CallerBidLoginEmail') is not None:
            self.caller_bid_login_email = m.get('CallerBidLoginEmail')
        if m.get('CallerSecurityTransport') is not None:
            self.caller_security_transport = m.get('CallerSecurityTransport')
        if m.get('CallerType') is not None:
            self.caller_type = m.get('CallerType')
        if m.get('CallerUid') is not None:
            self.caller_uid = m.get('CallerUid')
        if m.get('CallerUidLoginEmail') is not None:
            self.caller_uid_login_email = m.get('CallerUidLoginEmail')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ClientIP') is not None:
            self.client_ip = m.get('ClientIP')
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('EvgwId') is not None:
            self.evgw_id = m.get('EvgwId')
        if m.get('FromType') is not None:
            self.from_type = m.get('FromType')
        if m.get('IpsecPsk') is not None:
            self.ipsec_psk = m.get('IpsecPsk')
        if m.get('MfaPresent') is not None:
            self.mfa_present = m.get('MfaPresent')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('OwnerAccount') is not None:
            self.owner_account = m.get('OwnerAccount')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('OwnerIdLoginEmail') is not None:
            self.owner_id_login_email = m.get('OwnerIdLoginEmail')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProxyCallerIp') is not None:
            self.proxy_caller_ip = m.get('ProxyCallerIp')
        if m.get('ProxyCallerSecurityTransport') is not None:
            self.proxy_caller_security_transport = m.get('ProxyCallerSecurityTransport')
        if m.get('ProxyId') is not None:
            self.proxy_id = m.get('ProxyId')
        if m.get('ProxyTrustTransportInfo') is not None:
            self.proxy_trust_transport_info = m.get('ProxyTrustTransportInfo')
        if m.get('RequestContent') is not None:
            self.request_content = m.get('RequestContent')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        if m.get('SmsResourceOwnerId') is not None:
            self.sms_resource_owner_id = m.get('SmsResourceOwnerId')
        if m.get('TagKey1') is not None:
            self.tag_key_1 = m.get('TagKey1')
        if m.get('TagKey2') is not None:
            self.tag_key_2 = m.get('TagKey2')
        if m.get('TagKey3') is not None:
            self.tag_key_3 = m.get('TagKey3')
        if m.get('TagKey4') is not None:
            self.tag_key_4 = m.get('TagKey4')
        if m.get('TagKey5') is not None:
            self.tag_key_5 = m.get('TagKey5')
        self.tag_key_value_models = []
        if m.get('TagKeyValueModels') is not None:
            for k in m.get('TagKeyValueModels'):
                temp_model = UpdateEvgwInstanceRequestTagKeyValueModels()
                self.tag_key_value_models.append(temp_model.from_map(k))
        if m.get('TagValue1') is not None:
            self.tag_value_1 = m.get('TagValue1')
        if m.get('TagValue2') is not None:
            self.tag_value_2 = m.get('TagValue2')
        if m.get('TagValue3') is not None:
            self.tag_value_3 = m.get('TagValue3')
        if m.get('TagValue4') is not None:
            self.tag_value_4 = m.get('TagValue4')
        if m.get('TagValue5') is not None:
            self.tag_value_5 = m.get('TagValue5')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class UpdateEvgwInstanceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        content: Any = None,
        desc: str = None,
        description: str = None,
        request_id: str = None,
        ret_code: int = None,
        success: bool = None,
    ):
        self.code = code
        self.content = content
        self.desc = desc
        self.description = description
        self.request_id = request_id
        self.ret_code = ret_code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.content is not None:
            result['Content'] = self.content
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.description is not None:
            result['Description'] = self.description
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.ret_code is not None:
            result['RetCode'] = self.ret_code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RetCode') is not None:
            self.ret_code = m.get('RetCode')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UpdateEvgwInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateEvgwInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateEvgwInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateVtuneInstanceRequestTagKeyValueModels(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class UpdateVtuneInstanceRequest(TeaModel):
    def __init__(
        self,
        ak_proxy: str = None,
        ali_uid: int = None,
        api_name: str = None,
        app_key: str = None,
        caller_bid: str = None,
        caller_bid_login_email: str = None,
        caller_security_transport: bool = None,
        caller_type: str = None,
        caller_uid: int = None,
        caller_uid_login_email: str = None,
        channel: str = None,
        client_ip: str = None,
        enable: bool = None,
        enable_bgp: bool = None,
        from_type: int = None,
        limit_rx: int = None,
        limit_tx: int = None,
        mfa_present: bool = None,
        operator: str = None,
        owner_account: str = None,
        owner_id: int = None,
        owner_id_login_email: str = None,
        priority: int = None,
        prod_code: str = None,
        proxy_caller_ip: str = None,
        proxy_caller_security_transport: bool = None,
        proxy_id: str = None,
        proxy_trust_transport_info: bool = None,
        request_content: str = None,
        request_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        security_token: str = None,
        sms_resource_owner_id: int = None,
        tag_key_1: str = None,
        tag_key_2: str = None,
        tag_key_3: str = None,
        tag_key_4: str = None,
        tag_key_5: str = None,
        tag_key_value_models: List[UpdateVtuneInstanceRequestTagKeyValueModels] = None,
        tag_value_1: str = None,
        tag_value_2: str = None,
        tag_value_3: str = None,
        tag_value_4: str = None,
        tag_value_5: str = None,
        token: str = None,
        version: str = None,
        vtune_id: str = None,
    ):
        self.ak_proxy = ak_proxy
        self.ali_uid = ali_uid
        self.api_name = api_name
        self.app_key = app_key
        self.caller_bid = caller_bid
        self.caller_bid_login_email = caller_bid_login_email
        self.caller_security_transport = caller_security_transport
        self.caller_type = caller_type
        self.caller_uid = caller_uid
        self.caller_uid_login_email = caller_uid_login_email
        self.channel = channel
        self.client_ip = client_ip
        self.enable = enable
        self.enable_bgp = enable_bgp
        self.from_type = from_type
        self.limit_rx = limit_rx
        self.limit_tx = limit_tx
        self.mfa_present = mfa_present
        self.operator = operator
        self.owner_account = owner_account
        self.owner_id = owner_id
        self.owner_id_login_email = owner_id_login_email
        self.priority = priority
        self.prod_code = prod_code
        self.proxy_caller_ip = proxy_caller_ip
        self.proxy_caller_security_transport = proxy_caller_security_transport
        self.proxy_id = proxy_id
        self.proxy_trust_transport_info = proxy_trust_transport_info
        self.request_content = request_content
        self.request_id = request_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.security_token = security_token
        self.sms_resource_owner_id = sms_resource_owner_id
        self.tag_key_1 = tag_key_1
        self.tag_key_2 = tag_key_2
        self.tag_key_3 = tag_key_3
        self.tag_key_4 = tag_key_4
        self.tag_key_5 = tag_key_5
        self.tag_key_value_models = tag_key_value_models
        self.tag_value_1 = tag_value_1
        self.tag_value_2 = tag_value_2
        self.tag_value_3 = tag_value_3
        self.tag_value_4 = tag_value_4
        self.tag_value_5 = tag_value_5
        self.token = token
        self.version = version
        self.vtune_id = vtune_id

    def validate(self):
        if self.tag_key_value_models:
            for k in self.tag_key_value_models:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ak_proxy is not None:
            result['AkProxy'] = self.ak_proxy
        if self.ali_uid is not None:
            result['AliUid'] = self.ali_uid
        if self.api_name is not None:
            result['ApiName'] = self.api_name
        if self.app_key is not None:
            result['AppKey'] = self.app_key
        if self.caller_bid is not None:
            result['CallerBid'] = self.caller_bid
        if self.caller_bid_login_email is not None:
            result['CallerBidLoginEmail'] = self.caller_bid_login_email
        if self.caller_security_transport is not None:
            result['CallerSecurityTransport'] = self.caller_security_transport
        if self.caller_type is not None:
            result['CallerType'] = self.caller_type
        if self.caller_uid is not None:
            result['CallerUid'] = self.caller_uid
        if self.caller_uid_login_email is not None:
            result['CallerUidLoginEmail'] = self.caller_uid_login_email
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.client_ip is not None:
            result['ClientIP'] = self.client_ip
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.enable_bgp is not None:
            result['EnableBgp'] = self.enable_bgp
        if self.from_type is not None:
            result['FromType'] = self.from_type
        if self.limit_rx is not None:
            result['LimitRx'] = self.limit_rx
        if self.limit_tx is not None:
            result['LimitTx'] = self.limit_tx
        if self.mfa_present is not None:
            result['MfaPresent'] = self.mfa_present
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.owner_account is not None:
            result['OwnerAccount'] = self.owner_account
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.owner_id_login_email is not None:
            result['OwnerIdLoginEmail'] = self.owner_id_login_email
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.proxy_caller_ip is not None:
            result['ProxyCallerIp'] = self.proxy_caller_ip
        if self.proxy_caller_security_transport is not None:
            result['ProxyCallerSecurityTransport'] = self.proxy_caller_security_transport
        if self.proxy_id is not None:
            result['ProxyId'] = self.proxy_id
        if self.proxy_trust_transport_info is not None:
            result['ProxyTrustTransportInfo'] = self.proxy_trust_transport_info
        if self.request_content is not None:
            result['RequestContent'] = self.request_content
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.security_token is not None:
            result['SecurityToken'] = self.security_token
        if self.sms_resource_owner_id is not None:
            result['SmsResourceOwnerId'] = self.sms_resource_owner_id
        if self.tag_key_1 is not None:
            result['TagKey1'] = self.tag_key_1
        if self.tag_key_2 is not None:
            result['TagKey2'] = self.tag_key_2
        if self.tag_key_3 is not None:
            result['TagKey3'] = self.tag_key_3
        if self.tag_key_4 is not None:
            result['TagKey4'] = self.tag_key_4
        if self.tag_key_5 is not None:
            result['TagKey5'] = self.tag_key_5
        result['TagKeyValueModels'] = []
        if self.tag_key_value_models is not None:
            for k in self.tag_key_value_models:
                result['TagKeyValueModels'].append(k.to_map() if k else None)
        if self.tag_value_1 is not None:
            result['TagValue1'] = self.tag_value_1
        if self.tag_value_2 is not None:
            result['TagValue2'] = self.tag_value_2
        if self.tag_value_3 is not None:
            result['TagValue3'] = self.tag_value_3
        if self.tag_value_4 is not None:
            result['TagValue4'] = self.tag_value_4
        if self.tag_value_5 is not None:
            result['TagValue5'] = self.tag_value_5
        if self.token is not None:
            result['Token'] = self.token
        if self.version is not None:
            result['Version'] = self.version
        if self.vtune_id is not None:
            result['VtuneId'] = self.vtune_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AkProxy') is not None:
            self.ak_proxy = m.get('AkProxy')
        if m.get('AliUid') is not None:
            self.ali_uid = m.get('AliUid')
        if m.get('ApiName') is not None:
            self.api_name = m.get('ApiName')
        if m.get('AppKey') is not None:
            self.app_key = m.get('AppKey')
        if m.get('CallerBid') is not None:
            self.caller_bid = m.get('CallerBid')
        if m.get('CallerBidLoginEmail') is not None:
            self.caller_bid_login_email = m.get('CallerBidLoginEmail')
        if m.get('CallerSecurityTransport') is not None:
            self.caller_security_transport = m.get('CallerSecurityTransport')
        if m.get('CallerType') is not None:
            self.caller_type = m.get('CallerType')
        if m.get('CallerUid') is not None:
            self.caller_uid = m.get('CallerUid')
        if m.get('CallerUidLoginEmail') is not None:
            self.caller_uid_login_email = m.get('CallerUidLoginEmail')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('ClientIP') is not None:
            self.client_ip = m.get('ClientIP')
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('EnableBgp') is not None:
            self.enable_bgp = m.get('EnableBgp')
        if m.get('FromType') is not None:
            self.from_type = m.get('FromType')
        if m.get('LimitRx') is not None:
            self.limit_rx = m.get('LimitRx')
        if m.get('LimitTx') is not None:
            self.limit_tx = m.get('LimitTx')
        if m.get('MfaPresent') is not None:
            self.mfa_present = m.get('MfaPresent')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('OwnerAccount') is not None:
            self.owner_account = m.get('OwnerAccount')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('OwnerIdLoginEmail') is not None:
            self.owner_id_login_email = m.get('OwnerIdLoginEmail')
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProxyCallerIp') is not None:
            self.proxy_caller_ip = m.get('ProxyCallerIp')
        if m.get('ProxyCallerSecurityTransport') is not None:
            self.proxy_caller_security_transport = m.get('ProxyCallerSecurityTransport')
        if m.get('ProxyId') is not None:
            self.proxy_id = m.get('ProxyId')
        if m.get('ProxyTrustTransportInfo') is not None:
            self.proxy_trust_transport_info = m.get('ProxyTrustTransportInfo')
        if m.get('RequestContent') is not None:
            self.request_content = m.get('RequestContent')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SecurityToken') is not None:
            self.security_token = m.get('SecurityToken')
        if m.get('SmsResourceOwnerId') is not None:
            self.sms_resource_owner_id = m.get('SmsResourceOwnerId')
        if m.get('TagKey1') is not None:
            self.tag_key_1 = m.get('TagKey1')
        if m.get('TagKey2') is not None:
            self.tag_key_2 = m.get('TagKey2')
        if m.get('TagKey3') is not None:
            self.tag_key_3 = m.get('TagKey3')
        if m.get('TagKey4') is not None:
            self.tag_key_4 = m.get('TagKey4')
        if m.get('TagKey5') is not None:
            self.tag_key_5 = m.get('TagKey5')
        self.tag_key_value_models = []
        if m.get('TagKeyValueModels') is not None:
            for k in m.get('TagKeyValueModels'):
                temp_model = UpdateVtuneInstanceRequestTagKeyValueModels()
                self.tag_key_value_models.append(temp_model.from_map(k))
        if m.get('TagValue1') is not None:
            self.tag_value_1 = m.get('TagValue1')
        if m.get('TagValue2') is not None:
            self.tag_value_2 = m.get('TagValue2')
        if m.get('TagValue3') is not None:
            self.tag_value_3 = m.get('TagValue3')
        if m.get('TagValue4') is not None:
            self.tag_value_4 = m.get('TagValue4')
        if m.get('TagValue5') is not None:
            self.tag_value_5 = m.get('TagValue5')
        if m.get('Token') is not None:
            self.token = m.get('Token')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        if m.get('VtuneId') is not None:
            self.vtune_id = m.get('VtuneId')
        return self


class UpdateVtuneInstanceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        content: Any = None,
        desc: str = None,
        description: str = None,
        request_id: str = None,
        ret_code: int = None,
        success: bool = None,
    ):
        self.code = code
        self.content = content
        self.desc = desc
        self.description = description
        self.request_id = request_id
        self.ret_code = ret_code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.content is not None:
            result['Content'] = self.content
        if self.desc is not None:
            result['Desc'] = self.desc
        if self.description is not None:
            result['Description'] = self.description
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.ret_code is not None:
            result['RetCode'] = self.ret_code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('Desc') is not None:
            self.desc = m.get('Desc')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RetCode') is not None:
            self.ret_code = m.get('RetCode')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UpdateVtuneInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateVtuneInstanceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateVtuneInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ValidatYunSnsuBuyRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        data: str = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class ValidatYunSnsuBuyResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ValidatYunSnsuBuyResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ValidatYunSnsuBuyResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ValidatYunSnsuBuyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


