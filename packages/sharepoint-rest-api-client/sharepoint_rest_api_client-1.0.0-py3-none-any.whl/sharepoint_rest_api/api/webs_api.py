# coding: utf-8

"""
    Sharepoint REST V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from sharepoint_rest_api.api_client import ApiClient


class WebsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_folder_by_server_relative_url(self, server_relative_url, **kwargs):  # noqa: E501
        """Get Folders information of a ServerRelativeUrl e.g. /sites/Fusion/Data%20Science  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_folder_by_server_relative_url(server_relative_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str server_relative_url: server Relative Url of a folder or file (required)
        :param str accept:
        :param str select: Select items by property values
        :param str expand: Expand related entities
        :return: SPOdataResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_folder_by_server_relative_url_with_http_info(server_relative_url, **kwargs)  # noqa: E501
        else:
            (data) = self.get_folder_by_server_relative_url_with_http_info(server_relative_url, **kwargs)  # noqa: E501
            return data

    def get_folder_by_server_relative_url_with_http_info(self, server_relative_url, **kwargs):  # noqa: E501
        """Get Folders information of a ServerRelativeUrl e.g. /sites/Fusion/Data%20Science  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_folder_by_server_relative_url_with_http_info(server_relative_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str server_relative_url: server Relative Url of a folder or file (required)
        :param str accept:
        :param str select: Select items by property values
        :param str expand: Expand related entities
        :return: SPOdataResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_relative_url', 'accept', 'select', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_folder_by_server_relative_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_relative_url' is set
        if ('server_relative_url' not in params or
                params['server_relative_url'] is None):
            raise ValueError("Missing the required parameter `server_relative_url` when calling `get_folder_by_server_relative_url`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_relative_url' in params:
            path_params['serverRelativeUrl'] = params['server_relative_url']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            "/_api/Web/GetFolderByServerRelativeUrl('{serverRelativeUrl}')", 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SPOdataResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_folder_by_server_relative_url_files(self, server_relative_url, **kwargs):  # noqa: E501
        """Get all files of a ServerRelativeUrl (e.g. /sites/Fusion/Data%20Science)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_folder_by_server_relative_url_files(server_relative_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str server_relative_url: server Relative Url of a folder or file (required)
        :param str accept:
        :param str select: Select items by property values
        :param str expand: Expand related entities
        :param str skiptoken: Skips the first n results.
        :param int skip: Skip the first n items
        :param int top: Show only the first n items
        :param str filter: Filter items by property values
        :param str search: Search items by search phrases
        :param str orderby: Order items by property values
        :param bool count: Include count of items
        :return: SPOdataResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_folder_by_server_relative_url_files_with_http_info(server_relative_url, **kwargs)  # noqa: E501
        else:
            (data) = self.get_folder_by_server_relative_url_files_with_http_info(server_relative_url, **kwargs)  # noqa: E501
            return data

    def get_folder_by_server_relative_url_files_with_http_info(self, server_relative_url, **kwargs):  # noqa: E501
        """Get all files of a ServerRelativeUrl (e.g. /sites/Fusion/Data%20Science)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_folder_by_server_relative_url_files_with_http_info(server_relative_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str server_relative_url: server Relative Url of a folder or file (required)
        :param str accept:
        :param str select: Select items by property values
        :param str expand: Expand related entities
        :param str skiptoken: Skips the first n results.
        :param int skip: Skip the first n items
        :param int top: Show only the first n items
        :param str filter: Filter items by property values
        :param str search: Search items by search phrases
        :param str orderby: Order items by property values
        :param bool count: Include count of items
        :return: SPOdataResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_relative_url', 'accept', 'select', 'expand', 'skiptoken', 'skip', 'top', 'filter', 'search', 'orderby', 'count']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_folder_by_server_relative_url_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_relative_url' is set
        if ('server_relative_url' not in params or
                params['server_relative_url'] is None):
            raise ValueError("Missing the required parameter `server_relative_url` when calling `get_folder_by_server_relative_url_files`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_relative_url' in params:
            path_params['serverRelativeUrl'] = params['server_relative_url']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'skiptoken' in params:
            query_params.append(('$skiptoken', params['skiptoken']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))  # noqa: E501
        if 'search' in params:
            query_params.append(('$search', params['search']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('$orderby', params['orderby']))  # noqa: E501
        if 'count' in params:
            query_params.append(('$count', params['count']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            "/_api/Web/GetFolderByServerRelativeUrl('{serverRelativeUrl}')/Files", 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SPOdataResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_folder_by_server_relative_url_folders(self, server_relative_url, **kwargs):  # noqa: E501
        """Get all Sub-Folders of a ServerRelativeUrl (e.g. /sites/Fusion/Data%20Science)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_folder_by_server_relative_url_folders(server_relative_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str server_relative_url: server Relative Url of a folder or file (required)
        :param str accept:
        :param str select: Select items by property values
        :param str expand: Expand related entities
        :param str skiptoken: Skips the first n results.
        :param int skip: Skip the first n items
        :param int top: Show only the first n items
        :param str filter: Filter items by property values
        :param str search: Search items by search phrases
        :param str orderby: Order items by property values
        :param bool count: Include count of items
        :return: SPOdataResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_folder_by_server_relative_url_folders_with_http_info(server_relative_url, **kwargs)  # noqa: E501
        else:
            (data) = self.get_folder_by_server_relative_url_folders_with_http_info(server_relative_url, **kwargs)  # noqa: E501
            return data

    def get_folder_by_server_relative_url_folders_with_http_info(self, server_relative_url, **kwargs):  # noqa: E501
        """Get all Sub-Folders of a ServerRelativeUrl (e.g. /sites/Fusion/Data%20Science)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_folder_by_server_relative_url_folders_with_http_info(server_relative_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str server_relative_url: server Relative Url of a folder or file (required)
        :param str accept:
        :param str select: Select items by property values
        :param str expand: Expand related entities
        :param str skiptoken: Skips the first n results.
        :param int skip: Skip the first n items
        :param int top: Show only the first n items
        :param str filter: Filter items by property values
        :param str search: Search items by search phrases
        :param str orderby: Order items by property values
        :param bool count: Include count of items
        :return: SPOdataResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_relative_url', 'accept', 'select', 'expand', 'skiptoken', 'skip', 'top', 'filter', 'search', 'orderby', 'count']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_folder_by_server_relative_url_folders" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_relative_url' is set
        if ('server_relative_url' not in params or
                params['server_relative_url'] is None):
            raise ValueError("Missing the required parameter `server_relative_url` when calling `get_folder_by_server_relative_url_folders`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_relative_url' in params:
            path_params['serverRelativeUrl'] = params['server_relative_url']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'skiptoken' in params:
            query_params.append(('$skiptoken', params['skiptoken']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))  # noqa: E501
        if 'search' in params:
            query_params.append(('$search', params['search']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('$orderby', params['orderby']))  # noqa: E501
        if 'count' in params:
            query_params.append(('$count', params['count']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            "/_api/Web/GetFolderByServerRelativeUrl('{serverRelativeUrl}')/Folders", 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SPOdataResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_get_file_by_server_relative_url(self, server_relative_url, **kwargs):  # noqa: E501
        """Get all files of a ServerRelativeUrl (e.g. /sites/Fusion/Data%20Science/Test.pdf)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_get_file_by_server_relative_url(server_relative_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str server_relative_url: server Relative Url of a folder or file (required)
        :param str accept:
        :param str select: Select items by property values
        :param str expand: Expand related entities
        :return: SPOdataResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_get_file_by_server_relative_url_with_http_info(server_relative_url, **kwargs)  # noqa: E501
        else:
            (data) = self.get_get_file_by_server_relative_url_with_http_info(server_relative_url, **kwargs)  # noqa: E501
            return data

    def get_get_file_by_server_relative_url_with_http_info(self, server_relative_url, **kwargs):  # noqa: E501
        """Get all files of a ServerRelativeUrl (e.g. /sites/Fusion/Data%20Science/Test.pdf)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_get_file_by_server_relative_url_with_http_info(server_relative_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str server_relative_url: server Relative Url of a folder or file (required)
        :param str accept:
        :param str select: Select items by property values
        :param str expand: Expand related entities
        :return: SPOdataResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_relative_url', 'accept', 'select', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_get_file_by_server_relative_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_relative_url' is set
        if ('server_relative_url' not in params or
                params['server_relative_url'] is None):
            raise ValueError("Missing the required parameter `server_relative_url` when calling `get_get_file_by_server_relative_url`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_relative_url' in params:
            path_params['serverRelativeUrl'] = params['server_relative_url']  # noqa: E501

        query_params = []
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            "/_api/Web/GetFileByServerRelativeUrl('{serverRelativeUrl}')", 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SPOdataResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_get_file_by_server_relative_url_content(self, server_relative_url, **kwargs):  # noqa: E501
        """Get file content of a ServerRelativeUrl (e.g. /sites/Fusion/Data%20Science/Test.pdf)/$value  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_get_file_by_server_relative_url_content(server_relative_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str server_relative_url: server Relative Url of a folder or file (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_get_file_by_server_relative_url_content_with_http_info(server_relative_url, **kwargs)  # noqa: E501
        else:
            (data) = self.get_get_file_by_server_relative_url_content_with_http_info(server_relative_url, **kwargs)  # noqa: E501
            return data

    def get_get_file_by_server_relative_url_content_with_http_info(self, server_relative_url, **kwargs):  # noqa: E501
        """Get file content of a ServerRelativeUrl (e.g. /sites/Fusion/Data%20Science/Test.pdf)/$value  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_get_file_by_server_relative_url_content_with_http_info(server_relative_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str server_relative_url: server Relative Url of a folder or file (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_relative_url']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_get_file_by_server_relative_url_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_relative_url' is set
        if ('server_relative_url' not in params or
                params['server_relative_url'] is None):
            raise ValueError("Missing the required parameter `server_relative_url` when calling `get_get_file_by_server_relative_url_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_relative_url' in params:
            path_params['serverRelativeUrl'] = params['server_relative_url']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            "/_api/Web/GetFileByServerRelativeUrl('{serverRelativeUrl}')$value", 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_web(self, **kwargs):  # noqa: E501
        """Get a specific site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_web(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept:
        :param str select: Select items by property values
        :param str expand: Expand related entities
        :return: SPOdataResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_web_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_web_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_web_with_http_info(self, **kwargs):  # noqa: E501
        """Get a specific site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_web_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept:
        :param str select: Select items by property values
        :param str expand: Expand related entities
        :return: SPOdataResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'select', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_web" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/_api/Web', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SPOdataResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_web_folders(self, **kwargs):  # noqa: E501
        """Get Folders of a specific site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_web_folders(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept:
        :param str select: Select items by property values
        :param str expand: Expand related entities
        :param str skiptoken: Skips the first n results.
        :param int skip: Skip the first n items
        :param int top: Show only the first n items
        :param str filter: Filter items by property values
        :param str search: Search items by search phrases
        :param str orderby: Order items by property values
        :param bool count: Include count of items
        :return: SPOdataResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_web_folders_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_web_folders_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_web_folders_with_http_info(self, **kwargs):  # noqa: E501
        """Get Folders of a specific site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_web_folders_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept:
        :param str select: Select items by property values
        :param str expand: Expand related entities
        :param str skiptoken: Skips the first n results.
        :param int skip: Skip the first n items
        :param int top: Show only the first n items
        :param str filter: Filter items by property values
        :param str search: Search items by search phrases
        :param str orderby: Order items by property values
        :param bool count: Include count of items
        :return: SPOdataResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'select', 'expand', 'skiptoken', 'skip', 'top', 'filter', 'search', 'orderby', 'count']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_web_folders" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'skiptoken' in params:
            query_params.append(('$skiptoken', params['skiptoken']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))  # noqa: E501
        if 'search' in params:
            query_params.append(('$search', params['search']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('$orderby', params['orderby']))  # noqa: E501
        if 'count' in params:
            query_params.append(('$count', params['count']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/_api/Web/Folders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SPOdataResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_web_lists(self, **kwargs):  # noqa: E501
        """Get Lists of a specific site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_web_lists(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept:
        :param str select: Select items by property values
        :param str expand: Expand related entities
        :param str skiptoken: Skips the first n results.
        :param int skip: Skip the first n items
        :param int top: Show only the first n items
        :param str filter: Filter items by property values
        :param str search: Search items by search phrases
        :param str orderby: Order items by property values
        :param bool count: Include count of items
        :return: SPOdataResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_web_lists_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_web_lists_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_web_lists_with_http_info(self, **kwargs):  # noqa: E501
        """Get Lists of a specific site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_web_lists_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept:
        :param str select: Select items by property values
        :param str expand: Expand related entities
        :param str skiptoken: Skips the first n results.
        :param int skip: Skip the first n items
        :param int top: Show only the first n items
        :param str filter: Filter items by property values
        :param str search: Search items by search phrases
        :param str orderby: Order items by property values
        :param bool count: Include count of items
        :return: SPOdataResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'select', 'expand', 'skiptoken', 'skip', 'top', 'filter', 'search', 'orderby', 'count']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_web_lists" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'skiptoken' in params:
            query_params.append(('$skiptoken', params['skiptoken']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('$skip', params['skip']))  # noqa: E501
        if 'top' in params:
            query_params.append(('$top', params['top']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))  # noqa: E501
        if 'search' in params:
            query_params.append(('$search', params['search']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('$orderby', params['orderby']))  # noqa: E501
        if 'count' in params:
            query_params.append(('$count', params['count']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/_api/Web/Lists', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SPOdataResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_web_root_folder(self, **kwargs):  # noqa: E501
        """Get RootFolder of a specific site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_web_root_folder(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept:
        :param str select: Select items by property values
        :param str expand: Expand related entities
        :return: SPOdataResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_web_root_folder_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_web_root_folder_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_web_root_folder_with_http_info(self, **kwargs):  # noqa: E501
        """Get RootFolder of a specific site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_web_root_folder_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str accept:
        :param str select: Select items by property values
        :param str expand: Expand related entities
        :return: SPOdataResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept', 'select', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_web_root_folder" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'select' in params:
            query_params.append(('$select', params['select']))  # noqa: E501
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501

        header_params = {}
        if 'accept' in params:
            header_params['accept'] = params['accept']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/_api/Web/RootFolder', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SPOdataResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
