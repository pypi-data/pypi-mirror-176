# coding: utf-8

"""
    Collibra Import API

    <p>The Import API is an efficient way to load large volumes of data into the Collibra Data Governance Center. The API can automatically differentiate between creating and updating data.</p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import collibra_importer
from collibra_importer.models.import_json_in_job_request import ImportJsonInJobRequest  # noqa: E501
from collibra_importer.rest import ApiException

class TestImportJsonInJobRequest(unittest.TestCase):
    """ImportJsonInJobRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ImportJsonInJobRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = collibra_importer.models.import_json_in_job_request.ImportJsonInJobRequest()  # noqa: E501
        if include_optional :
            return ImportJsonInJobRequest(
                send_notification = True, 
                batch_size = 1, 
                simulation = True, 
                save_result = True, 
                file_id = '0', 
                file = bytes(b'blah'), 
                file_name = '0', 
                delete_file = True, 
                continue_on_error = True, 
                relations_action = 'a', 
                identifier = collibra_importer.models.complex_relation_identifier.ComplexRelationIdentifier(
                    id = '0', 
                    indexes = [
                        56
                        ], 
                    external_system_id = '0', 
                    external_entity_id = '0', 
                    relations = {
                        'key' : [
                            collibra_importer.models.asset_identifier.AssetIdentifier(
                                id = '0', 
                                external_system_id = '0', 
                                external_entity_id = '0', 
                                name = '0', 
                                domain = collibra_importer.models.domain_identifier.DomainIdentifier(
                                    id = '0', 
                                    external_system_id = '0', 
                                    external_entity_id = '0', 
                                    name = '0', 
                                    community = collibra_importer.models.community_identifier.CommunityIdentifier(
                                        id = '0', 
                                        external_system_id = '0', 
                                        external_entity_id = '0', 
                                        name = '0', ), ), )
                            ]
                        }, ), 
                indexes = [
                    56
                    ], 
                responsibilities = {
                    'key' : [
                        collibra_importer.models.owner.Owner(
                            user = collibra_importer.models.user_identifier.UserIdentifier(
                                id = '0', 
                                indexes = [
                                    56
                                    ], ), 
                            user_group = collibra_importer.models.user_group_identifier.UserGroupIdentifier(
                                id = '0', ), )
                        ]
                    }, 
                name = '0', 
                description = '0', 
                language = '0', 
                parent = collibra_importer.models.community_identifier.CommunityIdentifier(
                    id = '0', 
                    indexes = [
                        56
                        ], 
                    external_system_id = '0', 
                    external_entity_id = '0', 
                    name = '0', ), 
                resource_type = '0', 
                community = collibra_importer.models.community_identifier.CommunityIdentifier(
                    id = '0', 
                    indexes = [
                        56
                        ], 
                    external_system_id = '0', 
                    external_entity_id = '0', 
                    name = '0', ), 
                type = collibra_importer.models.asset_type_identifier.AssetTypeIdentifier(
                    id = '0', 
                    indexes = [
                        56
                        ], 
                    name = '0', ), 
                display_name = '0', 
                domain = collibra_importer.models.domain_identifier.DomainIdentifier(
                    id = '0', 
                    indexes = [
                        56
                        ], 
                    external_system_id = '0', 
                    external_entity_id = '0', 
                    name = '0', 
                    community = collibra_importer.models.community_identifier.CommunityIdentifier(
                        id = '0', 
                        external_system_id = '0', 
                        external_entity_id = '0', 
                        name = '0', ), ), 
                status = collibra_importer.models.status_identifier.StatusIdentifier(
                    id = '0', 
                    indexes = [
                        56
                        ], 
                    name = '0', ), 
                attributes = {
                    'key' : [
                        collibra_importer.models.attribute_value.AttributeValue(
                            value = '0', 
                            values = [
                                '0'
                                ], )
                        ]
                    }, 
                relations = {
                    'key' : [
                        collibra_importer.models.asset_identifier.AssetIdentifier(
                            id = '0', 
                            indexes = [
                                56
                                ], 
                            external_system_id = '0', 
                            external_entity_id = '0', 
                            name = '0', 
                            domain = collibra_importer.models.domain_identifier.DomainIdentifier(
                                id = '0', 
                                external_system_id = '0', 
                                external_entity_id = '0', 
                                name = '0', 
                                community = collibra_importer.models.community_identifier.CommunityIdentifier(
                                    id = '0', 
                                    external_system_id = '0', 
                                    external_entity_id = '0', 
                                    name = '0', ), ), )
                        ]
                    }, 
                tags = [
                    '0'
                    ], 
                external_system_id = '0', 
                external_entity_id = '0', 
                dgc_id = '0', 
                asset = collibra_importer.models.asset_identifier.AssetIdentifier(
                    id = '0', 
                    indexes = [
                        56
                        ], 
                    external_system_id = '0', 
                    external_entity_id = '0', 
                    name = '0', 
                    domain = collibra_importer.models.domain_identifier.DomainIdentifier(
                        id = '0', 
                        external_system_id = '0', 
                        external_entity_id = '0', 
                        name = '0', 
                        community = collibra_importer.models.community_identifier.CommunityIdentifier(
                            id = '0', 
                            external_system_id = '0', 
                            external_entity_id = '0', 
                            name = '0', ), ), ), 
                complex_relation = collibra_importer.models.complex_relation_identifier.ComplexRelationIdentifier(
                    id = '0', 
                    indexes = [
                        56
                        ], 
                    external_system_id = '0', 
                    external_entity_id = '0', 
                    relations = {
                        'key' : [
                            collibra_importer.models.asset_identifier.AssetIdentifier(
                                id = '0', 
                                external_system_id = '0', 
                                external_entity_id = '0', 
                                name = '0', 
                                domain = collibra_importer.models.domain_identifier.DomainIdentifier(
                                    id = '0', 
                                    external_system_id = '0', 
                                    external_entity_id = '0', 
                                    name = '0', 
                                    community = collibra_importer.models.community_identifier.CommunityIdentifier(
                                        id = '0', 
                                        external_system_id = '0', 
                                        external_entity_id = '0', 
                                        name = '0', ), ), )
                            ]
                        }, ), 
                ext_entity_url = '0', 
                last_sync_date = 56, 
                sync_action = 'ADD', 
                complex_relation_type = collibra_importer.models.complex_relation_type_identifier.ComplexRelationTypeIdentifier(
                    id = '0', 
                    indexes = [
                        56
                        ], 
                    name = '0', )
            )
        else :
            return ImportJsonInJobRequest(
        )

    def testImportJsonInJobRequest(self):
        """Test ImportJsonInJobRequest"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
