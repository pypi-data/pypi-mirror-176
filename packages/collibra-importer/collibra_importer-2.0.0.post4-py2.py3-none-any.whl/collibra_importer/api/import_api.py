# coding: utf-8

"""
    Collibra Import API

    <p>The Import API is an efficient way to load large volumes of data into the Collibra Data Governance Center. The API can automatically differentiate between creating and updating data.</p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from collibra_importer.api_client import ApiClient
from collibra_importer.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ImportApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def evict_synchronization_cache(self, synchronization_id, **kwargs):  # noqa: E501
        """Removes all cache entries corresponding to the provided synchronization id.  # noqa: E501

        Removes all cache entries corresponding to the provided synchronization <code>id</code>.<p>The synchronization component is optimized to only execute commands that differ from cycle to cycle. Call this method to clear the command cache and force the execution of all commands in this cycle.</p><p>Note: this operation does not stop the tracking of the resources identified by the provided synchronization <code>id</code>. The next synchronization process usingthe same <code>id</code> will still be able to detect resources that should be removed.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.evict_synchronization_cache(synchronization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str synchronization_id: The synchronization id of the operation. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.evict_synchronization_cache_with_http_info(synchronization_id, **kwargs)  # noqa: E501

    def evict_synchronization_cache_with_http_info(self, synchronization_id, **kwargs):  # noqa: E501
        """Removes all cache entries corresponding to the provided synchronization id.  # noqa: E501

        Removes all cache entries corresponding to the provided synchronization <code>id</code>.<p>The synchronization component is optimized to only execute commands that differ from cycle to cycle. Call this method to clear the command cache and force the execution of all commands in this cycle.</p><p>Note: this operation does not stop the tracking of the resources identified by the provided synchronization <code>id</code>. The next synchronization process usingthe same <code>id</code> will still be able to detect resources that should be removed.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.evict_synchronization_cache_with_http_info(synchronization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str synchronization_id: The synchronization id of the operation. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'synchronization_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method evict_synchronization_cache" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'synchronization_id' is set
        if self.api_client.client_side_validation and ('synchronization_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['synchronization_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `synchronization_id` when calling `evict_synchronization_cache`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'synchronization_id' in local_var_params:
            path_params['synchronizationId'] = local_var_params['synchronization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/import/synchronize/{synchronizationId}/evict', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exists(self, synchronization_id, **kwargs):  # noqa: E501
        """Checks whether given synchronization id already exists.  # noqa: E501

        Checks whether given synchronization <code>id</code> already exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exists(synchronization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str synchronization_id: The synchronization id of the operation. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.exists_with_http_info(synchronization_id, **kwargs)  # noqa: E501

    def exists_with_http_info(self, synchronization_id, **kwargs):  # noqa: E501
        """Checks whether given synchronization id already exists.  # noqa: E501

        Checks whether given synchronization <code>id</code> already exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exists_with_http_info(synchronization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str synchronization_id: The synchronization id of the operation. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(bool, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'synchronization_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exists" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'synchronization_id' is set
        if self.api_client.client_side_validation and ('synchronization_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['synchronization_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `synchronization_id` when calling `exists`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'synchronization_id' in local_var_params:
            path_params['synchronizationId'] = local_var_params['synchronization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/import/synchronize/exists/{synchronizationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_synchronization_infos(self, **kwargs):  # noqa: E501
        """Returns synchronization information matching the given search criteria.  # noqa: E501

        Returns synchronization information matching the given search criteria.<p>Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored.</p><p>The returned synchronization information satisfies all constraints that are specified in this search criteria. By default a result containing 1000 synchronization infos is returned.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_synchronization_infos(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int offset: The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.
        :param int limit: The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used.
        :param int count_limit: Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PagedResponseSynchronizationInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.find_synchronization_infos_with_http_info(**kwargs)  # noqa: E501

    def find_synchronization_infos_with_http_info(self, **kwargs):  # noqa: E501
        """Returns synchronization information matching the given search criteria.  # noqa: E501

        Returns synchronization information matching the given search criteria.<p>Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored.</p><p>The returned synchronization information satisfies all constraints that are specified in this search criteria. By default a result containing 1000 synchronization infos is returned.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_synchronization_infos_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int offset: The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.
        :param int limit: The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used.
        :param int count_limit: Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PagedResponseSynchronizationInfo, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'offset',
            'limit',
            'count_limit'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_synchronization_infos" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'count_limit' in local_var_params and local_var_params['count_limit'] is not None:  # noqa: E501
            query_params.append(('countLimit', local_var_params['count_limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/import/synchronize', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedResponseSynchronizationInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_csv_in_job(self, separator, quote, escape, template, **kwargs):  # noqa: E501
        """Starts import from the CSV file in job (asynchronously).  # noqa: E501

        Starts import from the CSV file in job (asynchronously).  <br/><p>Request can either accept <code>id</code> of the uploaded file that contains CSV input which should be used for import - or the file itself.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_csv_in_job(separator, quote, escape, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str separator: The delimiter character used to separate entries. <b>The default value</b> is <code>';'</code>. (required)
        :param str quote: The delimiter character used for quoted entries. <b>The default value</b>  is <code>'\\\"'</code>. (required)
        :param str escape: The delimiter character used to escape separator or quote character. <b>The default value</b> is <code>'\\\\\\\\'</code>. (required)
        :param str template: The template that should be used for parsing and importing the contents of the CSV file.  <br/><p>There is one placeholder currently supported:<ul>     <li><b>${x}</b> - refers to the n-th column in the CSV file, e.g. ${1}, ${2}, ...)</li></ul><p>Example of a correct JSON template:</p> <pre> [   {     \\\"resourceType\\\": \\\"Asset\\\",     \\\"identifier\\\": {       \\\"name\\\": \\\"${1}\\\",       \\\"domain\\\": {         \\\"name\\\": \\\"${2}\\\",         \\\"community\\\": {           \\\"name\\\": \\\"Some Community\\\"         }       }     },     \\\"attributes\\\" : {       \\\"00000000-0000-0000-0000-000000003115\\\" : [ {         \\\"value\\\" : \\\"${3}\\\"        } ],       \\\"00000000-0000-0000-0000-000000000222\\\" : [ {         \\\"value\\\" : \\\"${4}\\\"       } ]     }   } ] </pre> (required)
        :param bool send_notification: Whether job status notification should be sent. <b>The default value</b> is <code>false</code>.
        :param int batch_size: <i>The batchSize parameter is now deprecated and is ignored during command execution.</i>
        :param bool simulation: Whether the import should be triggered as a simulation. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.
        :param bool save_result: Whether the import Result should be persisted or forgotten. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.<p><b>DEPRECATED:</b>This parameter is deprecated and will be removed in the future.</b>.
        :param str file_id: The <code>id</code> of uploaded file.<p><b>NOTE:</b> if this field is used, <code>file</code> should not be set.
        :param file file: The file to upload. If set, then also <code>fileName</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param str file_name: The name of the file to upload. If set, then also <code>file</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param bool delete_file: Delete the file from the Collibra Platform if the import / synchronization job is successful. <b>The default value</b> is <code>false</code><p><b>NOTE:</b> if the file corresponds to an attachment, the attachment will be deleted.
        :param bool continue_on_error: Whether the import should continue if some of the import commands are invalid or failed to execute. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the valid commands are still committed to the database, which can lead to partial results being stored.
        :param bool strict_quotes: Whether the characters outside quotes should be ignored. <b>The default value</b> is <code>false</code>.
        :param bool ignore_leading_whitespace: Whether whitespace characters before quotes should be ignored. <b>The default value</b> is <code>false</code>.
        :param bool header_row: Whether the first row of the imported CSV file is the header. <b>The default value</b> is <code>false</code>.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.import_csv_in_job_with_http_info(separator, quote, escape, template, **kwargs)  # noqa: E501

    def import_csv_in_job_with_http_info(self, separator, quote, escape, template, **kwargs):  # noqa: E501
        """Starts import from the CSV file in job (asynchronously).  # noqa: E501

        Starts import from the CSV file in job (asynchronously).  <br/><p>Request can either accept <code>id</code> of the uploaded file that contains CSV input which should be used for import - or the file itself.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_csv_in_job_with_http_info(separator, quote, escape, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str separator: The delimiter character used to separate entries. <b>The default value</b> is <code>';'</code>. (required)
        :param str quote: The delimiter character used for quoted entries. <b>The default value</b>  is <code>'\\\"'</code>. (required)
        :param str escape: The delimiter character used to escape separator or quote character. <b>The default value</b> is <code>'\\\\\\\\'</code>. (required)
        :param str template: The template that should be used for parsing and importing the contents of the CSV file.  <br/><p>There is one placeholder currently supported:<ul>     <li><b>${x}</b> - refers to the n-th column in the CSV file, e.g. ${1}, ${2}, ...)</li></ul><p>Example of a correct JSON template:</p> <pre> [   {     \\\"resourceType\\\": \\\"Asset\\\",     \\\"identifier\\\": {       \\\"name\\\": \\\"${1}\\\",       \\\"domain\\\": {         \\\"name\\\": \\\"${2}\\\",         \\\"community\\\": {           \\\"name\\\": \\\"Some Community\\\"         }       }     },     \\\"attributes\\\" : {       \\\"00000000-0000-0000-0000-000000003115\\\" : [ {         \\\"value\\\" : \\\"${3}\\\"        } ],       \\\"00000000-0000-0000-0000-000000000222\\\" : [ {         \\\"value\\\" : \\\"${4}\\\"       } ]     }   } ] </pre> (required)
        :param bool send_notification: Whether job status notification should be sent. <b>The default value</b> is <code>false</code>.
        :param int batch_size: <i>The batchSize parameter is now deprecated and is ignored during command execution.</i>
        :param bool simulation: Whether the import should be triggered as a simulation. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.
        :param bool save_result: Whether the import Result should be persisted or forgotten. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.<p><b>DEPRECATED:</b>This parameter is deprecated and will be removed in the future.</b>.
        :param str file_id: The <code>id</code> of uploaded file.<p><b>NOTE:</b> if this field is used, <code>file</code> should not be set.
        :param file file: The file to upload. If set, then also <code>fileName</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param str file_name: The name of the file to upload. If set, then also <code>file</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param bool delete_file: Delete the file from the Collibra Platform if the import / synchronization job is successful. <b>The default value</b> is <code>false</code><p><b>NOTE:</b> if the file corresponds to an attachment, the attachment will be deleted.
        :param bool continue_on_error: Whether the import should continue if some of the import commands are invalid or failed to execute. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the valid commands are still committed to the database, which can lead to partial results being stored.
        :param bool strict_quotes: Whether the characters outside quotes should be ignored. <b>The default value</b> is <code>false</code>.
        :param bool ignore_leading_whitespace: Whether whitespace characters before quotes should be ignored. <b>The default value</b> is <code>false</code>.
        :param bool header_row: Whether the first row of the imported CSV file is the header. <b>The default value</b> is <code>false</code>.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Job, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'separator',
            'quote',
            'escape',
            'template',
            'send_notification',
            'batch_size',
            'simulation',
            'save_result',
            'file_id',
            'file',
            'file_name',
            'delete_file',
            'continue_on_error',
            'strict_quotes',
            'ignore_leading_whitespace',
            'header_row'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_csv_in_job" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'separator' is set
        if self.api_client.client_side_validation and ('separator' not in local_var_params or  # noqa: E501
                                                        local_var_params['separator'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `separator` when calling `import_csv_in_job`")  # noqa: E501
        # verify the required parameter 'quote' is set
        if self.api_client.client_side_validation and ('quote' not in local_var_params or  # noqa: E501
                                                        local_var_params['quote'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `quote` when calling `import_csv_in_job`")  # noqa: E501
        # verify the required parameter 'escape' is set
        if self.api_client.client_side_validation and ('escape' not in local_var_params or  # noqa: E501
                                                        local_var_params['escape'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `escape` when calling `import_csv_in_job`")  # noqa: E501
        # verify the required parameter 'template' is set
        if self.api_client.client_side_validation and ('template' not in local_var_params or  # noqa: E501
                                                        local_var_params['template'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `template` when calling `import_csv_in_job`")  # noqa: E501

        if self.api_client.client_side_validation and 'batch_size' in local_var_params and local_var_params['batch_size'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `batch_size` when calling `import_csv_in_job`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'send_notification' in local_var_params:
            form_params.append(('sendNotification', local_var_params['send_notification']))  # noqa: E501
        if 'batch_size' in local_var_params:
            form_params.append(('batchSize', local_var_params['batch_size']))  # noqa: E501
        if 'simulation' in local_var_params:
            form_params.append(('simulation', local_var_params['simulation']))  # noqa: E501
        if 'save_result' in local_var_params:
            form_params.append(('saveResult', local_var_params['save_result']))  # noqa: E501
        if 'file_id' in local_var_params:
            form_params.append(('fileId', local_var_params['file_id']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'file_name' in local_var_params:
            form_params.append(('fileName', local_var_params['file_name']))  # noqa: E501
        if 'delete_file' in local_var_params:
            form_params.append(('deleteFile', local_var_params['delete_file']))  # noqa: E501
        if 'continue_on_error' in local_var_params:
            form_params.append(('continueOnError', local_var_params['continue_on_error']))  # noqa: E501
        if 'separator' in local_var_params:
            form_params.append(('separator', local_var_params['separator']))  # noqa: E501
        if 'quote' in local_var_params:
            form_params.append(('quote', local_var_params['quote']))  # noqa: E501
        if 'escape' in local_var_params:
            form_params.append(('escape', local_var_params['escape']))  # noqa: E501
        if 'strict_quotes' in local_var_params:
            form_params.append(('strictQuotes', local_var_params['strict_quotes']))  # noqa: E501
        if 'ignore_leading_whitespace' in local_var_params:
            form_params.append(('ignoreLeadingWhitespace', local_var_params['ignore_leading_whitespace']))  # noqa: E501
        if 'header_row' in local_var_params:
            form_params.append(('headerRow', local_var_params['header_row']))  # noqa: E501
        if 'template' in local_var_params:
            form_params.append(('template', local_var_params['template']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/import/csv-job', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Job',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_excel_in_job(self, template, **kwargs):  # noqa: E501
        """Starts import from the Excel file in job (asynchronously).  # noqa: E501

        Starts import from the Excel file in job (asynchronously).  <br/><p>Request can either accept <code>id</code> of the uploaded file that contains Excel input which should be used for import - or the file itself.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_excel_in_job(template, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str template: The template that should be used for parsing and importing the contents of the Excel file.  <br/><p>There is one placeholder currently supported:<ul>     <li><b>${x}</b> - refers to the n-th column in the Excel file, e.g. ${1}, ${2}, ...)</li></ul><p>Example of a correct JSON template:</p> <pre> [   {     \\\"resourceType\\\": \\\"Asset\\\",     \\\"identifier\\\": {       \\\"name\\\": \\\"${1}\\\",       \\\"domain\\\": {         \\\"name\\\": \\\"${2}\\\",         \\\"community\\\": {           \\\"name\\\": \\\"Some Community\\\"         }       }     },     \\\"attributes\\\" : {       \\\"00000000-0000-0000-0000-000000003115\\\" : [ {         \\\"value\\\" : \\\"${3}\\\"        } ],       \\\"00000000-0000-0000-0000-000000000222\\\" : [ {         \\\"value\\\" : \\\"${4}\\\"       } ]     }   } ] </pre> (required)
        :param bool send_notification: Whether job status notification should be sent. <b>The default value</b> is <code>false</code>.
        :param int batch_size: <i>The batchSize parameter is now deprecated and is ignored during command execution.</i>
        :param bool simulation: Whether the import should be triggered as a simulation. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.
        :param bool save_result: Whether the import Result should be persisted or forgotten. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.<p><b>DEPRECATED:</b>This parameter is deprecated and will be removed in the future.</b>.
        :param str file_id: The <code>id</code> of uploaded file.<p><b>NOTE:</b> if this field is used, <code>file</code> should not be set.
        :param file file: The file to upload. If set, then also <code>fileName</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param str file_name: The name of the file to upload. If set, then also <code>file</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param bool delete_file: Delete the file from the Collibra Platform if the import / synchronization job is successful. <b>The default value</b> is <code>false</code><p><b>NOTE:</b> if the file corresponds to an attachment, the attachment will be deleted.
        :param bool continue_on_error: Whether the import should continue if some of the import commands are invalid or failed to execute. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the valid commands are still committed to the database, which can lead to partial results being stored.
        :param str sheet_name: The name of the Excel sheet.  <br/><p>If the name is <code>null</code> and <code>sheetIndex</code> is <code>null</code>, the first sheet of the workbook will be used for the import.<br/><p>If the name is <code>null</code> and <code>sheetIndex</code> is not <code>null</code>, the sheet with the index specified by value of <code>sheetIndex</code> will be used for the import.
        :param int sheet_index: The index of the Excel sheet.  <br/><p>If the index is <code>null</code> and <code>sheetName</code> is <code>null</code>, the first sheet of the workbook will be used for the import.<br/><p>If the index is <code>null</code> and <code>sheetName</code> is not <code>null</code>, the sheet with the name specified by value of <code>sheetName</code> will be used for the import.
        :param bool header_row: Whether the first row of the imported Excel sheet is the header. <b>The default value</b> is <code>false</code>.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.import_excel_in_job_with_http_info(template, **kwargs)  # noqa: E501

    def import_excel_in_job_with_http_info(self, template, **kwargs):  # noqa: E501
        """Starts import from the Excel file in job (asynchronously).  # noqa: E501

        Starts import from the Excel file in job (asynchronously).  <br/><p>Request can either accept <code>id</code> of the uploaded file that contains Excel input which should be used for import - or the file itself.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_excel_in_job_with_http_info(template, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str template: The template that should be used for parsing and importing the contents of the Excel file.  <br/><p>There is one placeholder currently supported:<ul>     <li><b>${x}</b> - refers to the n-th column in the Excel file, e.g. ${1}, ${2}, ...)</li></ul><p>Example of a correct JSON template:</p> <pre> [   {     \\\"resourceType\\\": \\\"Asset\\\",     \\\"identifier\\\": {       \\\"name\\\": \\\"${1}\\\",       \\\"domain\\\": {         \\\"name\\\": \\\"${2}\\\",         \\\"community\\\": {           \\\"name\\\": \\\"Some Community\\\"         }       }     },     \\\"attributes\\\" : {       \\\"00000000-0000-0000-0000-000000003115\\\" : [ {         \\\"value\\\" : \\\"${3}\\\"        } ],       \\\"00000000-0000-0000-0000-000000000222\\\" : [ {         \\\"value\\\" : \\\"${4}\\\"       } ]     }   } ] </pre> (required)
        :param bool send_notification: Whether job status notification should be sent. <b>The default value</b> is <code>false</code>.
        :param int batch_size: <i>The batchSize parameter is now deprecated and is ignored during command execution.</i>
        :param bool simulation: Whether the import should be triggered as a simulation. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.
        :param bool save_result: Whether the import Result should be persisted or forgotten. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.<p><b>DEPRECATED:</b>This parameter is deprecated and will be removed in the future.</b>.
        :param str file_id: The <code>id</code> of uploaded file.<p><b>NOTE:</b> if this field is used, <code>file</code> should not be set.
        :param file file: The file to upload. If set, then also <code>fileName</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param str file_name: The name of the file to upload. If set, then also <code>file</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param bool delete_file: Delete the file from the Collibra Platform if the import / synchronization job is successful. <b>The default value</b> is <code>false</code><p><b>NOTE:</b> if the file corresponds to an attachment, the attachment will be deleted.
        :param bool continue_on_error: Whether the import should continue if some of the import commands are invalid or failed to execute. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the valid commands are still committed to the database, which can lead to partial results being stored.
        :param str sheet_name: The name of the Excel sheet.  <br/><p>If the name is <code>null</code> and <code>sheetIndex</code> is <code>null</code>, the first sheet of the workbook will be used for the import.<br/><p>If the name is <code>null</code> and <code>sheetIndex</code> is not <code>null</code>, the sheet with the index specified by value of <code>sheetIndex</code> will be used for the import.
        :param int sheet_index: The index of the Excel sheet.  <br/><p>If the index is <code>null</code> and <code>sheetName</code> is <code>null</code>, the first sheet of the workbook will be used for the import.<br/><p>If the index is <code>null</code> and <code>sheetName</code> is not <code>null</code>, the sheet with the name specified by value of <code>sheetName</code> will be used for the import.
        :param bool header_row: Whether the first row of the imported Excel sheet is the header. <b>The default value</b> is <code>false</code>.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Job, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'template',
            'send_notification',
            'batch_size',
            'simulation',
            'save_result',
            'file_id',
            'file',
            'file_name',
            'delete_file',
            'continue_on_error',
            'sheet_name',
            'sheet_index',
            'header_row'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_excel_in_job" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'template' is set
        if self.api_client.client_side_validation and ('template' not in local_var_params or  # noqa: E501
                                                        local_var_params['template'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `template` when calling `import_excel_in_job`")  # noqa: E501

        if self.api_client.client_side_validation and 'batch_size' in local_var_params and local_var_params['batch_size'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `batch_size` when calling `import_excel_in_job`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'send_notification' in local_var_params:
            form_params.append(('sendNotification', local_var_params['send_notification']))  # noqa: E501
        if 'batch_size' in local_var_params:
            form_params.append(('batchSize', local_var_params['batch_size']))  # noqa: E501
        if 'simulation' in local_var_params:
            form_params.append(('simulation', local_var_params['simulation']))  # noqa: E501
        if 'save_result' in local_var_params:
            form_params.append(('saveResult', local_var_params['save_result']))  # noqa: E501
        if 'file_id' in local_var_params:
            form_params.append(('fileId', local_var_params['file_id']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'file_name' in local_var_params:
            form_params.append(('fileName', local_var_params['file_name']))  # noqa: E501
        if 'delete_file' in local_var_params:
            form_params.append(('deleteFile', local_var_params['delete_file']))  # noqa: E501
        if 'continue_on_error' in local_var_params:
            form_params.append(('continueOnError', local_var_params['continue_on_error']))  # noqa: E501
        if 'sheet_name' in local_var_params:
            form_params.append(('sheetName', local_var_params['sheet_name']))  # noqa: E501
        if 'sheet_index' in local_var_params:
            form_params.append(('sheetIndex', local_var_params['sheet_index']))  # noqa: E501
        if 'header_row' in local_var_params:
            form_params.append(('headerRow', local_var_params['header_row']))  # noqa: E501
        if 'template' in local_var_params:
            form_params.append(('template', local_var_params['template']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/import/excel-job', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Job',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_json_in_job(self, **kwargs):  # noqa: E501
        """Starts import from the JSON file in job (asynchronously).  # noqa: E501

        Starts import from the JSON file in job (asynchronously).  <br/><p>Request can either accept <code>id</code> of the uploaded file that contains JSON input which should be used for import - or the file itself.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_json_in_job(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param bool send_notification: Whether job status notification should be sent. <b>The default value</b> is <code>false</code>.
        :param int batch_size: <i>The batchSize parameter is now deprecated and is ignored during command execution.</i>
        :param bool simulation: Whether the import should be triggered as a simulation. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.
        :param bool save_result: Whether the import Result should be persisted or forgotten. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.<p><b>DEPRECATED:</b>This parameter is deprecated and will be removed in the future.</b>.
        :param str file_id: The <code>id</code> of uploaded file.<p><b>NOTE:</b> if this field is used, <code>file</code> should not be set.
        :param file file: The file to upload. If set, then also <code>fileName</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param str file_name: The name of the file to upload. If set, then also <code>file</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param bool delete_file: Delete the file from the Collibra Platform if the import / synchronization job is successful. <b>The default value</b> is <code>false</code><p><b>NOTE:</b> if the file corresponds to an attachment, the attachment will be deleted.
        :param bool continue_on_error: Whether the import should continue if some of the import commands are invalid or failed to execute. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the valid commands are still committed to the database, which can lead to partial results being stored.
        :param str relations_action: Should it replace existing relations or add/update if any during refresh
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.import_json_in_job_with_http_info(**kwargs)  # noqa: E501

    def import_json_in_job_with_http_info(self, **kwargs):  # noqa: E501
        """Starts import from the JSON file in job (asynchronously).  # noqa: E501

        Starts import from the JSON file in job (asynchronously).  <br/><p>Request can either accept <code>id</code> of the uploaded file that contains JSON input which should be used for import - or the file itself.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_json_in_job_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param bool send_notification: Whether job status notification should be sent. <b>The default value</b> is <code>false</code>.
        :param int batch_size: <i>The batchSize parameter is now deprecated and is ignored during command execution.</i>
        :param bool simulation: Whether the import should be triggered as a simulation. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.
        :param bool save_result: Whether the import Result should be persisted or forgotten. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.<p><b>DEPRECATED:</b>This parameter is deprecated and will be removed in the future.</b>.
        :param str file_id: The <code>id</code> of uploaded file.<p><b>NOTE:</b> if this field is used, <code>file</code> should not be set.
        :param file file: The file to upload. If set, then also <code>fileName</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param str file_name: The name of the file to upload. If set, then also <code>file</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param bool delete_file: Delete the file from the Collibra Platform if the import / synchronization job is successful. <b>The default value</b> is <code>false</code><p><b>NOTE:</b> if the file corresponds to an attachment, the attachment will be deleted.
        :param bool continue_on_error: Whether the import should continue if some of the import commands are invalid or failed to execute. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the valid commands are still committed to the database, which can lead to partial results being stored.
        :param str relations_action: Should it replace existing relations or add/update if any during refresh
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Job, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'send_notification',
            'batch_size',
            'simulation',
            'save_result',
            'file_id',
            'file',
            'file_name',
            'delete_file',
            'continue_on_error',
            'relations_action'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_json_in_job" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if self.api_client.client_side_validation and 'batch_size' in local_var_params and local_var_params['batch_size'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `batch_size` when calling `import_json_in_job`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'relations_action' in local_var_params and not re.search(r'ADD_OR_IGNORE|REPLACE', local_var_params['relations_action']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `relations_action` when calling `import_json_in_job`, must conform to the pattern `/ADD_OR_IGNORE|REPLACE/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'send_notification' in local_var_params:
            form_params.append(('sendNotification', local_var_params['send_notification']))  # noqa: E501
        if 'batch_size' in local_var_params:
            form_params.append(('batchSize', local_var_params['batch_size']))  # noqa: E501
        if 'simulation' in local_var_params:
            form_params.append(('simulation', local_var_params['simulation']))  # noqa: E501
        if 'save_result' in local_var_params:
            form_params.append(('saveResult', local_var_params['save_result']))  # noqa: E501
        if 'file_id' in local_var_params:
            form_params.append(('fileId', local_var_params['file_id']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'file_name' in local_var_params:
            form_params.append(('fileName', local_var_params['file_name']))  # noqa: E501
        if 'delete_file' in local_var_params:
            form_params.append(('deleteFile', local_var_params['delete_file']))  # noqa: E501
        if 'continue_on_error' in local_var_params:
            form_params.append(('continueOnError', local_var_params['continue_on_error']))  # noqa: E501
        if 'relations_action' in local_var_params:
            form_params.append(('relationsAction', local_var_params['relations_action']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/import/json-job', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Job',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_synchronization(self, synchronization_id, **kwargs):  # noqa: E501
        """Removes all information about synchronization process corresponding to provided synchronization id.  # noqa: E501

        Removes all information about synchronization process corresponding to provided synchronization <code>id</code>.<p>This operation stops tracking of synchronization identified by provided synchronization <code>id</code>. The next synchronization process specified with this <code>id</code> will not be able to detect resources that should be removed.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_synchronization(synchronization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str synchronization_id: The synchronization id of the operation. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.remove_synchronization_with_http_info(synchronization_id, **kwargs)  # noqa: E501

    def remove_synchronization_with_http_info(self, synchronization_id, **kwargs):  # noqa: E501
        """Removes all information about synchronization process corresponding to provided synchronization id.  # noqa: E501

        Removes all information about synchronization process corresponding to provided synchronization <code>id</code>.<p>This operation stops tracking of synchronization identified by provided synchronization <code>id</code>. The next synchronization process specified with this <code>id</code> will not be able to detect resources that should be removed.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_synchronization_with_http_info(synchronization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str synchronization_id: The synchronization id of the operation. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'synchronization_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_synchronization" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'synchronization_id' is set
        if self.api_client.client_side_validation and ('synchronization_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['synchronization_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `synchronization_id` when calling `remove_synchronization`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'synchronization_id' in local_var_params:
            path_params['synchronizationId'] = local_var_params['synchronization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/import/synchronize/{synchronizationId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def synchronize_batch_csv_in_job(self, synchronization_id, separator, quote, escape, template, **kwargs):  # noqa: E501
        """Starts batch synchronization from the CSV file in job (asynchronously).  # noqa: E501

        Starts batch synchronization from the CSV file in job (asynchronously).<p>Request can either accept <code>id</code> of the uploaded file that contains CSV input which should be used for import or the file itself. The input file is treated as a part (batch) of synchronization process. After last batch, finalization (cleanup) process should be called.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.synchronize_batch_csv_in_job(synchronization_id, separator, quote, escape, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str synchronization_id: The synchronization id used to distinguish different synchronizations. (required)
        :param str separator: The delimiter character used to separate entries. <b>The default value</b> is <code>';'</code>. (required)
        :param str quote: The delimiter character used for quoted entries. <b>The default value</b>  is <code>'\\\"'</code>. (required)
        :param str escape: The delimiter character used to escape separator or quote character. <b>The default value</b> is <code>'\\\\\\\\'</code>. (required)
        :param str template: The template that should be used for parsing and synchronizing the contents of the CSV file.  <br/><p>There is one placeholder currently supported:<ul>     <li><b>${x}</b> - refers to the n-th column in the CSV file, e.g. ${1}, ${2}, ...)</li></ul><p>Example of a correct JSON template:</p> <pre> [   {     \\\"resourceType\\\": \\\"Asset\\\",     \\\"identifier\\\": {       \\\"name\\\": \\\"${1}\\\",       \\\"domain\\\": {         \\\"name\\\": \\\"${2}\\\",         \\\"community\\\": {           \\\"name\\\": \\\"Some Community\\\"         }       }     },     \\\"attributes\\\" : {       \\\"00000000-0000-0000-0000-000000003115\\\" : [ {         \\\"value\\\" : \\\"${3}\\\"        } ],       \\\"00000000-0000-0000-0000-000000000222\\\" : [ {         \\\"value\\\" : \\\"${4}\\\"       } ]     }   } ] </pre> (required)
        :param bool send_notification: Whether job status notification should be sent. <b>The default value</b> is <code>false</code>.
        :param int batch_size: <i>The batchSize parameter is now deprecated and is ignored during command execution.</i>
        :param bool simulation: Whether the import should be triggered as a simulation. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.
        :param bool save_result: Whether the import Result should be persisted or forgotten. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.<p><b>DEPRECATED:</b>This parameter is deprecated and will be removed in the future.</b>.
        :param str file_id: The <code>id</code> of uploaded file.<p><b>NOTE:</b> if this field is used, <code>file</code> should not be set.
        :param file file: The file to upload. If set, then also <code>fileName</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param str file_name: The name of the file to upload. If set, then also <code>file</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param bool delete_file: Whether the file should be deleted after the synchronization job is finished, regardless of the result. <b>The default value</b> is <code>false</code>.<p><b>NOTE:</b> if the file corresponds to an attachment, the attachment will be deleted.
        :param bool continue_on_error: Whether the import should continue if some of the import commands are invalid or failed to execute. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the valid commands are still committed to the database, which can lead to partial results being stored.
        :param bool strict_quotes: Whether the characters outside quotes should be ignored. <b>The default value</b> is <code>false</code>.
        :param bool ignore_leading_whitespace: Whether whitespace characters before quotes should be ignored. <b>The default value</b> is <code>false</code>.
        :param bool header_row: Whether the first row of the synchronized CSV file is the header. <b>The default value</b> is <code>false</code>.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.synchronize_batch_csv_in_job_with_http_info(synchronization_id, separator, quote, escape, template, **kwargs)  # noqa: E501

    def synchronize_batch_csv_in_job_with_http_info(self, synchronization_id, separator, quote, escape, template, **kwargs):  # noqa: E501
        """Starts batch synchronization from the CSV file in job (asynchronously).  # noqa: E501

        Starts batch synchronization from the CSV file in job (asynchronously).<p>Request can either accept <code>id</code> of the uploaded file that contains CSV input which should be used for import or the file itself. The input file is treated as a part (batch) of synchronization process. After last batch, finalization (cleanup) process should be called.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.synchronize_batch_csv_in_job_with_http_info(synchronization_id, separator, quote, escape, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str synchronization_id: The synchronization id used to distinguish different synchronizations. (required)
        :param str separator: The delimiter character used to separate entries. <b>The default value</b> is <code>';'</code>. (required)
        :param str quote: The delimiter character used for quoted entries. <b>The default value</b>  is <code>'\\\"'</code>. (required)
        :param str escape: The delimiter character used to escape separator or quote character. <b>The default value</b> is <code>'\\\\\\\\'</code>. (required)
        :param str template: The template that should be used for parsing and synchronizing the contents of the CSV file.  <br/><p>There is one placeholder currently supported:<ul>     <li><b>${x}</b> - refers to the n-th column in the CSV file, e.g. ${1}, ${2}, ...)</li></ul><p>Example of a correct JSON template:</p> <pre> [   {     \\\"resourceType\\\": \\\"Asset\\\",     \\\"identifier\\\": {       \\\"name\\\": \\\"${1}\\\",       \\\"domain\\\": {         \\\"name\\\": \\\"${2}\\\",         \\\"community\\\": {           \\\"name\\\": \\\"Some Community\\\"         }       }     },     \\\"attributes\\\" : {       \\\"00000000-0000-0000-0000-000000003115\\\" : [ {         \\\"value\\\" : \\\"${3}\\\"        } ],       \\\"00000000-0000-0000-0000-000000000222\\\" : [ {         \\\"value\\\" : \\\"${4}\\\"       } ]     }   } ] </pre> (required)
        :param bool send_notification: Whether job status notification should be sent. <b>The default value</b> is <code>false</code>.
        :param int batch_size: <i>The batchSize parameter is now deprecated and is ignored during command execution.</i>
        :param bool simulation: Whether the import should be triggered as a simulation. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.
        :param bool save_result: Whether the import Result should be persisted or forgotten. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.<p><b>DEPRECATED:</b>This parameter is deprecated and will be removed in the future.</b>.
        :param str file_id: The <code>id</code> of uploaded file.<p><b>NOTE:</b> if this field is used, <code>file</code> should not be set.
        :param file file: The file to upload. If set, then also <code>fileName</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param str file_name: The name of the file to upload. If set, then also <code>file</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param bool delete_file: Whether the file should be deleted after the synchronization job is finished, regardless of the result. <b>The default value</b> is <code>false</code>.<p><b>NOTE:</b> if the file corresponds to an attachment, the attachment will be deleted.
        :param bool continue_on_error: Whether the import should continue if some of the import commands are invalid or failed to execute. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the valid commands are still committed to the database, which can lead to partial results being stored.
        :param bool strict_quotes: Whether the characters outside quotes should be ignored. <b>The default value</b> is <code>false</code>.
        :param bool ignore_leading_whitespace: Whether whitespace characters before quotes should be ignored. <b>The default value</b> is <code>false</code>.
        :param bool header_row: Whether the first row of the synchronized CSV file is the header. <b>The default value</b> is <code>false</code>.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Job, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'synchronization_id',
            'separator',
            'quote',
            'escape',
            'template',
            'send_notification',
            'batch_size',
            'simulation',
            'save_result',
            'file_id',
            'file',
            'file_name',
            'delete_file',
            'continue_on_error',
            'strict_quotes',
            'ignore_leading_whitespace',
            'header_row'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method synchronize_batch_csv_in_job" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'synchronization_id' is set
        if self.api_client.client_side_validation and ('synchronization_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['synchronization_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `synchronization_id` when calling `synchronize_batch_csv_in_job`")  # noqa: E501
        # verify the required parameter 'separator' is set
        if self.api_client.client_side_validation and ('separator' not in local_var_params or  # noqa: E501
                                                        local_var_params['separator'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `separator` when calling `synchronize_batch_csv_in_job`")  # noqa: E501
        # verify the required parameter 'quote' is set
        if self.api_client.client_side_validation and ('quote' not in local_var_params or  # noqa: E501
                                                        local_var_params['quote'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `quote` when calling `synchronize_batch_csv_in_job`")  # noqa: E501
        # verify the required parameter 'escape' is set
        if self.api_client.client_side_validation and ('escape' not in local_var_params or  # noqa: E501
                                                        local_var_params['escape'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `escape` when calling `synchronize_batch_csv_in_job`")  # noqa: E501
        # verify the required parameter 'template' is set
        if self.api_client.client_side_validation and ('template' not in local_var_params or  # noqa: E501
                                                        local_var_params['template'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `template` when calling `synchronize_batch_csv_in_job`")  # noqa: E501

        if self.api_client.client_side_validation and ('synchronization_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['synchronization_id']) > 50):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `synchronization_id` when calling `synchronize_batch_csv_in_job`, length must be less than or equal to `50`")  # noqa: E501
        if self.api_client.client_side_validation and ('synchronization_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['synchronization_id']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `synchronization_id` when calling `synchronize_batch_csv_in_job`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'batch_size' in local_var_params and local_var_params['batch_size'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `batch_size` when calling `synchronize_batch_csv_in_job`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'synchronization_id' in local_var_params:
            path_params['synchronizationId'] = local_var_params['synchronization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'send_notification' in local_var_params:
            form_params.append(('sendNotification', local_var_params['send_notification']))  # noqa: E501
        if 'batch_size' in local_var_params:
            form_params.append(('batchSize', local_var_params['batch_size']))  # noqa: E501
        if 'simulation' in local_var_params:
            form_params.append(('simulation', local_var_params['simulation']))  # noqa: E501
        if 'save_result' in local_var_params:
            form_params.append(('saveResult', local_var_params['save_result']))  # noqa: E501
        if 'file_id' in local_var_params:
            form_params.append(('fileId', local_var_params['file_id']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'file_name' in local_var_params:
            form_params.append(('fileName', local_var_params['file_name']))  # noqa: E501
        if 'delete_file' in local_var_params:
            form_params.append(('deleteFile', local_var_params['delete_file']))  # noqa: E501
        if 'continue_on_error' in local_var_params:
            form_params.append(('continueOnError', local_var_params['continue_on_error']))  # noqa: E501
        if 'separator' in local_var_params:
            form_params.append(('separator', local_var_params['separator']))  # noqa: E501
        if 'quote' in local_var_params:
            form_params.append(('quote', local_var_params['quote']))  # noqa: E501
        if 'escape' in local_var_params:
            form_params.append(('escape', local_var_params['escape']))  # noqa: E501
        if 'strict_quotes' in local_var_params:
            form_params.append(('strictQuotes', local_var_params['strict_quotes']))  # noqa: E501
        if 'ignore_leading_whitespace' in local_var_params:
            form_params.append(('ignoreLeadingWhitespace', local_var_params['ignore_leading_whitespace']))  # noqa: E501
        if 'header_row' in local_var_params:
            form_params.append(('headerRow', local_var_params['header_row']))  # noqa: E501
        if 'template' in local_var_params:
            form_params.append(('template', local_var_params['template']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/import/synchronize/{synchronizationId}/batch/csv-job', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Job',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def synchronize_batch_excel_in_job(self, synchronization_id, template, **kwargs):  # noqa: E501
        """Starts batch synchronization from the Excel file in job (asynchronously).  # noqa: E501

        Starts batch synchronization from the Excel file in job (asynchronously).<p>Request can either accept <code>id</code> of the uploaded file that contains Excel input which should be used for import or the file itself. The input file is treated as a part (batch) of synchronization process. After last batch, finalization (cleanup) process should be called.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.synchronize_batch_excel_in_job(synchronization_id, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str synchronization_id: The synchronization id used to distinguish different synchronizations. (required)
        :param str template: The template that should be used for parsing and synchronizing the contents of the Excel file.  <br/><p>There is one placeholder currently supported:<ul>     <li><b>${x}</b> - refers to the n-th column in the Excel file, e.g. ${1}, ${2}, ...)</li></ul><p>Example of a correct JSON template:</p> <pre> [   {     \\\"resourceType\\\": \\\"Asset\\\",     \\\"identifier\\\": {       \\\"name\\\": \\\"${1}\\\",       \\\"domain\\\": {         \\\"name\\\": \\\"${2}\\\",         \\\"community\\\": {           \\\"name\\\": \\\"Some Community\\\"         }       }     },     \\\"attributes\\\" : {       \\\"00000000-0000-0000-0000-000000003115\\\" : [ {         \\\"value\\\" : \\\"${3}\\\"        } ],       \\\"00000000-0000-0000-0000-000000000222\\\" : [ {         \\\"value\\\" : \\\"${4}\\\"       } ]     }   } ] </pre> (required)
        :param bool send_notification: Whether job status notification should be sent. <b>The default value</b> is <code>false</code>.
        :param int batch_size: <i>The batchSize parameter is now deprecated and is ignored during command execution.</i>
        :param bool simulation: Whether the import should be triggered as a simulation. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.
        :param bool save_result: Whether the import Result should be persisted or forgotten. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.<p><b>DEPRECATED:</b>This parameter is deprecated and will be removed in the future.</b>.
        :param str file_id: The <code>id</code> of uploaded file.<p><b>NOTE:</b> if this field is used, <code>file</code> should not be set.
        :param file file: The file to upload. If set, then also <code>fileName</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param str file_name: The name of the file to upload. If set, then also <code>file</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param bool delete_file: Whether the file should be deleted after the synchronization job is finished, regardless of the result. <b>The default value</b> is <code>false</code>.<p><b>NOTE:</b> if the file corresponds to an attachment, the attachment will be deleted.
        :param bool continue_on_error: Whether the import should continue if some of the import commands are invalid or failed to execute. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the valid commands are still committed to the database, which can lead to partial results being stored.
        :param str sheet_name: The name of the Excel sheet.  <br/><p>If the name is <code>null</code> and <code>sheetIndex</code> is <code>null</code>, the first sheet of the workbook will be used for the synchronization.<br/><p>If the name is <code>null</code> and <code>sheetIndex</code> is not <code>null</code>, the sheet with the index specified by value of <code>sheetIndex</code> will be used for the synchronization.
        :param int sheet_index: The index of the Excel sheet.  <br/><p>If the index is <code>null</code> and <code>sheetName</code> is <code>null</code>, the first sheet of the workbook will be used for the synchronization.<br/><p>If the index is <code>null</code> and <code>sheetName</code> is not <code>null</code>, the sheet with the name specified by value of <code>sheetName</code> will be used for the synchronization.
        :param bool header_row: Whether the first row of the synchronized Excel file is the header. <b>The default value</b> is <code>false</code>.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.synchronize_batch_excel_in_job_with_http_info(synchronization_id, template, **kwargs)  # noqa: E501

    def synchronize_batch_excel_in_job_with_http_info(self, synchronization_id, template, **kwargs):  # noqa: E501
        """Starts batch synchronization from the Excel file in job (asynchronously).  # noqa: E501

        Starts batch synchronization from the Excel file in job (asynchronously).<p>Request can either accept <code>id</code> of the uploaded file that contains Excel input which should be used for import or the file itself. The input file is treated as a part (batch) of synchronization process. After last batch, finalization (cleanup) process should be called.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.synchronize_batch_excel_in_job_with_http_info(synchronization_id, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str synchronization_id: The synchronization id used to distinguish different synchronizations. (required)
        :param str template: The template that should be used for parsing and synchronizing the contents of the Excel file.  <br/><p>There is one placeholder currently supported:<ul>     <li><b>${x}</b> - refers to the n-th column in the Excel file, e.g. ${1}, ${2}, ...)</li></ul><p>Example of a correct JSON template:</p> <pre> [   {     \\\"resourceType\\\": \\\"Asset\\\",     \\\"identifier\\\": {       \\\"name\\\": \\\"${1}\\\",       \\\"domain\\\": {         \\\"name\\\": \\\"${2}\\\",         \\\"community\\\": {           \\\"name\\\": \\\"Some Community\\\"         }       }     },     \\\"attributes\\\" : {       \\\"00000000-0000-0000-0000-000000003115\\\" : [ {         \\\"value\\\" : \\\"${3}\\\"        } ],       \\\"00000000-0000-0000-0000-000000000222\\\" : [ {         \\\"value\\\" : \\\"${4}\\\"       } ]     }   } ] </pre> (required)
        :param bool send_notification: Whether job status notification should be sent. <b>The default value</b> is <code>false</code>.
        :param int batch_size: <i>The batchSize parameter is now deprecated and is ignored during command execution.</i>
        :param bool simulation: Whether the import should be triggered as a simulation. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.
        :param bool save_result: Whether the import Result should be persisted or forgotten. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.<p><b>DEPRECATED:</b>This parameter is deprecated and will be removed in the future.</b>.
        :param str file_id: The <code>id</code> of uploaded file.<p><b>NOTE:</b> if this field is used, <code>file</code> should not be set.
        :param file file: The file to upload. If set, then also <code>fileName</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param str file_name: The name of the file to upload. If set, then also <code>file</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param bool delete_file: Whether the file should be deleted after the synchronization job is finished, regardless of the result. <b>The default value</b> is <code>false</code>.<p><b>NOTE:</b> if the file corresponds to an attachment, the attachment will be deleted.
        :param bool continue_on_error: Whether the import should continue if some of the import commands are invalid or failed to execute. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the valid commands are still committed to the database, which can lead to partial results being stored.
        :param str sheet_name: The name of the Excel sheet.  <br/><p>If the name is <code>null</code> and <code>sheetIndex</code> is <code>null</code>, the first sheet of the workbook will be used for the synchronization.<br/><p>If the name is <code>null</code> and <code>sheetIndex</code> is not <code>null</code>, the sheet with the index specified by value of <code>sheetIndex</code> will be used for the synchronization.
        :param int sheet_index: The index of the Excel sheet.  <br/><p>If the index is <code>null</code> and <code>sheetName</code> is <code>null</code>, the first sheet of the workbook will be used for the synchronization.<br/><p>If the index is <code>null</code> and <code>sheetName</code> is not <code>null</code>, the sheet with the name specified by value of <code>sheetName</code> will be used for the synchronization.
        :param bool header_row: Whether the first row of the synchronized Excel file is the header. <b>The default value</b> is <code>false</code>.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Job, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'synchronization_id',
            'template',
            'send_notification',
            'batch_size',
            'simulation',
            'save_result',
            'file_id',
            'file',
            'file_name',
            'delete_file',
            'continue_on_error',
            'sheet_name',
            'sheet_index',
            'header_row'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method synchronize_batch_excel_in_job" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'synchronization_id' is set
        if self.api_client.client_side_validation and ('synchronization_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['synchronization_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `synchronization_id` when calling `synchronize_batch_excel_in_job`")  # noqa: E501
        # verify the required parameter 'template' is set
        if self.api_client.client_side_validation and ('template' not in local_var_params or  # noqa: E501
                                                        local_var_params['template'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `template` when calling `synchronize_batch_excel_in_job`")  # noqa: E501

        if self.api_client.client_side_validation and ('synchronization_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['synchronization_id']) > 50):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `synchronization_id` when calling `synchronize_batch_excel_in_job`, length must be less than or equal to `50`")  # noqa: E501
        if self.api_client.client_side_validation and ('synchronization_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['synchronization_id']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `synchronization_id` when calling `synchronize_batch_excel_in_job`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'batch_size' in local_var_params and local_var_params['batch_size'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `batch_size` when calling `synchronize_batch_excel_in_job`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'synchronization_id' in local_var_params:
            path_params['synchronizationId'] = local_var_params['synchronization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'send_notification' in local_var_params:
            form_params.append(('sendNotification', local_var_params['send_notification']))  # noqa: E501
        if 'batch_size' in local_var_params:
            form_params.append(('batchSize', local_var_params['batch_size']))  # noqa: E501
        if 'simulation' in local_var_params:
            form_params.append(('simulation', local_var_params['simulation']))  # noqa: E501
        if 'save_result' in local_var_params:
            form_params.append(('saveResult', local_var_params['save_result']))  # noqa: E501
        if 'file_id' in local_var_params:
            form_params.append(('fileId', local_var_params['file_id']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'file_name' in local_var_params:
            form_params.append(('fileName', local_var_params['file_name']))  # noqa: E501
        if 'delete_file' in local_var_params:
            form_params.append(('deleteFile', local_var_params['delete_file']))  # noqa: E501
        if 'continue_on_error' in local_var_params:
            form_params.append(('continueOnError', local_var_params['continue_on_error']))  # noqa: E501
        if 'sheet_name' in local_var_params:
            form_params.append(('sheetName', local_var_params['sheet_name']))  # noqa: E501
        if 'sheet_index' in local_var_params:
            form_params.append(('sheetIndex', local_var_params['sheet_index']))  # noqa: E501
        if 'header_row' in local_var_params:
            form_params.append(('headerRow', local_var_params['header_row']))  # noqa: E501
        if 'template' in local_var_params:
            form_params.append(('template', local_var_params['template']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/import/synchronize/{synchronizationId}/batch/excel-job', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Job',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def synchronize_batch_json_in_job(self, synchronization_id, **kwargs):  # noqa: E501
        """Starts batch synchronization from the JSON file in job (asynchronously).  # noqa: E501

        Starts batch synchronization from the JSON file in job (asynchronously).<p>Request can either accept <code>id</code> of the uploaded file that contains JSON input which should be used for import or the file itself. The input file is treated as a part (batch) of synchronization process. After last batch, finalization (cleanup) process should be called.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.synchronize_batch_json_in_job(synchronization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str synchronization_id: The synchronization id used to distinguish different synchronizations. (required)
        :param bool send_notification: Whether job status notification should be sent. <b>The default value</b> is <code>false</code>.
        :param int batch_size: <i>The batchSize parameter is now deprecated and is ignored during command execution.</i>
        :param bool simulation: Whether the import should be triggered as a simulation. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.
        :param bool save_result: Whether the import Result should be persisted or forgotten. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.<p><b>DEPRECATED:</b>This parameter is deprecated and will be removed in the future.</b>.
        :param str file_id: The <code>id</code> of uploaded file.<p><b>NOTE:</b> if this field is used, <code>file</code> should not be set.
        :param file file: The file to upload. If set, then also <code>fileName</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param str file_name: The name of the file to upload. If set, then also <code>file</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param bool delete_file: Whether the file should be deleted after the synchronization job is finished, regardless of the result. <b>The default value</b> is <code>false</code>.<p><b>NOTE:</b> if the file corresponds to an attachment, the attachment will be deleted.
        :param bool continue_on_error: Whether the import should continue if some of the import commands are invalid or failed to execute. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the valid commands are still committed to the database, which can lead to partial results being stored.
        :param str relations_action: Should it replace existing relations or add/update if any during refresh
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.synchronize_batch_json_in_job_with_http_info(synchronization_id, **kwargs)  # noqa: E501

    def synchronize_batch_json_in_job_with_http_info(self, synchronization_id, **kwargs):  # noqa: E501
        """Starts batch synchronization from the JSON file in job (asynchronously).  # noqa: E501

        Starts batch synchronization from the JSON file in job (asynchronously).<p>Request can either accept <code>id</code> of the uploaded file that contains JSON input which should be used for import or the file itself. The input file is treated as a part (batch) of synchronization process. After last batch, finalization (cleanup) process should be called.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.synchronize_batch_json_in_job_with_http_info(synchronization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str synchronization_id: The synchronization id used to distinguish different synchronizations. (required)
        :param bool send_notification: Whether job status notification should be sent. <b>The default value</b> is <code>false</code>.
        :param int batch_size: <i>The batchSize parameter is now deprecated and is ignored during command execution.</i>
        :param bool simulation: Whether the import should be triggered as a simulation. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.
        :param bool save_result: Whether the import Result should be persisted or forgotten. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.<p><b>DEPRECATED:</b>This parameter is deprecated and will be removed in the future.</b>.
        :param str file_id: The <code>id</code> of uploaded file.<p><b>NOTE:</b> if this field is used, <code>file</code> should not be set.
        :param file file: The file to upload. If set, then also <code>fileName</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param str file_name: The name of the file to upload. If set, then also <code>file</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param bool delete_file: Whether the file should be deleted after the synchronization job is finished, regardless of the result. <b>The default value</b> is <code>false</code>.<p><b>NOTE:</b> if the file corresponds to an attachment, the attachment will be deleted.
        :param bool continue_on_error: Whether the import should continue if some of the import commands are invalid or failed to execute. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the valid commands are still committed to the database, which can lead to partial results being stored.
        :param str relations_action: Should it replace existing relations or add/update if any during refresh
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Job, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'synchronization_id',
            'send_notification',
            'batch_size',
            'simulation',
            'save_result',
            'file_id',
            'file',
            'file_name',
            'delete_file',
            'continue_on_error',
            'relations_action'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method synchronize_batch_json_in_job" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'synchronization_id' is set
        if self.api_client.client_side_validation and ('synchronization_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['synchronization_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `synchronization_id` when calling `synchronize_batch_json_in_job`")  # noqa: E501

        if self.api_client.client_side_validation and ('synchronization_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['synchronization_id']) > 50):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `synchronization_id` when calling `synchronize_batch_json_in_job`, length must be less than or equal to `50`")  # noqa: E501
        if self.api_client.client_side_validation and ('synchronization_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['synchronization_id']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `synchronization_id` when calling `synchronize_batch_json_in_job`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'batch_size' in local_var_params and local_var_params['batch_size'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `batch_size` when calling `synchronize_batch_json_in_job`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'relations_action' in local_var_params and not re.search(r'ADD_OR_IGNORE|REPLACE', local_var_params['relations_action']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `relations_action` when calling `synchronize_batch_json_in_job`, must conform to the pattern `/ADD_OR_IGNORE|REPLACE/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'synchronization_id' in local_var_params:
            path_params['synchronizationId'] = local_var_params['synchronization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'send_notification' in local_var_params:
            form_params.append(('sendNotification', local_var_params['send_notification']))  # noqa: E501
        if 'batch_size' in local_var_params:
            form_params.append(('batchSize', local_var_params['batch_size']))  # noqa: E501
        if 'simulation' in local_var_params:
            form_params.append(('simulation', local_var_params['simulation']))  # noqa: E501
        if 'save_result' in local_var_params:
            form_params.append(('saveResult', local_var_params['save_result']))  # noqa: E501
        if 'file_id' in local_var_params:
            form_params.append(('fileId', local_var_params['file_id']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'file_name' in local_var_params:
            form_params.append(('fileName', local_var_params['file_name']))  # noqa: E501
        if 'delete_file' in local_var_params:
            form_params.append(('deleteFile', local_var_params['delete_file']))  # noqa: E501
        if 'continue_on_error' in local_var_params:
            form_params.append(('continueOnError', local_var_params['continue_on_error']))  # noqa: E501
        if 'relations_action' in local_var_params:
            form_params.append(('relationsAction', local_var_params['relations_action']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/import/synchronize/{synchronizationId}/batch/json-job', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Job',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def synchronize_csv_in_job(self, synchronization_id, separator, quote, escape, template, **kwargs):  # noqa: E501
        """Starts full synchronization from the CSV file in job (asynchronously).  # noqa: E501

        Starts full synchronization from the CSV file in job (asynchronously).<p>Request can either accept <code>id</code> of the uploaded file that contains CSV input which should be used for import or the file itself. The input file is treated as a full input of synchronization process.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.synchronize_csv_in_job(synchronization_id, separator, quote, escape, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str synchronization_id: The synchronization id used to distinguish different synchronizations. (required)
        :param str separator: The delimiter character used to separate entries. <b>The default value</b> is <code>';'</code>. (required)
        :param str quote: The delimiter character used for quoted entries. <b>The default value</b>  is <code>'\\\"'</code>. (required)
        :param str escape: The delimiter character used to escape separator or quote character. <b>The default value</b> is <code>'\\\\\\\\'</code>. (required)
        :param str template: The template that should be used for parsing and synchronizing the contents of the CSV file.  <br/><p>There is one placeholder currently supported:<ul>     <li><b>${x}</b> - refers to the n-th column in the CSV file, e.g. ${1}, ${2}, ...)</li></ul><p>Example of a correct JSON template:</p> <pre> [   {     \\\"resourceType\\\": \\\"Asset\\\",     \\\"identifier\\\": {       \\\"name\\\": \\\"${1}\\\",       \\\"domain\\\": {         \\\"name\\\": \\\"${2}\\\",         \\\"community\\\": {           \\\"name\\\": \\\"Some Community\\\"         }       }     },     \\\"attributes\\\" : {       \\\"00000000-0000-0000-0000-000000003115\\\" : [ {         \\\"value\\\" : \\\"${3}\\\"        } ],       \\\"00000000-0000-0000-0000-000000000222\\\" : [ {         \\\"value\\\" : \\\"${4}\\\"       } ]     }   } ] </pre> (required)
        :param bool send_notification: Whether job status notification should be sent. <b>The default value</b> is <code>false</code>.
        :param int batch_size: <i>The batchSize parameter is now deprecated and is ignored during command execution.</i>
        :param bool simulation: Whether the import should be triggered as a simulation. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.
        :param bool save_result: Whether the import Result should be persisted or forgotten. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.<p><b>DEPRECATED:</b>This parameter is deprecated and will be removed in the future.</b>.
        :param str file_id: The <code>id</code> of uploaded file.<p><b>NOTE:</b> if this field is used, <code>file</code> should not be set.
        :param file file: The file to upload. If set, then also <code>fileName</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param str file_name: The name of the file to upload. If set, then also <code>file</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param bool delete_file: Whether the file should be deleted after the synchronization job is finished, regardless of the result. <b>The default value</b> is <code>false</code>.<p><b>NOTE:</b> if the file corresponds to an attachment, the attachment will be deleted.
        :param bool continue_on_error: Whether the import should continue if some of the import commands are invalid or failed to execute. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the valid commands are still committed to the database, which can lead to partial results being stored.
        :param bool strict_quotes: Whether the characters outside quotes should be ignored. <b>The default value</b> is <code>false</code>.
        :param bool ignore_leading_whitespace: Whether whitespace characters before quotes should be ignored. <b>The default value</b> is <code>false</code>.
        :param bool header_row: Whether the first row of the synchronized CSV file is the header. <b>The default value</b> is <code>false</code>.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.synchronize_csv_in_job_with_http_info(synchronization_id, separator, quote, escape, template, **kwargs)  # noqa: E501

    def synchronize_csv_in_job_with_http_info(self, synchronization_id, separator, quote, escape, template, **kwargs):  # noqa: E501
        """Starts full synchronization from the CSV file in job (asynchronously).  # noqa: E501

        Starts full synchronization from the CSV file in job (asynchronously).<p>Request can either accept <code>id</code> of the uploaded file that contains CSV input which should be used for import or the file itself. The input file is treated as a full input of synchronization process.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.synchronize_csv_in_job_with_http_info(synchronization_id, separator, quote, escape, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str synchronization_id: The synchronization id used to distinguish different synchronizations. (required)
        :param str separator: The delimiter character used to separate entries. <b>The default value</b> is <code>';'</code>. (required)
        :param str quote: The delimiter character used for quoted entries. <b>The default value</b>  is <code>'\\\"'</code>. (required)
        :param str escape: The delimiter character used to escape separator or quote character. <b>The default value</b> is <code>'\\\\\\\\'</code>. (required)
        :param str template: The template that should be used for parsing and synchronizing the contents of the CSV file.  <br/><p>There is one placeholder currently supported:<ul>     <li><b>${x}</b> - refers to the n-th column in the CSV file, e.g. ${1}, ${2}, ...)</li></ul><p>Example of a correct JSON template:</p> <pre> [   {     \\\"resourceType\\\": \\\"Asset\\\",     \\\"identifier\\\": {       \\\"name\\\": \\\"${1}\\\",       \\\"domain\\\": {         \\\"name\\\": \\\"${2}\\\",         \\\"community\\\": {           \\\"name\\\": \\\"Some Community\\\"         }       }     },     \\\"attributes\\\" : {       \\\"00000000-0000-0000-0000-000000003115\\\" : [ {         \\\"value\\\" : \\\"${3}\\\"        } ],       \\\"00000000-0000-0000-0000-000000000222\\\" : [ {         \\\"value\\\" : \\\"${4}\\\"       } ]     }   } ] </pre> (required)
        :param bool send_notification: Whether job status notification should be sent. <b>The default value</b> is <code>false</code>.
        :param int batch_size: <i>The batchSize parameter is now deprecated and is ignored during command execution.</i>
        :param bool simulation: Whether the import should be triggered as a simulation. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.
        :param bool save_result: Whether the import Result should be persisted or forgotten. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.<p><b>DEPRECATED:</b>This parameter is deprecated and will be removed in the future.</b>.
        :param str file_id: The <code>id</code> of uploaded file.<p><b>NOTE:</b> if this field is used, <code>file</code> should not be set.
        :param file file: The file to upload. If set, then also <code>fileName</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param str file_name: The name of the file to upload. If set, then also <code>file</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param bool delete_file: Whether the file should be deleted after the synchronization job is finished, regardless of the result. <b>The default value</b> is <code>false</code>.<p><b>NOTE:</b> if the file corresponds to an attachment, the attachment will be deleted.
        :param bool continue_on_error: Whether the import should continue if some of the import commands are invalid or failed to execute. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the valid commands are still committed to the database, which can lead to partial results being stored.
        :param bool strict_quotes: Whether the characters outside quotes should be ignored. <b>The default value</b> is <code>false</code>.
        :param bool ignore_leading_whitespace: Whether whitespace characters before quotes should be ignored. <b>The default value</b> is <code>false</code>.
        :param bool header_row: Whether the first row of the synchronized CSV file is the header. <b>The default value</b> is <code>false</code>.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Job, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'synchronization_id',
            'separator',
            'quote',
            'escape',
            'template',
            'send_notification',
            'batch_size',
            'simulation',
            'save_result',
            'file_id',
            'file',
            'file_name',
            'delete_file',
            'continue_on_error',
            'strict_quotes',
            'ignore_leading_whitespace',
            'header_row'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method synchronize_csv_in_job" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'synchronization_id' is set
        if self.api_client.client_side_validation and ('synchronization_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['synchronization_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `synchronization_id` when calling `synchronize_csv_in_job`")  # noqa: E501
        # verify the required parameter 'separator' is set
        if self.api_client.client_side_validation and ('separator' not in local_var_params or  # noqa: E501
                                                        local_var_params['separator'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `separator` when calling `synchronize_csv_in_job`")  # noqa: E501
        # verify the required parameter 'quote' is set
        if self.api_client.client_side_validation and ('quote' not in local_var_params or  # noqa: E501
                                                        local_var_params['quote'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `quote` when calling `synchronize_csv_in_job`")  # noqa: E501
        # verify the required parameter 'escape' is set
        if self.api_client.client_side_validation and ('escape' not in local_var_params or  # noqa: E501
                                                        local_var_params['escape'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `escape` when calling `synchronize_csv_in_job`")  # noqa: E501
        # verify the required parameter 'template' is set
        if self.api_client.client_side_validation and ('template' not in local_var_params or  # noqa: E501
                                                        local_var_params['template'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `template` when calling `synchronize_csv_in_job`")  # noqa: E501

        if self.api_client.client_side_validation and ('synchronization_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['synchronization_id']) > 50):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `synchronization_id` when calling `synchronize_csv_in_job`, length must be less than or equal to `50`")  # noqa: E501
        if self.api_client.client_side_validation and ('synchronization_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['synchronization_id']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `synchronization_id` when calling `synchronize_csv_in_job`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'batch_size' in local_var_params and local_var_params['batch_size'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `batch_size` when calling `synchronize_csv_in_job`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'synchronization_id' in local_var_params:
            path_params['synchronizationId'] = local_var_params['synchronization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'send_notification' in local_var_params:
            form_params.append(('sendNotification', local_var_params['send_notification']))  # noqa: E501
        if 'batch_size' in local_var_params:
            form_params.append(('batchSize', local_var_params['batch_size']))  # noqa: E501
        if 'simulation' in local_var_params:
            form_params.append(('simulation', local_var_params['simulation']))  # noqa: E501
        if 'save_result' in local_var_params:
            form_params.append(('saveResult', local_var_params['save_result']))  # noqa: E501
        if 'file_id' in local_var_params:
            form_params.append(('fileId', local_var_params['file_id']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'file_name' in local_var_params:
            form_params.append(('fileName', local_var_params['file_name']))  # noqa: E501
        if 'delete_file' in local_var_params:
            form_params.append(('deleteFile', local_var_params['delete_file']))  # noqa: E501
        if 'continue_on_error' in local_var_params:
            form_params.append(('continueOnError', local_var_params['continue_on_error']))  # noqa: E501
        if 'separator' in local_var_params:
            form_params.append(('separator', local_var_params['separator']))  # noqa: E501
        if 'quote' in local_var_params:
            form_params.append(('quote', local_var_params['quote']))  # noqa: E501
        if 'escape' in local_var_params:
            form_params.append(('escape', local_var_params['escape']))  # noqa: E501
        if 'strict_quotes' in local_var_params:
            form_params.append(('strictQuotes', local_var_params['strict_quotes']))  # noqa: E501
        if 'ignore_leading_whitespace' in local_var_params:
            form_params.append(('ignoreLeadingWhitespace', local_var_params['ignore_leading_whitespace']))  # noqa: E501
        if 'header_row' in local_var_params:
            form_params.append(('headerRow', local_var_params['header_row']))  # noqa: E501
        if 'template' in local_var_params:
            form_params.append(('template', local_var_params['template']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/import/synchronize/{synchronizationId}/csv-job', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Job',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def synchronize_excel_in_job(self, synchronization_id, template, **kwargs):  # noqa: E501
        """Starts full synchronization from the Excel file in job (asynchronously).  # noqa: E501

        Starts full synchronization from the Excel file in job (asynchronously).<p>Request can either accept <code>id</code> of the uploaded file that contains Excel input which should be used for import or the file itself. The input file is treated as a full input of synchronization process.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.synchronize_excel_in_job(synchronization_id, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str synchronization_id: The synchronization id used to distinguish different synchronizations. (required)
        :param str template: The template that should be used for parsing and synchronizing the contents of the Excel file.  <br/><p>There is one placeholder currently supported:<ul>     <li><b>${x}</b> - refers to the n-th column in the Excel file, e.g. ${1}, ${2}, ...)</li></ul><p>Example of a correct JSON template:</p> <pre> [   {     \\\"resourceType\\\": \\\"Asset\\\",     \\\"identifier\\\": {       \\\"name\\\": \\\"${1}\\\",       \\\"domain\\\": {         \\\"name\\\": \\\"${2}\\\",         \\\"community\\\": {           \\\"name\\\": \\\"Some Community\\\"         }       }     },     \\\"attributes\\\" : {       \\\"00000000-0000-0000-0000-000000003115\\\" : [ {         \\\"value\\\" : \\\"${3}\\\"        } ],       \\\"00000000-0000-0000-0000-000000000222\\\" : [ {         \\\"value\\\" : \\\"${4}\\\"       } ]     }   } ] </pre> (required)
        :param bool send_notification: Whether job status notification should be sent. <b>The default value</b> is <code>false</code>.
        :param int batch_size: <i>The batchSize parameter is now deprecated and is ignored during command execution.</i>
        :param bool simulation: Whether the import should be triggered as a simulation. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.
        :param bool save_result: Whether the import Result should be persisted or forgotten. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.<p><b>DEPRECATED:</b>This parameter is deprecated and will be removed in the future.</b>.
        :param str file_id: The <code>id</code> of uploaded file.<p><b>NOTE:</b> if this field is used, <code>file</code> should not be set.
        :param file file: The file to upload. If set, then also <code>fileName</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param str file_name: The name of the file to upload. If set, then also <code>file</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param bool delete_file: Whether the file should be deleted after the synchronization job is finished, regardless of the result. <b>The default value</b> is <code>false</code>.<p><b>NOTE:</b> if the file corresponds to an attachment, the attachment will be deleted.
        :param bool continue_on_error: Whether the import should continue if some of the import commands are invalid or failed to execute. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the valid commands are still committed to the database, which can lead to partial results being stored.
        :param str sheet_name: The name of the Excel sheet.  <br/><p>If the name is <code>null</code> and <code>sheetIndex</code> is <code>null</code>, the first sheet of the workbook will be used for the synchronization.<br/><p>If the name is <code>null</code> and <code>sheetIndex</code> is not <code>null</code>, the sheet with the index specified by value of <code>sheetIndex</code> will be used for the synchronization.
        :param int sheet_index: The index of the Excel sheet.  <br/><p>If the index is <code>null</code> and <code>sheetName</code> is <code>null</code>, the first sheet of the workbook will be used for the synchronization.<br/><p>If the index is <code>null</code> and <code>sheetName</code> is not <code>null</code>, the sheet with the name specified by value of <code>sheetName</code> will be used for the synchronization.
        :param bool header_row: Whether the first row of the synchronized Excel file is the header. <b>The default value</b> is <code>false</code>.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.synchronize_excel_in_job_with_http_info(synchronization_id, template, **kwargs)  # noqa: E501

    def synchronize_excel_in_job_with_http_info(self, synchronization_id, template, **kwargs):  # noqa: E501
        """Starts full synchronization from the Excel file in job (asynchronously).  # noqa: E501

        Starts full synchronization from the Excel file in job (asynchronously).<p>Request can either accept <code>id</code> of the uploaded file that contains Excel input which should be used for import or the file itself. The input file is treated as a full input of synchronization process.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.synchronize_excel_in_job_with_http_info(synchronization_id, template, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str synchronization_id: The synchronization id used to distinguish different synchronizations. (required)
        :param str template: The template that should be used for parsing and synchronizing the contents of the Excel file.  <br/><p>There is one placeholder currently supported:<ul>     <li><b>${x}</b> - refers to the n-th column in the Excel file, e.g. ${1}, ${2}, ...)</li></ul><p>Example of a correct JSON template:</p> <pre> [   {     \\\"resourceType\\\": \\\"Asset\\\",     \\\"identifier\\\": {       \\\"name\\\": \\\"${1}\\\",       \\\"domain\\\": {         \\\"name\\\": \\\"${2}\\\",         \\\"community\\\": {           \\\"name\\\": \\\"Some Community\\\"         }       }     },     \\\"attributes\\\" : {       \\\"00000000-0000-0000-0000-000000003115\\\" : [ {         \\\"value\\\" : \\\"${3}\\\"        } ],       \\\"00000000-0000-0000-0000-000000000222\\\" : [ {         \\\"value\\\" : \\\"${4}\\\"       } ]     }   } ] </pre> (required)
        :param bool send_notification: Whether job status notification should be sent. <b>The default value</b> is <code>false</code>.
        :param int batch_size: <i>The batchSize parameter is now deprecated and is ignored during command execution.</i>
        :param bool simulation: Whether the import should be triggered as a simulation. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.
        :param bool save_result: Whether the import Result should be persisted or forgotten. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.<p><b>DEPRECATED:</b>This parameter is deprecated and will be removed in the future.</b>.
        :param str file_id: The <code>id</code> of uploaded file.<p><b>NOTE:</b> if this field is used, <code>file</code> should not be set.
        :param file file: The file to upload. If set, then also <code>fileName</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param str file_name: The name of the file to upload. If set, then also <code>file</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param bool delete_file: Whether the file should be deleted after the synchronization job is finished, regardless of the result. <b>The default value</b> is <code>false</code>.<p><b>NOTE:</b> if the file corresponds to an attachment, the attachment will be deleted.
        :param bool continue_on_error: Whether the import should continue if some of the import commands are invalid or failed to execute. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the valid commands are still committed to the database, which can lead to partial results being stored.
        :param str sheet_name: The name of the Excel sheet.  <br/><p>If the name is <code>null</code> and <code>sheetIndex</code> is <code>null</code>, the first sheet of the workbook will be used for the synchronization.<br/><p>If the name is <code>null</code> and <code>sheetIndex</code> is not <code>null</code>, the sheet with the index specified by value of <code>sheetIndex</code> will be used for the synchronization.
        :param int sheet_index: The index of the Excel sheet.  <br/><p>If the index is <code>null</code> and <code>sheetName</code> is <code>null</code>, the first sheet of the workbook will be used for the synchronization.<br/><p>If the index is <code>null</code> and <code>sheetName</code> is not <code>null</code>, the sheet with the name specified by value of <code>sheetName</code> will be used for the synchronization.
        :param bool header_row: Whether the first row of the synchronized Excel file is the header. <b>The default value</b> is <code>false</code>.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Job, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'synchronization_id',
            'template',
            'send_notification',
            'batch_size',
            'simulation',
            'save_result',
            'file_id',
            'file',
            'file_name',
            'delete_file',
            'continue_on_error',
            'sheet_name',
            'sheet_index',
            'header_row'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method synchronize_excel_in_job" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'synchronization_id' is set
        if self.api_client.client_side_validation and ('synchronization_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['synchronization_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `synchronization_id` when calling `synchronize_excel_in_job`")  # noqa: E501
        # verify the required parameter 'template' is set
        if self.api_client.client_side_validation and ('template' not in local_var_params or  # noqa: E501
                                                        local_var_params['template'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `template` when calling `synchronize_excel_in_job`")  # noqa: E501

        if self.api_client.client_side_validation and ('synchronization_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['synchronization_id']) > 50):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `synchronization_id` when calling `synchronize_excel_in_job`, length must be less than or equal to `50`")  # noqa: E501
        if self.api_client.client_side_validation and ('synchronization_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['synchronization_id']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `synchronization_id` when calling `synchronize_excel_in_job`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'batch_size' in local_var_params and local_var_params['batch_size'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `batch_size` when calling `synchronize_excel_in_job`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'synchronization_id' in local_var_params:
            path_params['synchronizationId'] = local_var_params['synchronization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'send_notification' in local_var_params:
            form_params.append(('sendNotification', local_var_params['send_notification']))  # noqa: E501
        if 'batch_size' in local_var_params:
            form_params.append(('batchSize', local_var_params['batch_size']))  # noqa: E501
        if 'simulation' in local_var_params:
            form_params.append(('simulation', local_var_params['simulation']))  # noqa: E501
        if 'save_result' in local_var_params:
            form_params.append(('saveResult', local_var_params['save_result']))  # noqa: E501
        if 'file_id' in local_var_params:
            form_params.append(('fileId', local_var_params['file_id']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'file_name' in local_var_params:
            form_params.append(('fileName', local_var_params['file_name']))  # noqa: E501
        if 'delete_file' in local_var_params:
            form_params.append(('deleteFile', local_var_params['delete_file']))  # noqa: E501
        if 'continue_on_error' in local_var_params:
            form_params.append(('continueOnError', local_var_params['continue_on_error']))  # noqa: E501
        if 'sheet_name' in local_var_params:
            form_params.append(('sheetName', local_var_params['sheet_name']))  # noqa: E501
        if 'sheet_index' in local_var_params:
            form_params.append(('sheetIndex', local_var_params['sheet_index']))  # noqa: E501
        if 'header_row' in local_var_params:
            form_params.append(('headerRow', local_var_params['header_row']))  # noqa: E501
        if 'template' in local_var_params:
            form_params.append(('template', local_var_params['template']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/import/synchronize/{synchronizationId}/excel-job', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Job',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def synchronize_finalize_in_job(self, synchronization_id, **kwargs):  # noqa: E501
        """Starts synchronization finalization in job (asynchronously).  # noqa: E501

        Starts synchronization finalization in job (asynchronously).<p>Note that while the only mandatory parameter is <code>synchronizationId</code>, requests that omit all optional parameters fail because the multipart-based setup requires at least one part to be present in the body. To meet this requirement and still use all the default values, you can pass a dummy part, for example <code>-F 'foo=bar'</code> if using <code>curl</code>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.synchronize_finalize_in_job(synchronization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str synchronization_id: The synchronization ID used to distinguish different synchronizations. (required)
        :param bool send_notification: Whether job status notification should be sent. <b>The default value</b> is <code>false</code>.
        :param int batch_size: <i>The batchSize parameter is now deprecated and is ignored during command execution.</i>
        :param bool simulation: Whether the import should be triggered as a simulation. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.
        :param bool save_result: Whether the import Result should be persisted or forgotten. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.<p><b>DEPRECATED:</b>This parameter is deprecated and will be removed in the future.</b>.
        :param str finalization_strategy: The synchronization finalization strategy used in the clean up action. This determines whether to remove, ignore or change the status of assets that no longer exist in the external system.<br />Possible values are `REMOVE_RESOURCES`, `CHANGE_STATUS` and `IGNORE`.<br />When you select `CHANGE_STATUS`, you must also provide a value for `missingAssetStatusId`.
        :param str missing_asset_status_id: If <b>finalizationStrategy</b> is set to `CHANGE_STATUS` then this parameter determines the new status ID for assets that no longer exist in the external system.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.synchronize_finalize_in_job_with_http_info(synchronization_id, **kwargs)  # noqa: E501

    def synchronize_finalize_in_job_with_http_info(self, synchronization_id, **kwargs):  # noqa: E501
        """Starts synchronization finalization in job (asynchronously).  # noqa: E501

        Starts synchronization finalization in job (asynchronously).<p>Note that while the only mandatory parameter is <code>synchronizationId</code>, requests that omit all optional parameters fail because the multipart-based setup requires at least one part to be present in the body. To meet this requirement and still use all the default values, you can pass a dummy part, for example <code>-F 'foo=bar'</code> if using <code>curl</code>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.synchronize_finalize_in_job_with_http_info(synchronization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str synchronization_id: The synchronization ID used to distinguish different synchronizations. (required)
        :param bool send_notification: Whether job status notification should be sent. <b>The default value</b> is <code>false</code>.
        :param int batch_size: <i>The batchSize parameter is now deprecated and is ignored during command execution.</i>
        :param bool simulation: Whether the import should be triggered as a simulation. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.
        :param bool save_result: Whether the import Result should be persisted or forgotten. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.<p><b>DEPRECATED:</b>This parameter is deprecated and will be removed in the future.</b>.
        :param str finalization_strategy: The synchronization finalization strategy used in the clean up action. This determines whether to remove, ignore or change the status of assets that no longer exist in the external system.<br />Possible values are `REMOVE_RESOURCES`, `CHANGE_STATUS` and `IGNORE`.<br />When you select `CHANGE_STATUS`, you must also provide a value for `missingAssetStatusId`.
        :param str missing_asset_status_id: If <b>finalizationStrategy</b> is set to `CHANGE_STATUS` then this parameter determines the new status ID for assets that no longer exist in the external system.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Job, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'synchronization_id',
            'send_notification',
            'batch_size',
            'simulation',
            'save_result',
            'finalization_strategy',
            'missing_asset_status_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method synchronize_finalize_in_job" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'synchronization_id' is set
        if self.api_client.client_side_validation and ('synchronization_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['synchronization_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `synchronization_id` when calling `synchronize_finalize_in_job`")  # noqa: E501

        if self.api_client.client_side_validation and ('synchronization_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['synchronization_id']) > 50):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `synchronization_id` when calling `synchronize_finalize_in_job`, length must be less than or equal to `50`")  # noqa: E501
        if self.api_client.client_side_validation and ('synchronization_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['synchronization_id']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `synchronization_id` when calling `synchronize_finalize_in_job`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'batch_size' in local_var_params and local_var_params['batch_size'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `batch_size` when calling `synchronize_finalize_in_job`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'finalization_strategy' in local_var_params and not re.search(r'REMOVE_RESOURCES|CHANGE_STATUS|IGNORE', local_var_params['finalization_strategy']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `finalization_strategy` when calling `synchronize_finalize_in_job`, must conform to the pattern `/REMOVE_RESOURCES|CHANGE_STATUS|IGNORE/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'synchronization_id' in local_var_params:
            path_params['synchronizationId'] = local_var_params['synchronization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'send_notification' in local_var_params:
            form_params.append(('sendNotification', local_var_params['send_notification']))  # noqa: E501
        if 'batch_size' in local_var_params:
            form_params.append(('batchSize', local_var_params['batch_size']))  # noqa: E501
        if 'simulation' in local_var_params:
            form_params.append(('simulation', local_var_params['simulation']))  # noqa: E501
        if 'save_result' in local_var_params:
            form_params.append(('saveResult', local_var_params['save_result']))  # noqa: E501
        if 'finalization_strategy' in local_var_params:
            form_params.append(('finalizationStrategy', local_var_params['finalization_strategy']))  # noqa: E501
        if 'missing_asset_status_id' in local_var_params:
            form_params.append(('missingAssetStatusId', local_var_params['missing_asset_status_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/import/synchronize/{synchronizationId}/finalize/job', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Job',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def synchronize_json_in_job(self, synchronization_id, **kwargs):  # noqa: E501
        """Starts full synchronization from the JSON file in job (asynchronously).  # noqa: E501

        Starts full synchronization from the JSON file in job (asynchronously).<p>Request can either accept <code>id</code> of the uploaded file that contains JSON input which should be used for import or the file itself. The input file is treated as a full input of synchronization process.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.synchronize_json_in_job(synchronization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str synchronization_id: The synchronization id used to distinguish different synchronizations. (required)
        :param bool send_notification: Whether job status notification should be sent. <b>The default value</b> is <code>false</code>.
        :param int batch_size: <i>The batchSize parameter is now deprecated and is ignored during command execution.</i>
        :param bool simulation: Whether the import should be triggered as a simulation. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.
        :param bool save_result: Whether the import Result should be persisted or forgotten. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.<p><b>DEPRECATED:</b>This parameter is deprecated and will be removed in the future.</b>.
        :param str file_id: The <code>id</code> of uploaded file.<p><b>NOTE:</b> if this field is used, <code>file</code> should not be set.
        :param file file: The file to upload. If set, then also <code>fileName</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param str file_name: The name of the file to upload. If set, then also <code>file</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param bool delete_file: Whether the file should be deleted after the synchronization job is finished, regardless of the result. <b>The default value</b> is <code>false</code>.<p><b>NOTE:</b> if the file corresponds to an attachment, the attachment will be deleted.
        :param bool continue_on_error: Whether the import should continue if some of the import commands are invalid or failed to execute. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the valid commands are still committed to the database, which can lead to partial results being stored.
        :param str finalization_strategy: The synchronization finalization strategy used in the clean up action. This determines whether to remove, ignore or change the status of assets that no longer exist in the external system.<br />Possible values are `REMOVE_RESOURCES`, `CHANGE_STATUS` and `IGNORE`.<br />When you select `CHANGE_STATUS`, you must also provide a value for `missingAssetStatusId`.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.synchronize_json_in_job_with_http_info(synchronization_id, **kwargs)  # noqa: E501

    def synchronize_json_in_job_with_http_info(self, synchronization_id, **kwargs):  # noqa: E501
        """Starts full synchronization from the JSON file in job (asynchronously).  # noqa: E501

        Starts full synchronization from the JSON file in job (asynchronously).<p>Request can either accept <code>id</code> of the uploaded file that contains JSON input which should be used for import or the file itself. The input file is treated as a full input of synchronization process.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.synchronize_json_in_job_with_http_info(synchronization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str synchronization_id: The synchronization id used to distinguish different synchronizations. (required)
        :param bool send_notification: Whether job status notification should be sent. <b>The default value</b> is <code>false</code>.
        :param int batch_size: <i>The batchSize parameter is now deprecated and is ignored during command execution.</i>
        :param bool simulation: Whether the import should be triggered as a simulation. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.
        :param bool save_result: Whether the import Result should be persisted or forgotten. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.<p><b>DEPRECATED:</b>This parameter is deprecated and will be removed in the future.</b>.
        :param str file_id: The <code>id</code> of uploaded file.<p><b>NOTE:</b> if this field is used, <code>file</code> should not be set.
        :param file file: The file to upload. If set, then also <code>fileName</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param str file_name: The name of the file to upload. If set, then also <code>file</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.
        :param bool delete_file: Whether the file should be deleted after the synchronization job is finished, regardless of the result. <b>The default value</b> is <code>false</code>.<p><b>NOTE:</b> if the file corresponds to an attachment, the attachment will be deleted.
        :param bool continue_on_error: Whether the import should continue if some of the import commands are invalid or failed to execute. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the valid commands are still committed to the database, which can lead to partial results being stored.
        :param str finalization_strategy: The synchronization finalization strategy used in the clean up action. This determines whether to remove, ignore or change the status of assets that no longer exist in the external system.<br />Possible values are `REMOVE_RESOURCES`, `CHANGE_STATUS` and `IGNORE`.<br />When you select `CHANGE_STATUS`, you must also provide a value for `missingAssetStatusId`.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Job, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'synchronization_id',
            'send_notification',
            'batch_size',
            'simulation',
            'save_result',
            'file_id',
            'file',
            'file_name',
            'delete_file',
            'continue_on_error',
            'finalization_strategy'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method synchronize_json_in_job" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'synchronization_id' is set
        if self.api_client.client_side_validation and ('synchronization_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['synchronization_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `synchronization_id` when calling `synchronize_json_in_job`")  # noqa: E501

        if self.api_client.client_side_validation and ('synchronization_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['synchronization_id']) > 50):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `synchronization_id` when calling `synchronize_json_in_job`, length must be less than or equal to `50`")  # noqa: E501
        if self.api_client.client_side_validation and ('synchronization_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['synchronization_id']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `synchronization_id` when calling `synchronize_json_in_job`, length must be greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'batch_size' in local_var_params and local_var_params['batch_size'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `batch_size` when calling `synchronize_json_in_job`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'finalization_strategy' in local_var_params and not re.search(r'REMOVE_RESOURCES|CHANGE_STATUS|IGNORE', local_var_params['finalization_strategy']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `finalization_strategy` when calling `synchronize_json_in_job`, must conform to the pattern `/REMOVE_RESOURCES|CHANGE_STATUS|IGNORE/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'synchronization_id' in local_var_params:
            path_params['synchronizationId'] = local_var_params['synchronization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'send_notification' in local_var_params:
            form_params.append(('sendNotification', local_var_params['send_notification']))  # noqa: E501
        if 'batch_size' in local_var_params:
            form_params.append(('batchSize', local_var_params['batch_size']))  # noqa: E501
        if 'simulation' in local_var_params:
            form_params.append(('simulation', local_var_params['simulation']))  # noqa: E501
        if 'save_result' in local_var_params:
            form_params.append(('saveResult', local_var_params['save_result']))  # noqa: E501
        if 'file_id' in local_var_params:
            form_params.append(('fileId', local_var_params['file_id']))  # noqa: E501
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'file_name' in local_var_params:
            form_params.append(('fileName', local_var_params['file_name']))  # noqa: E501
        if 'delete_file' in local_var_params:
            form_params.append(('deleteFile', local_var_params['delete_file']))  # noqa: E501
        if 'continue_on_error' in local_var_params:
            form_params.append(('continueOnError', local_var_params['continue_on_error']))  # noqa: E501
        if 'finalization_strategy' in local_var_params:
            form_params.append(('finalizationStrategy', local_var_params['finalization_strategy']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/import/synchronize/{synchronizationId}/json-job', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Job',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
