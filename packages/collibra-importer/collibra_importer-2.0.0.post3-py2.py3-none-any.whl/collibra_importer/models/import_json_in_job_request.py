# coding: utf-8

"""
    Collibra Import API

    <p>The Import API is an efficient way to load large volumes of data into the Collibra Data Governance Center. The API can automatically differentiate between creating and updating data.</p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from collibra_importer.configuration import Configuration


class ImportJsonInJobRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'send_notification': 'bool',
        'batch_size': 'int',
        'simulation': 'bool',
        'save_result': 'bool',
        'file_id': 'str',
        'file': 'file',
        'file_name': 'str',
        'delete_file': 'bool',
        'continue_on_error': 'bool',
        'relations_action': 'str',
        'identifier': 'ComplexRelationIdentifier',
        'indexes': 'list[int]',
        'responsibilities': 'dict(str, list[Owner])',
        'name': 'str',
        'description': 'str',
        'language': 'str',
        'parent': 'CommunityIdentifier',
        'resource_type': 'str',
        'community': 'CommunityIdentifier',
        'type': 'AssetTypeIdentifier',
        'display_name': 'str',
        'domain': 'DomainIdentifier',
        'status': 'StatusIdentifier',
        'attributes': 'dict(str, list[AttributeValue])',
        'relations': 'dict(str, list[AssetIdentifier])',
        'tags': 'list[str]',
        'external_system_id': 'str',
        'external_entity_id': 'str',
        'dgc_id': 'str',
        'asset': 'AssetIdentifier',
        'complex_relation': 'ComplexRelationIdentifier',
        'ext_entity_url': 'str',
        'last_sync_date': 'int',
        'sync_action': 'str',
        'complex_relation_type': 'ComplexRelationTypeIdentifier'
    }

    attribute_map = {
        'send_notification': 'sendNotification',
        'batch_size': 'batchSize',
        'simulation': 'simulation',
        'save_result': 'saveResult',
        'file_id': 'fileId',
        'file': 'file',
        'file_name': 'fileName',
        'delete_file': 'deleteFile',
        'continue_on_error': 'continueOnError',
        'relations_action': 'relationsAction',
        'identifier': 'identifier',
        'indexes': 'indexes',
        'responsibilities': 'responsibilities',
        'name': 'name',
        'description': 'description',
        'language': 'language',
        'parent': 'parent',
        'resource_type': 'resourceType',
        'community': 'community',
        'type': 'type',
        'display_name': 'displayName',
        'domain': 'domain',
        'status': 'status',
        'attributes': 'attributes',
        'relations': 'relations',
        'tags': 'tags',
        'external_system_id': 'externalSystemId',
        'external_entity_id': 'externalEntityId',
        'dgc_id': 'dgcId',
        'asset': 'asset',
        'complex_relation': 'complexRelation',
        'ext_entity_url': 'extEntityUrl',
        'last_sync_date': 'lastSyncDate',
        'sync_action': 'syncAction',
        'complex_relation_type': 'complexRelationType'
    }

    def __init__(self, send_notification=None, batch_size=1000, simulation=None, save_result=None, file_id=None, file=None, file_name=None, delete_file=None, continue_on_error=None, relations_action=None, identifier=None, indexes=None, responsibilities=None, name=None, description=None, language=None, parent=None, resource_type=None, community=None, type=None, display_name=None, domain=None, status=None, attributes=None, relations=None, tags=None, external_system_id=None, external_entity_id=None, dgc_id=None, asset=None, complex_relation=None, ext_entity_url=None, last_sync_date=None, sync_action=None, complex_relation_type=None, local_vars_configuration=None):  # noqa: E501
        """ImportJsonInJobRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._send_notification = None
        self._batch_size = None
        self._simulation = None
        self._save_result = None
        self._file_id = None
        self._file = None
        self._file_name = None
        self._delete_file = None
        self._continue_on_error = None
        self._relations_action = None
        self._identifier = None
        self._indexes = None
        self._responsibilities = None
        self._name = None
        self._description = None
        self._language = None
        self._parent = None
        self._resource_type = None
        self._community = None
        self._type = None
        self._display_name = None
        self._domain = None
        self._status = None
        self._attributes = None
        self._relations = None
        self._tags = None
        self._external_system_id = None
        self._external_entity_id = None
        self._dgc_id = None
        self._asset = None
        self._complex_relation = None
        self._ext_entity_url = None
        self._last_sync_date = None
        self._sync_action = None
        self._complex_relation_type = None
        self.discriminator = None

        if send_notification is not None:
            self.send_notification = send_notification
        if batch_size is not None:
            self.batch_size = batch_size
        if simulation is not None:
            self.simulation = simulation
        if save_result is not None:
            self.save_result = save_result
        if file_id is not None:
            self.file_id = file_id
        if file is not None:
            self.file = file
        if file_name is not None:
            self.file_name = file_name
        if delete_file is not None:
            self.delete_file = delete_file
        if continue_on_error is not None:
            self.continue_on_error = continue_on_error
        if relations_action is not None:
            self.relations_action = relations_action
        if identifier is not None:
            self.identifier = identifier
        if indexes is not None:
            self.indexes = indexes
        if responsibilities is not None:
            self.responsibilities = responsibilities
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if language is not None:
            self.language = language
        if parent is not None:
            self.parent = parent
        if resource_type is not None:
            self.resource_type = resource_type
        if community is not None:
            self.community = community
        if type is not None:
            self.type = type
        if display_name is not None:
            self.display_name = display_name
        if domain is not None:
            self.domain = domain
        if status is not None:
            self.status = status
        if attributes is not None:
            self.attributes = attributes
        if relations is not None:
            self.relations = relations
        if tags is not None:
            self.tags = tags
        if external_system_id is not None:
            self.external_system_id = external_system_id
        if external_entity_id is not None:
            self.external_entity_id = external_entity_id
        if dgc_id is not None:
            self.dgc_id = dgc_id
        if asset is not None:
            self.asset = asset
        if complex_relation is not None:
            self.complex_relation = complex_relation
        if ext_entity_url is not None:
            self.ext_entity_url = ext_entity_url
        if last_sync_date is not None:
            self.last_sync_date = last_sync_date
        if sync_action is not None:
            self.sync_action = sync_action
        if complex_relation_type is not None:
            self.complex_relation_type = complex_relation_type

    @property
    def send_notification(self):
        """Gets the send_notification of this ImportJsonInJobRequest.  # noqa: E501

        Whether job status notification should be sent. <b>The default value</b> is <code>false</code>.  # noqa: E501

        :return: The send_notification of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: bool
        """
        return self._send_notification

    @send_notification.setter
    def send_notification(self, send_notification):
        """Sets the send_notification of this ImportJsonInJobRequest.

        Whether job status notification should be sent. <b>The default value</b> is <code>false</code>.  # noqa: E501

        :param send_notification: The send_notification of this ImportJsonInJobRequest.  # noqa: E501
        :type: bool
        """

        self._send_notification = send_notification

    @property
    def batch_size(self):
        """Gets the batch_size of this ImportJsonInJobRequest.  # noqa: E501

        <i>The batchSize parameter is now deprecated and is ignored during command execution.</i>  # noqa: E501

        :return: The batch_size of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: int
        """
        return self._batch_size

    @batch_size.setter
    def batch_size(self, batch_size):
        """Sets the batch_size of this ImportJsonInJobRequest.

        <i>The batchSize parameter is now deprecated and is ignored during command execution.</i>  # noqa: E501

        :param batch_size: The batch_size of this ImportJsonInJobRequest.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                batch_size is not None and batch_size < 1):  # noqa: E501
            raise ValueError("Invalid value for `batch_size`, must be a value greater than or equal to `1`")  # noqa: E501

        self._batch_size = batch_size

    @property
    def simulation(self):
        """Gets the simulation of this ImportJsonInJobRequest.  # noqa: E501

        Whether the import should be triggered as a simulation. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.  # noqa: E501

        :return: The simulation of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: bool
        """
        return self._simulation

    @simulation.setter
    def simulation(self, simulation):
        """Sets the simulation of this ImportJsonInJobRequest.

        Whether the import should be triggered as a simulation. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.  # noqa: E501

        :param simulation: The simulation of this ImportJsonInJobRequest.  # noqa: E501
        :type: bool
        """

        self._simulation = simulation

    @property
    def save_result(self):
        """Gets the save_result of this ImportJsonInJobRequest.  # noqa: E501

        Whether the import Result should be persisted or forgotten. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.<p><b>DEPRECATED:</b>This parameter is deprecated and will be removed in the future.</b>.  # noqa: E501

        :return: The save_result of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: bool
        """
        return self._save_result

    @save_result.setter
    def save_result(self, save_result):
        """Sets the save_result of this ImportJsonInJobRequest.

        Whether the import Result should be persisted or forgotten. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.<p><b>DEPRECATED:</b>This parameter is deprecated and will be removed in the future.</b>.  # noqa: E501

        :param save_result: The save_result of this ImportJsonInJobRequest.  # noqa: E501
        :type: bool
        """

        self._save_result = save_result

    @property
    def file_id(self):
        """Gets the file_id of this ImportJsonInJobRequest.  # noqa: E501

        The <code>id</code> of uploaded file.<p><b>NOTE:</b> if this field is used, <code>file</code> should not be set.  # noqa: E501

        :return: The file_id of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this ImportJsonInJobRequest.

        The <code>id</code> of uploaded file.<p><b>NOTE:</b> if this field is used, <code>file</code> should not be set.  # noqa: E501

        :param file_id: The file_id of this ImportJsonInJobRequest.  # noqa: E501
        :type: str
        """

        self._file_id = file_id

    @property
    def file(self):
        """Gets the file of this ImportJsonInJobRequest.  # noqa: E501

        The file to upload. If set, then also <code>fileName</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.  # noqa: E501

        :return: The file of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: file
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this ImportJsonInJobRequest.

        The file to upload. If set, then also <code>fileName</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.  # noqa: E501

        :param file: The file of this ImportJsonInJobRequest.  # noqa: E501
        :type: file
        """

        self._file = file

    @property
    def file_name(self):
        """Gets the file_name of this ImportJsonInJobRequest.  # noqa: E501

        The name of the file to upload. If set, then also <code>file</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.  # noqa: E501

        :return: The file_name of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this ImportJsonInJobRequest.

        The name of the file to upload. If set, then also <code>file</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.  # noqa: E501

        :param file_name: The file_name of this ImportJsonInJobRequest.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def delete_file(self):
        """Gets the delete_file of this ImportJsonInJobRequest.  # noqa: E501

        Delete the file from the Collibra Platform if the import / synchronization job is successful. <b>The default value</b> is <code>false</code><p><b>NOTE:</b> if the file corresponds to an attachment, the attachment will be deleted.  # noqa: E501

        :return: The delete_file of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: bool
        """
        return self._delete_file

    @delete_file.setter
    def delete_file(self, delete_file):
        """Sets the delete_file of this ImportJsonInJobRequest.

        Delete the file from the Collibra Platform if the import / synchronization job is successful. <b>The default value</b> is <code>false</code><p><b>NOTE:</b> if the file corresponds to an attachment, the attachment will be deleted.  # noqa: E501

        :param delete_file: The delete_file of this ImportJsonInJobRequest.  # noqa: E501
        :type: bool
        """

        self._delete_file = delete_file

    @property
    def continue_on_error(self):
        """Gets the continue_on_error of this ImportJsonInJobRequest.  # noqa: E501

        Whether the import should continue if some of the import commands are invalid or failed to execute. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the valid commands are still committed to the database, which can lead to partial results being stored.  # noqa: E501

        :return: The continue_on_error of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: bool
        """
        return self._continue_on_error

    @continue_on_error.setter
    def continue_on_error(self, continue_on_error):
        """Sets the continue_on_error of this ImportJsonInJobRequest.

        Whether the import should continue if some of the import commands are invalid or failed to execute. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the valid commands are still committed to the database, which can lead to partial results being stored.  # noqa: E501

        :param continue_on_error: The continue_on_error of this ImportJsonInJobRequest.  # noqa: E501
        :type: bool
        """

        self._continue_on_error = continue_on_error

    @property
    def relations_action(self):
        """Gets the relations_action of this ImportJsonInJobRequest.  # noqa: E501


        :return: The relations_action of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._relations_action

    @relations_action.setter
    def relations_action(self, relations_action):
        """Sets the relations_action of this ImportJsonInJobRequest.


        :param relations_action: The relations_action of this ImportJsonInJobRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                relations_action is not None and not re.search(r'ADD_OR_IGNORE|REPLACE', relations_action)):  # noqa: E501
            raise ValueError(r"Invalid value for `relations_action`, must be a follow pattern or equal to `/ADD_OR_IGNORE|REPLACE/`")  # noqa: E501

        self._relations_action = relations_action

    @property
    def identifier(self):
        """Gets the identifier of this ImportJsonInJobRequest.  # noqa: E501


        :return: The identifier of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: ComplexRelationIdentifier
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this ImportJsonInJobRequest.


        :param identifier: The identifier of this ImportJsonInJobRequest.  # noqa: E501
        :type: ComplexRelationIdentifier
        """

        self._identifier = identifier

    @property
    def indexes(self):
        """Gets the indexes of this ImportJsonInJobRequest.  # noqa: E501


        :return: The indexes of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._indexes

    @indexes.setter
    def indexes(self, indexes):
        """Sets the indexes of this ImportJsonInJobRequest.


        :param indexes: The indexes of this ImportJsonInJobRequest.  # noqa: E501
        :type: list[int]
        """

        self._indexes = indexes

    @property
    def responsibilities(self):
        """Gets the responsibilities of this ImportJsonInJobRequest.  # noqa: E501


        :return: The responsibilities of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: dict(str, list[Owner])
        """
        return self._responsibilities

    @responsibilities.setter
    def responsibilities(self, responsibilities):
        """Sets the responsibilities of this ImportJsonInJobRequest.


        :param responsibilities: The responsibilities of this ImportJsonInJobRequest.  # noqa: E501
        :type: dict(str, list[Owner])
        """

        self._responsibilities = responsibilities

    @property
    def name(self):
        """Gets the name of this ImportJsonInJobRequest.  # noqa: E501


        :return: The name of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImportJsonInJobRequest.


        :param name: The name of this ImportJsonInJobRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ImportJsonInJobRequest.  # noqa: E501


        :return: The description of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ImportJsonInJobRequest.


        :param description: The description of this ImportJsonInJobRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def language(self):
        """Gets the language of this ImportJsonInJobRequest.  # noqa: E501


        :return: The language of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this ImportJsonInJobRequest.


        :param language: The language of this ImportJsonInJobRequest.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def parent(self):
        """Gets the parent of this ImportJsonInJobRequest.  # noqa: E501


        :return: The parent of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: CommunityIdentifier
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this ImportJsonInJobRequest.


        :param parent: The parent of this ImportJsonInJobRequest.  # noqa: E501
        :type: CommunityIdentifier
        """

        self._parent = parent

    @property
    def resource_type(self):
        """Gets the resource_type of this ImportJsonInJobRequest.  # noqa: E501


        :return: The resource_type of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ImportJsonInJobRequest.


        :param resource_type: The resource_type of this ImportJsonInJobRequest.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def community(self):
        """Gets the community of this ImportJsonInJobRequest.  # noqa: E501


        :return: The community of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: CommunityIdentifier
        """
        return self._community

    @community.setter
    def community(self, community):
        """Sets the community of this ImportJsonInJobRequest.


        :param community: The community of this ImportJsonInJobRequest.  # noqa: E501
        :type: CommunityIdentifier
        """

        self._community = community

    @property
    def type(self):
        """Gets the type of this ImportJsonInJobRequest.  # noqa: E501


        :return: The type of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: AssetTypeIdentifier
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ImportJsonInJobRequest.


        :param type: The type of this ImportJsonInJobRequest.  # noqa: E501
        :type: AssetTypeIdentifier
        """

        self._type = type

    @property
    def display_name(self):
        """Gets the display_name of this ImportJsonInJobRequest.  # noqa: E501


        :return: The display_name of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ImportJsonInJobRequest.


        :param display_name: The display_name of this ImportJsonInJobRequest.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def domain(self):
        """Gets the domain of this ImportJsonInJobRequest.  # noqa: E501


        :return: The domain of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: DomainIdentifier
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ImportJsonInJobRequest.


        :param domain: The domain of this ImportJsonInJobRequest.  # noqa: E501
        :type: DomainIdentifier
        """

        self._domain = domain

    @property
    def status(self):
        """Gets the status of this ImportJsonInJobRequest.  # noqa: E501


        :return: The status of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: StatusIdentifier
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ImportJsonInJobRequest.


        :param status: The status of this ImportJsonInJobRequest.  # noqa: E501
        :type: StatusIdentifier
        """

        self._status = status

    @property
    def attributes(self):
        """Gets the attributes of this ImportJsonInJobRequest.  # noqa: E501


        :return: The attributes of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: dict(str, list[AttributeValue])
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ImportJsonInJobRequest.


        :param attributes: The attributes of this ImportJsonInJobRequest.  # noqa: E501
        :type: dict(str, list[AttributeValue])
        """

        self._attributes = attributes

    @property
    def relations(self):
        """Gets the relations of this ImportJsonInJobRequest.  # noqa: E501


        :return: The relations of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: dict(str, list[AssetIdentifier])
        """
        return self._relations

    @relations.setter
    def relations(self, relations):
        """Sets the relations of this ImportJsonInJobRequest.


        :param relations: The relations of this ImportJsonInJobRequest.  # noqa: E501
        :type: dict(str, list[AssetIdentifier])
        """

        self._relations = relations

    @property
    def tags(self):
        """Gets the tags of this ImportJsonInJobRequest.  # noqa: E501


        :return: The tags of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ImportJsonInJobRequest.


        :param tags: The tags of this ImportJsonInJobRequest.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def external_system_id(self):
        """Gets the external_system_id of this ImportJsonInJobRequest.  # noqa: E501


        :return: The external_system_id of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._external_system_id

    @external_system_id.setter
    def external_system_id(self, external_system_id):
        """Sets the external_system_id of this ImportJsonInJobRequest.


        :param external_system_id: The external_system_id of this ImportJsonInJobRequest.  # noqa: E501
        :type: str
        """

        self._external_system_id = external_system_id

    @property
    def external_entity_id(self):
        """Gets the external_entity_id of this ImportJsonInJobRequest.  # noqa: E501


        :return: The external_entity_id of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._external_entity_id

    @external_entity_id.setter
    def external_entity_id(self, external_entity_id):
        """Sets the external_entity_id of this ImportJsonInJobRequest.


        :param external_entity_id: The external_entity_id of this ImportJsonInJobRequest.  # noqa: E501
        :type: str
        """

        self._external_entity_id = external_entity_id

    @property
    def dgc_id(self):
        """Gets the dgc_id of this ImportJsonInJobRequest.  # noqa: E501


        :return: The dgc_id of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._dgc_id

    @dgc_id.setter
    def dgc_id(self, dgc_id):
        """Sets the dgc_id of this ImportJsonInJobRequest.


        :param dgc_id: The dgc_id of this ImportJsonInJobRequest.  # noqa: E501
        :type: str
        """

        self._dgc_id = dgc_id

    @property
    def asset(self):
        """Gets the asset of this ImportJsonInJobRequest.  # noqa: E501


        :return: The asset of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: AssetIdentifier
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this ImportJsonInJobRequest.


        :param asset: The asset of this ImportJsonInJobRequest.  # noqa: E501
        :type: AssetIdentifier
        """

        self._asset = asset

    @property
    def complex_relation(self):
        """Gets the complex_relation of this ImportJsonInJobRequest.  # noqa: E501


        :return: The complex_relation of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: ComplexRelationIdentifier
        """
        return self._complex_relation

    @complex_relation.setter
    def complex_relation(self, complex_relation):
        """Sets the complex_relation of this ImportJsonInJobRequest.


        :param complex_relation: The complex_relation of this ImportJsonInJobRequest.  # noqa: E501
        :type: ComplexRelationIdentifier
        """

        self._complex_relation = complex_relation

    @property
    def ext_entity_url(self):
        """Gets the ext_entity_url of this ImportJsonInJobRequest.  # noqa: E501


        :return: The ext_entity_url of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._ext_entity_url

    @ext_entity_url.setter
    def ext_entity_url(self, ext_entity_url):
        """Sets the ext_entity_url of this ImportJsonInJobRequest.


        :param ext_entity_url: The ext_entity_url of this ImportJsonInJobRequest.  # noqa: E501
        :type: str
        """

        self._ext_entity_url = ext_entity_url

    @property
    def last_sync_date(self):
        """Gets the last_sync_date of this ImportJsonInJobRequest.  # noqa: E501


        :return: The last_sync_date of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: int
        """
        return self._last_sync_date

    @last_sync_date.setter
    def last_sync_date(self, last_sync_date):
        """Sets the last_sync_date of this ImportJsonInJobRequest.


        :param last_sync_date: The last_sync_date of this ImportJsonInJobRequest.  # noqa: E501
        :type: int
        """

        self._last_sync_date = last_sync_date

    @property
    def sync_action(self):
        """Gets the sync_action of this ImportJsonInJobRequest.  # noqa: E501


        :return: The sync_action of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._sync_action

    @sync_action.setter
    def sync_action(self, sync_action):
        """Sets the sync_action of this ImportJsonInJobRequest.


        :param sync_action: The sync_action of this ImportJsonInJobRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["ADD", "UPDATE", "REMOVE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and sync_action not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `sync_action` ({0}), must be one of {1}"  # noqa: E501
                .format(sync_action, allowed_values)
            )

        self._sync_action = sync_action

    @property
    def complex_relation_type(self):
        """Gets the complex_relation_type of this ImportJsonInJobRequest.  # noqa: E501


        :return: The complex_relation_type of this ImportJsonInJobRequest.  # noqa: E501
        :rtype: ComplexRelationTypeIdentifier
        """
        return self._complex_relation_type

    @complex_relation_type.setter
    def complex_relation_type(self, complex_relation_type):
        """Sets the complex_relation_type of this ImportJsonInJobRequest.


        :param complex_relation_type: The complex_relation_type of this ImportJsonInJobRequest.  # noqa: E501
        :type: ComplexRelationTypeIdentifier
        """

        self._complex_relation_type = complex_relation_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportJsonInJobRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportJsonInJobRequest):
            return True

        return self.to_dict() != other.to_dict()
