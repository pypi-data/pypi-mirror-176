# coding: utf-8

"""
    Collibra Import API

    <p>The Import API is an efficient way to load large volumes of data into the Collibra Data Governance Center. The API can automatically differentiate between creating and updating data.</p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from collibra_importer.configuration import Configuration


class InlineObject9(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'send_notification': 'bool',
        'batch_size': 'int',
        'simulation': 'bool',
        'save_result': 'bool',
        'file_id': 'str',
        'file': 'file',
        'file_name': 'str',
        'delete_file': 'bool',
        'continue_on_error': 'bool',
        'finalization_strategy': 'str'
    }

    attribute_map = {
        'send_notification': 'sendNotification',
        'batch_size': 'batchSize',
        'simulation': 'simulation',
        'save_result': 'saveResult',
        'file_id': 'fileId',
        'file': 'file',
        'file_name': 'fileName',
        'delete_file': 'deleteFile',
        'continue_on_error': 'continueOnError',
        'finalization_strategy': 'finalizationStrategy'
    }

    def __init__(self, send_notification=False, batch_size=1000, simulation=False, save_result=False, file_id=None, file=None, file_name='synchronization_file', delete_file=False, continue_on_error=False, finalization_strategy='REMOVE_RESOURCES', local_vars_configuration=None):  # noqa: E501
        """InlineObject9 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._send_notification = None
        self._batch_size = None
        self._simulation = None
        self._save_result = None
        self._file_id = None
        self._file = None
        self._file_name = None
        self._delete_file = None
        self._continue_on_error = None
        self._finalization_strategy = None
        self.discriminator = None

        if send_notification is not None:
            self.send_notification = send_notification
        if batch_size is not None:
            self.batch_size = batch_size
        if simulation is not None:
            self.simulation = simulation
        if save_result is not None:
            self.save_result = save_result
        if file_id is not None:
            self.file_id = file_id
        if file is not None:
            self.file = file
        if file_name is not None:
            self.file_name = file_name
        if delete_file is not None:
            self.delete_file = delete_file
        if continue_on_error is not None:
            self.continue_on_error = continue_on_error
        if finalization_strategy is not None:
            self.finalization_strategy = finalization_strategy

    @property
    def send_notification(self):
        """Gets the send_notification of this InlineObject9.  # noqa: E501

        Whether job status notification should be sent. <b>The default value</b> is <code>false</code>.  # noqa: E501

        :return: The send_notification of this InlineObject9.  # noqa: E501
        :rtype: bool
        """
        return self._send_notification

    @send_notification.setter
    def send_notification(self, send_notification):
        """Sets the send_notification of this InlineObject9.

        Whether job status notification should be sent. <b>The default value</b> is <code>false</code>.  # noqa: E501

        :param send_notification: The send_notification of this InlineObject9.  # noqa: E501
        :type: bool
        """

        self._send_notification = send_notification

    @property
    def batch_size(self):
        """Gets the batch_size of this InlineObject9.  # noqa: E501

        <i>The batchSize parameter is now deprecated and is ignored during command execution.</i>  # noqa: E501

        :return: The batch_size of this InlineObject9.  # noqa: E501
        :rtype: int
        """
        return self._batch_size

    @batch_size.setter
    def batch_size(self, batch_size):
        """Sets the batch_size of this InlineObject9.

        <i>The batchSize parameter is now deprecated and is ignored during command execution.</i>  # noqa: E501

        :param batch_size: The batch_size of this InlineObject9.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                batch_size is not None and batch_size < 1):  # noqa: E501
            raise ValueError("Invalid value for `batch_size`, must be a value greater than or equal to `1`")  # noqa: E501

        self._batch_size = batch_size

    @property
    def simulation(self):
        """Gets the simulation of this InlineObject9.  # noqa: E501

        Whether the import should be triggered as a simulation. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.  # noqa: E501

        :return: The simulation of this InlineObject9.  # noqa: E501
        :rtype: bool
        """
        return self._simulation

    @simulation.setter
    def simulation(self, simulation):
        """Sets the simulation of this InlineObject9.

        Whether the import should be triggered as a simulation. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.  # noqa: E501

        :param simulation: The simulation of this InlineObject9.  # noqa: E501
        :type: bool
        """

        self._simulation = simulation

    @property
    def save_result(self):
        """Gets the save_result of this InlineObject9.  # noqa: E501

        Whether the import Result should be persisted or forgotten. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.<p><b>DEPRECATED:</b>This parameter is deprecated and will be removed in the future.</b>.  # noqa: E501

        :return: The save_result of this InlineObject9.  # noqa: E501
        :rtype: bool
        """
        return self._save_result

    @save_result.setter
    def save_result(self, save_result):
        """Sets the save_result of this InlineObject9.

        Whether the import Result should be persisted or forgotten. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the result of the import simulation will be available at the end of the job but no change will be applied to the DGC.<p><b>DEPRECATED:</b>This parameter is deprecated and will be removed in the future.</b>.  # noqa: E501

        :param save_result: The save_result of this InlineObject9.  # noqa: E501
        :type: bool
        """

        self._save_result = save_result

    @property
    def file_id(self):
        """Gets the file_id of this InlineObject9.  # noqa: E501

        The <code>id</code> of uploaded file.<p><b>NOTE:</b> if this field is used, <code>file</code> should not be set.  # noqa: E501

        :return: The file_id of this InlineObject9.  # noqa: E501
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this InlineObject9.

        The <code>id</code> of uploaded file.<p><b>NOTE:</b> if this field is used, <code>file</code> should not be set.  # noqa: E501

        :param file_id: The file_id of this InlineObject9.  # noqa: E501
        :type: str
        """

        self._file_id = file_id

    @property
    def file(self):
        """Gets the file of this InlineObject9.  # noqa: E501

        The file to upload. If set, then also <code>fileName</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.  # noqa: E501

        :return: The file of this InlineObject9.  # noqa: E501
        :rtype: file
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this InlineObject9.

        The file to upload. If set, then also <code>fileName</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.  # noqa: E501

        :param file: The file of this InlineObject9.  # noqa: E501
        :type: file
        """

        self._file = file

    @property
    def file_name(self):
        """Gets the file_name of this InlineObject9.  # noqa: E501

        The name of the file to upload. If set, then also <code>file</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.  # noqa: E501

        :return: The file_name of this InlineObject9.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this InlineObject9.

        The name of the file to upload. If set, then also <code>file</code> should be provided.<p><b>NOTE:</b> if this field is used, <code>fileId</code> should not be set.  # noqa: E501

        :param file_name: The file_name of this InlineObject9.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def delete_file(self):
        """Gets the delete_file of this InlineObject9.  # noqa: E501

        Whether the file should be deleted after the synchronization job is finished, regardless of the result. <b>The default value</b> is <code>false</code>.<p><b>NOTE:</b> if the file corresponds to an attachment, the attachment will be deleted.  # noqa: E501

        :return: The delete_file of this InlineObject9.  # noqa: E501
        :rtype: bool
        """
        return self._delete_file

    @delete_file.setter
    def delete_file(self, delete_file):
        """Sets the delete_file of this InlineObject9.

        Whether the file should be deleted after the synchronization job is finished, regardless of the result. <b>The default value</b> is <code>false</code>.<p><b>NOTE:</b> if the file corresponds to an attachment, the attachment will be deleted.  # noqa: E501

        :param delete_file: The delete_file of this InlineObject9.  # noqa: E501
        :type: bool
        """

        self._delete_file = delete_file

    @property
    def continue_on_error(self):
        """Gets the continue_on_error of this InlineObject9.  # noqa: E501

        Whether the import should continue if some of the import commands are invalid or failed to execute. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the valid commands are still committed to the database, which can lead to partial results being stored.  # noqa: E501

        :return: The continue_on_error of this InlineObject9.  # noqa: E501
        :rtype: bool
        """
        return self._continue_on_error

    @continue_on_error.setter
    def continue_on_error(self, continue_on_error):
        """Sets the continue_on_error of this InlineObject9.

        Whether the import should continue if some of the import commands are invalid or failed to execute. <b>The default value</b> is <code>false</code>.<p>If <code>true</code>, the valid commands are still committed to the database, which can lead to partial results being stored.  # noqa: E501

        :param continue_on_error: The continue_on_error of this InlineObject9.  # noqa: E501
        :type: bool
        """

        self._continue_on_error = continue_on_error

    @property
    def finalization_strategy(self):
        """Gets the finalization_strategy of this InlineObject9.  # noqa: E501

        The synchronization finalization strategy used in the clean up action. This determines whether to remove, ignore or change the status of assets that no longer exist in the external system.<br />Possible values are `REMOVE_RESOURCES`, `CHANGE_STATUS` and `IGNORE`.<br />When you select `CHANGE_STATUS`, you must also provide a value for `missingAssetStatusId`.  # noqa: E501

        :return: The finalization_strategy of this InlineObject9.  # noqa: E501
        :rtype: str
        """
        return self._finalization_strategy

    @finalization_strategy.setter
    def finalization_strategy(self, finalization_strategy):
        """Sets the finalization_strategy of this InlineObject9.

        The synchronization finalization strategy used in the clean up action. This determines whether to remove, ignore or change the status of assets that no longer exist in the external system.<br />Possible values are `REMOVE_RESOURCES`, `CHANGE_STATUS` and `IGNORE`.<br />When you select `CHANGE_STATUS`, you must also provide a value for `missingAssetStatusId`.  # noqa: E501

        :param finalization_strategy: The finalization_strategy of this InlineObject9.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                finalization_strategy is not None and not re.search(r'REMOVE_RESOURCES|CHANGE_STATUS|IGNORE', finalization_strategy)):  # noqa: E501
            raise ValueError(r"Invalid value for `finalization_strategy`, must be a follow pattern or equal to `/REMOVE_RESOURCES|CHANGE_STATUS|IGNORE/`")  # noqa: E501

        self._finalization_strategy = finalization_strategy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject9):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineObject9):
            return True

        return self.to_dict() != other.to_dict()
