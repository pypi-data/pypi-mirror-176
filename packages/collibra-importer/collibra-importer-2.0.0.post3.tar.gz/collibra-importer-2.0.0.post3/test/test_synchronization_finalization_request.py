# coding: utf-8

"""
    Collibra Import API

    <p>The Import API is an efficient way to load large volumes of data into the Collibra Data Governance Center. The API can automatically differentiate between creating and updating data.</p>  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import collibra_importer
from collibra_importer.models.synchronization_finalization_request import SynchronizationFinalizationRequest  # noqa: E501
from collibra_importer.rest import ApiException

class TestSynchronizationFinalizationRequest(unittest.TestCase):
    """SynchronizationFinalizationRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test SynchronizationFinalizationRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = collibra_importer.models.synchronization_finalization_request.SynchronizationFinalizationRequest()  # noqa: E501
        if include_optional :
            return SynchronizationFinalizationRequest(
                send_notification = True, 
                batch_size = 1, 
                simulation = True, 
                save_result = True, 
                synchronization_id = '0', 
                finalization_strategy = 'a', 
                missing_asset_status_id = '0', 
                finalization_parameters = { \"STATUS_ID\": \"00000000-0000-0000-0000-000000005066\" };type=application/json
            )
        else :
            return SynchronizationFinalizationRequest(
                synchronization_id = '0',
        )

    def testSynchronizationFinalizationRequest(self):
        """Test SynchronizationFinalizationRequest"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
