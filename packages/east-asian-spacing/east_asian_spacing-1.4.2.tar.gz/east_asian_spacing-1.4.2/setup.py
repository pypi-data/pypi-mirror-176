# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['east_asian_spacing']

package_data = \
{'': ['*']}

install_requires = \
['fonttools[woff]>=4.13.0', 'uharfbuzz>=0.17']

entry_points = \
{'console_scripts': ['east-asian-spacing = east_asian_spacing.__main__:main']}

setup_kwargs = {
    'name': 'east-asian-spacing',
    'version': '1.4.2',
    'description': 'East Asian Contextual Spacing Build Tools',
    'long_description': '[![CI](https://github.com/kojiishi/east_asian_spacing/actions/workflows/ci.yml/badge.svg)](https://github.com/kojiishi/east_asian_spacing/actions/workflows/ci.yml)\n[![PyPI](https://img.shields.io/pypi/v/east-asian-spacing.svg)](https://pypi.org/project/east-asian-spacing/)\n[![Dependencies](https://badgen.net/github/dependabot/kojiishi/east_asian_spacing)](https://github.com/kojiishi/east_asian_spacing/network/updates)\n\n# East Asian Contextual Spacing\n\nThis directory contains tools for\nthe OpenType Contextual Half-width Spacing feature\nfor Japanese/Chinese/Korean typography.\n\nThis feature enables the typography described in\n[JLREQ 3.1.2 Positioning of Punctuation Marks (Commas, Periods and Brackets)\n<span lang="ja">句読点や，括弧類などの基本的な配置方法</span>](https://w3c.github.io/jlreq/#positioning_of_punctuation_marks)\nfor Japanese,\nand [CLREQ 3.1.6.1 Punctuation Adjustment Space\n<span lang="zh">标点符号的调整空间 標點符號的調整空間</span>](https://w3c.github.io/clreq/#h-punctuation_adjustment_space)\nfor Chinese.\nFollowing is a figure from JLREQ:\n\n<img src="https://w3c.github.io/jlreq/images/img2_13.png"\n   title="East Asian contextual spacing examples">\n\nAn early discussion at [Adobe CJK Type blog article]\nmay help to understand the feature better.\n\n[Adobe CJK Type blog article]: https://ccjktype.fonts.adobe.com/2018/04/contextual-spacing.html\n\n### Demo\n\nYou can find [sample text here](http://kojiishi.github.io/chws/samples.html).\nThis sample page uses fonts built with this tool.\n\n### OpenType Font Features\n\nOpenType defines 4 feature tags\nfor fonts to support this feature:\n* The "[`chws`]" feature tag,\nand the "[`vchw`]" feature tag as its vertical flow counterpart.\n* The "[`halt`]" feature tag,\nand the "[`vhal`]" feature tag as its vertical flow counterpart.\n\nAll 4 features are desired,\nas each feature is applied in different context.\n\nThis package adds these features to any OpenType/TrueType fonts\nwhen they are missing,\nby computing the feature tables from data\nsuch as Unicode code points and glyph outlines.\n\n[`chws`]: https://docs.microsoft.com/en-us/typography/opentype/spec/features_ae#tag-chws\n[`halt`]: https://docs.microsoft.com/en-us/typography/opentype/spec/features_fj#tag-halt\n[`vchw`]: https://docs.microsoft.com/en-us/typography/opentype/spec/features_uz#tag-vchw\n[`vhal`]: https://docs.microsoft.com/en-us/typography/opentype/spec/features_uz#tag-vhal\n\n## Adding the features to your fonts\n\n### Install\n[install]: #install\n\nYou can install this tool by [pip] or [pipx].\n\n```sh\npipx install east-asian-spacing\n```\n```sh\npip install east-asian-spacing\n```\n\nPlease be aware that,\nif you install with [pip] in the global environment,\nits dependencies may cause conflicts with other packages.\nIf all what you need is the command line tool,\n[pipx] can install it globally\nwhile still isolating it in a virtual environment.\n\nPlease also see the [install package] section\nif you want to use this package from your Python program,\nor the [clone and install] section\nif you want to diagnose fonts or the code in more details.\n\n[development mode]: https://setuptools.readthedocs.io/en/latest/userguide/development_mode.html\n[editable mode]: https://pip.pypa.io/en/stable/cli/pip_install/#install-editable\n[fonttools]: https://pypi.org/project/fonttools/\n[pip]: https://pip.pypa.io/en/latest/\n[pip "`-e`" option]: https://pip.pypa.io/en/stable/cli/pip_install/#install-editable\n[pipx]: https://pipxproject.github.io/pipx/\n[pipenv]: https://github.com/pypa/pipenv\n[poetry]: https://github.com/python-poetry/poetry\n\n### Command Line Usages\n\nThe following example adds the feature to `input-font-file`\nand saves it to the `build` directory.\n```sh\neast-asian-spacing -o build input-font-file\n```\n\nThe [testing] section has resources for\n[checking the differences] and\ntesting fonts you built.\n\nFor other options and usages,\nthe `--help` option can show the full list of options.\n\n### Supported Fonts\n\nThe [algorithm] is applicable to any CJK fonts.\nFollowing fonts are tested on each release:\n* [Noto CJK]\n* Meiryo\n* BIZ UDGothic\n\nCJK fonts at [fonts.google.com] are tested in the [chws_tool] package.\nSeveral other fonts were also tested during the development.\n\nWhen adding the features to your fonts,\nthe [test HTML] is a handy tool to check the results.\nIf you encounter any problems with your fonts,\nplease report to [issues].\n\nPlease also see the [Advanced Topics] below\nif you want to customize the default behaviors for your fonts.\n\n[chws_tool]: https://github.com/googlefonts/chws_tool\n[fonts.google.com]: https://fonts.google.com\n[issues]: https://github.com/kojiishi/east_asian_spacing/issues\n[Noto CJK]: https://github.com/googlefonts/noto-cjk\n\n### TrueType Collection (TTC)\n\nWhen the input font file is a TrueType Collection (TTC),\nthis tool adds the feature to all fonts in the TTC by default.\n\nIf you want to add the feature to only some of fonts in the TTC,\nyou can specify a comma-separated list of font indices.\nThe following example adds the feature to the font index 0 and 1,\nbut not to other fonts in the TTC.\n```sh\neast-asian-spacing --index=0,1 input-font-file.ttc\n```\n\n## API\n\n\n### Install Package\n[install package]: #install-package\n\nYou can install this package\nusing your favorite package management tools\nsuch as [poetry], [pipenv], or [pip].\n```sh\npip install east-asian-spacing\n```\n```sh\npipenv install east-asian-spacing\n```\n```sh\npoetry add east-asian-spacing\n```\n\nPlease also see the [clone and install] section\nif you want to diagnose fonts or the code in more details.\n\n\n### Sample Code\n\nThe following example creates a font with the features\nin the "`build`" directory if the features are applicable.\n```python\nimport east_asian_spacing\n\nasync def main_async():\n    builder = east_asian_spacing.Builder("fonts/input.otf")\n    output_path = await builder.build_and_save("build")\n    if output_path:\n        print(f"Saved to {output_path}")\n    else:\n        print("Skipped")\n```\n\n## Testing\n[testing]: #testing\n\n### Test HTML\n[test HTML]: #test-html\n\nA [test HTML page] is available\nto check the behavior of fonts on browsers.\n\nIt can test fonts you built locally.\n1. Save the page to your local drive.\n   The HTML is a single file, saving the HTML file should work.\n2. Add your font files to the "`fonts`" list\n   at the beginning of the `<script>` block.\n3. Open it in your browser and choose your font.\n\nNote, when you want to test a TTC (TrueType Collection)\nbut your browser can load only the first font in the TTC,\nthe following command extracts all OpenType fonts (.otf or .ttf)\nfrom an OpenType Collection font file (.ttc or .otc).\n```sh\neast-asian-spacing ttc build/NotoSansCJK-Regular.ttc\n```\n\n[test HTML page]: https://kojiishi.github.io/chws/test.html\n\n### Dump\n[dump]: #dump\n\nThe `dump` sub-command can create various types of text dump files.\n\nThe most simple usage is to show a list of tables.\nThis is similar to the "`-l`" option of [TTX],\nexcept for TrueType Collections (TTC),\nthis tool can show tables of all fonts in the TTC,\nalong with which tables are shared with which fonts.\n```sh\neast-asian-spacing dump build/NotoSansCJK-Regular.ttc\n```\n\nThe "`-o`" option creates table list files in the specified directory:\n```sh\neast-asian-spacing dump -o build/dump build/*.ttc\n```\nThe "`--ttx`" option creates [TTX] text dumps of all tables\nin addition to the table list files.\nThis is similar to the "`-s`" option of [TTX],\nexcept that it can dump all tables in TrueType Collections (TTC).\n```sh\neast-asian-spacing dump -o build/dump --ttx build/*.ttc\n```\n\n[TTX]: https://fonttools.readthedocs.io/en/latest/ttx.html\n\n### Diff\n[diff]: #diff\n[checking the differences]: #diff\n\nThe `dump` sub-command can also create\n[dump] files of two font files and compare them.\nThis helps visualizing differences in two fonts,\nspecifically, the font files you created from the original font files.\n```sh\neast-asian-spacing dump -o build/diff --diff source_fonts_dir build/NotoSansCJK.ttc\n```\nThe example above\ncomputes the differences between\n`source_fonts_dir/NotoSansCJK.ttc` and `build/NotoSansCJK.ttc`\nby creating following 3 sets of files:\n1. The table list and TTX text dump files for `build/NotoSansCJK.ttc`\n   in the `build/diff/dump` directory.\n2. The table list and TTX text dump files for `source_fonts_dir/NotoSansCJK.ttc`\n   in the `build/diff/src` directory.\n3. Diff files of the two sets of dump files in the `build/diff` directory.\n\n> Note:\nThe "`--diff`" option is more efficient than doing all these,\nespecially for large fonts,\nbecause it skips creating TTX of tables when they are binary-equal.\n\nThe `-o` option is optional. When it is omitted,\nthe sub-command outputs the diff to `stdout`.\n```sh\neast-asian-spacing dump --diff source_fonts_dir build/NotoSansCJK.ttc | less\n```\n\nTo create diff files for all fonts you built,\nyou can pipe the output as below:\n```sh\neast-asian-spacing -p *.otf | east-asian-spacing dump -o build/diff -\n```\nThe "`-p`" option prints the input and output font paths to `stdout`\nin the tab-separated-values format.\nThe `dump` sub-command with the "`-`" argument reads this list from `stdin`,\nand creates their text dump and diff files in the `build/diff` directory.\nThe "`--diff`" option is not necessary in this case,\nbecause the source font paths are provided from the pipe.\n\n### References\n[references]: #references\n\nOnce you reviewed the [diff] files created above,\nor tested fonts you build,\nyou can copy the diff files into the `references` directory.\nThen when you want to build them again,\nsuch as when the fonts are updated or when the build environment is changed,\nyou can compare the diff files with the reference files\nto know how new fonts are different from previous builds.\n\nWith the "`-r`" option, the `dump` sub-command\ncreates [diff] files between two font files,\nand compare the diff files\nwith once-reviewed diff files in the `references` directory.\n\nThe typical usage of this option is as below:\n```sh\neast-asian-spacing -p -g=build/glyphs *.otf |\n    east-asian-spacing dump -o=build/diff -r=references -\n```\nPlease see the [Diff] section for the "`-p`" option and piping.\n\nThe `build*.sh` [scripts] include this option.\n\n### Shape Test\n[shape tests]: #shape-test\n\nThe shape testing shapes test strings\nand checks whether the contextual spacing is applied or not.\n\nThe `--test` option sets the level of the shape testing.\n```sh\neast-asian-spacing --test 2 -v -o build input-font-file\n```\nThe level 0 disables the shape testing.\nThe level 1 runs a smoke test using a small set of samples.\nThe level 2 runs the shape testing using a large set of test strings.\nThe default value is 1.\n\n## Advanced Topics\n[Advanced Topics]: #advanced-topics\n\n### Algorithm\n[Algorithm]: #algorithm\n\nThe algorithm is language agnostic and is applicable to any CJK fonts.\n\nThis package determines the glyph pairs to adjust spacings\nby a set of Unicode code points\ndefined in the [`Config` class].\n\nThen for each pair, it checks if the spacings are applicable\nby examining glyph outlines and computing ink bounding boxes of glyphs.\nFor example, when glyphs are very thick,\nglyphs may not have enough internal spacings,\nand applying the spacings may cause glyphs to collide.\nThis package automatically detects such cases and\navoids applying spacings to such pairs.\n\nThis automatic behavior can be disabled\nby specifying the [languages] below,\nor by setting `Config.use_ink_bounds` to `False` in your Python program.\n\n### Languages\n[languages]: #languages\n\nThere are language-specific conventions\nfor where punctuation characters are placed in the glyph spaces.\nFor example,\nU+3002 IDEOGRAPHIC FULL STOP\nshould be placed at the left-bottom corner of the glyph space in Japanese,\nwhile it should be placed at the center in Traditional Chinese.\n\nBy default,\nthis package determines such differences from glyph outlines\nas described in the [Algorithm] section above.\nBut you can specify the [OpenType language system tag]\nto let this package follow the language convention\ninstead of using glyph outlines.\nThe following example\ndisables the automatic determination by glyph outlines,\nand specifies that the font is a Japanese font.\n```sh\neast-asian-spacing --language=JAN input-font-file\n```\n\nFor TrueType Collections (TTC),\nthe language option applies to all fonts in the TTC by default.\nWhen you want to specify different languages to each font in the TTC,\nit accepts a comma-separated list.\nThe following example specifies\nKorean for the font index 1,\nSimplified Chinese for the font index 2,\nand automatic for all other fonts.\n```sh\neast-asian-spacing --language=,KOR,ZHS input-font-file.ttc\n```\n\nYou can combine these two options.\nThe following example applies\n`JAN` to the index 2,\nand `ZHS` to the index 3.\nOther fonts in the TTC are not changed.\n```sh\neast-asian-spacing --index=2,3 --language=JAN,ZHS input-font-file.ttc\n```\n\n[OpenType language system tag]: https://docs.microsoft.com/en-us/typography/opentype/spec/languagetags\n\n### Character-Pairs\n\nYou may want to adjust which character-pairs should adjust spacings,\nin cases such as when\nyour fonts may not have expected spacings for some characters.\nCurrently, this is possible only from Python programs.\n\nFor a simple example, please see the `test_config` function\nin [`tests/config_test.py`].\n\nThe [chws_tool] project is an actual example of customizing this package.\n\n[`Config` class]: https://github.com/kojiishi/east_asian_spacing/blob/main/east_asian_spacing/config.py\n[`tests/config_test.py`]: https://github.com/kojiishi/east_asian_spacing/blob/main/tests/config_test.py\n\n### HarfBuzz\n\nThis package uses the [HarfBuzz] shaping engine\nby using a Cython bindings [uharfbuzz].\n\nIf you want to use a specific build of the [HarfBuzz],\nthis tool can invoke the external [hb-shape] command line tool instead\nby setting the `SHAPER` environment variable.\n```sh\nexport SHAPER=hb-shape\n```\n\nTo install [hb-shape] for Linux:\n```sh\nsudo apt get libharfbuzz-bin\n```\nTo install [hb-shape] for Mac with [homebrew]:\n```sh\nbrew install harfbuzz\n```\nInstructions for other platforms may be available at\n[command-not-found.com](https://command-not-found.com/hb-shape).\n\n[HarfBuzz]: https://github.com/harfbuzz/harfbuzz\n[hb-shape]: https://harfbuzz.github.io/utilities.html#utilities-command-line-hbshape\n[homebrew]: https://brew.sh/\n[uharfbuzz]: https://github.com/harfbuzz/uharfbuzz\n\n\n### Clone and Install\n[clone and install]: #clone-and-install\n\nIf you may need to diagnose fonts or the code,\ncloning and installing using [poetry] is recommended:\n```sh\ngit clone https://github.com/kojiishi/east_asian_spacing\ncd east_asian_spacing\npoetry install\npoetry shell\n```\nThis method has following advantages:\n* Installs the exact versions of dependencies.\n* Installs in the editable mode\n(i.e., [pip "`-e`" option] or `setuptools` "[development mode]").\n* Installs testing tools too.\nYou can run [unit tests] to verify your installation if needed.\n* Creates the virtual environment automatically.\n\nYou can also install the cloned directory using [pip] if you prefer:\n```sh\ngit clone https://github.com/kojiishi/east_asian_spacing\ncd east_asian_spacing\npip install .\n```\n\n### Unit Tests\n[unit tests]: #unit-tests\n\nThis repository contains unit tests using [pytest].\nThe unit tests cover the basic functionalities\nincluding [shape tests],\nadding the feature to a test font,\nand comparing it with [references].\n\nIf you followed the [clone and install] section,\ntools for unit testing are already installed.\nBefore you run them first time,\nyou need to download fonts for testing:\n```sh\n./tests/download_fonts.py\n```\n\nYou can then run the tests by:\n```sh\npytest\n```\nor run them with multiple versions of Python using [tox]:\n```sh\ntox\n```\n\n[pytest]: https://pytest.org/\n[tox]: https://tox.readthedocs.io/en/latest/index.html\n\n### Scripts\n[scripts]: #scripts\n\nThe `scripts` directory has some small shell scripts.\n\n`build*.sh` scripts are useful to build fonts,\ncompute [diff] from source fonts,\nand compare the diff files with [references].\nFollowings are example usages.\n```sh\n./scripts/build.sh input-font-file.otf -v\n./scripts/build-noto-cjk.sh ~/fonts/noto-cjk -v\n```\n',
    'author': 'Koji Ishii',
    'author_email': 'kojii@chromium.org',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/kojiishi/east_asian_spacing',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.7',
}


setup(**setup_kwargs)
